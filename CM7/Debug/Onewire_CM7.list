
Onewire_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7c0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800aa58  0800aa58  0001aa58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa98  0800aa98  000200e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa98  0800aa98  0001aa98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aaa0  0800aaa0  000200e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aaa0  0800aaa0  0001aaa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aaa4  0800aaa4  0001aaa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  24000000  0800aaa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000024  0800aacc  00020024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000084  0800ab2c  00020084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000c78c  240000e8  0800ab8c  000200e8  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  2400c874  0800ab8c  0002c874  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002ee34  00000000  00000000  00020112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000040d7  00000000  00000000  0004ef46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001850  00000000  00000000  00053020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001728  00000000  00000000  00054870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003c61d  00000000  00000000  00055f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001fa45  00000000  00000000  000925b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00190cd3  00000000  00000000  000b1ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00242ccd  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006990  00000000  00000000  00242d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000e8 	.word	0x240000e8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800aa40 	.word	0x0800aa40

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000ec 	.word	0x240000ec
 80002d4:	0800aa40 	.word	0x0800aa40

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000710:	bf00      	nop
 8000712:	4b38      	ldr	r3, [pc, #224]	; (80007f4 <main+0xf0>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071a:	2b00      	cmp	r3, #0
 800071c:	d004      	beq.n	8000728 <main+0x24>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	1e5a      	subs	r2, r3, #1
 8000722:	607a      	str	r2, [r7, #4]
 8000724:	2b00      	cmp	r3, #0
 8000726:	dcf4      	bgt.n	8000712 <main+0xe>
  if ( timeout < 0 )
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	da01      	bge.n	8000732 <main+0x2e>
  {
  Error_Handler();
 800072e:	f000 fd99 	bl	8001264 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000732:	f001 f927 	bl	8001984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000736:	f000 f86b 	bl	8000810 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073a:	4b2e      	ldr	r3, [pc, #184]	; (80007f4 <main+0xf0>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000740:	4a2c      	ldr	r2, [pc, #176]	; (80007f4 <main+0xf0>)
 8000742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000746:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074a:	4b2a      	ldr	r3, [pc, #168]	; (80007f4 <main+0xf0>)
 800074c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000758:	2000      	movs	r0, #0
 800075a:	f004 fc19 	bl	8004f90 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075e:	2100      	movs	r1, #0
 8000760:	2000      	movs	r0, #0
 8000762:	f004 fc2f 	bl	8004fc4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000766:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800076c:	bf00      	nop
 800076e:	4b21      	ldr	r3, [pc, #132]	; (80007f4 <main+0xf0>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000776:	2b00      	cmp	r3, #0
 8000778:	d104      	bne.n	8000784 <main+0x80>
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	1e5a      	subs	r2, r3, #1
 800077e:	607a      	str	r2, [r7, #4]
 8000780:	2b00      	cmp	r3, #0
 8000782:	dcf4      	bgt.n	800076e <main+0x6a>
if ( timeout < 0 )
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b00      	cmp	r3, #0
 8000788:	da01      	bge.n	800078e <main+0x8a>
{
Error_Handler();
 800078a:	f000 fd6b 	bl	8001264 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078e:	f000 faf3 	bl	8000d78 <MX_GPIO_Init>
  MX_ETH_Init();
 8000792:	f000 f8c3 	bl	800091c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000796:	f000 fa51 	bl	8000c3c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800079a:	f000 fa9b 	bl	8000cd4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 800079e:	f000 f961 	bl	8000a64 <MX_TIM3_Init>
  MX_TIM5_Init();
 80007a2:	f000 f9ad 	bl	8000b00 <MX_TIM5_Init>
  MX_DMA_Init();
 80007a6:	f000 fac7 	bl	8000d38 <MX_DMA_Init>
  MX_SPI1_Init();
 80007aa:	f000 f903 	bl	80009b4 <MX_SPI1_Init>
  MX_TIM15_Init();
 80007ae:	f000 f9f5 	bl	8000b9c <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 1);
 80007b2:	2201      	movs	r2, #1
 80007b4:	2102      	movs	r1, #2
 80007b6:	4810      	ldr	r0, [pc, #64]	; (80007f8 <main+0xf4>)
 80007b8:	f004 fbd0 	bl	8004f5c <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim3);
 80007bc:	480f      	ldr	r0, [pc, #60]	; (80007fc <main+0xf8>)
 80007be:	f008 f90b 	bl	80089d8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 80007c2:	480f      	ldr	r0, [pc, #60]	; (8000800 <main+0xfc>)
 80007c4:	f008 f908 	bl	80089d8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim15);
 80007c8:	480e      	ldr	r0, [pc, #56]	; (8000804 <main+0x100>)
 80007ca:	f008 f905 	bl	80089d8 <HAL_TIM_Base_Start_IT>
  LCD_init();
 80007ce:	f000 fcdb 	bl	8001188 <LCD_init>
  HAL_Delay(2000);
 80007d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007d6:	f001 f967 	bl	8001aa8 <HAL_Delay>
  HAL_SPI_Transmit_DMA(&hspi1, Frame, 49152);
 80007da:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80007de:	490a      	ldr	r1, [pc, #40]	; (8000808 <main+0x104>)
 80007e0:	480a      	ldr	r0, [pc, #40]	; (800080c <main+0x108>)
 80007e2:	f007 fbc7 	bl	8007f74 <HAL_SPI_Transmit_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		requestT();
 80007e6:	f000 fbcd 	bl	8000f84 <requestT>
		get_value();
 80007ea:	f000 fbed 	bl	8000fc8 <get_value>
		Update_check_Value();
 80007ee:	f000 fc0f 	bl	8001010 <Update_check_Value>
		requestT();
 80007f2:	e7f8      	b.n	80007e6 <main+0xe2>
 80007f4:	58024400 	.word	0x58024400
 80007f8:	58020c00 	.word	0x58020c00
 80007fc:	2400c668 	.word	0x2400c668
 8000800:	2400c61c 	.word	0x2400c61c
 8000804:	2400c1c8 	.word	0x2400c1c8
 8000808:	24000120 	.word	0x24000120
 800080c:	2400c6b4 	.word	0x2400c6b4

08000810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b09c      	sub	sp, #112	; 0x70
 8000814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081a:	224c      	movs	r2, #76	; 0x4c
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f00a f906 	bl	800aa30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2220      	movs	r2, #32
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f00a f900 	bl	800aa30 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000830:	2004      	movs	r0, #4
 8000832:	f004 fd23 	bl	800527c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000836:	2300      	movs	r3, #0
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	4b35      	ldr	r3, [pc, #212]	; (8000910 <SystemClock_Config+0x100>)
 800083c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800083e:	4a34      	ldr	r2, [pc, #208]	; (8000910 <SystemClock_Config+0x100>)
 8000840:	f023 0301 	bic.w	r3, r3, #1
 8000844:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000846:	4b32      	ldr	r3, [pc, #200]	; (8000910 <SystemClock_Config+0x100>)
 8000848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	4b30      	ldr	r3, [pc, #192]	; (8000914 <SystemClock_Config+0x104>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000858:	4a2e      	ldr	r2, [pc, #184]	; (8000914 <SystemClock_Config+0x104>)
 800085a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085e:	6193      	str	r3, [r2, #24]
 8000860:	4b2c      	ldr	r3, [pc, #176]	; (8000914 <SystemClock_Config+0x104>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800086c:	bf00      	nop
 800086e:	4b29      	ldr	r3, [pc, #164]	; (8000914 <SystemClock_Config+0x104>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800087a:	d1f8      	bne.n	800086e <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800087c:	4b26      	ldr	r3, [pc, #152]	; (8000918 <SystemClock_Config+0x108>)
 800087e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000880:	f023 0303 	bic.w	r3, r3, #3
 8000884:	4a24      	ldr	r2, [pc, #144]	; (8000918 <SystemClock_Config+0x108>)
 8000886:	f043 0302 	orr.w	r3, r3, #2
 800088a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800088c:	2301      	movs	r3, #1
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000890:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000896:	2302      	movs	r3, #2
 8000898:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089a:	2302      	movs	r3, #2
 800089c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800089e:	2301      	movs	r3, #1
 80008a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 80008a2:	2319      	movs	r3, #25
 80008a4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008a6:	2302      	movs	r3, #2
 80008a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008aa:	2302      	movs	r3, #2
 80008ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ae:	2302      	movs	r3, #2
 80008b0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008b2:	230c      	movs	r3, #12
 80008b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c2:	4618      	mov	r0, r3
 80008c4:	f004 fd44 	bl	8005350 <HAL_RCC_OscConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008ce:	f000 fcc9 	bl	8001264 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d2:	233f      	movs	r3, #63	; 0x3f
 80008d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d6:	2303      	movs	r3, #3
 80008d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008e2:	2340      	movs	r3, #64	; 0x40
 80008e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008e6:	2340      	movs	r3, #64	; 0x40
 80008e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008f0:	2340      	movs	r3, #64	; 0x40
 80008f2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2102      	movs	r1, #2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f005 f955 	bl	8005ba8 <HAL_RCC_ClockConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000904:	f000 fcae 	bl	8001264 <Error_Handler>
  }
}
 8000908:	bf00      	nop
 800090a:	3770      	adds	r7, #112	; 0x70
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	58000400 	.word	0x58000400
 8000914:	58024800 	.word	0x58024800
 8000918:	58024400 	.word	0x58024400

0800091c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000920:	4b1e      	ldr	r3, [pc, #120]	; (800099c <MX_ETH_Init+0x80>)
 8000922:	4a1f      	ldr	r2, [pc, #124]	; (80009a0 <MX_ETH_Init+0x84>)
 8000924:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000926:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <MX_ETH_Init+0x88>)
 8000928:	2200      	movs	r2, #0
 800092a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800092c:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <MX_ETH_Init+0x88>)
 800092e:	2280      	movs	r2, #128	; 0x80
 8000930:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000932:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <MX_ETH_Init+0x88>)
 8000934:	22e1      	movs	r2, #225	; 0xe1
 8000936:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000938:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <MX_ETH_Init+0x88>)
 800093a:	2200      	movs	r2, #0
 800093c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800093e:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <MX_ETH_Init+0x88>)
 8000940:	2200      	movs	r2, #0
 8000942:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000944:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <MX_ETH_Init+0x88>)
 8000946:	2200      	movs	r2, #0
 8000948:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_ETH_Init+0x80>)
 800094c:	4a15      	ldr	r2, [pc, #84]	; (80009a4 <MX_ETH_Init+0x88>)
 800094e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_ETH_Init+0x80>)
 8000952:	2201      	movs	r2, #1
 8000954:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_ETH_Init+0x80>)
 8000958:	4a13      	ldr	r2, [pc, #76]	; (80009a8 <MX_ETH_Init+0x8c>)
 800095a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_ETH_Init+0x80>)
 800095e:	4a13      	ldr	r2, [pc, #76]	; (80009ac <MX_ETH_Init+0x90>)
 8000960:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_ETH_Init+0x80>)
 8000964:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000968:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800096a:	480c      	ldr	r0, [pc, #48]	; (800099c <MX_ETH_Init+0x80>)
 800096c:	f003 fd18 	bl	80043a0 <HAL_ETH_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000976:	f000 fc75 	bl	8001264 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800097a:	2234      	movs	r2, #52	; 0x34
 800097c:	2100      	movs	r1, #0
 800097e:	480c      	ldr	r0, [pc, #48]	; (80009b0 <MX_ETH_Init+0x94>)
 8000980:	f00a f856 	bl	800aa30 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <MX_ETH_Init+0x94>)
 8000986:	2221      	movs	r2, #33	; 0x21
 8000988:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_ETH_Init+0x94>)
 800098c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000990:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000992:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <MX_ETH_Init+0x94>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	2400c73c 	.word	0x2400c73c
 80009a0:	40028000 	.word	0x40028000
 80009a4:	2400c130 	.word	0x2400c130
 80009a8:	24000084 	.word	0x24000084
 80009ac:	24000024 	.word	0x24000024
 80009b0:	2400c7c4 	.word	0x2400c7c4

080009b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009b8:	4b28      	ldr	r3, [pc, #160]	; (8000a5c <MX_SPI1_Init+0xa8>)
 80009ba:	4a29      	ldr	r2, [pc, #164]	; (8000a60 <MX_SPI1_Init+0xac>)
 80009bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009be:	4b27      	ldr	r3, [pc, #156]	; (8000a5c <MX_SPI1_Init+0xa8>)
 80009c0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80009c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80009c6:	4b25      	ldr	r3, [pc, #148]	; (8000a5c <MX_SPI1_Init+0xa8>)
 80009c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009cc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009ce:	4b23      	ldr	r3, [pc, #140]	; (8000a5c <MX_SPI1_Init+0xa8>)
 80009d0:	2207      	movs	r2, #7
 80009d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009d4:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <MX_SPI1_Init+0xa8>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009da:	4b20      	ldr	r3, [pc, #128]	; (8000a5c <MX_SPI1_Init+0xa8>)
 80009dc:	2200      	movs	r2, #0
 80009de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009e0:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <MX_SPI1_Init+0xa8>)
 80009e2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80009e8:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <MX_SPI1_Init+0xa8>)
 80009ea:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80009ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009f0:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <MX_SPI1_Init+0xa8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009f6:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <MX_SPI1_Init+0xa8>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009fc:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <MX_SPI1_Init+0xa8>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000a02:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <MX_SPI1_Init+0xa8>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a08:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <MX_SPI1_Init+0xa8>)
 8000a0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a0e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <MX_SPI1_Init+0xa8>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <MX_SPI1_Init+0xa8>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MX_SPI1_Init+0xa8>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <MX_SPI1_Init+0xa8>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_SPI1_Init+0xa8>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <MX_SPI1_Init+0xa8>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MX_SPI1_Init+0xa8>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <MX_SPI1_Init+0xa8>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <MX_SPI1_Init+0xa8>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_SPI1_Init+0xa8>)
 8000a48:	f006 ff9c 	bl	8007984 <HAL_SPI_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000a52:	f000 fc07 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	2400c6b4 	.word	0x2400c6b4
 8000a60:	40013000 	.word	0x40013000

08000a64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a6a:	f107 0310 	add.w	r3, r7, #16
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a82:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <MX_TIM3_Init+0x94>)
 8000a84:	4a1d      	ldr	r2, [pc, #116]	; (8000afc <MX_TIM3_Init+0x98>)
 8000a86:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8000a88:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <MX_TIM3_Init+0x94>)
 8000a8a:	2263      	movs	r2, #99	; 0x63
 8000a8c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <MX_TIM3_Init+0x94>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <MX_TIM3_Init+0x94>)
 8000a96:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a9a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <MX_TIM3_Init+0x94>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <MX_TIM3_Init+0x94>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000aa8:	4813      	ldr	r0, [pc, #76]	; (8000af8 <MX_TIM3_Init+0x94>)
 8000aaa:	f007 ff16 	bl	80088da <HAL_TIM_Base_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000ab4:	f000 fbd6 	bl	8001264 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000abc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000abe:	f107 0310 	add.w	r3, r7, #16
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	480c      	ldr	r0, [pc, #48]	; (8000af8 <MX_TIM3_Init+0x94>)
 8000ac6:	f008 f91f 	bl	8008d08 <HAL_TIM_ConfigClockSource>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000ad0:	f000 fbc8 	bl	8001264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_TIM3_Init+0x94>)
 8000ae2:	f008 fb69 	bl	80091b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000aec:	f000 fbba 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	3720      	adds	r7, #32
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	2400c668 	.word	0x2400c668
 8000afc:	40000400 	.word	0x40000400

08000b00 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b06:	f107 0310 	add.w	r3, r7, #16
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <MX_TIM5_Init+0x94>)
 8000b20:	4a1d      	ldr	r2, [pc, #116]	; (8000b98 <MX_TIM5_Init+0x98>)
 8000b22:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 8000b24:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <MX_TIM5_Init+0x94>)
 8000b26:	2263      	movs	r2, #99	; 0x63
 8000b28:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <MX_TIM5_Init+0x94>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000b30:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <MX_TIM5_Init+0x94>)
 8000b32:	f04f 32ff 	mov.w	r2, #4294967295
 8000b36:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b38:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <MX_TIM5_Init+0x94>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <MX_TIM5_Init+0x94>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000b44:	4813      	ldr	r0, [pc, #76]	; (8000b94 <MX_TIM5_Init+0x94>)
 8000b46:	f007 fec8 	bl	80088da <HAL_TIM_Base_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000b50:	f000 fb88 	bl	8001264 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000b5a:	f107 0310 	add.w	r3, r7, #16
 8000b5e:	4619      	mov	r1, r3
 8000b60:	480c      	ldr	r0, [pc, #48]	; (8000b94 <MX_TIM5_Init+0x94>)
 8000b62:	f008 f8d1 	bl	8008d08 <HAL_TIM_ConfigClockSource>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000b6c:	f000 fb7a 	bl	8001264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b70:	2300      	movs	r3, #0
 8000b72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_TIM5_Init+0x94>)
 8000b7e:	f008 fb1b 	bl	80091b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000b88:	f000 fb6c 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	3720      	adds	r7, #32
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	2400c61c 	.word	0x2400c61c
 8000b98:	40000c00 	.word	0x40000c00

08000b9c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba2:	f107 0310 	add.w	r3, r7, #16
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000bba:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <MX_TIM15_Init+0x98>)
 8000bbc:	4a1e      	ldr	r2, [pc, #120]	; (8000c38 <MX_TIM15_Init+0x9c>)
 8000bbe:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 99;
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <MX_TIM15_Init+0x98>)
 8000bc2:	2263      	movs	r2, #99	; 0x63
 8000bc4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc6:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <MX_TIM15_Init+0x98>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 40;
 8000bcc:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <MX_TIM15_Init+0x98>)
 8000bce:	2228      	movs	r2, #40	; 0x28
 8000bd0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd2:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <MX_TIM15_Init+0x98>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000bd8:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <MX_TIM15_Init+0x98>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <MX_TIM15_Init+0x98>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000be4:	4813      	ldr	r0, [pc, #76]	; (8000c34 <MX_TIM15_Init+0x98>)
 8000be6:	f007 fe78 	bl	80088da <HAL_TIM_Base_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8000bf0:	f000 fb38 	bl	8001264 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000bfa:	f107 0310 	add.w	r3, r7, #16
 8000bfe:	4619      	mov	r1, r3
 8000c00:	480c      	ldr	r0, [pc, #48]	; (8000c34 <MX_TIM15_Init+0x98>)
 8000c02:	f008 f881 	bl	8008d08 <HAL_TIM_ConfigClockSource>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8000c0c:	f000 fb2a 	bl	8001264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c10:	2300      	movs	r3, #0
 8000c12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4805      	ldr	r0, [pc, #20]	; (8000c34 <MX_TIM15_Init+0x98>)
 8000c1e:	f008 facb 	bl	80091b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8000c28:	f000 fb1c 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000c2c:	bf00      	nop
 8000c2e:	3720      	adds	r7, #32
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	2400c1c8 	.word	0x2400c1c8
 8000c38:	40014000 	.word	0x40014000

08000c3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c40:	4b22      	ldr	r3, [pc, #136]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c42:	4a23      	ldr	r2, [pc, #140]	; (8000cd0 <MX_USART3_UART_Init+0x94>)
 8000c44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c46:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c54:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c60:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c62:	220c      	movs	r2, #12
 8000c64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c66:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c6c:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c72:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c78:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c84:	4811      	ldr	r0, [pc, #68]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c86:	f008 fb43 	bl	8009310 <HAL_UART_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c90:	f000 fae8 	bl	8001264 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c94:	2100      	movs	r1, #0
 8000c96:	480d      	ldr	r0, [pc, #52]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c98:	f009 fad8 	bl	800a24c <HAL_UARTEx_SetTxFifoThreshold>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ca2:	f000 fadf 	bl	8001264 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4808      	ldr	r0, [pc, #32]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000caa:	f009 fb0d 	bl	800a2c8 <HAL_UARTEx_SetRxFifoThreshold>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000cb4:	f000 fad6 	bl	8001264 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cb8:	4804      	ldr	r0, [pc, #16]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000cba:	f009 fa8e 	bl	800a1da <HAL_UARTEx_DisableFifoMode>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cc4:	f000 face 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	2400c138 	.word	0x2400c138
 8000cd0:	40004800 	.word	0x40004800

08000cd4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000cd8:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cda:	4a16      	ldr	r2, [pc, #88]	; (8000d34 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000cde:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ce0:	2209      	movs	r2, #9
 8000ce2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d02:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000d08:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d0e:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d1a:	4805      	ldr	r0, [pc, #20]	; (8000d30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d1c:	f004 f966 	bl	8004fec <HAL_PCD_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000d26:	f000 fa9d 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	2400c214 	.word	0x2400c214
 8000d34:	40080000 	.word	0x40080000

08000d38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <MX_DMA_Init+0x3c>)
 8000d40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d44:	4a0b      	ldr	r2, [pc, #44]	; (8000d74 <MX_DMA_Init+0x3c>)
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <MX_DMA_Init+0x3c>)
 8000d50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2100      	movs	r1, #0
 8000d60:	200b      	movs	r0, #11
 8000d62:	f000 ffc0 	bl	8001ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d66:	200b      	movs	r0, #11
 8000d68:	f000 ffd7 	bl	8001d1a <HAL_NVIC_EnableIRQ>

}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	58024400 	.word	0x58024400

08000d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08c      	sub	sp, #48	; 0x30
 8000d7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8e:	4b4d      	ldr	r3, [pc, #308]	; (8000ec4 <MX_GPIO_Init+0x14c>)
 8000d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d94:	4a4b      	ldr	r2, [pc, #300]	; (8000ec4 <MX_GPIO_Init+0x14c>)
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d9e:	4b49      	ldr	r3, [pc, #292]	; (8000ec4 <MX_GPIO_Init+0x14c>)
 8000da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da4:	f003 0304 	and.w	r3, r3, #4
 8000da8:	61bb      	str	r3, [r7, #24]
 8000daa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dac:	4b45      	ldr	r3, [pc, #276]	; (8000ec4 <MX_GPIO_Init+0x14c>)
 8000dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db2:	4a44      	ldr	r2, [pc, #272]	; (8000ec4 <MX_GPIO_Init+0x14c>)
 8000db4:	f043 0320 	orr.w	r3, r3, #32
 8000db8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dbc:	4b41      	ldr	r3, [pc, #260]	; (8000ec4 <MX_GPIO_Init+0x14c>)
 8000dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc2:	f003 0320 	and.w	r3, r3, #32
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dca:	4b3e      	ldr	r3, [pc, #248]	; (8000ec4 <MX_GPIO_Init+0x14c>)
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd0:	4a3c      	ldr	r2, [pc, #240]	; (8000ec4 <MX_GPIO_Init+0x14c>)
 8000dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dda:	4b3a      	ldr	r3, [pc, #232]	; (8000ec4 <MX_GPIO_Init+0x14c>)
 8000ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de8:	4b36      	ldr	r3, [pc, #216]	; (8000ec4 <MX_GPIO_Init+0x14c>)
 8000dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dee:	4a35      	ldr	r2, [pc, #212]	; (8000ec4 <MX_GPIO_Init+0x14c>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df8:	4b32      	ldr	r3, [pc, #200]	; (8000ec4 <MX_GPIO_Init+0x14c>)
 8000dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e06:	4b2f      	ldr	r3, [pc, #188]	; (8000ec4 <MX_GPIO_Init+0x14c>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0c:	4a2d      	ldr	r2, [pc, #180]	; (8000ec4 <MX_GPIO_Init+0x14c>)
 8000e0e:	f043 0302 	orr.w	r3, r3, #2
 8000e12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e16:	4b2b      	ldr	r3, [pc, #172]	; (8000ec4 <MX_GPIO_Init+0x14c>)
 8000e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1c:	f003 0302 	and.w	r3, r3, #2
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e24:	4b27      	ldr	r3, [pc, #156]	; (8000ec4 <MX_GPIO_Init+0x14c>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2a:	4a26      	ldr	r2, [pc, #152]	; (8000ec4 <MX_GPIO_Init+0x14c>)
 8000e2c:	f043 0308 	orr.w	r3, r3, #8
 8000e30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e34:	4b23      	ldr	r3, [pc, #140]	; (8000ec4 <MX_GPIO_Init+0x14c>)
 8000e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3a:	f003 0308 	and.w	r3, r3, #8
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e42:	4b20      	ldr	r3, [pc, #128]	; (8000ec4 <MX_GPIO_Init+0x14c>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e48:	4a1e      	ldr	r2, [pc, #120]	; (8000ec4 <MX_GPIO_Init+0x14c>)
 8000e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e52:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <MX_GPIO_Init+0x14c>)
 8000e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e5c:	603b      	str	r3, [r7, #0]
 8000e5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2180      	movs	r1, #128	; 0x80
 8000e64:	4818      	ldr	r0, [pc, #96]	; (8000ec8 <MX_GPIO_Init+0x150>)
 8000e66:	f004 f879 	bl	8004f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_SET);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e70:	4815      	ldr	r0, [pc, #84]	; (8000ec8 <MX_GPIO_Init+0x150>)
 8000e72:	f004 f873 	bl	8004f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8000e76:	2201      	movs	r2, #1
 8000e78:	2102      	movs	r1, #2
 8000e7a:	4814      	ldr	r0, [pc, #80]	; (8000ecc <MX_GPIO_Init+0x154>)
 8000e7c:	f004 f86e 	bl	8004f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF7 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000e80:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e86:	2301      	movs	r3, #1
 8000e88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	4619      	mov	r1, r3
 8000e98:	480b      	ldr	r0, [pc, #44]	; (8000ec8 <MX_GPIO_Init+0x150>)
 8000e9a:	f003 fe97 	bl	8004bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ea2:	2311      	movs	r3, #17
 8000ea4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4805      	ldr	r0, [pc, #20]	; (8000ecc <MX_GPIO_Init+0x154>)
 8000eb6:	f003 fe89 	bl	8004bcc <HAL_GPIO_Init>

}
 8000eba:	bf00      	nop
 8000ebc:	3730      	adds	r7, #48	; 0x30
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	58024400 	.word	0x58024400
 8000ec8:	58021400 	.word	0x58021400
 8000ecc:	58020c00 	.word	0x58020c00

08000ed0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a23      	ldr	r2, [pc, #140]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d10c      	bne.n	8000efc <HAL_TIM_PeriodElapsedCallback+0x2c>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 1);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	2102      	movs	r1, #2
 8000ee6:	4822      	ldr	r0, [pc, #136]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000ee8:	f004 f838 	bl	8004f5c <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop(&htim3);
 8000eec:	481f      	ldr	r0, [pc, #124]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000eee:	f007 fd4b 	bl	8008988 <HAL_TIM_Base_Stop>
		htim3.Instance->CNT=0;
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	625a      	str	r2, [r3, #36]	; 0x24
		value=(value<<1)|HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
		HAL_TIM_Base_Stop(&htim15);
		htim15.Instance->CNT=0;
	}

}
 8000efa:	e031      	b.n	8000f60 <HAL_TIM_PeriodElapsedCallback+0x90>
	}else if(htim== &htim5){
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a1d      	ldr	r2, [pc, #116]	; (8000f74 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d10a      	bne.n	8000f1a <HAL_TIM_PeriodElapsedCallback+0x4a>
		_micross=_micross+4294967295;
 8000f04:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0a:	f112 38ff 	adds.w	r8, r2, #4294967295
 8000f0e:	f143 0900 	adc.w	r9, r3, #0
 8000f12:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000f14:	e9c3 8900 	strd	r8, r9, [r3]
}
 8000f18:	e022      	b.n	8000f60 <HAL_TIM_PeriodElapsedCallback+0x90>
	}else if(htim==&htim15){
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a17      	ldr	r2, [pc, #92]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d11e      	bne.n	8000f60 <HAL_TIM_PeriodElapsedCallback+0x90>
		value=(value<<1)|HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
 8000f22:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f28:	eb12 0a02 	adds.w	sl, r2, r2
 8000f2c:	eb43 0b03 	adc.w	fp, r3, r3
 8000f30:	46d0      	mov	r8, sl
 8000f32:	46d9      	mov	r9, fp
 8000f34:	2102      	movs	r1, #2
 8000f36:	480e      	ldr	r0, [pc, #56]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000f38:	f003 fff8 	bl	8004f2c <HAL_GPIO_ReadPin>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	f04f 0300 	mov.w	r3, #0
 8000f44:	ea48 0402 	orr.w	r4, r8, r2
 8000f48:	ea49 0503 	orr.w	r5, r9, r3
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000f4e:	e9c3 4500 	strd	r4, r5, [r3]
		HAL_TIM_Base_Stop(&htim15);
 8000f52:	480a      	ldr	r0, [pc, #40]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000f54:	f007 fd18 	bl	8008988 <HAL_TIM_Base_Stop>
		htim15.Instance->CNT=0;
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000f6a:	bf00      	nop
 8000f6c:	2400c668 	.word	0x2400c668
 8000f70:	58020c00 	.word	0x58020c00
 8000f74:	2400c61c 	.word	0x2400c61c
 8000f78:	24000118 	.word	0x24000118
 8000f7c:	2400c1c8 	.word	0x2400c1c8
 8000f80:	24000108 	.word	0x24000108

08000f84 <requestT>:





void requestT(){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	if(flag){
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <requestT+0x34>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d011      	beq.n	8000fb4 <requestT+0x30>
		value=0;
 8000f90:	490a      	ldr	r1, [pc, #40]	; (8000fbc <requestT+0x38>)
 8000f92:	f04f 0200 	mov.w	r2, #0
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2102      	movs	r1, #2
 8000fa2:	4807      	ldr	r0, [pc, #28]	; (8000fc0 <requestT+0x3c>)
 8000fa4:	f003 ffda 	bl	8004f5c <HAL_GPIO_WritePin>
//		htim3.Instance->CNT=0;
		HAL_TIM_Base_Start_IT(&htim3);
 8000fa8:	4806      	ldr	r0, [pc, #24]	; (8000fc4 <requestT+0x40>)
 8000faa:	f007 fd15 	bl	80089d8 <HAL_TIM_Base_Start_IT>
		flag=0;
 8000fae:	4b02      	ldr	r3, [pc, #8]	; (8000fb8 <requestT+0x34>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
	}
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	24000104 	.word	0x24000104
 8000fbc:	24000108 	.word	0x24000108
 8000fc0:	58020c00 	.word	0x58020c00
 8000fc4:	2400c668 	.word	0x2400c668

08000fc8 <get_value>:

void get_value(){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	now=HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
 8000fcc:	2102      	movs	r1, #2
 8000fce:	480c      	ldr	r0, [pc, #48]	; (8001000 <get_value+0x38>)
 8000fd0:	f003 ffac 	bl	8004f2c <HAL_GPIO_ReadPin>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <get_value+0x3c>)
 8000fda:	701a      	strb	r2, [r3, #0]
	if(pre==0 && now==1){
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <get_value+0x40>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d106      	bne.n	8000ff2 <get_value+0x2a>
 8000fe4:	4b07      	ldr	r3, [pc, #28]	; (8001004 <get_value+0x3c>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d102      	bne.n	8000ff2 <get_value+0x2a>
//	  startT=micross();
//	  htim15.Instance->CNT=0;
	  HAL_TIM_Base_Start_IT(&htim15);
 8000fec:	4807      	ldr	r0, [pc, #28]	; (800100c <get_value+0x44>)
 8000fee:	f007 fcf3 	bl	80089d8 <HAL_TIM_Base_Start_IT>
//	  flagT=1;
	}
	pre=now;
 8000ff2:	4b04      	ldr	r3, [pc, #16]	; (8001004 <get_value+0x3c>)
 8000ff4:	781a      	ldrb	r2, [r3, #0]
 8000ff6:	4b04      	ldr	r3, [pc, #16]	; (8001008 <get_value+0x40>)
 8000ff8:	701a      	strb	r2, [r3, #0]
//	if(micross()-startT >=35 && flagT==1){
//	  value=(value<<1)|HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
//	  flagT=0;
//	}
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	58020c00 	.word	0x58020c00
 8001004:	24000008 	.word	0x24000008
 8001008:	24000110 	.word	0x24000110
 800100c:	2400c1c8 	.word	0x2400c1c8

08001010 <Update_check_Value>:
uint16_t temp=0;
uint8_t sum=0;
uint8_t realsum=0;
float realtemp=0;
float realhumidity=0;
void Update_check_Value(){
 8001010:	b4b0      	push	{r4, r5, r7}
 8001012:	af00      	add	r7, sp, #0
	if(value>=0b100000000000000000000000000000000000000000){
 8001014:	4954      	ldr	r1, [pc, #336]	; (8001168 <Update_check_Value+0x158>)
 8001016:	e9d1 0100 	ldrd	r0, r1, [r1]
 800101a:	f04f 34ff 	mov.w	r4, #4294967295
 800101e:	f240 15ff 	movw	r5, #511	; 0x1ff
 8001022:	428d      	cmp	r5, r1
 8001024:	bf08      	it	eq
 8001026:	4284      	cmpeq	r4, r0
 8001028:	f080 809a 	bcs.w	8001160 <Update_check_Value+0x150>
		value=value&0b01111111111111111111111111111111111111110;
 800102c:	494e      	ldr	r1, [pc, #312]	; (8001168 <Update_check_Value+0x158>)
 800102e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001032:	f06f 0401 	mvn.w	r4, #1
 8001036:	f04f 05ff 	mov.w	r5, #255	; 0xff
 800103a:	ea00 0204 	and.w	r2, r0, r4
 800103e:	ea01 0305 	and.w	r3, r1, r5
 8001042:	4949      	ldr	r1, [pc, #292]	; (8001168 <Update_check_Value+0x158>)
 8001044:	e9c1 2300 	strd	r2, r3, [r1]
		value=value>>1;
 8001048:	4b47      	ldr	r3, [pc, #284]	; (8001168 <Update_check_Value+0x158>)
 800104a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	f04f 0300 	mov.w	r3, #0
 8001056:	0842      	lsrs	r2, r0, #1
 8001058:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800105c:	084b      	lsrs	r3, r1, #1
 800105e:	4942      	ldr	r1, [pc, #264]	; (8001168 <Update_check_Value+0x158>)
 8001060:	e9c1 2300 	strd	r2, r3, [r1]
		sum=value&0b11111111;
 8001064:	4b40      	ldr	r3, [pc, #256]	; (8001168 <Update_check_Value+0x158>)
 8001066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	4b3f      	ldr	r3, [pc, #252]	; (800116c <Update_check_Value+0x15c>)
 800106e:	701a      	strb	r2, [r3, #0]
		temp=(value>>8)&0b1111111111111111;
 8001070:	4b3d      	ldr	r3, [pc, #244]	; (8001168 <Update_check_Value+0x158>)
 8001072:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	0a02      	lsrs	r2, r0, #8
 8001080:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001084:	0a0b      	lsrs	r3, r1, #8
 8001086:	b292      	uxth	r2, r2
 8001088:	4b39      	ldr	r3, [pc, #228]	; (8001170 <Update_check_Value+0x160>)
 800108a:	801a      	strh	r2, [r3, #0]
		humidity=(value>>24)&0b1111111111111111;
 800108c:	4b36      	ldr	r3, [pc, #216]	; (8001168 <Update_check_Value+0x158>)
 800108e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	f04f 0300 	mov.w	r3, #0
 800109a:	0e02      	lsrs	r2, r0, #24
 800109c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80010a0:	0e0b      	lsrs	r3, r1, #24
 80010a2:	b292      	uxth	r2, r2
 80010a4:	4b33      	ldr	r3, [pc, #204]	; (8001174 <Update_check_Value+0x164>)
 80010a6:	801a      	strh	r2, [r3, #0]
		value=0;
 80010a8:	492f      	ldr	r1, [pc, #188]	; (8001168 <Update_check_Value+0x158>)
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	f04f 0300 	mov.w	r3, #0
 80010b2:	e9c1 2300 	strd	r2, r3, [r1]
		//check sum
		realsum=((humidity>>8)&0b11111111) + (humidity&0b11111111) +((temp>>8)&0b11111111) + (temp&0b11111111);
 80010b6:	4b2f      	ldr	r3, [pc, #188]	; (8001174 <Update_check_Value+0x164>)
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	0a1b      	lsrs	r3, r3, #8
 80010bc:	b29b      	uxth	r3, r3
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	4b2c      	ldr	r3, [pc, #176]	; (8001174 <Update_check_Value+0x164>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	4413      	add	r3, r2
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4b29      	ldr	r3, [pc, #164]	; (8001170 <Update_check_Value+0x160>)
 80010cc:	881b      	ldrh	r3, [r3, #0]
 80010ce:	0a1b      	lsrs	r3, r3, #8
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	4413      	add	r3, r2
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	4b25      	ldr	r3, [pc, #148]	; (8001170 <Update_check_Value+0x160>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	4413      	add	r3, r2
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b25      	ldr	r3, [pc, #148]	; (8001178 <Update_check_Value+0x168>)
 80010e4:	701a      	strb	r2, [r3, #0]
		if(sum!=realsum){
 80010e6:	4b21      	ldr	r3, [pc, #132]	; (800116c <Update_check_Value+0x15c>)
 80010e8:	781a      	ldrb	r2, [r3, #0]
 80010ea:	4b23      	ldr	r3, [pc, #140]	; (8001178 <Update_check_Value+0x168>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d003      	beq.n	80010fa <Update_check_Value+0xea>
			flag=1;  //request again
 80010f2:	4b22      	ldr	r3, [pc, #136]	; (800117c <Update_check_Value+0x16c>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	701a      	strb	r2, [r3, #0]
			}else{
				realtemp=temp/(10.00);//update value
			}
		}
	}
}
 80010f8:	e032      	b.n	8001160 <Update_check_Value+0x150>
			realhumidity=humidity/10.0;//update value
 80010fa:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <Update_check_Value+0x164>)
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001106:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800110a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800110e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001112:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <Update_check_Value+0x170>)
 8001114:	edc3 7a00 	vstr	s15, [r3]
			if(temp>0b1000000000000000){
 8001118:	4b15      	ldr	r3, [pc, #84]	; (8001170 <Update_check_Value+0x160>)
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001120:	d90f      	bls.n	8001142 <Update_check_Value+0x132>
				realtemp=temp/(-10.00); //update value
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <Update_check_Value+0x160>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	ee07 3a90 	vmov	s15, r3
 800112a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800112e:	eeba 5b04 	vmov.f64	d5, #164	; 0xc1200000 -10.0
 8001132:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001136:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800113a:	4b12      	ldr	r3, [pc, #72]	; (8001184 <Update_check_Value+0x174>)
 800113c:	edc3 7a00 	vstr	s15, [r3]
}
 8001140:	e00e      	b.n	8001160 <Update_check_Value+0x150>
				realtemp=temp/(10.00);//update value
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <Update_check_Value+0x160>)
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	ee07 3a90 	vmov	s15, r3
 800114a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800114e:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8001152:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001156:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <Update_check_Value+0x174>)
 800115c:	edc3 7a00 	vstr	s15, [r3]
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	bcb0      	pop	{r4, r5, r7}
 8001166:	4770      	bx	lr
 8001168:	24000108 	.word	0x24000108
 800116c:	2400c124 	.word	0x2400c124
 8001170:	2400c122 	.word	0x2400c122
 8001174:	2400c120 	.word	0x2400c120
 8001178:	2400c125 	.word	0x2400c125
 800117c:	24000104 	.word	0x24000104
 8001180:	2400c12c 	.word	0x2400c12c
 8001184:	2400c128 	.word	0x2400c128

08001188 <LCD_init>:





void LCD_init(){
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0


	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,0);	//ss pin
 800118c:	2200      	movs	r2, #0
 800118e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001192:	482b      	ldr	r0, [pc, #172]	; (8001240 <LCD_init+0xb8>)
 8001194:	f003 fee2 	bl	8004f5c <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,0);
 8001198:	2200      	movs	r2, #0
 800119a:	2180      	movs	r1, #128	; 0x80
 800119c:	4828      	ldr	r0, [pc, #160]	; (8001240 <LCD_init+0xb8>)
 800119e:	f003 fedd 	bl	8004f5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, LCDsetup, 4, 100);
 80011a2:	2364      	movs	r3, #100	; 0x64
 80011a4:	2204      	movs	r2, #4
 80011a6:	4927      	ldr	r1, [pc, #156]	; (8001244 <LCD_init+0xbc>)
 80011a8:	4827      	ldr	r0, [pc, #156]	; (8001248 <LCD_init+0xc0>)
 80011aa:	f006 fcf1 	bl	8007b90 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,1);
 80011ae:	2201      	movs	r2, #1
 80011b0:	2180      	movs	r1, #128	; 0x80
 80011b2:	4823      	ldr	r0, [pc, #140]	; (8001240 <LCD_init+0xb8>)
 80011b4:	f003 fed2 	bl	8004f5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &LCDsetup[4], 1, 100);
 80011b8:	2364      	movs	r3, #100	; 0x64
 80011ba:	2201      	movs	r2, #1
 80011bc:	4923      	ldr	r1, [pc, #140]	; (800124c <LCD_init+0xc4>)
 80011be:	4822      	ldr	r0, [pc, #136]	; (8001248 <LCD_init+0xc0>)
 80011c0:	f006 fce6 	bl	8007b90 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,0);
 80011c4:	2200      	movs	r2, #0
 80011c6:	2180      	movs	r1, #128	; 0x80
 80011c8:	481d      	ldr	r0, [pc, #116]	; (8001240 <LCD_init+0xb8>)
 80011ca:	f003 fec7 	bl	8004f5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &LCDsetup[5], 1, 100);
 80011ce:	2364      	movs	r3, #100	; 0x64
 80011d0:	2201      	movs	r2, #1
 80011d2:	491f      	ldr	r1, [pc, #124]	; (8001250 <LCD_init+0xc8>)
 80011d4:	481c      	ldr	r0, [pc, #112]	; (8001248 <LCD_init+0xc0>)
 80011d6:	f006 fcdb 	bl	8007b90 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,1);
 80011da:	2201      	movs	r2, #1
 80011dc:	2180      	movs	r1, #128	; 0x80
 80011de:	4818      	ldr	r0, [pc, #96]	; (8001240 <LCD_init+0xb8>)
 80011e0:	f003 febc 	bl	8004f5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &LCDsetup[6], 4, 100);
 80011e4:	2364      	movs	r3, #100	; 0x64
 80011e6:	2204      	movs	r2, #4
 80011e8:	491a      	ldr	r1, [pc, #104]	; (8001254 <LCD_init+0xcc>)
 80011ea:	4817      	ldr	r0, [pc, #92]	; (8001248 <LCD_init+0xc0>)
 80011ec:	f006 fcd0 	bl	8007b90 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,0);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2180      	movs	r1, #128	; 0x80
 80011f4:	4812      	ldr	r0, [pc, #72]	; (8001240 <LCD_init+0xb8>)
 80011f6:	f003 feb1 	bl	8004f5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &LCDsetup[10], 1, 100);
 80011fa:	2364      	movs	r3, #100	; 0x64
 80011fc:	2201      	movs	r2, #1
 80011fe:	4916      	ldr	r1, [pc, #88]	; (8001258 <LCD_init+0xd0>)
 8001200:	4811      	ldr	r0, [pc, #68]	; (8001248 <LCD_init+0xc0>)
 8001202:	f006 fcc5 	bl	8007b90 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,1);
 8001206:	2201      	movs	r2, #1
 8001208:	2180      	movs	r1, #128	; 0x80
 800120a:	480d      	ldr	r0, [pc, #52]	; (8001240 <LCD_init+0xb8>)
 800120c:	f003 fea6 	bl	8004f5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &LCDsetup[11], 4, 100);
 8001210:	2364      	movs	r3, #100	; 0x64
 8001212:	2204      	movs	r2, #4
 8001214:	4911      	ldr	r1, [pc, #68]	; (800125c <LCD_init+0xd4>)
 8001216:	480c      	ldr	r0, [pc, #48]	; (8001248 <LCD_init+0xc0>)
 8001218:	f006 fcba 	bl	8007b90 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,0);
 800121c:	2200      	movs	r2, #0
 800121e:	2180      	movs	r1, #128	; 0x80
 8001220:	4807      	ldr	r0, [pc, #28]	; (8001240 <LCD_init+0xb8>)
 8001222:	f003 fe9b 	bl	8004f5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &LCDsetup[15], 1, 100);
 8001226:	2364      	movs	r3, #100	; 0x64
 8001228:	2201      	movs	r2, #1
 800122a:	490d      	ldr	r1, [pc, #52]	; (8001260 <LCD_init+0xd8>)
 800122c:	4806      	ldr	r0, [pc, #24]	; (8001248 <LCD_init+0xc0>)
 800122e:	f006 fcaf 	bl	8007b90 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,1);
 8001232:	2201      	movs	r2, #1
 8001234:	2180      	movs	r1, #128	; 0x80
 8001236:	4802      	ldr	r0, [pc, #8]	; (8001240 <LCD_init+0xb8>)
 8001238:	f003 fe90 	bl	8004f5c <HAL_GPIO_WritePin>


}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	58021400 	.word	0x58021400
 8001244:	2400000c 	.word	0x2400000c
 8001248:	2400c6b4 	.word	0x2400c6b4
 800124c:	24000010 	.word	0x24000010
 8001250:	24000011 	.word	0x24000011
 8001254:	24000012 	.word	0x24000012
 8001258:	24000016 	.word	0x24000016
 800125c:	24000017 	.word	0x24000017
 8001260:	2400001b 	.word	0x2400001b

08001264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001268:	b672      	cpsid	i
}
 800126a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800126c:	e7fe      	b.n	800126c <Error_Handler+0x8>
	...

08001270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <HAL_MspInit+0x30>)
 8001278:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800127c:	4a08      	ldr	r2, [pc, #32]	; (80012a0 <HAL_MspInit+0x30>)
 800127e:	f043 0302 	orr.w	r3, r3, #2
 8001282:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_MspInit+0x30>)
 8001288:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	58024400 	.word	0x58024400

080012a4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08e      	sub	sp, #56	; 0x38
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a59      	ldr	r2, [pc, #356]	; (8001428 <HAL_ETH_MspInit+0x184>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	f040 80ab 	bne.w	800141e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80012c8:	4b58      	ldr	r3, [pc, #352]	; (800142c <HAL_ETH_MspInit+0x188>)
 80012ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012ce:	4a57      	ldr	r2, [pc, #348]	; (800142c <HAL_ETH_MspInit+0x188>)
 80012d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012d4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012d8:	4b54      	ldr	r3, [pc, #336]	; (800142c <HAL_ETH_MspInit+0x188>)
 80012da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012e2:	623b      	str	r3, [r7, #32]
 80012e4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80012e6:	4b51      	ldr	r3, [pc, #324]	; (800142c <HAL_ETH_MspInit+0x188>)
 80012e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012ec:	4a4f      	ldr	r2, [pc, #316]	; (800142c <HAL_ETH_MspInit+0x188>)
 80012ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012f6:	4b4d      	ldr	r3, [pc, #308]	; (800142c <HAL_ETH_MspInit+0x188>)
 80012f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001300:	61fb      	str	r3, [r7, #28]
 8001302:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001304:	4b49      	ldr	r3, [pc, #292]	; (800142c <HAL_ETH_MspInit+0x188>)
 8001306:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800130a:	4a48      	ldr	r2, [pc, #288]	; (800142c <HAL_ETH_MspInit+0x188>)
 800130c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001310:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001314:	4b45      	ldr	r3, [pc, #276]	; (800142c <HAL_ETH_MspInit+0x188>)
 8001316:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	61bb      	str	r3, [r7, #24]
 8001320:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001322:	4b42      	ldr	r3, [pc, #264]	; (800142c <HAL_ETH_MspInit+0x188>)
 8001324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001328:	4a40      	ldr	r2, [pc, #256]	; (800142c <HAL_ETH_MspInit+0x188>)
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001332:	4b3e      	ldr	r3, [pc, #248]	; (800142c <HAL_ETH_MspInit+0x188>)
 8001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001340:	4b3a      	ldr	r3, [pc, #232]	; (800142c <HAL_ETH_MspInit+0x188>)
 8001342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001346:	4a39      	ldr	r2, [pc, #228]	; (800142c <HAL_ETH_MspInit+0x188>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001350:	4b36      	ldr	r3, [pc, #216]	; (800142c <HAL_ETH_MspInit+0x188>)
 8001352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800135e:	4b33      	ldr	r3, [pc, #204]	; (800142c <HAL_ETH_MspInit+0x188>)
 8001360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001364:	4a31      	ldr	r2, [pc, #196]	; (800142c <HAL_ETH_MspInit+0x188>)
 8001366:	f043 0302 	orr.w	r3, r3, #2
 800136a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800136e:	4b2f      	ldr	r3, [pc, #188]	; (800142c <HAL_ETH_MspInit+0x188>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800137c:	4b2b      	ldr	r3, [pc, #172]	; (800142c <HAL_ETH_MspInit+0x188>)
 800137e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001382:	4a2a      	ldr	r2, [pc, #168]	; (800142c <HAL_ETH_MspInit+0x188>)
 8001384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001388:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800138c:	4b27      	ldr	r3, [pc, #156]	; (800142c <HAL_ETH_MspInit+0x188>)
 800138e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800139a:	2332      	movs	r3, #50	; 0x32
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013aa:	230b      	movs	r3, #11
 80013ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b2:	4619      	mov	r1, r3
 80013b4:	481e      	ldr	r0, [pc, #120]	; (8001430 <HAL_ETH_MspInit+0x18c>)
 80013b6:	f003 fc09 	bl	8004bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80013ba:	2386      	movs	r3, #134	; 0x86
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013ca:	230b      	movs	r3, #11
 80013cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d2:	4619      	mov	r1, r3
 80013d4:	4817      	ldr	r0, [pc, #92]	; (8001434 <HAL_ETH_MspInit+0x190>)
 80013d6:	f003 fbf9 	bl	8004bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2300      	movs	r3, #0
 80013ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013ec:	230b      	movs	r3, #11
 80013ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f4:	4619      	mov	r1, r3
 80013f6:	4810      	ldr	r0, [pc, #64]	; (8001438 <HAL_ETH_MspInit+0x194>)
 80013f8:	f003 fbe8 	bl	8004bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80013fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800140e:	230b      	movs	r3, #11
 8001410:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001416:	4619      	mov	r1, r3
 8001418:	4808      	ldr	r0, [pc, #32]	; (800143c <HAL_ETH_MspInit+0x198>)
 800141a:	f003 fbd7 	bl	8004bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800141e:	bf00      	nop
 8001420:	3738      	adds	r7, #56	; 0x38
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40028000 	.word	0x40028000
 800142c:	58024400 	.word	0x58024400
 8001430:	58020800 	.word	0x58020800
 8001434:	58020000 	.word	0x58020000
 8001438:	58020400 	.word	0x58020400
 800143c:	58021800 	.word	0x58021800

08001440 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b0ba      	sub	sp, #232	; 0xe8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001458:	f107 0318 	add.w	r3, r7, #24
 800145c:	22bc      	movs	r2, #188	; 0xbc
 800145e:	2100      	movs	r1, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f009 fae5 	bl	800aa30 <memset>
  if(hspi->Instance==SPI1)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a52      	ldr	r2, [pc, #328]	; (80015b4 <HAL_SPI_MspInit+0x174>)
 800146c:	4293      	cmp	r3, r2
 800146e:	f040 809c 	bne.w	80015aa <HAL_SPI_MspInit+0x16a>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001476:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001478:	2300      	movs	r3, #0
 800147a:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800147c:	f107 0318 	add.w	r3, r7, #24
 8001480:	4618      	mov	r0, r3
 8001482:	f004 ff1d 	bl	80062c0 <HAL_RCCEx_PeriphCLKConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 800148c:	f7ff feea 	bl	8001264 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001490:	4b49      	ldr	r3, [pc, #292]	; (80015b8 <HAL_SPI_MspInit+0x178>)
 8001492:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001496:	4a48      	ldr	r2, [pc, #288]	; (80015b8 <HAL_SPI_MspInit+0x178>)
 8001498:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800149c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80014a0:	4b45      	ldr	r3, [pc, #276]	; (80015b8 <HAL_SPI_MspInit+0x178>)
 80014a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	4b42      	ldr	r3, [pc, #264]	; (80015b8 <HAL_SPI_MspInit+0x178>)
 80014b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b4:	4a40      	ldr	r2, [pc, #256]	; (80015b8 <HAL_SPI_MspInit+0x178>)
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014be:	4b3e      	ldr	r3, [pc, #248]	; (80015b8 <HAL_SPI_MspInit+0x178>)
 80014c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014cc:	4b3a      	ldr	r3, [pc, #232]	; (80015b8 <HAL_SPI_MspInit+0x178>)
 80014ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d2:	4a39      	ldr	r2, [pc, #228]	; (80015b8 <HAL_SPI_MspInit+0x178>)
 80014d4:	f043 0308 	orr.w	r3, r3, #8
 80014d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014dc:	4b36      	ldr	r3, [pc, #216]	; (80015b8 <HAL_SPI_MspInit+0x178>)
 80014de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014ea:	2320      	movs	r3, #32
 80014ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001502:	2305      	movs	r3, #5
 8001504:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001508:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800150c:	4619      	mov	r1, r3
 800150e:	482b      	ldr	r0, [pc, #172]	; (80015bc <HAL_SPI_MspInit+0x17c>)
 8001510:	f003 fb5c 	bl	8004bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001514:	2380      	movs	r3, #128	; 0x80
 8001516:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800152c:	2305      	movs	r3, #5
 800152e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001532:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001536:	4619      	mov	r1, r3
 8001538:	4821      	ldr	r0, [pc, #132]	; (80015c0 <HAL_SPI_MspInit+0x180>)
 800153a:	f003 fb47 	bl	8004bcc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 800153e:	4b21      	ldr	r3, [pc, #132]	; (80015c4 <HAL_SPI_MspInit+0x184>)
 8001540:	4a21      	ldr	r2, [pc, #132]	; (80015c8 <HAL_SPI_MspInit+0x188>)
 8001542:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001544:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <HAL_SPI_MspInit+0x184>)
 8001546:	2226      	movs	r2, #38	; 0x26
 8001548:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800154a:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <HAL_SPI_MspInit+0x184>)
 800154c:	2240      	movs	r2, #64	; 0x40
 800154e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001550:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <HAL_SPI_MspInit+0x184>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001556:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <HAL_SPI_MspInit+0x184>)
 8001558:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800155c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800155e:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <HAL_SPI_MspInit+0x184>)
 8001560:	2200      	movs	r2, #0
 8001562:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001564:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <HAL_SPI_MspInit+0x184>)
 8001566:	2200      	movs	r2, #0
 8001568:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 800156a:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <HAL_SPI_MspInit+0x184>)
 800156c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001570:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001572:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <HAL_SPI_MspInit+0x184>)
 8001574:	2200      	movs	r2, #0
 8001576:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <HAL_SPI_MspInit+0x184>)
 800157a:	2200      	movs	r2, #0
 800157c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800157e:	4811      	ldr	r0, [pc, #68]	; (80015c4 <HAL_SPI_MspInit+0x184>)
 8001580:	f000 fbe6 	bl	8001d50 <HAL_DMA_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_SPI_MspInit+0x14e>
    {
      Error_Handler();
 800158a:	f7ff fe6b 	bl	8001264 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a0c      	ldr	r2, [pc, #48]	; (80015c4 <HAL_SPI_MspInit+0x184>)
 8001592:	679a      	str	r2, [r3, #120]	; 0x78
 8001594:	4a0b      	ldr	r2, [pc, #44]	; (80015c4 <HAL_SPI_MspInit+0x184>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	2100      	movs	r1, #0
 800159e:	2023      	movs	r0, #35	; 0x23
 80015a0:	f000 fba1 	bl	8001ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80015a4:	2023      	movs	r0, #35	; 0x23
 80015a6:	f000 fbb8 	bl	8001d1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015aa:	bf00      	nop
 80015ac:	37e8      	adds	r7, #232	; 0xe8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40013000 	.word	0x40013000
 80015b8:	58024400 	.word	0x58024400
 80015bc:	58020000 	.word	0x58020000
 80015c0:	58020c00 	.word	0x58020c00
 80015c4:	2400c7f8 	.word	0x2400c7f8
 80015c8:	40020010 	.word	0x40020010

080015cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a2b      	ldr	r2, [pc, #172]	; (8001688 <HAL_TIM_Base_MspInit+0xbc>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d117      	bne.n	800160e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015de:	4b2b      	ldr	r3, [pc, #172]	; (800168c <HAL_TIM_Base_MspInit+0xc0>)
 80015e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015e4:	4a29      	ldr	r2, [pc, #164]	; (800168c <HAL_TIM_Base_MspInit+0xc0>)
 80015e6:	f043 0302 	orr.w	r3, r3, #2
 80015ea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015ee:	4b27      	ldr	r3, [pc, #156]	; (800168c <HAL_TIM_Base_MspInit+0xc0>)
 80015f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2100      	movs	r1, #0
 8001600:	201d      	movs	r0, #29
 8001602:	f000 fb70 	bl	8001ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001606:	201d      	movs	r0, #29
 8001608:	f000 fb87 	bl	8001d1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800160c:	e038      	b.n	8001680 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM5)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a1f      	ldr	r2, [pc, #124]	; (8001690 <HAL_TIM_Base_MspInit+0xc4>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d117      	bne.n	8001648 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001618:	4b1c      	ldr	r3, [pc, #112]	; (800168c <HAL_TIM_Base_MspInit+0xc0>)
 800161a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800161e:	4a1b      	ldr	r2, [pc, #108]	; (800168c <HAL_TIM_Base_MspInit+0xc0>)
 8001620:	f043 0308 	orr.w	r3, r3, #8
 8001624:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001628:	4b18      	ldr	r3, [pc, #96]	; (800168c <HAL_TIM_Base_MspInit+0xc0>)
 800162a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2100      	movs	r1, #0
 800163a:	2032      	movs	r0, #50	; 0x32
 800163c:	f000 fb53 	bl	8001ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001640:	2032      	movs	r0, #50	; 0x32
 8001642:	f000 fb6a 	bl	8001d1a <HAL_NVIC_EnableIRQ>
}
 8001646:	e01b      	b.n	8001680 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM15)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a11      	ldr	r2, [pc, #68]	; (8001694 <HAL_TIM_Base_MspInit+0xc8>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d116      	bne.n	8001680 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <HAL_TIM_Base_MspInit+0xc0>)
 8001654:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001658:	4a0c      	ldr	r2, [pc, #48]	; (800168c <HAL_TIM_Base_MspInit+0xc0>)
 800165a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800165e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001662:	4b0a      	ldr	r3, [pc, #40]	; (800168c <HAL_TIM_Base_MspInit+0xc0>)
 8001664:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001670:	2200      	movs	r2, #0
 8001672:	2100      	movs	r1, #0
 8001674:	2074      	movs	r0, #116	; 0x74
 8001676:	f000 fb36 	bl	8001ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 800167a:	2074      	movs	r0, #116	; 0x74
 800167c:	f000 fb4d 	bl	8001d1a <HAL_NVIC_EnableIRQ>
}
 8001680:	bf00      	nop
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40000400 	.word	0x40000400
 800168c:	58024400 	.word	0x58024400
 8001690:	40000c00 	.word	0x40000c00
 8001694:	40014000 	.word	0x40014000

08001698 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b0b8      	sub	sp, #224	; 0xe0
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	22bc      	movs	r2, #188	; 0xbc
 80016b6:	2100      	movs	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f009 f9b9 	bl	800aa30 <memset>
  if(huart->Instance==USART3)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a25      	ldr	r2, [pc, #148]	; (8001758 <HAL_UART_MspInit+0xc0>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d142      	bne.n	800174e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016c8:	2302      	movs	r3, #2
 80016ca:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80016cc:	2300      	movs	r3, #0
 80016ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016d2:	f107 0310 	add.w	r3, r7, #16
 80016d6:	4618      	mov	r0, r3
 80016d8:	f004 fdf2 	bl	80062c0 <HAL_RCCEx_PeriphCLKConfig>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016e2:	f7ff fdbf 	bl	8001264 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016e6:	4b1d      	ldr	r3, [pc, #116]	; (800175c <HAL_UART_MspInit+0xc4>)
 80016e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016ec:	4a1b      	ldr	r2, [pc, #108]	; (800175c <HAL_UART_MspInit+0xc4>)
 80016ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016f6:	4b19      	ldr	r3, [pc, #100]	; (800175c <HAL_UART_MspInit+0xc4>)
 80016f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001704:	4b15      	ldr	r3, [pc, #84]	; (800175c <HAL_UART_MspInit+0xc4>)
 8001706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800170a:	4a14      	ldr	r2, [pc, #80]	; (800175c <HAL_UART_MspInit+0xc4>)
 800170c:	f043 0308 	orr.w	r3, r3, #8
 8001710:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <HAL_UART_MspInit+0xc4>)
 8001716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001722:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001726:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800173c:	2307      	movs	r3, #7
 800173e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001742:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001746:	4619      	mov	r1, r3
 8001748:	4805      	ldr	r0, [pc, #20]	; (8001760 <HAL_UART_MspInit+0xc8>)
 800174a:	f003 fa3f 	bl	8004bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800174e:	bf00      	nop
 8001750:	37e0      	adds	r7, #224	; 0xe0
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40004800 	.word	0x40004800
 800175c:	58024400 	.word	0x58024400
 8001760:	58020c00 	.word	0x58020c00

08001764 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b0b8      	sub	sp, #224	; 0xe0
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800177c:	f107 0310 	add.w	r3, r7, #16
 8001780:	22bc      	movs	r2, #188	; 0xbc
 8001782:	2100      	movs	r1, #0
 8001784:	4618      	mov	r0, r3
 8001786:	f009 f953 	bl	800aa30 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a37      	ldr	r2, [pc, #220]	; (800186c <HAL_PCD_MspInit+0x108>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d166      	bne.n	8001862 <HAL_PCD_MspInit+0xfe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001794:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001798:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800179a:	2301      	movs	r3, #1
 800179c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 800179e:	2312      	movs	r3, #18
 80017a0:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80017a2:	2302      	movs	r3, #2
 80017a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80017a6:	2303      	movs	r3, #3
 80017a8:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80017aa:	2302      	movs	r3, #2
 80017ac:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80017ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017b2:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 80017b4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80017b8:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80017ba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017c2:	f107 0310 	add.w	r3, r7, #16
 80017c6:	4618      	mov	r0, r3
 80017c8:	f004 fd7a 	bl	80062c0 <HAL_RCCEx_PeriphCLKConfig>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 80017d2:	f7ff fd47 	bl	8001264 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80017d6:	f003 fdab 	bl	8005330 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	4b25      	ldr	r3, [pc, #148]	; (8001870 <HAL_PCD_MspInit+0x10c>)
 80017dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e0:	4a23      	ldr	r2, [pc, #140]	; (8001870 <HAL_PCD_MspInit+0x10c>)
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ea:	4b21      	ldr	r3, [pc, #132]	; (8001870 <HAL_PCD_MspInit+0x10c>)
 80017ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80017f8:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80017fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	2302      	movs	r3, #2
 8001802:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001812:	230a      	movs	r3, #10
 8001814:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001818:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800181c:	4619      	mov	r1, r3
 800181e:	4815      	ldr	r0, [pc, #84]	; (8001874 <HAL_PCD_MspInit+0x110>)
 8001820:	f003 f9d4 	bl	8004bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001824:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001828:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182c:	2300      	movs	r3, #0
 800182e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001838:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800183c:	4619      	mov	r1, r3
 800183e:	480d      	ldr	r0, [pc, #52]	; (8001874 <HAL_PCD_MspInit+0x110>)
 8001840:	f003 f9c4 	bl	8004bcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001844:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_PCD_MspInit+0x10c>)
 8001846:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800184a:	4a09      	ldr	r2, [pc, #36]	; (8001870 <HAL_PCD_MspInit+0x10c>)
 800184c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001850:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_PCD_MspInit+0x10c>)
 8001856:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800185a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001862:	bf00      	nop
 8001864:	37e0      	adds	r7, #224	; 0xe0
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40080000 	.word	0x40080000
 8001870:	58024400 	.word	0x58024400
 8001874:	58020000 	.word	0x58020000

08001878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800187c:	e7fe      	b.n	800187c <NMI_Handler+0x4>

0800187e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <HardFault_Handler+0x4>

08001884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <MemManage_Handler+0x4>

0800188a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <BusFault_Handler+0x4>

08001890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <UsageFault_Handler+0x4>

08001896 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c4:	f000 f8d0 	bl	8001a68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}

080018cc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80018d0:	4802      	ldr	r0, [pc, #8]	; (80018dc <DMA1_Stream0_IRQHandler+0x10>)
 80018d2:	f001 fa47 	bl	8002d64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	2400c7f8 	.word	0x2400c7f8

080018e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018e4:	4802      	ldr	r0, [pc, #8]	; (80018f0 <TIM3_IRQHandler+0x10>)
 80018e6:	f007 f8ef 	bl	8008ac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	2400c668 	.word	0x2400c668

080018f4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <SPI1_IRQHandler+0x10>)
 80018fa:	f006 fc85 	bl	8008208 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	2400c6b4 	.word	0x2400c6b4

08001908 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <TIM5_IRQHandler+0x10>)
 800190e:	f007 f8db 	bl	8008ac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	2400c61c 	.word	0x2400c61c

0800191c <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001920:	4802      	ldr	r0, [pc, #8]	; (800192c <TIM15_IRQHandler+0x10>)
 8001922:	f007 f8d1 	bl	8008ac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	2400c1c8 	.word	0x2400c1c8

08001930 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001930:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001968 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001934:	f7fe fe4c 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001938:	480c      	ldr	r0, [pc, #48]	; (800196c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800193a:	490d      	ldr	r1, [pc, #52]	; (8001970 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800193c:	4a0d      	ldr	r2, [pc, #52]	; (8001974 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001940:	e002      	b.n	8001948 <LoopCopyDataInit>

08001942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001946:	3304      	adds	r3, #4

08001948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800194c:	d3f9      	bcc.n	8001942 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194e:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001950:	4c0a      	ldr	r4, [pc, #40]	; (800197c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001954:	e001      	b.n	800195a <LoopFillZerobss>

08001956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001958:	3204      	adds	r2, #4

0800195a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800195c:	d3fb      	bcc.n	8001956 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800195e:	f009 f843 	bl	800a9e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001962:	f7fe fecf 	bl	8000704 <main>
  bx  lr
 8001966:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001968:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800196c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001970:	24000024 	.word	0x24000024
  ldr r2, =_sidata
 8001974:	0800aaa8 	.word	0x0800aaa8
  ldr r2, =_sbss
 8001978:	240000e8 	.word	0x240000e8
  ldr r4, =_ebss
 800197c:	2400c874 	.word	0x2400c874

08001980 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001980:	e7fe      	b.n	8001980 <ADC3_IRQHandler>
	...

08001984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800198a:	2003      	movs	r0, #3
 800198c:	f000 f9a0 	bl	8001cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001990:	f004 fac0 	bl	8005f14 <HAL_RCC_GetSysClockFreq>
 8001994:	4602      	mov	r2, r0
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <HAL_Init+0x68>)
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	0a1b      	lsrs	r3, r3, #8
 800199c:	f003 030f 	and.w	r3, r3, #15
 80019a0:	4913      	ldr	r1, [pc, #76]	; (80019f0 <HAL_Init+0x6c>)
 80019a2:	5ccb      	ldrb	r3, [r1, r3]
 80019a4:	f003 031f 	and.w	r3, r3, #31
 80019a8:	fa22 f303 	lsr.w	r3, r2, r3
 80019ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019ae:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <HAL_Init+0x68>)
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	4a0e      	ldr	r2, [pc, #56]	; (80019f0 <HAL_Init+0x6c>)
 80019b8:	5cd3      	ldrb	r3, [r2, r3]
 80019ba:	f003 031f 	and.w	r3, r3, #31
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	fa22 f303 	lsr.w	r3, r2, r3
 80019c4:	4a0b      	ldr	r2, [pc, #44]	; (80019f4 <HAL_Init+0x70>)
 80019c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019c8:	4a0b      	ldr	r2, [pc, #44]	; (80019f8 <HAL_Init+0x74>)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019ce:	2000      	movs	r0, #0
 80019d0:	f000 f814 	bl	80019fc <HAL_InitTick>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e002      	b.n	80019e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019de:	f7ff fc47 	bl	8001270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	58024400 	.word	0x58024400
 80019f0:	0800aa58 	.word	0x0800aa58
 80019f4:	24000004 	.word	0x24000004
 80019f8:	24000000 	.word	0x24000000

080019fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a04:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <HAL_InitTick+0x60>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e021      	b.n	8001a54 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a10:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <HAL_InitTick+0x64>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <HAL_InitTick+0x60>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 f985 	bl	8001d36 <HAL_SYSTICK_Config>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e00e      	b.n	8001a54 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b0f      	cmp	r3, #15
 8001a3a:	d80a      	bhi.n	8001a52 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	f04f 30ff 	mov.w	r0, #4294967295
 8001a44:	f000 f94f 	bl	8001ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a48:	4a06      	ldr	r2, [pc, #24]	; (8001a64 <HAL_InitTick+0x68>)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	e000      	b.n	8001a54 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	24000020 	.word	0x24000020
 8001a60:	24000000 	.word	0x24000000
 8001a64:	2400001c 	.word	0x2400001c

08001a68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_IncTick+0x20>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_IncTick+0x24>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4413      	add	r3, r2
 8001a78:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <HAL_IncTick+0x24>)
 8001a7a:	6013      	str	r3, [r2, #0]
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	24000020 	.word	0x24000020
 8001a8c:	2400c870 	.word	0x2400c870

08001a90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return uwTick;
 8001a94:	4b03      	ldr	r3, [pc, #12]	; (8001aa4 <HAL_GetTick+0x14>)
 8001a96:	681b      	ldr	r3, [r3, #0]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	2400c870 	.word	0x2400c870

08001aa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab0:	f7ff ffee 	bl	8001a90 <HAL_GetTick>
 8001ab4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac0:	d005      	beq.n	8001ace <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ac2:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <HAL_Delay+0x44>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4413      	add	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ace:	bf00      	nop
 8001ad0:	f7ff ffde 	bl	8001a90 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d8f7      	bhi.n	8001ad0 <HAL_Delay+0x28>
  {
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	24000020 	.word	0x24000020

08001af0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001af4:	4b03      	ldr	r3, [pc, #12]	; (8001b04 <HAL_GetREVID+0x14>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	0c1b      	lsrs	r3, r3, #16
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	5c001000 	.word	0x5c001000

08001b08 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001b18:	4904      	ldr	r1, [pc, #16]	; (8001b2c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	604b      	str	r3, [r1, #4]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	58000400 	.word	0x58000400

08001b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <__NVIC_SetPriorityGrouping+0x40>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5e:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <__NVIC_SetPriorityGrouping+0x40>)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	60d3      	str	r3, [r2, #12]
}
 8001b64:	bf00      	nop
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00
 8001b74:	05fa0000 	.word	0x05fa0000

08001b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b7c:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <__NVIC_GetPriorityGrouping+0x18>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	0a1b      	lsrs	r3, r3, #8
 8001b82:	f003 0307 	and.w	r3, r3, #7
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	db0b      	blt.n	8001bbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba6:	88fb      	ldrh	r3, [r7, #6]
 8001ba8:	f003 021f 	and.w	r2, r3, #31
 8001bac:	4907      	ldr	r1, [pc, #28]	; (8001bcc <__NVIC_EnableIRQ+0x38>)
 8001bae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bb2:	095b      	lsrs	r3, r3, #5
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	e000e100 	.word	0xe000e100

08001bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6039      	str	r1, [r7, #0]
 8001bda:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	db0a      	blt.n	8001bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	490c      	ldr	r1, [pc, #48]	; (8001c1c <__NVIC_SetPriority+0x4c>)
 8001bea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bee:	0112      	lsls	r2, r2, #4
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf8:	e00a      	b.n	8001c10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4908      	ldr	r1, [pc, #32]	; (8001c20 <__NVIC_SetPriority+0x50>)
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	3b04      	subs	r3, #4
 8001c08:	0112      	lsls	r2, r2, #4
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	761a      	strb	r2, [r3, #24]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000e100 	.word	0xe000e100
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	; 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f1c3 0307 	rsb	r3, r3, #7
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	bf28      	it	cs
 8001c42:	2304      	movcs	r3, #4
 8001c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	2b06      	cmp	r3, #6
 8001c4c:	d902      	bls.n	8001c54 <NVIC_EncodePriority+0x30>
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3b03      	subs	r3, #3
 8001c52:	e000      	b.n	8001c56 <NVIC_EncodePriority+0x32>
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	f04f 32ff 	mov.w	r2, #4294967295
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43da      	mvns	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	401a      	ands	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	43d9      	mvns	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	4313      	orrs	r3, r2
         );
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3724      	adds	r7, #36	; 0x24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c9c:	d301      	bcc.n	8001ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e00f      	b.n	8001cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <SysTick_Config+0x40>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001caa:	210f      	movs	r1, #15
 8001cac:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb0:	f7ff ff8e 	bl	8001bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cb4:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <SysTick_Config+0x40>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cba:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <SysTick_Config+0x40>)
 8001cbc:	2207      	movs	r2, #7
 8001cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	e000e010 	.word	0xe000e010

08001cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff ff29 	bl	8001b30 <__NVIC_SetPriorityGrouping>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b086      	sub	sp, #24
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf4:	f7ff ff40 	bl	8001b78 <__NVIC_GetPriorityGrouping>
 8001cf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	68b9      	ldr	r1, [r7, #8]
 8001cfe:	6978      	ldr	r0, [r7, #20]
 8001d00:	f7ff ff90 	bl	8001c24 <NVIC_EncodePriority>
 8001d04:	4602      	mov	r2, r0
 8001d06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff5f 	bl	8001bd0 <__NVIC_SetPriority>
}
 8001d12:	bf00      	nop
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	4603      	mov	r3, r0
 8001d22:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ff33 	bl	8001b94 <__NVIC_EnableIRQ>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff ffa4 	bl	8001c8c <SysTick_Config>
 8001d44:	4603      	mov	r3, r0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001d58:	f7ff fe9a 	bl	8001a90 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e316      	b.n	8002396 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a66      	ldr	r2, [pc, #408]	; (8001f08 <HAL_DMA_Init+0x1b8>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d04a      	beq.n	8001e08 <HAL_DMA_Init+0xb8>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a65      	ldr	r2, [pc, #404]	; (8001f0c <HAL_DMA_Init+0x1bc>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d045      	beq.n	8001e08 <HAL_DMA_Init+0xb8>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a63      	ldr	r2, [pc, #396]	; (8001f10 <HAL_DMA_Init+0x1c0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d040      	beq.n	8001e08 <HAL_DMA_Init+0xb8>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a62      	ldr	r2, [pc, #392]	; (8001f14 <HAL_DMA_Init+0x1c4>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d03b      	beq.n	8001e08 <HAL_DMA_Init+0xb8>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a60      	ldr	r2, [pc, #384]	; (8001f18 <HAL_DMA_Init+0x1c8>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d036      	beq.n	8001e08 <HAL_DMA_Init+0xb8>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a5f      	ldr	r2, [pc, #380]	; (8001f1c <HAL_DMA_Init+0x1cc>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d031      	beq.n	8001e08 <HAL_DMA_Init+0xb8>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a5d      	ldr	r2, [pc, #372]	; (8001f20 <HAL_DMA_Init+0x1d0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d02c      	beq.n	8001e08 <HAL_DMA_Init+0xb8>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a5c      	ldr	r2, [pc, #368]	; (8001f24 <HAL_DMA_Init+0x1d4>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d027      	beq.n	8001e08 <HAL_DMA_Init+0xb8>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a5a      	ldr	r2, [pc, #360]	; (8001f28 <HAL_DMA_Init+0x1d8>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d022      	beq.n	8001e08 <HAL_DMA_Init+0xb8>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a59      	ldr	r2, [pc, #356]	; (8001f2c <HAL_DMA_Init+0x1dc>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d01d      	beq.n	8001e08 <HAL_DMA_Init+0xb8>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a57      	ldr	r2, [pc, #348]	; (8001f30 <HAL_DMA_Init+0x1e0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d018      	beq.n	8001e08 <HAL_DMA_Init+0xb8>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a56      	ldr	r2, [pc, #344]	; (8001f34 <HAL_DMA_Init+0x1e4>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d013      	beq.n	8001e08 <HAL_DMA_Init+0xb8>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a54      	ldr	r2, [pc, #336]	; (8001f38 <HAL_DMA_Init+0x1e8>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d00e      	beq.n	8001e08 <HAL_DMA_Init+0xb8>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a53      	ldr	r2, [pc, #332]	; (8001f3c <HAL_DMA_Init+0x1ec>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d009      	beq.n	8001e08 <HAL_DMA_Init+0xb8>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a51      	ldr	r2, [pc, #324]	; (8001f40 <HAL_DMA_Init+0x1f0>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d004      	beq.n	8001e08 <HAL_DMA_Init+0xb8>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a50      	ldr	r2, [pc, #320]	; (8001f44 <HAL_DMA_Init+0x1f4>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d101      	bne.n	8001e0c <HAL_DMA_Init+0xbc>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e000      	b.n	8001e0e <HAL_DMA_Init+0xbe>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 813b 	beq.w	800208a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a37      	ldr	r2, [pc, #220]	; (8001f08 <HAL_DMA_Init+0x1b8>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d04a      	beq.n	8001ec4 <HAL_DMA_Init+0x174>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a36      	ldr	r2, [pc, #216]	; (8001f0c <HAL_DMA_Init+0x1bc>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d045      	beq.n	8001ec4 <HAL_DMA_Init+0x174>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a34      	ldr	r2, [pc, #208]	; (8001f10 <HAL_DMA_Init+0x1c0>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d040      	beq.n	8001ec4 <HAL_DMA_Init+0x174>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a33      	ldr	r2, [pc, #204]	; (8001f14 <HAL_DMA_Init+0x1c4>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d03b      	beq.n	8001ec4 <HAL_DMA_Init+0x174>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a31      	ldr	r2, [pc, #196]	; (8001f18 <HAL_DMA_Init+0x1c8>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d036      	beq.n	8001ec4 <HAL_DMA_Init+0x174>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a30      	ldr	r2, [pc, #192]	; (8001f1c <HAL_DMA_Init+0x1cc>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d031      	beq.n	8001ec4 <HAL_DMA_Init+0x174>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a2e      	ldr	r2, [pc, #184]	; (8001f20 <HAL_DMA_Init+0x1d0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d02c      	beq.n	8001ec4 <HAL_DMA_Init+0x174>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a2d      	ldr	r2, [pc, #180]	; (8001f24 <HAL_DMA_Init+0x1d4>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d027      	beq.n	8001ec4 <HAL_DMA_Init+0x174>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a2b      	ldr	r2, [pc, #172]	; (8001f28 <HAL_DMA_Init+0x1d8>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d022      	beq.n	8001ec4 <HAL_DMA_Init+0x174>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a2a      	ldr	r2, [pc, #168]	; (8001f2c <HAL_DMA_Init+0x1dc>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d01d      	beq.n	8001ec4 <HAL_DMA_Init+0x174>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a28      	ldr	r2, [pc, #160]	; (8001f30 <HAL_DMA_Init+0x1e0>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d018      	beq.n	8001ec4 <HAL_DMA_Init+0x174>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a27      	ldr	r2, [pc, #156]	; (8001f34 <HAL_DMA_Init+0x1e4>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d013      	beq.n	8001ec4 <HAL_DMA_Init+0x174>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a25      	ldr	r2, [pc, #148]	; (8001f38 <HAL_DMA_Init+0x1e8>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00e      	beq.n	8001ec4 <HAL_DMA_Init+0x174>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a24      	ldr	r2, [pc, #144]	; (8001f3c <HAL_DMA_Init+0x1ec>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d009      	beq.n	8001ec4 <HAL_DMA_Init+0x174>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a22      	ldr	r2, [pc, #136]	; (8001f40 <HAL_DMA_Init+0x1f0>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d004      	beq.n	8001ec4 <HAL_DMA_Init+0x174>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a21      	ldr	r2, [pc, #132]	; (8001f44 <HAL_DMA_Init+0x1f4>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d108      	bne.n	8001ed6 <HAL_DMA_Init+0x186>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0201 	bic.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	e007      	b.n	8001ee6 <HAL_DMA_Init+0x196>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0201 	bic.w	r2, r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ee6:	e02f      	b.n	8001f48 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ee8:	f7ff fdd2 	bl	8001a90 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b05      	cmp	r3, #5
 8001ef4:	d928      	bls.n	8001f48 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2220      	movs	r2, #32
 8001efa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2203      	movs	r2, #3
 8001f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e246      	b.n	8002396 <HAL_DMA_Init+0x646>
 8001f08:	40020010 	.word	0x40020010
 8001f0c:	40020028 	.word	0x40020028
 8001f10:	40020040 	.word	0x40020040
 8001f14:	40020058 	.word	0x40020058
 8001f18:	40020070 	.word	0x40020070
 8001f1c:	40020088 	.word	0x40020088
 8001f20:	400200a0 	.word	0x400200a0
 8001f24:	400200b8 	.word	0x400200b8
 8001f28:	40020410 	.word	0x40020410
 8001f2c:	40020428 	.word	0x40020428
 8001f30:	40020440 	.word	0x40020440
 8001f34:	40020458 	.word	0x40020458
 8001f38:	40020470 	.word	0x40020470
 8001f3c:	40020488 	.word	0x40020488
 8001f40:	400204a0 	.word	0x400204a0
 8001f44:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1c8      	bne.n	8001ee8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	4b83      	ldr	r3, [pc, #524]	; (8002170 <HAL_DMA_Init+0x420>)
 8001f62:	4013      	ands	r3, r2
 8001f64:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001f6e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f7a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f86:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	d107      	bne.n	8001fac <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001fac:	4b71      	ldr	r3, [pc, #452]	; (8002174 <HAL_DMA_Init+0x424>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4b71      	ldr	r3, [pc, #452]	; (8002178 <HAL_DMA_Init+0x428>)
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fb8:	d328      	bcc.n	800200c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b28      	cmp	r3, #40	; 0x28
 8001fc0:	d903      	bls.n	8001fca <HAL_DMA_Init+0x27a>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b2e      	cmp	r3, #46	; 0x2e
 8001fc8:	d917      	bls.n	8001ffa <HAL_DMA_Init+0x2aa>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b3e      	cmp	r3, #62	; 0x3e
 8001fd0:	d903      	bls.n	8001fda <HAL_DMA_Init+0x28a>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b42      	cmp	r3, #66	; 0x42
 8001fd8:	d90f      	bls.n	8001ffa <HAL_DMA_Init+0x2aa>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b46      	cmp	r3, #70	; 0x46
 8001fe0:	d903      	bls.n	8001fea <HAL_DMA_Init+0x29a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b48      	cmp	r3, #72	; 0x48
 8001fe8:	d907      	bls.n	8001ffa <HAL_DMA_Init+0x2aa>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b4e      	cmp	r3, #78	; 0x4e
 8001ff0:	d905      	bls.n	8001ffe <HAL_DMA_Init+0x2ae>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b52      	cmp	r3, #82	; 0x52
 8001ff8:	d801      	bhi.n	8001ffe <HAL_DMA_Init+0x2ae>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <HAL_DMA_Init+0x2b0>
 8001ffe:	2300      	movs	r3, #0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800200a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f023 0307 	bic.w	r3, r3, #7
 8002022:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	4313      	orrs	r3, r2
 800202c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	2b04      	cmp	r3, #4
 8002034:	d117      	bne.n	8002066 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	4313      	orrs	r3, r2
 800203e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00e      	beq.n	8002066 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f002 f81f 	bl	800408c <DMA_CheckFifoParam>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d008      	beq.n	8002066 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2240      	movs	r2, #64	; 0x40
 8002058:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e197      	b.n	8002396 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f001 ff5a 	bl	8003f28 <DMA_CalcBaseAndBitshift>
 8002074:	4603      	mov	r3, r0
 8002076:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207c:	f003 031f 	and.w	r3, r3, #31
 8002080:	223f      	movs	r2, #63	; 0x3f
 8002082:	409a      	lsls	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	e0cd      	b.n	8002226 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a3b      	ldr	r2, [pc, #236]	; (800217c <HAL_DMA_Init+0x42c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d022      	beq.n	80020da <HAL_DMA_Init+0x38a>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a39      	ldr	r2, [pc, #228]	; (8002180 <HAL_DMA_Init+0x430>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d01d      	beq.n	80020da <HAL_DMA_Init+0x38a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a38      	ldr	r2, [pc, #224]	; (8002184 <HAL_DMA_Init+0x434>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d018      	beq.n	80020da <HAL_DMA_Init+0x38a>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a36      	ldr	r2, [pc, #216]	; (8002188 <HAL_DMA_Init+0x438>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d013      	beq.n	80020da <HAL_DMA_Init+0x38a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a35      	ldr	r2, [pc, #212]	; (800218c <HAL_DMA_Init+0x43c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d00e      	beq.n	80020da <HAL_DMA_Init+0x38a>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a33      	ldr	r2, [pc, #204]	; (8002190 <HAL_DMA_Init+0x440>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d009      	beq.n	80020da <HAL_DMA_Init+0x38a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a32      	ldr	r2, [pc, #200]	; (8002194 <HAL_DMA_Init+0x444>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d004      	beq.n	80020da <HAL_DMA_Init+0x38a>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a30      	ldr	r2, [pc, #192]	; (8002198 <HAL_DMA_Init+0x448>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d101      	bne.n	80020de <HAL_DMA_Init+0x38e>
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <HAL_DMA_Init+0x390>
 80020de:	2300      	movs	r3, #0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 8097 	beq.w	8002214 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a24      	ldr	r2, [pc, #144]	; (800217c <HAL_DMA_Init+0x42c>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d021      	beq.n	8002134 <HAL_DMA_Init+0x3e4>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a22      	ldr	r2, [pc, #136]	; (8002180 <HAL_DMA_Init+0x430>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d01c      	beq.n	8002134 <HAL_DMA_Init+0x3e4>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a21      	ldr	r2, [pc, #132]	; (8002184 <HAL_DMA_Init+0x434>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d017      	beq.n	8002134 <HAL_DMA_Init+0x3e4>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a1f      	ldr	r2, [pc, #124]	; (8002188 <HAL_DMA_Init+0x438>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d012      	beq.n	8002134 <HAL_DMA_Init+0x3e4>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a1e      	ldr	r2, [pc, #120]	; (800218c <HAL_DMA_Init+0x43c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d00d      	beq.n	8002134 <HAL_DMA_Init+0x3e4>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a1c      	ldr	r2, [pc, #112]	; (8002190 <HAL_DMA_Init+0x440>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d008      	beq.n	8002134 <HAL_DMA_Init+0x3e4>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a1b      	ldr	r2, [pc, #108]	; (8002194 <HAL_DMA_Init+0x444>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d003      	beq.n	8002134 <HAL_DMA_Init+0x3e4>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a19      	ldr	r2, [pc, #100]	; (8002198 <HAL_DMA_Init+0x448>)
 8002132:	4293      	cmp	r3, r2
 8002134:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2202      	movs	r2, #2
 800213a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_DMA_Init+0x44c>)
 8002152:	4013      	ands	r3, r2
 8002154:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2b40      	cmp	r3, #64	; 0x40
 800215c:	d020      	beq.n	80021a0 <HAL_DMA_Init+0x450>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2b80      	cmp	r3, #128	; 0x80
 8002164:	d102      	bne.n	800216c <HAL_DMA_Init+0x41c>
 8002166:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800216a:	e01a      	b.n	80021a2 <HAL_DMA_Init+0x452>
 800216c:	2300      	movs	r3, #0
 800216e:	e018      	b.n	80021a2 <HAL_DMA_Init+0x452>
 8002170:	fe10803f 	.word	0xfe10803f
 8002174:	5c001000 	.word	0x5c001000
 8002178:	ffff0000 	.word	0xffff0000
 800217c:	58025408 	.word	0x58025408
 8002180:	5802541c 	.word	0x5802541c
 8002184:	58025430 	.word	0x58025430
 8002188:	58025444 	.word	0x58025444
 800218c:	58025458 	.word	0x58025458
 8002190:	5802546c 	.word	0x5802546c
 8002194:	58025480 	.word	0x58025480
 8002198:	58025494 	.word	0x58025494
 800219c:	fffe000f 	.word	0xfffe000f
 80021a0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68d2      	ldr	r2, [r2, #12]
 80021a6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80021a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80021b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80021b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80021c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80021c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80021d0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	461a      	mov	r2, r3
 80021e6:	4b6e      	ldr	r3, [pc, #440]	; (80023a0 <HAL_DMA_Init+0x650>)
 80021e8:	4413      	add	r3, r2
 80021ea:	4a6e      	ldr	r2, [pc, #440]	; (80023a4 <HAL_DMA_Init+0x654>)
 80021ec:	fba2 2303 	umull	r2, r3, r2, r3
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	009a      	lsls	r2, r3, #2
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f001 fe95 	bl	8003f28 <DMA_CalcBaseAndBitshift>
 80021fe:	4603      	mov	r3, r0
 8002200:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002206:	f003 031f 	and.w	r3, r3, #31
 800220a:	2201      	movs	r2, #1
 800220c:	409a      	lsls	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	e008      	b.n	8002226 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2240      	movs	r2, #64	; 0x40
 8002218:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2203      	movs	r2, #3
 800221e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e0b7      	b.n	8002396 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a5f      	ldr	r2, [pc, #380]	; (80023a8 <HAL_DMA_Init+0x658>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d072      	beq.n	8002316 <HAL_DMA_Init+0x5c6>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a5d      	ldr	r2, [pc, #372]	; (80023ac <HAL_DMA_Init+0x65c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d06d      	beq.n	8002316 <HAL_DMA_Init+0x5c6>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a5c      	ldr	r2, [pc, #368]	; (80023b0 <HAL_DMA_Init+0x660>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d068      	beq.n	8002316 <HAL_DMA_Init+0x5c6>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a5a      	ldr	r2, [pc, #360]	; (80023b4 <HAL_DMA_Init+0x664>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d063      	beq.n	8002316 <HAL_DMA_Init+0x5c6>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a59      	ldr	r2, [pc, #356]	; (80023b8 <HAL_DMA_Init+0x668>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d05e      	beq.n	8002316 <HAL_DMA_Init+0x5c6>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a57      	ldr	r2, [pc, #348]	; (80023bc <HAL_DMA_Init+0x66c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d059      	beq.n	8002316 <HAL_DMA_Init+0x5c6>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a56      	ldr	r2, [pc, #344]	; (80023c0 <HAL_DMA_Init+0x670>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d054      	beq.n	8002316 <HAL_DMA_Init+0x5c6>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a54      	ldr	r2, [pc, #336]	; (80023c4 <HAL_DMA_Init+0x674>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d04f      	beq.n	8002316 <HAL_DMA_Init+0x5c6>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a53      	ldr	r2, [pc, #332]	; (80023c8 <HAL_DMA_Init+0x678>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d04a      	beq.n	8002316 <HAL_DMA_Init+0x5c6>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a51      	ldr	r2, [pc, #324]	; (80023cc <HAL_DMA_Init+0x67c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d045      	beq.n	8002316 <HAL_DMA_Init+0x5c6>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a50      	ldr	r2, [pc, #320]	; (80023d0 <HAL_DMA_Init+0x680>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d040      	beq.n	8002316 <HAL_DMA_Init+0x5c6>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a4e      	ldr	r2, [pc, #312]	; (80023d4 <HAL_DMA_Init+0x684>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d03b      	beq.n	8002316 <HAL_DMA_Init+0x5c6>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a4d      	ldr	r2, [pc, #308]	; (80023d8 <HAL_DMA_Init+0x688>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d036      	beq.n	8002316 <HAL_DMA_Init+0x5c6>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a4b      	ldr	r2, [pc, #300]	; (80023dc <HAL_DMA_Init+0x68c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d031      	beq.n	8002316 <HAL_DMA_Init+0x5c6>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a4a      	ldr	r2, [pc, #296]	; (80023e0 <HAL_DMA_Init+0x690>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d02c      	beq.n	8002316 <HAL_DMA_Init+0x5c6>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a48      	ldr	r2, [pc, #288]	; (80023e4 <HAL_DMA_Init+0x694>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d027      	beq.n	8002316 <HAL_DMA_Init+0x5c6>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a47      	ldr	r2, [pc, #284]	; (80023e8 <HAL_DMA_Init+0x698>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d022      	beq.n	8002316 <HAL_DMA_Init+0x5c6>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a45      	ldr	r2, [pc, #276]	; (80023ec <HAL_DMA_Init+0x69c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d01d      	beq.n	8002316 <HAL_DMA_Init+0x5c6>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a44      	ldr	r2, [pc, #272]	; (80023f0 <HAL_DMA_Init+0x6a0>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d018      	beq.n	8002316 <HAL_DMA_Init+0x5c6>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a42      	ldr	r2, [pc, #264]	; (80023f4 <HAL_DMA_Init+0x6a4>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d013      	beq.n	8002316 <HAL_DMA_Init+0x5c6>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a41      	ldr	r2, [pc, #260]	; (80023f8 <HAL_DMA_Init+0x6a8>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d00e      	beq.n	8002316 <HAL_DMA_Init+0x5c6>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a3f      	ldr	r2, [pc, #252]	; (80023fc <HAL_DMA_Init+0x6ac>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d009      	beq.n	8002316 <HAL_DMA_Init+0x5c6>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a3e      	ldr	r2, [pc, #248]	; (8002400 <HAL_DMA_Init+0x6b0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d004      	beq.n	8002316 <HAL_DMA_Init+0x5c6>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a3c      	ldr	r2, [pc, #240]	; (8002404 <HAL_DMA_Init+0x6b4>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d101      	bne.n	800231a <HAL_DMA_Init+0x5ca>
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <HAL_DMA_Init+0x5cc>
 800231a:	2300      	movs	r3, #0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d032      	beq.n	8002386 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f001 ff2f 	bl	8004184 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2b80      	cmp	r3, #128	; 0x80
 800232c:	d102      	bne.n	8002334 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002348:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d010      	beq.n	8002374 <HAL_DMA_Init+0x624>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b08      	cmp	r3, #8
 8002358:	d80c      	bhi.n	8002374 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f001 ffac 	bl	80042b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	e008      	b.n	8002386 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	a7fdabf8 	.word	0xa7fdabf8
 80023a4:	cccccccd 	.word	0xcccccccd
 80023a8:	40020010 	.word	0x40020010
 80023ac:	40020028 	.word	0x40020028
 80023b0:	40020040 	.word	0x40020040
 80023b4:	40020058 	.word	0x40020058
 80023b8:	40020070 	.word	0x40020070
 80023bc:	40020088 	.word	0x40020088
 80023c0:	400200a0 	.word	0x400200a0
 80023c4:	400200b8 	.word	0x400200b8
 80023c8:	40020410 	.word	0x40020410
 80023cc:	40020428 	.word	0x40020428
 80023d0:	40020440 	.word	0x40020440
 80023d4:	40020458 	.word	0x40020458
 80023d8:	40020470 	.word	0x40020470
 80023dc:	40020488 	.word	0x40020488
 80023e0:	400204a0 	.word	0x400204a0
 80023e4:	400204b8 	.word	0x400204b8
 80023e8:	58025408 	.word	0x58025408
 80023ec:	5802541c 	.word	0x5802541c
 80023f0:	58025430 	.word	0x58025430
 80023f4:	58025444 	.word	0x58025444
 80023f8:	58025458 	.word	0x58025458
 80023fc:	5802546c 	.word	0x5802546c
 8002400:	58025480 	.word	0x58025480
 8002404:	58025494 	.word	0x58025494

08002408 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
 8002414:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e226      	b.n	8002872 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800242a:	2b01      	cmp	r3, #1
 800242c:	d101      	bne.n	8002432 <HAL_DMA_Start_IT+0x2a>
 800242e:	2302      	movs	r3, #2
 8002430:	e21f      	b.n	8002872 <HAL_DMA_Start_IT+0x46a>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b01      	cmp	r3, #1
 8002444:	f040 820a 	bne.w	800285c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a68      	ldr	r2, [pc, #416]	; (80025fc <HAL_DMA_Start_IT+0x1f4>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d04a      	beq.n	80024f6 <HAL_DMA_Start_IT+0xee>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a66      	ldr	r2, [pc, #408]	; (8002600 <HAL_DMA_Start_IT+0x1f8>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d045      	beq.n	80024f6 <HAL_DMA_Start_IT+0xee>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a65      	ldr	r2, [pc, #404]	; (8002604 <HAL_DMA_Start_IT+0x1fc>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d040      	beq.n	80024f6 <HAL_DMA_Start_IT+0xee>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a63      	ldr	r2, [pc, #396]	; (8002608 <HAL_DMA_Start_IT+0x200>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d03b      	beq.n	80024f6 <HAL_DMA_Start_IT+0xee>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a62      	ldr	r2, [pc, #392]	; (800260c <HAL_DMA_Start_IT+0x204>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d036      	beq.n	80024f6 <HAL_DMA_Start_IT+0xee>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a60      	ldr	r2, [pc, #384]	; (8002610 <HAL_DMA_Start_IT+0x208>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d031      	beq.n	80024f6 <HAL_DMA_Start_IT+0xee>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a5f      	ldr	r2, [pc, #380]	; (8002614 <HAL_DMA_Start_IT+0x20c>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d02c      	beq.n	80024f6 <HAL_DMA_Start_IT+0xee>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a5d      	ldr	r2, [pc, #372]	; (8002618 <HAL_DMA_Start_IT+0x210>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d027      	beq.n	80024f6 <HAL_DMA_Start_IT+0xee>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a5c      	ldr	r2, [pc, #368]	; (800261c <HAL_DMA_Start_IT+0x214>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d022      	beq.n	80024f6 <HAL_DMA_Start_IT+0xee>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a5a      	ldr	r2, [pc, #360]	; (8002620 <HAL_DMA_Start_IT+0x218>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d01d      	beq.n	80024f6 <HAL_DMA_Start_IT+0xee>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a59      	ldr	r2, [pc, #356]	; (8002624 <HAL_DMA_Start_IT+0x21c>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d018      	beq.n	80024f6 <HAL_DMA_Start_IT+0xee>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a57      	ldr	r2, [pc, #348]	; (8002628 <HAL_DMA_Start_IT+0x220>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d013      	beq.n	80024f6 <HAL_DMA_Start_IT+0xee>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a56      	ldr	r2, [pc, #344]	; (800262c <HAL_DMA_Start_IT+0x224>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d00e      	beq.n	80024f6 <HAL_DMA_Start_IT+0xee>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a54      	ldr	r2, [pc, #336]	; (8002630 <HAL_DMA_Start_IT+0x228>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d009      	beq.n	80024f6 <HAL_DMA_Start_IT+0xee>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a53      	ldr	r2, [pc, #332]	; (8002634 <HAL_DMA_Start_IT+0x22c>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d004      	beq.n	80024f6 <HAL_DMA_Start_IT+0xee>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a51      	ldr	r2, [pc, #324]	; (8002638 <HAL_DMA_Start_IT+0x230>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d108      	bne.n	8002508 <HAL_DMA_Start_IT+0x100>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0201 	bic.w	r2, r2, #1
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	e007      	b.n	8002518 <HAL_DMA_Start_IT+0x110>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0201 	bic.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	68b9      	ldr	r1, [r7, #8]
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f001 fb56 	bl	8003bd0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a34      	ldr	r2, [pc, #208]	; (80025fc <HAL_DMA_Start_IT+0x1f4>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d04a      	beq.n	80025c4 <HAL_DMA_Start_IT+0x1bc>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a33      	ldr	r2, [pc, #204]	; (8002600 <HAL_DMA_Start_IT+0x1f8>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d045      	beq.n	80025c4 <HAL_DMA_Start_IT+0x1bc>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a31      	ldr	r2, [pc, #196]	; (8002604 <HAL_DMA_Start_IT+0x1fc>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d040      	beq.n	80025c4 <HAL_DMA_Start_IT+0x1bc>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a30      	ldr	r2, [pc, #192]	; (8002608 <HAL_DMA_Start_IT+0x200>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d03b      	beq.n	80025c4 <HAL_DMA_Start_IT+0x1bc>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a2e      	ldr	r2, [pc, #184]	; (800260c <HAL_DMA_Start_IT+0x204>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d036      	beq.n	80025c4 <HAL_DMA_Start_IT+0x1bc>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a2d      	ldr	r2, [pc, #180]	; (8002610 <HAL_DMA_Start_IT+0x208>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d031      	beq.n	80025c4 <HAL_DMA_Start_IT+0x1bc>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a2b      	ldr	r2, [pc, #172]	; (8002614 <HAL_DMA_Start_IT+0x20c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d02c      	beq.n	80025c4 <HAL_DMA_Start_IT+0x1bc>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a2a      	ldr	r2, [pc, #168]	; (8002618 <HAL_DMA_Start_IT+0x210>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d027      	beq.n	80025c4 <HAL_DMA_Start_IT+0x1bc>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a28      	ldr	r2, [pc, #160]	; (800261c <HAL_DMA_Start_IT+0x214>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d022      	beq.n	80025c4 <HAL_DMA_Start_IT+0x1bc>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a27      	ldr	r2, [pc, #156]	; (8002620 <HAL_DMA_Start_IT+0x218>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d01d      	beq.n	80025c4 <HAL_DMA_Start_IT+0x1bc>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a25      	ldr	r2, [pc, #148]	; (8002624 <HAL_DMA_Start_IT+0x21c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d018      	beq.n	80025c4 <HAL_DMA_Start_IT+0x1bc>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a24      	ldr	r2, [pc, #144]	; (8002628 <HAL_DMA_Start_IT+0x220>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d013      	beq.n	80025c4 <HAL_DMA_Start_IT+0x1bc>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a22      	ldr	r2, [pc, #136]	; (800262c <HAL_DMA_Start_IT+0x224>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d00e      	beq.n	80025c4 <HAL_DMA_Start_IT+0x1bc>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a21      	ldr	r2, [pc, #132]	; (8002630 <HAL_DMA_Start_IT+0x228>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d009      	beq.n	80025c4 <HAL_DMA_Start_IT+0x1bc>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a1f      	ldr	r2, [pc, #124]	; (8002634 <HAL_DMA_Start_IT+0x22c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d004      	beq.n	80025c4 <HAL_DMA_Start_IT+0x1bc>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a1e      	ldr	r2, [pc, #120]	; (8002638 <HAL_DMA_Start_IT+0x230>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d101      	bne.n	80025c8 <HAL_DMA_Start_IT+0x1c0>
 80025c4:	2301      	movs	r3, #1
 80025c6:	e000      	b.n	80025ca <HAL_DMA_Start_IT+0x1c2>
 80025c8:	2300      	movs	r3, #0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d036      	beq.n	800263c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f023 021e 	bic.w	r2, r3, #30
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f042 0216 	orr.w	r2, r2, #22
 80025e0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d03e      	beq.n	8002668 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f042 0208 	orr.w	r2, r2, #8
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	e035      	b.n	8002668 <HAL_DMA_Start_IT+0x260>
 80025fc:	40020010 	.word	0x40020010
 8002600:	40020028 	.word	0x40020028
 8002604:	40020040 	.word	0x40020040
 8002608:	40020058 	.word	0x40020058
 800260c:	40020070 	.word	0x40020070
 8002610:	40020088 	.word	0x40020088
 8002614:	400200a0 	.word	0x400200a0
 8002618:	400200b8 	.word	0x400200b8
 800261c:	40020410 	.word	0x40020410
 8002620:	40020428 	.word	0x40020428
 8002624:	40020440 	.word	0x40020440
 8002628:	40020458 	.word	0x40020458
 800262c:	40020470 	.word	0x40020470
 8002630:	40020488 	.word	0x40020488
 8002634:	400204a0 	.word	0x400204a0
 8002638:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f023 020e 	bic.w	r2, r3, #14
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 020a 	orr.w	r2, r2, #10
 800264e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	2b00      	cmp	r3, #0
 8002656:	d007      	beq.n	8002668 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0204 	orr.w	r2, r2, #4
 8002666:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a83      	ldr	r2, [pc, #524]	; (800287c <HAL_DMA_Start_IT+0x474>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d072      	beq.n	8002758 <HAL_DMA_Start_IT+0x350>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a82      	ldr	r2, [pc, #520]	; (8002880 <HAL_DMA_Start_IT+0x478>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d06d      	beq.n	8002758 <HAL_DMA_Start_IT+0x350>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a80      	ldr	r2, [pc, #512]	; (8002884 <HAL_DMA_Start_IT+0x47c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d068      	beq.n	8002758 <HAL_DMA_Start_IT+0x350>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a7f      	ldr	r2, [pc, #508]	; (8002888 <HAL_DMA_Start_IT+0x480>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d063      	beq.n	8002758 <HAL_DMA_Start_IT+0x350>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a7d      	ldr	r2, [pc, #500]	; (800288c <HAL_DMA_Start_IT+0x484>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d05e      	beq.n	8002758 <HAL_DMA_Start_IT+0x350>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a7c      	ldr	r2, [pc, #496]	; (8002890 <HAL_DMA_Start_IT+0x488>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d059      	beq.n	8002758 <HAL_DMA_Start_IT+0x350>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a7a      	ldr	r2, [pc, #488]	; (8002894 <HAL_DMA_Start_IT+0x48c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d054      	beq.n	8002758 <HAL_DMA_Start_IT+0x350>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a79      	ldr	r2, [pc, #484]	; (8002898 <HAL_DMA_Start_IT+0x490>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d04f      	beq.n	8002758 <HAL_DMA_Start_IT+0x350>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a77      	ldr	r2, [pc, #476]	; (800289c <HAL_DMA_Start_IT+0x494>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d04a      	beq.n	8002758 <HAL_DMA_Start_IT+0x350>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a76      	ldr	r2, [pc, #472]	; (80028a0 <HAL_DMA_Start_IT+0x498>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d045      	beq.n	8002758 <HAL_DMA_Start_IT+0x350>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a74      	ldr	r2, [pc, #464]	; (80028a4 <HAL_DMA_Start_IT+0x49c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d040      	beq.n	8002758 <HAL_DMA_Start_IT+0x350>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a73      	ldr	r2, [pc, #460]	; (80028a8 <HAL_DMA_Start_IT+0x4a0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d03b      	beq.n	8002758 <HAL_DMA_Start_IT+0x350>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a71      	ldr	r2, [pc, #452]	; (80028ac <HAL_DMA_Start_IT+0x4a4>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d036      	beq.n	8002758 <HAL_DMA_Start_IT+0x350>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a70      	ldr	r2, [pc, #448]	; (80028b0 <HAL_DMA_Start_IT+0x4a8>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d031      	beq.n	8002758 <HAL_DMA_Start_IT+0x350>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a6e      	ldr	r2, [pc, #440]	; (80028b4 <HAL_DMA_Start_IT+0x4ac>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d02c      	beq.n	8002758 <HAL_DMA_Start_IT+0x350>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a6d      	ldr	r2, [pc, #436]	; (80028b8 <HAL_DMA_Start_IT+0x4b0>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d027      	beq.n	8002758 <HAL_DMA_Start_IT+0x350>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a6b      	ldr	r2, [pc, #428]	; (80028bc <HAL_DMA_Start_IT+0x4b4>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d022      	beq.n	8002758 <HAL_DMA_Start_IT+0x350>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a6a      	ldr	r2, [pc, #424]	; (80028c0 <HAL_DMA_Start_IT+0x4b8>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d01d      	beq.n	8002758 <HAL_DMA_Start_IT+0x350>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a68      	ldr	r2, [pc, #416]	; (80028c4 <HAL_DMA_Start_IT+0x4bc>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d018      	beq.n	8002758 <HAL_DMA_Start_IT+0x350>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a67      	ldr	r2, [pc, #412]	; (80028c8 <HAL_DMA_Start_IT+0x4c0>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d013      	beq.n	8002758 <HAL_DMA_Start_IT+0x350>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a65      	ldr	r2, [pc, #404]	; (80028cc <HAL_DMA_Start_IT+0x4c4>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00e      	beq.n	8002758 <HAL_DMA_Start_IT+0x350>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a64      	ldr	r2, [pc, #400]	; (80028d0 <HAL_DMA_Start_IT+0x4c8>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d009      	beq.n	8002758 <HAL_DMA_Start_IT+0x350>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a62      	ldr	r2, [pc, #392]	; (80028d4 <HAL_DMA_Start_IT+0x4cc>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d004      	beq.n	8002758 <HAL_DMA_Start_IT+0x350>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a61      	ldr	r2, [pc, #388]	; (80028d8 <HAL_DMA_Start_IT+0x4d0>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d101      	bne.n	800275c <HAL_DMA_Start_IT+0x354>
 8002758:	2301      	movs	r3, #1
 800275a:	e000      	b.n	800275e <HAL_DMA_Start_IT+0x356>
 800275c:	2300      	movs	r3, #0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d01a      	beq.n	8002798 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d007      	beq.n	8002780 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800277a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800277e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002784:	2b00      	cmp	r3, #0
 8002786:	d007      	beq.n	8002798 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002792:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002796:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a37      	ldr	r2, [pc, #220]	; (800287c <HAL_DMA_Start_IT+0x474>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d04a      	beq.n	8002838 <HAL_DMA_Start_IT+0x430>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a36      	ldr	r2, [pc, #216]	; (8002880 <HAL_DMA_Start_IT+0x478>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d045      	beq.n	8002838 <HAL_DMA_Start_IT+0x430>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a34      	ldr	r2, [pc, #208]	; (8002884 <HAL_DMA_Start_IT+0x47c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d040      	beq.n	8002838 <HAL_DMA_Start_IT+0x430>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a33      	ldr	r2, [pc, #204]	; (8002888 <HAL_DMA_Start_IT+0x480>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d03b      	beq.n	8002838 <HAL_DMA_Start_IT+0x430>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a31      	ldr	r2, [pc, #196]	; (800288c <HAL_DMA_Start_IT+0x484>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d036      	beq.n	8002838 <HAL_DMA_Start_IT+0x430>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a30      	ldr	r2, [pc, #192]	; (8002890 <HAL_DMA_Start_IT+0x488>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d031      	beq.n	8002838 <HAL_DMA_Start_IT+0x430>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a2e      	ldr	r2, [pc, #184]	; (8002894 <HAL_DMA_Start_IT+0x48c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d02c      	beq.n	8002838 <HAL_DMA_Start_IT+0x430>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a2d      	ldr	r2, [pc, #180]	; (8002898 <HAL_DMA_Start_IT+0x490>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d027      	beq.n	8002838 <HAL_DMA_Start_IT+0x430>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a2b      	ldr	r2, [pc, #172]	; (800289c <HAL_DMA_Start_IT+0x494>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d022      	beq.n	8002838 <HAL_DMA_Start_IT+0x430>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a2a      	ldr	r2, [pc, #168]	; (80028a0 <HAL_DMA_Start_IT+0x498>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d01d      	beq.n	8002838 <HAL_DMA_Start_IT+0x430>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a28      	ldr	r2, [pc, #160]	; (80028a4 <HAL_DMA_Start_IT+0x49c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d018      	beq.n	8002838 <HAL_DMA_Start_IT+0x430>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a27      	ldr	r2, [pc, #156]	; (80028a8 <HAL_DMA_Start_IT+0x4a0>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d013      	beq.n	8002838 <HAL_DMA_Start_IT+0x430>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a25      	ldr	r2, [pc, #148]	; (80028ac <HAL_DMA_Start_IT+0x4a4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d00e      	beq.n	8002838 <HAL_DMA_Start_IT+0x430>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a24      	ldr	r2, [pc, #144]	; (80028b0 <HAL_DMA_Start_IT+0x4a8>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d009      	beq.n	8002838 <HAL_DMA_Start_IT+0x430>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a22      	ldr	r2, [pc, #136]	; (80028b4 <HAL_DMA_Start_IT+0x4ac>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d004      	beq.n	8002838 <HAL_DMA_Start_IT+0x430>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a21      	ldr	r2, [pc, #132]	; (80028b8 <HAL_DMA_Start_IT+0x4b0>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d108      	bne.n	800284a <HAL_DMA_Start_IT+0x442>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	e012      	b.n	8002870 <HAL_DMA_Start_IT+0x468>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 0201 	orr.w	r2, r2, #1
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	e009      	b.n	8002870 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002862:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002870:	7dfb      	ldrb	r3, [r7, #23]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3718      	adds	r7, #24
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40020010 	.word	0x40020010
 8002880:	40020028 	.word	0x40020028
 8002884:	40020040 	.word	0x40020040
 8002888:	40020058 	.word	0x40020058
 800288c:	40020070 	.word	0x40020070
 8002890:	40020088 	.word	0x40020088
 8002894:	400200a0 	.word	0x400200a0
 8002898:	400200b8 	.word	0x400200b8
 800289c:	40020410 	.word	0x40020410
 80028a0:	40020428 	.word	0x40020428
 80028a4:	40020440 	.word	0x40020440
 80028a8:	40020458 	.word	0x40020458
 80028ac:	40020470 	.word	0x40020470
 80028b0:	40020488 	.word	0x40020488
 80028b4:	400204a0 	.word	0x400204a0
 80028b8:	400204b8 	.word	0x400204b8
 80028bc:	58025408 	.word	0x58025408
 80028c0:	5802541c 	.word	0x5802541c
 80028c4:	58025430 	.word	0x58025430
 80028c8:	58025444 	.word	0x58025444
 80028cc:	58025458 	.word	0x58025458
 80028d0:	5802546c 	.word	0x5802546c
 80028d4:	58025480 	.word	0x58025480
 80028d8:	58025494 	.word	0x58025494

080028dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e205      	b.n	8002cfa <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d004      	beq.n	8002904 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2280      	movs	r2, #128	; 0x80
 80028fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e1fa      	b.n	8002cfa <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a8c      	ldr	r2, [pc, #560]	; (8002b3c <HAL_DMA_Abort_IT+0x260>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d04a      	beq.n	80029a4 <HAL_DMA_Abort_IT+0xc8>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a8b      	ldr	r2, [pc, #556]	; (8002b40 <HAL_DMA_Abort_IT+0x264>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d045      	beq.n	80029a4 <HAL_DMA_Abort_IT+0xc8>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a89      	ldr	r2, [pc, #548]	; (8002b44 <HAL_DMA_Abort_IT+0x268>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d040      	beq.n	80029a4 <HAL_DMA_Abort_IT+0xc8>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a88      	ldr	r2, [pc, #544]	; (8002b48 <HAL_DMA_Abort_IT+0x26c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d03b      	beq.n	80029a4 <HAL_DMA_Abort_IT+0xc8>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a86      	ldr	r2, [pc, #536]	; (8002b4c <HAL_DMA_Abort_IT+0x270>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d036      	beq.n	80029a4 <HAL_DMA_Abort_IT+0xc8>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a85      	ldr	r2, [pc, #532]	; (8002b50 <HAL_DMA_Abort_IT+0x274>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d031      	beq.n	80029a4 <HAL_DMA_Abort_IT+0xc8>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a83      	ldr	r2, [pc, #524]	; (8002b54 <HAL_DMA_Abort_IT+0x278>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d02c      	beq.n	80029a4 <HAL_DMA_Abort_IT+0xc8>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a82      	ldr	r2, [pc, #520]	; (8002b58 <HAL_DMA_Abort_IT+0x27c>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d027      	beq.n	80029a4 <HAL_DMA_Abort_IT+0xc8>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a80      	ldr	r2, [pc, #512]	; (8002b5c <HAL_DMA_Abort_IT+0x280>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d022      	beq.n	80029a4 <HAL_DMA_Abort_IT+0xc8>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a7f      	ldr	r2, [pc, #508]	; (8002b60 <HAL_DMA_Abort_IT+0x284>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d01d      	beq.n	80029a4 <HAL_DMA_Abort_IT+0xc8>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a7d      	ldr	r2, [pc, #500]	; (8002b64 <HAL_DMA_Abort_IT+0x288>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d018      	beq.n	80029a4 <HAL_DMA_Abort_IT+0xc8>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a7c      	ldr	r2, [pc, #496]	; (8002b68 <HAL_DMA_Abort_IT+0x28c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d013      	beq.n	80029a4 <HAL_DMA_Abort_IT+0xc8>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a7a      	ldr	r2, [pc, #488]	; (8002b6c <HAL_DMA_Abort_IT+0x290>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d00e      	beq.n	80029a4 <HAL_DMA_Abort_IT+0xc8>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a79      	ldr	r2, [pc, #484]	; (8002b70 <HAL_DMA_Abort_IT+0x294>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d009      	beq.n	80029a4 <HAL_DMA_Abort_IT+0xc8>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a77      	ldr	r2, [pc, #476]	; (8002b74 <HAL_DMA_Abort_IT+0x298>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d004      	beq.n	80029a4 <HAL_DMA_Abort_IT+0xc8>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a76      	ldr	r2, [pc, #472]	; (8002b78 <HAL_DMA_Abort_IT+0x29c>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d101      	bne.n	80029a8 <HAL_DMA_Abort_IT+0xcc>
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <HAL_DMA_Abort_IT+0xce>
 80029a8:	2300      	movs	r3, #0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d065      	beq.n	8002a7a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2204      	movs	r2, #4
 80029b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a60      	ldr	r2, [pc, #384]	; (8002b3c <HAL_DMA_Abort_IT+0x260>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d04a      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x17a>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a5e      	ldr	r2, [pc, #376]	; (8002b40 <HAL_DMA_Abort_IT+0x264>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d045      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x17a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a5d      	ldr	r2, [pc, #372]	; (8002b44 <HAL_DMA_Abort_IT+0x268>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d040      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x17a>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a5b      	ldr	r2, [pc, #364]	; (8002b48 <HAL_DMA_Abort_IT+0x26c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d03b      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x17a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a5a      	ldr	r2, [pc, #360]	; (8002b4c <HAL_DMA_Abort_IT+0x270>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d036      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x17a>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a58      	ldr	r2, [pc, #352]	; (8002b50 <HAL_DMA_Abort_IT+0x274>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d031      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x17a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a57      	ldr	r2, [pc, #348]	; (8002b54 <HAL_DMA_Abort_IT+0x278>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d02c      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x17a>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a55      	ldr	r2, [pc, #340]	; (8002b58 <HAL_DMA_Abort_IT+0x27c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d027      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x17a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a54      	ldr	r2, [pc, #336]	; (8002b5c <HAL_DMA_Abort_IT+0x280>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d022      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x17a>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a52      	ldr	r2, [pc, #328]	; (8002b60 <HAL_DMA_Abort_IT+0x284>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d01d      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x17a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a51      	ldr	r2, [pc, #324]	; (8002b64 <HAL_DMA_Abort_IT+0x288>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d018      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x17a>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a4f      	ldr	r2, [pc, #316]	; (8002b68 <HAL_DMA_Abort_IT+0x28c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d013      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x17a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a4e      	ldr	r2, [pc, #312]	; (8002b6c <HAL_DMA_Abort_IT+0x290>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d00e      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x17a>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a4c      	ldr	r2, [pc, #304]	; (8002b70 <HAL_DMA_Abort_IT+0x294>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d009      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x17a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a4b      	ldr	r2, [pc, #300]	; (8002b74 <HAL_DMA_Abort_IT+0x298>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d004      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x17a>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a49      	ldr	r2, [pc, #292]	; (8002b78 <HAL_DMA_Abort_IT+0x29c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d108      	bne.n	8002a68 <HAL_DMA_Abort_IT+0x18c>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0201 	bic.w	r2, r2, #1
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	e147      	b.n	8002cf8 <HAL_DMA_Abort_IT+0x41c>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0201 	bic.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	e13e      	b.n	8002cf8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 020e 	bic.w	r2, r2, #14
 8002a88:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a2b      	ldr	r2, [pc, #172]	; (8002b3c <HAL_DMA_Abort_IT+0x260>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d04a      	beq.n	8002b2a <HAL_DMA_Abort_IT+0x24e>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a29      	ldr	r2, [pc, #164]	; (8002b40 <HAL_DMA_Abort_IT+0x264>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d045      	beq.n	8002b2a <HAL_DMA_Abort_IT+0x24e>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a28      	ldr	r2, [pc, #160]	; (8002b44 <HAL_DMA_Abort_IT+0x268>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d040      	beq.n	8002b2a <HAL_DMA_Abort_IT+0x24e>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a26      	ldr	r2, [pc, #152]	; (8002b48 <HAL_DMA_Abort_IT+0x26c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d03b      	beq.n	8002b2a <HAL_DMA_Abort_IT+0x24e>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a25      	ldr	r2, [pc, #148]	; (8002b4c <HAL_DMA_Abort_IT+0x270>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d036      	beq.n	8002b2a <HAL_DMA_Abort_IT+0x24e>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a23      	ldr	r2, [pc, #140]	; (8002b50 <HAL_DMA_Abort_IT+0x274>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d031      	beq.n	8002b2a <HAL_DMA_Abort_IT+0x24e>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a22      	ldr	r2, [pc, #136]	; (8002b54 <HAL_DMA_Abort_IT+0x278>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d02c      	beq.n	8002b2a <HAL_DMA_Abort_IT+0x24e>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a20      	ldr	r2, [pc, #128]	; (8002b58 <HAL_DMA_Abort_IT+0x27c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d027      	beq.n	8002b2a <HAL_DMA_Abort_IT+0x24e>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a1f      	ldr	r2, [pc, #124]	; (8002b5c <HAL_DMA_Abort_IT+0x280>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d022      	beq.n	8002b2a <HAL_DMA_Abort_IT+0x24e>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a1d      	ldr	r2, [pc, #116]	; (8002b60 <HAL_DMA_Abort_IT+0x284>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d01d      	beq.n	8002b2a <HAL_DMA_Abort_IT+0x24e>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a1c      	ldr	r2, [pc, #112]	; (8002b64 <HAL_DMA_Abort_IT+0x288>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d018      	beq.n	8002b2a <HAL_DMA_Abort_IT+0x24e>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a1a      	ldr	r2, [pc, #104]	; (8002b68 <HAL_DMA_Abort_IT+0x28c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d013      	beq.n	8002b2a <HAL_DMA_Abort_IT+0x24e>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a19      	ldr	r2, [pc, #100]	; (8002b6c <HAL_DMA_Abort_IT+0x290>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d00e      	beq.n	8002b2a <HAL_DMA_Abort_IT+0x24e>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a17      	ldr	r2, [pc, #92]	; (8002b70 <HAL_DMA_Abort_IT+0x294>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d009      	beq.n	8002b2a <HAL_DMA_Abort_IT+0x24e>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a16      	ldr	r2, [pc, #88]	; (8002b74 <HAL_DMA_Abort_IT+0x298>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d004      	beq.n	8002b2a <HAL_DMA_Abort_IT+0x24e>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a14      	ldr	r2, [pc, #80]	; (8002b78 <HAL_DMA_Abort_IT+0x29c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d128      	bne.n	8002b7c <HAL_DMA_Abort_IT+0x2a0>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0201 	bic.w	r2, r2, #1
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	e027      	b.n	8002b8c <HAL_DMA_Abort_IT+0x2b0>
 8002b3c:	40020010 	.word	0x40020010
 8002b40:	40020028 	.word	0x40020028
 8002b44:	40020040 	.word	0x40020040
 8002b48:	40020058 	.word	0x40020058
 8002b4c:	40020070 	.word	0x40020070
 8002b50:	40020088 	.word	0x40020088
 8002b54:	400200a0 	.word	0x400200a0
 8002b58:	400200b8 	.word	0x400200b8
 8002b5c:	40020410 	.word	0x40020410
 8002b60:	40020428 	.word	0x40020428
 8002b64:	40020440 	.word	0x40020440
 8002b68:	40020458 	.word	0x40020458
 8002b6c:	40020470 	.word	0x40020470
 8002b70:	40020488 	.word	0x40020488
 8002b74:	400204a0 	.word	0x400204a0
 8002b78:	400204b8 	.word	0x400204b8
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0201 	bic.w	r2, r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a5c      	ldr	r2, [pc, #368]	; (8002d04 <HAL_DMA_Abort_IT+0x428>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d072      	beq.n	8002c7c <HAL_DMA_Abort_IT+0x3a0>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a5b      	ldr	r2, [pc, #364]	; (8002d08 <HAL_DMA_Abort_IT+0x42c>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d06d      	beq.n	8002c7c <HAL_DMA_Abort_IT+0x3a0>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a59      	ldr	r2, [pc, #356]	; (8002d0c <HAL_DMA_Abort_IT+0x430>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d068      	beq.n	8002c7c <HAL_DMA_Abort_IT+0x3a0>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a58      	ldr	r2, [pc, #352]	; (8002d10 <HAL_DMA_Abort_IT+0x434>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d063      	beq.n	8002c7c <HAL_DMA_Abort_IT+0x3a0>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a56      	ldr	r2, [pc, #344]	; (8002d14 <HAL_DMA_Abort_IT+0x438>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d05e      	beq.n	8002c7c <HAL_DMA_Abort_IT+0x3a0>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a55      	ldr	r2, [pc, #340]	; (8002d18 <HAL_DMA_Abort_IT+0x43c>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d059      	beq.n	8002c7c <HAL_DMA_Abort_IT+0x3a0>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a53      	ldr	r2, [pc, #332]	; (8002d1c <HAL_DMA_Abort_IT+0x440>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d054      	beq.n	8002c7c <HAL_DMA_Abort_IT+0x3a0>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a52      	ldr	r2, [pc, #328]	; (8002d20 <HAL_DMA_Abort_IT+0x444>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d04f      	beq.n	8002c7c <HAL_DMA_Abort_IT+0x3a0>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a50      	ldr	r2, [pc, #320]	; (8002d24 <HAL_DMA_Abort_IT+0x448>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d04a      	beq.n	8002c7c <HAL_DMA_Abort_IT+0x3a0>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a4f      	ldr	r2, [pc, #316]	; (8002d28 <HAL_DMA_Abort_IT+0x44c>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d045      	beq.n	8002c7c <HAL_DMA_Abort_IT+0x3a0>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a4d      	ldr	r2, [pc, #308]	; (8002d2c <HAL_DMA_Abort_IT+0x450>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d040      	beq.n	8002c7c <HAL_DMA_Abort_IT+0x3a0>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a4c      	ldr	r2, [pc, #304]	; (8002d30 <HAL_DMA_Abort_IT+0x454>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d03b      	beq.n	8002c7c <HAL_DMA_Abort_IT+0x3a0>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a4a      	ldr	r2, [pc, #296]	; (8002d34 <HAL_DMA_Abort_IT+0x458>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d036      	beq.n	8002c7c <HAL_DMA_Abort_IT+0x3a0>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a49      	ldr	r2, [pc, #292]	; (8002d38 <HAL_DMA_Abort_IT+0x45c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d031      	beq.n	8002c7c <HAL_DMA_Abort_IT+0x3a0>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a47      	ldr	r2, [pc, #284]	; (8002d3c <HAL_DMA_Abort_IT+0x460>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d02c      	beq.n	8002c7c <HAL_DMA_Abort_IT+0x3a0>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a46      	ldr	r2, [pc, #280]	; (8002d40 <HAL_DMA_Abort_IT+0x464>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d027      	beq.n	8002c7c <HAL_DMA_Abort_IT+0x3a0>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a44      	ldr	r2, [pc, #272]	; (8002d44 <HAL_DMA_Abort_IT+0x468>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d022      	beq.n	8002c7c <HAL_DMA_Abort_IT+0x3a0>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a43      	ldr	r2, [pc, #268]	; (8002d48 <HAL_DMA_Abort_IT+0x46c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d01d      	beq.n	8002c7c <HAL_DMA_Abort_IT+0x3a0>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a41      	ldr	r2, [pc, #260]	; (8002d4c <HAL_DMA_Abort_IT+0x470>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d018      	beq.n	8002c7c <HAL_DMA_Abort_IT+0x3a0>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a40      	ldr	r2, [pc, #256]	; (8002d50 <HAL_DMA_Abort_IT+0x474>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d013      	beq.n	8002c7c <HAL_DMA_Abort_IT+0x3a0>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a3e      	ldr	r2, [pc, #248]	; (8002d54 <HAL_DMA_Abort_IT+0x478>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d00e      	beq.n	8002c7c <HAL_DMA_Abort_IT+0x3a0>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a3d      	ldr	r2, [pc, #244]	; (8002d58 <HAL_DMA_Abort_IT+0x47c>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d009      	beq.n	8002c7c <HAL_DMA_Abort_IT+0x3a0>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a3b      	ldr	r2, [pc, #236]	; (8002d5c <HAL_DMA_Abort_IT+0x480>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d004      	beq.n	8002c7c <HAL_DMA_Abort_IT+0x3a0>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a3a      	ldr	r2, [pc, #232]	; (8002d60 <HAL_DMA_Abort_IT+0x484>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d101      	bne.n	8002c80 <HAL_DMA_Abort_IT+0x3a4>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e000      	b.n	8002c82 <HAL_DMA_Abort_IT+0x3a6>
 8002c80:	2300      	movs	r3, #0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d028      	beq.n	8002cd8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c94:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca0:	f003 031f 	and.w	r3, r3, #31
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	409a      	lsls	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002cb4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00c      	beq.n	8002cd8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ccc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002cd6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40020010 	.word	0x40020010
 8002d08:	40020028 	.word	0x40020028
 8002d0c:	40020040 	.word	0x40020040
 8002d10:	40020058 	.word	0x40020058
 8002d14:	40020070 	.word	0x40020070
 8002d18:	40020088 	.word	0x40020088
 8002d1c:	400200a0 	.word	0x400200a0
 8002d20:	400200b8 	.word	0x400200b8
 8002d24:	40020410 	.word	0x40020410
 8002d28:	40020428 	.word	0x40020428
 8002d2c:	40020440 	.word	0x40020440
 8002d30:	40020458 	.word	0x40020458
 8002d34:	40020470 	.word	0x40020470
 8002d38:	40020488 	.word	0x40020488
 8002d3c:	400204a0 	.word	0x400204a0
 8002d40:	400204b8 	.word	0x400204b8
 8002d44:	58025408 	.word	0x58025408
 8002d48:	5802541c 	.word	0x5802541c
 8002d4c:	58025430 	.word	0x58025430
 8002d50:	58025444 	.word	0x58025444
 8002d54:	58025458 	.word	0x58025458
 8002d58:	5802546c 	.word	0x5802546c
 8002d5c:	58025480 	.word	0x58025480
 8002d60:	58025494 	.word	0x58025494

08002d64 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08a      	sub	sp, #40	; 0x28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d70:	4b67      	ldr	r3, [pc, #412]	; (8002f10 <HAL_DMA_IRQHandler+0x1ac>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a67      	ldr	r2, [pc, #412]	; (8002f14 <HAL_DMA_IRQHandler+0x1b0>)
 8002d76:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7a:	0a9b      	lsrs	r3, r3, #10
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d82:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d88:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a5f      	ldr	r2, [pc, #380]	; (8002f18 <HAL_DMA_IRQHandler+0x1b4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d04a      	beq.n	8002e36 <HAL_DMA_IRQHandler+0xd2>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a5d      	ldr	r2, [pc, #372]	; (8002f1c <HAL_DMA_IRQHandler+0x1b8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d045      	beq.n	8002e36 <HAL_DMA_IRQHandler+0xd2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a5c      	ldr	r2, [pc, #368]	; (8002f20 <HAL_DMA_IRQHandler+0x1bc>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d040      	beq.n	8002e36 <HAL_DMA_IRQHandler+0xd2>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a5a      	ldr	r2, [pc, #360]	; (8002f24 <HAL_DMA_IRQHandler+0x1c0>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d03b      	beq.n	8002e36 <HAL_DMA_IRQHandler+0xd2>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a59      	ldr	r2, [pc, #356]	; (8002f28 <HAL_DMA_IRQHandler+0x1c4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d036      	beq.n	8002e36 <HAL_DMA_IRQHandler+0xd2>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a57      	ldr	r2, [pc, #348]	; (8002f2c <HAL_DMA_IRQHandler+0x1c8>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d031      	beq.n	8002e36 <HAL_DMA_IRQHandler+0xd2>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a56      	ldr	r2, [pc, #344]	; (8002f30 <HAL_DMA_IRQHandler+0x1cc>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d02c      	beq.n	8002e36 <HAL_DMA_IRQHandler+0xd2>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a54      	ldr	r2, [pc, #336]	; (8002f34 <HAL_DMA_IRQHandler+0x1d0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d027      	beq.n	8002e36 <HAL_DMA_IRQHandler+0xd2>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a53      	ldr	r2, [pc, #332]	; (8002f38 <HAL_DMA_IRQHandler+0x1d4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d022      	beq.n	8002e36 <HAL_DMA_IRQHandler+0xd2>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a51      	ldr	r2, [pc, #324]	; (8002f3c <HAL_DMA_IRQHandler+0x1d8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d01d      	beq.n	8002e36 <HAL_DMA_IRQHandler+0xd2>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a50      	ldr	r2, [pc, #320]	; (8002f40 <HAL_DMA_IRQHandler+0x1dc>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d018      	beq.n	8002e36 <HAL_DMA_IRQHandler+0xd2>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a4e      	ldr	r2, [pc, #312]	; (8002f44 <HAL_DMA_IRQHandler+0x1e0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d013      	beq.n	8002e36 <HAL_DMA_IRQHandler+0xd2>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a4d      	ldr	r2, [pc, #308]	; (8002f48 <HAL_DMA_IRQHandler+0x1e4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d00e      	beq.n	8002e36 <HAL_DMA_IRQHandler+0xd2>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a4b      	ldr	r2, [pc, #300]	; (8002f4c <HAL_DMA_IRQHandler+0x1e8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d009      	beq.n	8002e36 <HAL_DMA_IRQHandler+0xd2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a4a      	ldr	r2, [pc, #296]	; (8002f50 <HAL_DMA_IRQHandler+0x1ec>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d004      	beq.n	8002e36 <HAL_DMA_IRQHandler+0xd2>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a48      	ldr	r2, [pc, #288]	; (8002f54 <HAL_DMA_IRQHandler+0x1f0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d101      	bne.n	8002e3a <HAL_DMA_IRQHandler+0xd6>
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <HAL_DMA_IRQHandler+0xd8>
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 842b 	beq.w	8003698 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e46:	f003 031f 	and.w	r3, r3, #31
 8002e4a:	2208      	movs	r2, #8
 8002e4c:	409a      	lsls	r2, r3
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 80a2 	beq.w	8002f9c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a2e      	ldr	r2, [pc, #184]	; (8002f18 <HAL_DMA_IRQHandler+0x1b4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d04a      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x194>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a2d      	ldr	r2, [pc, #180]	; (8002f1c <HAL_DMA_IRQHandler+0x1b8>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d045      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x194>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a2b      	ldr	r2, [pc, #172]	; (8002f20 <HAL_DMA_IRQHandler+0x1bc>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d040      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x194>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a2a      	ldr	r2, [pc, #168]	; (8002f24 <HAL_DMA_IRQHandler+0x1c0>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d03b      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x194>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a28      	ldr	r2, [pc, #160]	; (8002f28 <HAL_DMA_IRQHandler+0x1c4>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d036      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x194>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a27      	ldr	r2, [pc, #156]	; (8002f2c <HAL_DMA_IRQHandler+0x1c8>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d031      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x194>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a25      	ldr	r2, [pc, #148]	; (8002f30 <HAL_DMA_IRQHandler+0x1cc>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d02c      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x194>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a24      	ldr	r2, [pc, #144]	; (8002f34 <HAL_DMA_IRQHandler+0x1d0>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d027      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x194>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a22      	ldr	r2, [pc, #136]	; (8002f38 <HAL_DMA_IRQHandler+0x1d4>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d022      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x194>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a21      	ldr	r2, [pc, #132]	; (8002f3c <HAL_DMA_IRQHandler+0x1d8>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d01d      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x194>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a1f      	ldr	r2, [pc, #124]	; (8002f40 <HAL_DMA_IRQHandler+0x1dc>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d018      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x194>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a1e      	ldr	r2, [pc, #120]	; (8002f44 <HAL_DMA_IRQHandler+0x1e0>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d013      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x194>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a1c      	ldr	r2, [pc, #112]	; (8002f48 <HAL_DMA_IRQHandler+0x1e4>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d00e      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x194>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a1b      	ldr	r2, [pc, #108]	; (8002f4c <HAL_DMA_IRQHandler+0x1e8>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d009      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x194>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a19      	ldr	r2, [pc, #100]	; (8002f50 <HAL_DMA_IRQHandler+0x1ec>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d004      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x194>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a18      	ldr	r2, [pc, #96]	; (8002f54 <HAL_DMA_IRQHandler+0x1f0>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d12f      	bne.n	8002f58 <HAL_DMA_IRQHandler+0x1f4>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0304 	and.w	r3, r3, #4
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	bf14      	ite	ne
 8002f06:	2301      	movne	r3, #1
 8002f08:	2300      	moveq	r3, #0
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	e02e      	b.n	8002f6c <HAL_DMA_IRQHandler+0x208>
 8002f0e:	bf00      	nop
 8002f10:	24000000 	.word	0x24000000
 8002f14:	1b4e81b5 	.word	0x1b4e81b5
 8002f18:	40020010 	.word	0x40020010
 8002f1c:	40020028 	.word	0x40020028
 8002f20:	40020040 	.word	0x40020040
 8002f24:	40020058 	.word	0x40020058
 8002f28:	40020070 	.word	0x40020070
 8002f2c:	40020088 	.word	0x40020088
 8002f30:	400200a0 	.word	0x400200a0
 8002f34:	400200b8 	.word	0x400200b8
 8002f38:	40020410 	.word	0x40020410
 8002f3c:	40020428 	.word	0x40020428
 8002f40:	40020440 	.word	0x40020440
 8002f44:	40020458 	.word	0x40020458
 8002f48:	40020470 	.word	0x40020470
 8002f4c:	40020488 	.word	0x40020488
 8002f50:	400204a0 	.word	0x400204a0
 8002f54:	400204b8 	.word	0x400204b8
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	bf14      	ite	ne
 8002f66:	2301      	movne	r3, #1
 8002f68:	2300      	moveq	r3, #0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d015      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0204 	bic.w	r2, r2, #4
 8002f7e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f84:	f003 031f 	and.w	r3, r3, #31
 8002f88:	2208      	movs	r2, #8
 8002f8a:	409a      	lsls	r2, r3
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f94:	f043 0201 	orr.w	r2, r3, #1
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa0:	f003 031f 	and.w	r3, r3, #31
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d06e      	beq.n	8003090 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a69      	ldr	r2, [pc, #420]	; (800315c <HAL_DMA_IRQHandler+0x3f8>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d04a      	beq.n	8003052 <HAL_DMA_IRQHandler+0x2ee>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a67      	ldr	r2, [pc, #412]	; (8003160 <HAL_DMA_IRQHandler+0x3fc>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d045      	beq.n	8003052 <HAL_DMA_IRQHandler+0x2ee>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a66      	ldr	r2, [pc, #408]	; (8003164 <HAL_DMA_IRQHandler+0x400>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d040      	beq.n	8003052 <HAL_DMA_IRQHandler+0x2ee>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a64      	ldr	r2, [pc, #400]	; (8003168 <HAL_DMA_IRQHandler+0x404>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d03b      	beq.n	8003052 <HAL_DMA_IRQHandler+0x2ee>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a63      	ldr	r2, [pc, #396]	; (800316c <HAL_DMA_IRQHandler+0x408>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d036      	beq.n	8003052 <HAL_DMA_IRQHandler+0x2ee>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a61      	ldr	r2, [pc, #388]	; (8003170 <HAL_DMA_IRQHandler+0x40c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d031      	beq.n	8003052 <HAL_DMA_IRQHandler+0x2ee>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a60      	ldr	r2, [pc, #384]	; (8003174 <HAL_DMA_IRQHandler+0x410>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d02c      	beq.n	8003052 <HAL_DMA_IRQHandler+0x2ee>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a5e      	ldr	r2, [pc, #376]	; (8003178 <HAL_DMA_IRQHandler+0x414>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d027      	beq.n	8003052 <HAL_DMA_IRQHandler+0x2ee>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a5d      	ldr	r2, [pc, #372]	; (800317c <HAL_DMA_IRQHandler+0x418>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d022      	beq.n	8003052 <HAL_DMA_IRQHandler+0x2ee>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a5b      	ldr	r2, [pc, #364]	; (8003180 <HAL_DMA_IRQHandler+0x41c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d01d      	beq.n	8003052 <HAL_DMA_IRQHandler+0x2ee>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a5a      	ldr	r2, [pc, #360]	; (8003184 <HAL_DMA_IRQHandler+0x420>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d018      	beq.n	8003052 <HAL_DMA_IRQHandler+0x2ee>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a58      	ldr	r2, [pc, #352]	; (8003188 <HAL_DMA_IRQHandler+0x424>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d013      	beq.n	8003052 <HAL_DMA_IRQHandler+0x2ee>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a57      	ldr	r2, [pc, #348]	; (800318c <HAL_DMA_IRQHandler+0x428>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00e      	beq.n	8003052 <HAL_DMA_IRQHandler+0x2ee>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a55      	ldr	r2, [pc, #340]	; (8003190 <HAL_DMA_IRQHandler+0x42c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d009      	beq.n	8003052 <HAL_DMA_IRQHandler+0x2ee>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a54      	ldr	r2, [pc, #336]	; (8003194 <HAL_DMA_IRQHandler+0x430>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d004      	beq.n	8003052 <HAL_DMA_IRQHandler+0x2ee>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a52      	ldr	r2, [pc, #328]	; (8003198 <HAL_DMA_IRQHandler+0x434>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d10a      	bne.n	8003068 <HAL_DMA_IRQHandler+0x304>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305c:	2b00      	cmp	r3, #0
 800305e:	bf14      	ite	ne
 8003060:	2301      	movne	r3, #1
 8003062:	2300      	moveq	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	e003      	b.n	8003070 <HAL_DMA_IRQHandler+0x30c>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2300      	movs	r3, #0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00d      	beq.n	8003090 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	2201      	movs	r2, #1
 800307e:	409a      	lsls	r2, r3
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003088:	f043 0202 	orr.w	r2, r3, #2
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003094:	f003 031f 	and.w	r3, r3, #31
 8003098:	2204      	movs	r2, #4
 800309a:	409a      	lsls	r2, r3
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	4013      	ands	r3, r2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 808f 	beq.w	80031c4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a2c      	ldr	r2, [pc, #176]	; (800315c <HAL_DMA_IRQHandler+0x3f8>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d04a      	beq.n	8003146 <HAL_DMA_IRQHandler+0x3e2>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a2a      	ldr	r2, [pc, #168]	; (8003160 <HAL_DMA_IRQHandler+0x3fc>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d045      	beq.n	8003146 <HAL_DMA_IRQHandler+0x3e2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a29      	ldr	r2, [pc, #164]	; (8003164 <HAL_DMA_IRQHandler+0x400>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d040      	beq.n	8003146 <HAL_DMA_IRQHandler+0x3e2>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a27      	ldr	r2, [pc, #156]	; (8003168 <HAL_DMA_IRQHandler+0x404>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d03b      	beq.n	8003146 <HAL_DMA_IRQHandler+0x3e2>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a26      	ldr	r2, [pc, #152]	; (800316c <HAL_DMA_IRQHandler+0x408>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d036      	beq.n	8003146 <HAL_DMA_IRQHandler+0x3e2>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a24      	ldr	r2, [pc, #144]	; (8003170 <HAL_DMA_IRQHandler+0x40c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d031      	beq.n	8003146 <HAL_DMA_IRQHandler+0x3e2>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a23      	ldr	r2, [pc, #140]	; (8003174 <HAL_DMA_IRQHandler+0x410>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d02c      	beq.n	8003146 <HAL_DMA_IRQHandler+0x3e2>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a21      	ldr	r2, [pc, #132]	; (8003178 <HAL_DMA_IRQHandler+0x414>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d027      	beq.n	8003146 <HAL_DMA_IRQHandler+0x3e2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a20      	ldr	r2, [pc, #128]	; (800317c <HAL_DMA_IRQHandler+0x418>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d022      	beq.n	8003146 <HAL_DMA_IRQHandler+0x3e2>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a1e      	ldr	r2, [pc, #120]	; (8003180 <HAL_DMA_IRQHandler+0x41c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d01d      	beq.n	8003146 <HAL_DMA_IRQHandler+0x3e2>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a1d      	ldr	r2, [pc, #116]	; (8003184 <HAL_DMA_IRQHandler+0x420>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d018      	beq.n	8003146 <HAL_DMA_IRQHandler+0x3e2>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a1b      	ldr	r2, [pc, #108]	; (8003188 <HAL_DMA_IRQHandler+0x424>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d013      	beq.n	8003146 <HAL_DMA_IRQHandler+0x3e2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a1a      	ldr	r2, [pc, #104]	; (800318c <HAL_DMA_IRQHandler+0x428>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d00e      	beq.n	8003146 <HAL_DMA_IRQHandler+0x3e2>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a18      	ldr	r2, [pc, #96]	; (8003190 <HAL_DMA_IRQHandler+0x42c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d009      	beq.n	8003146 <HAL_DMA_IRQHandler+0x3e2>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a17      	ldr	r2, [pc, #92]	; (8003194 <HAL_DMA_IRQHandler+0x430>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d004      	beq.n	8003146 <HAL_DMA_IRQHandler+0x3e2>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a15      	ldr	r2, [pc, #84]	; (8003198 <HAL_DMA_IRQHandler+0x434>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d12a      	bne.n	800319c <HAL_DMA_IRQHandler+0x438>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	bf14      	ite	ne
 8003154:	2301      	movne	r3, #1
 8003156:	2300      	moveq	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	e023      	b.n	80031a4 <HAL_DMA_IRQHandler+0x440>
 800315c:	40020010 	.word	0x40020010
 8003160:	40020028 	.word	0x40020028
 8003164:	40020040 	.word	0x40020040
 8003168:	40020058 	.word	0x40020058
 800316c:	40020070 	.word	0x40020070
 8003170:	40020088 	.word	0x40020088
 8003174:	400200a0 	.word	0x400200a0
 8003178:	400200b8 	.word	0x400200b8
 800317c:	40020410 	.word	0x40020410
 8003180:	40020428 	.word	0x40020428
 8003184:	40020440 	.word	0x40020440
 8003188:	40020458 	.word	0x40020458
 800318c:	40020470 	.word	0x40020470
 8003190:	40020488 	.word	0x40020488
 8003194:	400204a0 	.word	0x400204a0
 8003198:	400204b8 	.word	0x400204b8
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2300      	movs	r3, #0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00d      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ac:	f003 031f 	and.w	r3, r3, #31
 80031b0:	2204      	movs	r2, #4
 80031b2:	409a      	lsls	r2, r3
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031bc:	f043 0204 	orr.w	r2, r3, #4
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c8:	f003 031f 	and.w	r3, r3, #31
 80031cc:	2210      	movs	r2, #16
 80031ce:	409a      	lsls	r2, r3
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 80a6 	beq.w	8003326 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a85      	ldr	r2, [pc, #532]	; (80033f4 <HAL_DMA_IRQHandler+0x690>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d04a      	beq.n	800327a <HAL_DMA_IRQHandler+0x516>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a83      	ldr	r2, [pc, #524]	; (80033f8 <HAL_DMA_IRQHandler+0x694>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d045      	beq.n	800327a <HAL_DMA_IRQHandler+0x516>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a82      	ldr	r2, [pc, #520]	; (80033fc <HAL_DMA_IRQHandler+0x698>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d040      	beq.n	800327a <HAL_DMA_IRQHandler+0x516>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a80      	ldr	r2, [pc, #512]	; (8003400 <HAL_DMA_IRQHandler+0x69c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d03b      	beq.n	800327a <HAL_DMA_IRQHandler+0x516>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a7f      	ldr	r2, [pc, #508]	; (8003404 <HAL_DMA_IRQHandler+0x6a0>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d036      	beq.n	800327a <HAL_DMA_IRQHandler+0x516>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a7d      	ldr	r2, [pc, #500]	; (8003408 <HAL_DMA_IRQHandler+0x6a4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d031      	beq.n	800327a <HAL_DMA_IRQHandler+0x516>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a7c      	ldr	r2, [pc, #496]	; (800340c <HAL_DMA_IRQHandler+0x6a8>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d02c      	beq.n	800327a <HAL_DMA_IRQHandler+0x516>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a7a      	ldr	r2, [pc, #488]	; (8003410 <HAL_DMA_IRQHandler+0x6ac>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d027      	beq.n	800327a <HAL_DMA_IRQHandler+0x516>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a79      	ldr	r2, [pc, #484]	; (8003414 <HAL_DMA_IRQHandler+0x6b0>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d022      	beq.n	800327a <HAL_DMA_IRQHandler+0x516>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a77      	ldr	r2, [pc, #476]	; (8003418 <HAL_DMA_IRQHandler+0x6b4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d01d      	beq.n	800327a <HAL_DMA_IRQHandler+0x516>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a76      	ldr	r2, [pc, #472]	; (800341c <HAL_DMA_IRQHandler+0x6b8>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d018      	beq.n	800327a <HAL_DMA_IRQHandler+0x516>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a74      	ldr	r2, [pc, #464]	; (8003420 <HAL_DMA_IRQHandler+0x6bc>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d013      	beq.n	800327a <HAL_DMA_IRQHandler+0x516>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a73      	ldr	r2, [pc, #460]	; (8003424 <HAL_DMA_IRQHandler+0x6c0>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d00e      	beq.n	800327a <HAL_DMA_IRQHandler+0x516>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a71      	ldr	r2, [pc, #452]	; (8003428 <HAL_DMA_IRQHandler+0x6c4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d009      	beq.n	800327a <HAL_DMA_IRQHandler+0x516>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a70      	ldr	r2, [pc, #448]	; (800342c <HAL_DMA_IRQHandler+0x6c8>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d004      	beq.n	800327a <HAL_DMA_IRQHandler+0x516>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a6e      	ldr	r2, [pc, #440]	; (8003430 <HAL_DMA_IRQHandler+0x6cc>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d10a      	bne.n	8003290 <HAL_DMA_IRQHandler+0x52c>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	2b00      	cmp	r3, #0
 8003286:	bf14      	ite	ne
 8003288:	2301      	movne	r3, #1
 800328a:	2300      	moveq	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	e009      	b.n	80032a4 <HAL_DMA_IRQHandler+0x540>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0304 	and.w	r3, r3, #4
 800329a:	2b00      	cmp	r3, #0
 800329c:	bf14      	ite	ne
 800329e:	2301      	movne	r3, #1
 80032a0:	2300      	moveq	r3, #0
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d03e      	beq.n	8003326 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ac:	f003 031f 	and.w	r3, r3, #31
 80032b0:	2210      	movs	r2, #16
 80032b2:	409a      	lsls	r2, r3
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d018      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d108      	bne.n	80032e6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d024      	beq.n	8003326 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	4798      	blx	r3
 80032e4:	e01f      	b.n	8003326 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d01b      	beq.n	8003326 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	4798      	blx	r3
 80032f6:	e016      	b.n	8003326 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003302:	2b00      	cmp	r3, #0
 8003304:	d107      	bne.n	8003316 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0208 	bic.w	r2, r2, #8
 8003314:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332a:	f003 031f 	and.w	r3, r3, #31
 800332e:	2220      	movs	r2, #32
 8003330:	409a      	lsls	r2, r3
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	4013      	ands	r3, r2
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 8110 	beq.w	800355c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a2c      	ldr	r2, [pc, #176]	; (80033f4 <HAL_DMA_IRQHandler+0x690>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d04a      	beq.n	80033dc <HAL_DMA_IRQHandler+0x678>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a2b      	ldr	r2, [pc, #172]	; (80033f8 <HAL_DMA_IRQHandler+0x694>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d045      	beq.n	80033dc <HAL_DMA_IRQHandler+0x678>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a29      	ldr	r2, [pc, #164]	; (80033fc <HAL_DMA_IRQHandler+0x698>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d040      	beq.n	80033dc <HAL_DMA_IRQHandler+0x678>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a28      	ldr	r2, [pc, #160]	; (8003400 <HAL_DMA_IRQHandler+0x69c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d03b      	beq.n	80033dc <HAL_DMA_IRQHandler+0x678>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a26      	ldr	r2, [pc, #152]	; (8003404 <HAL_DMA_IRQHandler+0x6a0>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d036      	beq.n	80033dc <HAL_DMA_IRQHandler+0x678>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a25      	ldr	r2, [pc, #148]	; (8003408 <HAL_DMA_IRQHandler+0x6a4>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d031      	beq.n	80033dc <HAL_DMA_IRQHandler+0x678>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a23      	ldr	r2, [pc, #140]	; (800340c <HAL_DMA_IRQHandler+0x6a8>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d02c      	beq.n	80033dc <HAL_DMA_IRQHandler+0x678>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a22      	ldr	r2, [pc, #136]	; (8003410 <HAL_DMA_IRQHandler+0x6ac>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d027      	beq.n	80033dc <HAL_DMA_IRQHandler+0x678>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a20      	ldr	r2, [pc, #128]	; (8003414 <HAL_DMA_IRQHandler+0x6b0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d022      	beq.n	80033dc <HAL_DMA_IRQHandler+0x678>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a1f      	ldr	r2, [pc, #124]	; (8003418 <HAL_DMA_IRQHandler+0x6b4>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d01d      	beq.n	80033dc <HAL_DMA_IRQHandler+0x678>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a1d      	ldr	r2, [pc, #116]	; (800341c <HAL_DMA_IRQHandler+0x6b8>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d018      	beq.n	80033dc <HAL_DMA_IRQHandler+0x678>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a1c      	ldr	r2, [pc, #112]	; (8003420 <HAL_DMA_IRQHandler+0x6bc>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d013      	beq.n	80033dc <HAL_DMA_IRQHandler+0x678>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a1a      	ldr	r2, [pc, #104]	; (8003424 <HAL_DMA_IRQHandler+0x6c0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d00e      	beq.n	80033dc <HAL_DMA_IRQHandler+0x678>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a19      	ldr	r2, [pc, #100]	; (8003428 <HAL_DMA_IRQHandler+0x6c4>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d009      	beq.n	80033dc <HAL_DMA_IRQHandler+0x678>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a17      	ldr	r2, [pc, #92]	; (800342c <HAL_DMA_IRQHandler+0x6c8>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d004      	beq.n	80033dc <HAL_DMA_IRQHandler+0x678>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a16      	ldr	r2, [pc, #88]	; (8003430 <HAL_DMA_IRQHandler+0x6cc>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d12b      	bne.n	8003434 <HAL_DMA_IRQHandler+0x6d0>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	bf14      	ite	ne
 80033ea:	2301      	movne	r3, #1
 80033ec:	2300      	moveq	r3, #0
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	e02a      	b.n	8003448 <HAL_DMA_IRQHandler+0x6e4>
 80033f2:	bf00      	nop
 80033f4:	40020010 	.word	0x40020010
 80033f8:	40020028 	.word	0x40020028
 80033fc:	40020040 	.word	0x40020040
 8003400:	40020058 	.word	0x40020058
 8003404:	40020070 	.word	0x40020070
 8003408:	40020088 	.word	0x40020088
 800340c:	400200a0 	.word	0x400200a0
 8003410:	400200b8 	.word	0x400200b8
 8003414:	40020410 	.word	0x40020410
 8003418:	40020428 	.word	0x40020428
 800341c:	40020440 	.word	0x40020440
 8003420:	40020458 	.word	0x40020458
 8003424:	40020470 	.word	0x40020470
 8003428:	40020488 	.word	0x40020488
 800342c:	400204a0 	.word	0x400204a0
 8003430:	400204b8 	.word	0x400204b8
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	bf14      	ite	ne
 8003442:	2301      	movne	r3, #1
 8003444:	2300      	moveq	r3, #0
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 8087 	beq.w	800355c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003452:	f003 031f 	and.w	r3, r3, #31
 8003456:	2220      	movs	r2, #32
 8003458:	409a      	lsls	r2, r3
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b04      	cmp	r3, #4
 8003468:	d139      	bne.n	80034de <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0216 	bic.w	r2, r2, #22
 8003478:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695a      	ldr	r2, [r3, #20]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003488:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	2b00      	cmp	r3, #0
 8003490:	d103      	bne.n	800349a <HAL_DMA_IRQHandler+0x736>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003496:	2b00      	cmp	r3, #0
 8003498:	d007      	beq.n	80034aa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0208 	bic.w	r2, r2, #8
 80034a8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ae:	f003 031f 	and.w	r3, r3, #31
 80034b2:	223f      	movs	r2, #63	; 0x3f
 80034b4:	409a      	lsls	r2, r3
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 834a 	beq.w	8003b68 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	4798      	blx	r3
          }
          return;
 80034dc:	e344      	b.n	8003b68 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d018      	beq.n	800351e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d108      	bne.n	800350c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d02c      	beq.n	800355c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	4798      	blx	r3
 800350a:	e027      	b.n	800355c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003510:	2b00      	cmp	r3, #0
 8003512:	d023      	beq.n	800355c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	4798      	blx	r3
 800351c:	e01e      	b.n	800355c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10f      	bne.n	800354c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0210 	bic.w	r2, r2, #16
 800353a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 8306 	beq.w	8003b72 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 8088 	beq.w	8003684 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2204      	movs	r2, #4
 8003578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a7a      	ldr	r2, [pc, #488]	; (800376c <HAL_DMA_IRQHandler+0xa08>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d04a      	beq.n	800361c <HAL_DMA_IRQHandler+0x8b8>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a79      	ldr	r2, [pc, #484]	; (8003770 <HAL_DMA_IRQHandler+0xa0c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d045      	beq.n	800361c <HAL_DMA_IRQHandler+0x8b8>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a77      	ldr	r2, [pc, #476]	; (8003774 <HAL_DMA_IRQHandler+0xa10>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d040      	beq.n	800361c <HAL_DMA_IRQHandler+0x8b8>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a76      	ldr	r2, [pc, #472]	; (8003778 <HAL_DMA_IRQHandler+0xa14>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d03b      	beq.n	800361c <HAL_DMA_IRQHandler+0x8b8>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a74      	ldr	r2, [pc, #464]	; (800377c <HAL_DMA_IRQHandler+0xa18>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d036      	beq.n	800361c <HAL_DMA_IRQHandler+0x8b8>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a73      	ldr	r2, [pc, #460]	; (8003780 <HAL_DMA_IRQHandler+0xa1c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d031      	beq.n	800361c <HAL_DMA_IRQHandler+0x8b8>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a71      	ldr	r2, [pc, #452]	; (8003784 <HAL_DMA_IRQHandler+0xa20>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d02c      	beq.n	800361c <HAL_DMA_IRQHandler+0x8b8>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a70      	ldr	r2, [pc, #448]	; (8003788 <HAL_DMA_IRQHandler+0xa24>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d027      	beq.n	800361c <HAL_DMA_IRQHandler+0x8b8>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a6e      	ldr	r2, [pc, #440]	; (800378c <HAL_DMA_IRQHandler+0xa28>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d022      	beq.n	800361c <HAL_DMA_IRQHandler+0x8b8>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a6d      	ldr	r2, [pc, #436]	; (8003790 <HAL_DMA_IRQHandler+0xa2c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d01d      	beq.n	800361c <HAL_DMA_IRQHandler+0x8b8>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a6b      	ldr	r2, [pc, #428]	; (8003794 <HAL_DMA_IRQHandler+0xa30>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d018      	beq.n	800361c <HAL_DMA_IRQHandler+0x8b8>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a6a      	ldr	r2, [pc, #424]	; (8003798 <HAL_DMA_IRQHandler+0xa34>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d013      	beq.n	800361c <HAL_DMA_IRQHandler+0x8b8>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a68      	ldr	r2, [pc, #416]	; (800379c <HAL_DMA_IRQHandler+0xa38>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00e      	beq.n	800361c <HAL_DMA_IRQHandler+0x8b8>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a67      	ldr	r2, [pc, #412]	; (80037a0 <HAL_DMA_IRQHandler+0xa3c>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d009      	beq.n	800361c <HAL_DMA_IRQHandler+0x8b8>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a65      	ldr	r2, [pc, #404]	; (80037a4 <HAL_DMA_IRQHandler+0xa40>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d004      	beq.n	800361c <HAL_DMA_IRQHandler+0x8b8>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a64      	ldr	r2, [pc, #400]	; (80037a8 <HAL_DMA_IRQHandler+0xa44>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d108      	bne.n	800362e <HAL_DMA_IRQHandler+0x8ca>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0201 	bic.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	e007      	b.n	800363e <HAL_DMA_IRQHandler+0x8da>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0201 	bic.w	r2, r2, #1
 800363c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	3301      	adds	r3, #1
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003646:	429a      	cmp	r2, r3
 8003648:	d307      	bcc.n	800365a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1f2      	bne.n	800363e <HAL_DMA_IRQHandler+0x8da>
 8003658:	e000      	b.n	800365c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800365a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d004      	beq.n	8003674 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2203      	movs	r2, #3
 800366e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003672:	e003      	b.n	800367c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 8272 	beq.w	8003b72 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	4798      	blx	r3
 8003696:	e26c      	b.n	8003b72 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a43      	ldr	r2, [pc, #268]	; (80037ac <HAL_DMA_IRQHandler+0xa48>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d022      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x984>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a42      	ldr	r2, [pc, #264]	; (80037b0 <HAL_DMA_IRQHandler+0xa4c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d01d      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x984>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a40      	ldr	r2, [pc, #256]	; (80037b4 <HAL_DMA_IRQHandler+0xa50>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d018      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x984>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a3f      	ldr	r2, [pc, #252]	; (80037b8 <HAL_DMA_IRQHandler+0xa54>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d013      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x984>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a3d      	ldr	r2, [pc, #244]	; (80037bc <HAL_DMA_IRQHandler+0xa58>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00e      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x984>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a3c      	ldr	r2, [pc, #240]	; (80037c0 <HAL_DMA_IRQHandler+0xa5c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d009      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x984>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a3a      	ldr	r2, [pc, #232]	; (80037c4 <HAL_DMA_IRQHandler+0xa60>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d004      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x984>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a39      	ldr	r2, [pc, #228]	; (80037c8 <HAL_DMA_IRQHandler+0xa64>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d101      	bne.n	80036ec <HAL_DMA_IRQHandler+0x988>
 80036e8:	2301      	movs	r3, #1
 80036ea:	e000      	b.n	80036ee <HAL_DMA_IRQHandler+0x98a>
 80036ec:	2300      	movs	r3, #0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 823f 	beq.w	8003b72 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003700:	f003 031f 	and.w	r3, r3, #31
 8003704:	2204      	movs	r2, #4
 8003706:	409a      	lsls	r2, r3
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	4013      	ands	r3, r2
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 80cd 	beq.w	80038ac <HAL_DMA_IRQHandler+0xb48>
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 80c7 	beq.w	80038ac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003722:	f003 031f 	and.w	r3, r3, #31
 8003726:	2204      	movs	r2, #4
 8003728:	409a      	lsls	r2, r3
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d049      	beq.n	80037cc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d109      	bne.n	8003756 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 8210 	beq.w	8003b6c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003754:	e20a      	b.n	8003b6c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 8206 	beq.w	8003b6c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003768:	e200      	b.n	8003b6c <HAL_DMA_IRQHandler+0xe08>
 800376a:	bf00      	nop
 800376c:	40020010 	.word	0x40020010
 8003770:	40020028 	.word	0x40020028
 8003774:	40020040 	.word	0x40020040
 8003778:	40020058 	.word	0x40020058
 800377c:	40020070 	.word	0x40020070
 8003780:	40020088 	.word	0x40020088
 8003784:	400200a0 	.word	0x400200a0
 8003788:	400200b8 	.word	0x400200b8
 800378c:	40020410 	.word	0x40020410
 8003790:	40020428 	.word	0x40020428
 8003794:	40020440 	.word	0x40020440
 8003798:	40020458 	.word	0x40020458
 800379c:	40020470 	.word	0x40020470
 80037a0:	40020488 	.word	0x40020488
 80037a4:	400204a0 	.word	0x400204a0
 80037a8:	400204b8 	.word	0x400204b8
 80037ac:	58025408 	.word	0x58025408
 80037b0:	5802541c 	.word	0x5802541c
 80037b4:	58025430 	.word	0x58025430
 80037b8:	58025444 	.word	0x58025444
 80037bc:	58025458 	.word	0x58025458
 80037c0:	5802546c 	.word	0x5802546c
 80037c4:	58025480 	.word	0x58025480
 80037c8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	f003 0320 	and.w	r3, r3, #32
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d160      	bne.n	8003898 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a8c      	ldr	r2, [pc, #560]	; (8003a0c <HAL_DMA_IRQHandler+0xca8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d04a      	beq.n	8003876 <HAL_DMA_IRQHandler+0xb12>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a8a      	ldr	r2, [pc, #552]	; (8003a10 <HAL_DMA_IRQHandler+0xcac>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d045      	beq.n	8003876 <HAL_DMA_IRQHandler+0xb12>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a89      	ldr	r2, [pc, #548]	; (8003a14 <HAL_DMA_IRQHandler+0xcb0>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d040      	beq.n	8003876 <HAL_DMA_IRQHandler+0xb12>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a87      	ldr	r2, [pc, #540]	; (8003a18 <HAL_DMA_IRQHandler+0xcb4>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d03b      	beq.n	8003876 <HAL_DMA_IRQHandler+0xb12>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a86      	ldr	r2, [pc, #536]	; (8003a1c <HAL_DMA_IRQHandler+0xcb8>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d036      	beq.n	8003876 <HAL_DMA_IRQHandler+0xb12>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a84      	ldr	r2, [pc, #528]	; (8003a20 <HAL_DMA_IRQHandler+0xcbc>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d031      	beq.n	8003876 <HAL_DMA_IRQHandler+0xb12>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a83      	ldr	r2, [pc, #524]	; (8003a24 <HAL_DMA_IRQHandler+0xcc0>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d02c      	beq.n	8003876 <HAL_DMA_IRQHandler+0xb12>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a81      	ldr	r2, [pc, #516]	; (8003a28 <HAL_DMA_IRQHandler+0xcc4>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d027      	beq.n	8003876 <HAL_DMA_IRQHandler+0xb12>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a80      	ldr	r2, [pc, #512]	; (8003a2c <HAL_DMA_IRQHandler+0xcc8>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d022      	beq.n	8003876 <HAL_DMA_IRQHandler+0xb12>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a7e      	ldr	r2, [pc, #504]	; (8003a30 <HAL_DMA_IRQHandler+0xccc>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d01d      	beq.n	8003876 <HAL_DMA_IRQHandler+0xb12>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a7d      	ldr	r2, [pc, #500]	; (8003a34 <HAL_DMA_IRQHandler+0xcd0>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d018      	beq.n	8003876 <HAL_DMA_IRQHandler+0xb12>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a7b      	ldr	r2, [pc, #492]	; (8003a38 <HAL_DMA_IRQHandler+0xcd4>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d013      	beq.n	8003876 <HAL_DMA_IRQHandler+0xb12>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a7a      	ldr	r2, [pc, #488]	; (8003a3c <HAL_DMA_IRQHandler+0xcd8>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d00e      	beq.n	8003876 <HAL_DMA_IRQHandler+0xb12>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a78      	ldr	r2, [pc, #480]	; (8003a40 <HAL_DMA_IRQHandler+0xcdc>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d009      	beq.n	8003876 <HAL_DMA_IRQHandler+0xb12>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a77      	ldr	r2, [pc, #476]	; (8003a44 <HAL_DMA_IRQHandler+0xce0>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d004      	beq.n	8003876 <HAL_DMA_IRQHandler+0xb12>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a75      	ldr	r2, [pc, #468]	; (8003a48 <HAL_DMA_IRQHandler+0xce4>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d108      	bne.n	8003888 <HAL_DMA_IRQHandler+0xb24>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0208 	bic.w	r2, r2, #8
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	e007      	b.n	8003898 <HAL_DMA_IRQHandler+0xb34>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0204 	bic.w	r2, r2, #4
 8003896:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 8165 	beq.w	8003b6c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038aa:	e15f      	b.n	8003b6c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b0:	f003 031f 	and.w	r3, r3, #31
 80038b4:	2202      	movs	r2, #2
 80038b6:	409a      	lsls	r2, r3
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	4013      	ands	r3, r2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 80c5 	beq.w	8003a4c <HAL_DMA_IRQHandler+0xce8>
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 80bf 	beq.w	8003a4c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d2:	f003 031f 	and.w	r3, r3, #31
 80038d6:	2202      	movs	r2, #2
 80038d8:	409a      	lsls	r2, r3
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d018      	beq.n	800391a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d109      	bne.n	8003906 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 813a 	beq.w	8003b70 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003904:	e134      	b.n	8003b70 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 8130 	beq.w	8003b70 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003918:	e12a      	b.n	8003b70 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f003 0320 	and.w	r3, r3, #32
 8003920:	2b00      	cmp	r3, #0
 8003922:	d168      	bne.n	80039f6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a38      	ldr	r2, [pc, #224]	; (8003a0c <HAL_DMA_IRQHandler+0xca8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d04a      	beq.n	80039c4 <HAL_DMA_IRQHandler+0xc60>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a37      	ldr	r2, [pc, #220]	; (8003a10 <HAL_DMA_IRQHandler+0xcac>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d045      	beq.n	80039c4 <HAL_DMA_IRQHandler+0xc60>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a35      	ldr	r2, [pc, #212]	; (8003a14 <HAL_DMA_IRQHandler+0xcb0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d040      	beq.n	80039c4 <HAL_DMA_IRQHandler+0xc60>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a34      	ldr	r2, [pc, #208]	; (8003a18 <HAL_DMA_IRQHandler+0xcb4>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d03b      	beq.n	80039c4 <HAL_DMA_IRQHandler+0xc60>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a32      	ldr	r2, [pc, #200]	; (8003a1c <HAL_DMA_IRQHandler+0xcb8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d036      	beq.n	80039c4 <HAL_DMA_IRQHandler+0xc60>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a31      	ldr	r2, [pc, #196]	; (8003a20 <HAL_DMA_IRQHandler+0xcbc>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d031      	beq.n	80039c4 <HAL_DMA_IRQHandler+0xc60>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a2f      	ldr	r2, [pc, #188]	; (8003a24 <HAL_DMA_IRQHandler+0xcc0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d02c      	beq.n	80039c4 <HAL_DMA_IRQHandler+0xc60>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a2e      	ldr	r2, [pc, #184]	; (8003a28 <HAL_DMA_IRQHandler+0xcc4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d027      	beq.n	80039c4 <HAL_DMA_IRQHandler+0xc60>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a2c      	ldr	r2, [pc, #176]	; (8003a2c <HAL_DMA_IRQHandler+0xcc8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d022      	beq.n	80039c4 <HAL_DMA_IRQHandler+0xc60>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a2b      	ldr	r2, [pc, #172]	; (8003a30 <HAL_DMA_IRQHandler+0xccc>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d01d      	beq.n	80039c4 <HAL_DMA_IRQHandler+0xc60>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a29      	ldr	r2, [pc, #164]	; (8003a34 <HAL_DMA_IRQHandler+0xcd0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d018      	beq.n	80039c4 <HAL_DMA_IRQHandler+0xc60>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a28      	ldr	r2, [pc, #160]	; (8003a38 <HAL_DMA_IRQHandler+0xcd4>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d013      	beq.n	80039c4 <HAL_DMA_IRQHandler+0xc60>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a26      	ldr	r2, [pc, #152]	; (8003a3c <HAL_DMA_IRQHandler+0xcd8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d00e      	beq.n	80039c4 <HAL_DMA_IRQHandler+0xc60>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a25      	ldr	r2, [pc, #148]	; (8003a40 <HAL_DMA_IRQHandler+0xcdc>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d009      	beq.n	80039c4 <HAL_DMA_IRQHandler+0xc60>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a23      	ldr	r2, [pc, #140]	; (8003a44 <HAL_DMA_IRQHandler+0xce0>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d004      	beq.n	80039c4 <HAL_DMA_IRQHandler+0xc60>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a22      	ldr	r2, [pc, #136]	; (8003a48 <HAL_DMA_IRQHandler+0xce4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d108      	bne.n	80039d6 <HAL_DMA_IRQHandler+0xc72>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0214 	bic.w	r2, r2, #20
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	e007      	b.n	80039e6 <HAL_DMA_IRQHandler+0xc82>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 020a 	bic.w	r2, r2, #10
 80039e4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 80b8 	beq.w	8003b70 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a08:	e0b2      	b.n	8003b70 <HAL_DMA_IRQHandler+0xe0c>
 8003a0a:	bf00      	nop
 8003a0c:	40020010 	.word	0x40020010
 8003a10:	40020028 	.word	0x40020028
 8003a14:	40020040 	.word	0x40020040
 8003a18:	40020058 	.word	0x40020058
 8003a1c:	40020070 	.word	0x40020070
 8003a20:	40020088 	.word	0x40020088
 8003a24:	400200a0 	.word	0x400200a0
 8003a28:	400200b8 	.word	0x400200b8
 8003a2c:	40020410 	.word	0x40020410
 8003a30:	40020428 	.word	0x40020428
 8003a34:	40020440 	.word	0x40020440
 8003a38:	40020458 	.word	0x40020458
 8003a3c:	40020470 	.word	0x40020470
 8003a40:	40020488 	.word	0x40020488
 8003a44:	400204a0 	.word	0x400204a0
 8003a48:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a50:	f003 031f 	and.w	r3, r3, #31
 8003a54:	2208      	movs	r2, #8
 8003a56:	409a      	lsls	r2, r3
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 8088 	beq.w	8003b72 <HAL_DMA_IRQHandler+0xe0e>
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f003 0308 	and.w	r3, r3, #8
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 8082 	beq.w	8003b72 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a41      	ldr	r2, [pc, #260]	; (8003b78 <HAL_DMA_IRQHandler+0xe14>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d04a      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xdaa>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a3f      	ldr	r2, [pc, #252]	; (8003b7c <HAL_DMA_IRQHandler+0xe18>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d045      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xdaa>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a3e      	ldr	r2, [pc, #248]	; (8003b80 <HAL_DMA_IRQHandler+0xe1c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d040      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xdaa>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a3c      	ldr	r2, [pc, #240]	; (8003b84 <HAL_DMA_IRQHandler+0xe20>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d03b      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xdaa>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a3b      	ldr	r2, [pc, #236]	; (8003b88 <HAL_DMA_IRQHandler+0xe24>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d036      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xdaa>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a39      	ldr	r2, [pc, #228]	; (8003b8c <HAL_DMA_IRQHandler+0xe28>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d031      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xdaa>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a38      	ldr	r2, [pc, #224]	; (8003b90 <HAL_DMA_IRQHandler+0xe2c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d02c      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xdaa>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a36      	ldr	r2, [pc, #216]	; (8003b94 <HAL_DMA_IRQHandler+0xe30>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d027      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xdaa>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a35      	ldr	r2, [pc, #212]	; (8003b98 <HAL_DMA_IRQHandler+0xe34>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d022      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xdaa>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a33      	ldr	r2, [pc, #204]	; (8003b9c <HAL_DMA_IRQHandler+0xe38>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d01d      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xdaa>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a32      	ldr	r2, [pc, #200]	; (8003ba0 <HAL_DMA_IRQHandler+0xe3c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d018      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xdaa>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a30      	ldr	r2, [pc, #192]	; (8003ba4 <HAL_DMA_IRQHandler+0xe40>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d013      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xdaa>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a2f      	ldr	r2, [pc, #188]	; (8003ba8 <HAL_DMA_IRQHandler+0xe44>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d00e      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xdaa>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a2d      	ldr	r2, [pc, #180]	; (8003bac <HAL_DMA_IRQHandler+0xe48>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d009      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xdaa>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a2c      	ldr	r2, [pc, #176]	; (8003bb0 <HAL_DMA_IRQHandler+0xe4c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d004      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xdaa>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a2a      	ldr	r2, [pc, #168]	; (8003bb4 <HAL_DMA_IRQHandler+0xe50>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d108      	bne.n	8003b20 <HAL_DMA_IRQHandler+0xdbc>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 021c 	bic.w	r2, r2, #28
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	e007      	b.n	8003b30 <HAL_DMA_IRQHandler+0xdcc>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 020e 	bic.w	r2, r2, #14
 8003b2e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b34:	f003 031f 	and.w	r3, r3, #31
 8003b38:	2201      	movs	r2, #1
 8003b3a:	409a      	lsls	r2, r3
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d009      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	4798      	blx	r3
 8003b66:	e004      	b.n	8003b72 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003b68:	bf00      	nop
 8003b6a:	e002      	b.n	8003b72 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b6c:	bf00      	nop
 8003b6e:	e000      	b.n	8003b72 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b70:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003b72:	3728      	adds	r7, #40	; 0x28
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40020010 	.word	0x40020010
 8003b7c:	40020028 	.word	0x40020028
 8003b80:	40020040 	.word	0x40020040
 8003b84:	40020058 	.word	0x40020058
 8003b88:	40020070 	.word	0x40020070
 8003b8c:	40020088 	.word	0x40020088
 8003b90:	400200a0 	.word	0x400200a0
 8003b94:	400200b8 	.word	0x400200b8
 8003b98:	40020410 	.word	0x40020410
 8003b9c:	40020428 	.word	0x40020428
 8003ba0:	40020440 	.word	0x40020440
 8003ba4:	40020458 	.word	0x40020458
 8003ba8:	40020470 	.word	0x40020470
 8003bac:	40020488 	.word	0x40020488
 8003bb0:	400204a0 	.word	0x400204a0
 8003bb4:	400204b8 	.word	0x400204b8

08003bb8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b087      	sub	sp, #28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
 8003bdc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a84      	ldr	r2, [pc, #528]	; (8003e00 <DMA_SetConfig+0x230>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d072      	beq.n	8003cda <DMA_SetConfig+0x10a>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a82      	ldr	r2, [pc, #520]	; (8003e04 <DMA_SetConfig+0x234>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d06d      	beq.n	8003cda <DMA_SetConfig+0x10a>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a81      	ldr	r2, [pc, #516]	; (8003e08 <DMA_SetConfig+0x238>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d068      	beq.n	8003cda <DMA_SetConfig+0x10a>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a7f      	ldr	r2, [pc, #508]	; (8003e0c <DMA_SetConfig+0x23c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d063      	beq.n	8003cda <DMA_SetConfig+0x10a>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a7e      	ldr	r2, [pc, #504]	; (8003e10 <DMA_SetConfig+0x240>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d05e      	beq.n	8003cda <DMA_SetConfig+0x10a>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a7c      	ldr	r2, [pc, #496]	; (8003e14 <DMA_SetConfig+0x244>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d059      	beq.n	8003cda <DMA_SetConfig+0x10a>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a7b      	ldr	r2, [pc, #492]	; (8003e18 <DMA_SetConfig+0x248>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d054      	beq.n	8003cda <DMA_SetConfig+0x10a>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a79      	ldr	r2, [pc, #484]	; (8003e1c <DMA_SetConfig+0x24c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d04f      	beq.n	8003cda <DMA_SetConfig+0x10a>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a78      	ldr	r2, [pc, #480]	; (8003e20 <DMA_SetConfig+0x250>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d04a      	beq.n	8003cda <DMA_SetConfig+0x10a>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a76      	ldr	r2, [pc, #472]	; (8003e24 <DMA_SetConfig+0x254>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d045      	beq.n	8003cda <DMA_SetConfig+0x10a>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a75      	ldr	r2, [pc, #468]	; (8003e28 <DMA_SetConfig+0x258>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d040      	beq.n	8003cda <DMA_SetConfig+0x10a>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a73      	ldr	r2, [pc, #460]	; (8003e2c <DMA_SetConfig+0x25c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d03b      	beq.n	8003cda <DMA_SetConfig+0x10a>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a72      	ldr	r2, [pc, #456]	; (8003e30 <DMA_SetConfig+0x260>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d036      	beq.n	8003cda <DMA_SetConfig+0x10a>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a70      	ldr	r2, [pc, #448]	; (8003e34 <DMA_SetConfig+0x264>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d031      	beq.n	8003cda <DMA_SetConfig+0x10a>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a6f      	ldr	r2, [pc, #444]	; (8003e38 <DMA_SetConfig+0x268>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d02c      	beq.n	8003cda <DMA_SetConfig+0x10a>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a6d      	ldr	r2, [pc, #436]	; (8003e3c <DMA_SetConfig+0x26c>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d027      	beq.n	8003cda <DMA_SetConfig+0x10a>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a6c      	ldr	r2, [pc, #432]	; (8003e40 <DMA_SetConfig+0x270>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d022      	beq.n	8003cda <DMA_SetConfig+0x10a>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a6a      	ldr	r2, [pc, #424]	; (8003e44 <DMA_SetConfig+0x274>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d01d      	beq.n	8003cda <DMA_SetConfig+0x10a>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a69      	ldr	r2, [pc, #420]	; (8003e48 <DMA_SetConfig+0x278>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d018      	beq.n	8003cda <DMA_SetConfig+0x10a>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a67      	ldr	r2, [pc, #412]	; (8003e4c <DMA_SetConfig+0x27c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d013      	beq.n	8003cda <DMA_SetConfig+0x10a>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a66      	ldr	r2, [pc, #408]	; (8003e50 <DMA_SetConfig+0x280>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d00e      	beq.n	8003cda <DMA_SetConfig+0x10a>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a64      	ldr	r2, [pc, #400]	; (8003e54 <DMA_SetConfig+0x284>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d009      	beq.n	8003cda <DMA_SetConfig+0x10a>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a63      	ldr	r2, [pc, #396]	; (8003e58 <DMA_SetConfig+0x288>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d004      	beq.n	8003cda <DMA_SetConfig+0x10a>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a61      	ldr	r2, [pc, #388]	; (8003e5c <DMA_SetConfig+0x28c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d101      	bne.n	8003cde <DMA_SetConfig+0x10e>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <DMA_SetConfig+0x110>
 8003cde:	2300      	movs	r3, #0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00d      	beq.n	8003d00 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003cec:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d004      	beq.n	8003d00 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003cfe:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a3e      	ldr	r2, [pc, #248]	; (8003e00 <DMA_SetConfig+0x230>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d04a      	beq.n	8003da0 <DMA_SetConfig+0x1d0>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a3d      	ldr	r2, [pc, #244]	; (8003e04 <DMA_SetConfig+0x234>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d045      	beq.n	8003da0 <DMA_SetConfig+0x1d0>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a3b      	ldr	r2, [pc, #236]	; (8003e08 <DMA_SetConfig+0x238>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d040      	beq.n	8003da0 <DMA_SetConfig+0x1d0>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a3a      	ldr	r2, [pc, #232]	; (8003e0c <DMA_SetConfig+0x23c>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d03b      	beq.n	8003da0 <DMA_SetConfig+0x1d0>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a38      	ldr	r2, [pc, #224]	; (8003e10 <DMA_SetConfig+0x240>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d036      	beq.n	8003da0 <DMA_SetConfig+0x1d0>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a37      	ldr	r2, [pc, #220]	; (8003e14 <DMA_SetConfig+0x244>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d031      	beq.n	8003da0 <DMA_SetConfig+0x1d0>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a35      	ldr	r2, [pc, #212]	; (8003e18 <DMA_SetConfig+0x248>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d02c      	beq.n	8003da0 <DMA_SetConfig+0x1d0>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a34      	ldr	r2, [pc, #208]	; (8003e1c <DMA_SetConfig+0x24c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d027      	beq.n	8003da0 <DMA_SetConfig+0x1d0>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a32      	ldr	r2, [pc, #200]	; (8003e20 <DMA_SetConfig+0x250>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d022      	beq.n	8003da0 <DMA_SetConfig+0x1d0>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a31      	ldr	r2, [pc, #196]	; (8003e24 <DMA_SetConfig+0x254>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d01d      	beq.n	8003da0 <DMA_SetConfig+0x1d0>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a2f      	ldr	r2, [pc, #188]	; (8003e28 <DMA_SetConfig+0x258>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d018      	beq.n	8003da0 <DMA_SetConfig+0x1d0>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a2e      	ldr	r2, [pc, #184]	; (8003e2c <DMA_SetConfig+0x25c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d013      	beq.n	8003da0 <DMA_SetConfig+0x1d0>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a2c      	ldr	r2, [pc, #176]	; (8003e30 <DMA_SetConfig+0x260>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d00e      	beq.n	8003da0 <DMA_SetConfig+0x1d0>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a2b      	ldr	r2, [pc, #172]	; (8003e34 <DMA_SetConfig+0x264>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d009      	beq.n	8003da0 <DMA_SetConfig+0x1d0>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a29      	ldr	r2, [pc, #164]	; (8003e38 <DMA_SetConfig+0x268>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d004      	beq.n	8003da0 <DMA_SetConfig+0x1d0>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a28      	ldr	r2, [pc, #160]	; (8003e3c <DMA_SetConfig+0x26c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d101      	bne.n	8003da4 <DMA_SetConfig+0x1d4>
 8003da0:	2301      	movs	r3, #1
 8003da2:	e000      	b.n	8003da6 <DMA_SetConfig+0x1d6>
 8003da4:	2300      	movs	r3, #0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d05a      	beq.n	8003e60 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dae:	f003 031f 	and.w	r3, r3, #31
 8003db2:	223f      	movs	r2, #63	; 0x3f
 8003db4:	409a      	lsls	r2, r3
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003dc8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2b40      	cmp	r3, #64	; 0x40
 8003dd8:	d108      	bne.n	8003dec <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003dea:	e087      	b.n	8003efc <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	60da      	str	r2, [r3, #12]
}
 8003dfc:	e07e      	b.n	8003efc <DMA_SetConfig+0x32c>
 8003dfe:	bf00      	nop
 8003e00:	40020010 	.word	0x40020010
 8003e04:	40020028 	.word	0x40020028
 8003e08:	40020040 	.word	0x40020040
 8003e0c:	40020058 	.word	0x40020058
 8003e10:	40020070 	.word	0x40020070
 8003e14:	40020088 	.word	0x40020088
 8003e18:	400200a0 	.word	0x400200a0
 8003e1c:	400200b8 	.word	0x400200b8
 8003e20:	40020410 	.word	0x40020410
 8003e24:	40020428 	.word	0x40020428
 8003e28:	40020440 	.word	0x40020440
 8003e2c:	40020458 	.word	0x40020458
 8003e30:	40020470 	.word	0x40020470
 8003e34:	40020488 	.word	0x40020488
 8003e38:	400204a0 	.word	0x400204a0
 8003e3c:	400204b8 	.word	0x400204b8
 8003e40:	58025408 	.word	0x58025408
 8003e44:	5802541c 	.word	0x5802541c
 8003e48:	58025430 	.word	0x58025430
 8003e4c:	58025444 	.word	0x58025444
 8003e50:	58025458 	.word	0x58025458
 8003e54:	5802546c 	.word	0x5802546c
 8003e58:	58025480 	.word	0x58025480
 8003e5c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a28      	ldr	r2, [pc, #160]	; (8003f08 <DMA_SetConfig+0x338>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d022      	beq.n	8003eb0 <DMA_SetConfig+0x2e0>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a27      	ldr	r2, [pc, #156]	; (8003f0c <DMA_SetConfig+0x33c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d01d      	beq.n	8003eb0 <DMA_SetConfig+0x2e0>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a25      	ldr	r2, [pc, #148]	; (8003f10 <DMA_SetConfig+0x340>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d018      	beq.n	8003eb0 <DMA_SetConfig+0x2e0>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a24      	ldr	r2, [pc, #144]	; (8003f14 <DMA_SetConfig+0x344>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d013      	beq.n	8003eb0 <DMA_SetConfig+0x2e0>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a22      	ldr	r2, [pc, #136]	; (8003f18 <DMA_SetConfig+0x348>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d00e      	beq.n	8003eb0 <DMA_SetConfig+0x2e0>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a21      	ldr	r2, [pc, #132]	; (8003f1c <DMA_SetConfig+0x34c>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d009      	beq.n	8003eb0 <DMA_SetConfig+0x2e0>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a1f      	ldr	r2, [pc, #124]	; (8003f20 <DMA_SetConfig+0x350>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d004      	beq.n	8003eb0 <DMA_SetConfig+0x2e0>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a1e      	ldr	r2, [pc, #120]	; (8003f24 <DMA_SetConfig+0x354>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d101      	bne.n	8003eb4 <DMA_SetConfig+0x2e4>
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e000      	b.n	8003eb6 <DMA_SetConfig+0x2e6>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d020      	beq.n	8003efc <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ebe:	f003 031f 	and.w	r3, r3, #31
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	409a      	lsls	r2, r3
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	2b40      	cmp	r3, #64	; 0x40
 8003ed8:	d108      	bne.n	8003eec <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	60da      	str	r2, [r3, #12]
}
 8003eea:	e007      	b.n	8003efc <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	60da      	str	r2, [r3, #12]
}
 8003efc:	bf00      	nop
 8003efe:	371c      	adds	r7, #28
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	58025408 	.word	0x58025408
 8003f0c:	5802541c 	.word	0x5802541c
 8003f10:	58025430 	.word	0x58025430
 8003f14:	58025444 	.word	0x58025444
 8003f18:	58025458 	.word	0x58025458
 8003f1c:	5802546c 	.word	0x5802546c
 8003f20:	58025480 	.word	0x58025480
 8003f24:	58025494 	.word	0x58025494

08003f28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a42      	ldr	r2, [pc, #264]	; (8004040 <DMA_CalcBaseAndBitshift+0x118>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d04a      	beq.n	8003fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a41      	ldr	r2, [pc, #260]	; (8004044 <DMA_CalcBaseAndBitshift+0x11c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d045      	beq.n	8003fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a3f      	ldr	r2, [pc, #252]	; (8004048 <DMA_CalcBaseAndBitshift+0x120>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d040      	beq.n	8003fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a3e      	ldr	r2, [pc, #248]	; (800404c <DMA_CalcBaseAndBitshift+0x124>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d03b      	beq.n	8003fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a3c      	ldr	r2, [pc, #240]	; (8004050 <DMA_CalcBaseAndBitshift+0x128>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d036      	beq.n	8003fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a3b      	ldr	r2, [pc, #236]	; (8004054 <DMA_CalcBaseAndBitshift+0x12c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d031      	beq.n	8003fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a39      	ldr	r2, [pc, #228]	; (8004058 <DMA_CalcBaseAndBitshift+0x130>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d02c      	beq.n	8003fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a38      	ldr	r2, [pc, #224]	; (800405c <DMA_CalcBaseAndBitshift+0x134>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d027      	beq.n	8003fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a36      	ldr	r2, [pc, #216]	; (8004060 <DMA_CalcBaseAndBitshift+0x138>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d022      	beq.n	8003fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a35      	ldr	r2, [pc, #212]	; (8004064 <DMA_CalcBaseAndBitshift+0x13c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d01d      	beq.n	8003fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a33      	ldr	r2, [pc, #204]	; (8004068 <DMA_CalcBaseAndBitshift+0x140>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d018      	beq.n	8003fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a32      	ldr	r2, [pc, #200]	; (800406c <DMA_CalcBaseAndBitshift+0x144>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d013      	beq.n	8003fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a30      	ldr	r2, [pc, #192]	; (8004070 <DMA_CalcBaseAndBitshift+0x148>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00e      	beq.n	8003fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a2f      	ldr	r2, [pc, #188]	; (8004074 <DMA_CalcBaseAndBitshift+0x14c>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d009      	beq.n	8003fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a2d      	ldr	r2, [pc, #180]	; (8004078 <DMA_CalcBaseAndBitshift+0x150>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d004      	beq.n	8003fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a2c      	ldr	r2, [pc, #176]	; (800407c <DMA_CalcBaseAndBitshift+0x154>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d101      	bne.n	8003fd4 <DMA_CalcBaseAndBitshift+0xac>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <DMA_CalcBaseAndBitshift+0xae>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d024      	beq.n	8004024 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	3b10      	subs	r3, #16
 8003fe2:	4a27      	ldr	r2, [pc, #156]	; (8004080 <DMA_CalcBaseAndBitshift+0x158>)
 8003fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe8:	091b      	lsrs	r3, r3, #4
 8003fea:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	4a24      	ldr	r2, [pc, #144]	; (8004084 <DMA_CalcBaseAndBitshift+0x15c>)
 8003ff4:	5cd3      	ldrb	r3, [r2, r3]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2b03      	cmp	r3, #3
 8004000:	d908      	bls.n	8004014 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	4b1f      	ldr	r3, [pc, #124]	; (8004088 <DMA_CalcBaseAndBitshift+0x160>)
 800400a:	4013      	ands	r3, r2
 800400c:	1d1a      	adds	r2, r3, #4
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	659a      	str	r2, [r3, #88]	; 0x58
 8004012:	e00d      	b.n	8004030 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	461a      	mov	r2, r3
 800401a:	4b1b      	ldr	r3, [pc, #108]	; (8004088 <DMA_CalcBaseAndBitshift+0x160>)
 800401c:	4013      	ands	r3, r2
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6593      	str	r3, [r2, #88]	; 0x58
 8004022:	e005      	b.n	8004030 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004034:	4618      	mov	r0, r3
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	40020010 	.word	0x40020010
 8004044:	40020028 	.word	0x40020028
 8004048:	40020040 	.word	0x40020040
 800404c:	40020058 	.word	0x40020058
 8004050:	40020070 	.word	0x40020070
 8004054:	40020088 	.word	0x40020088
 8004058:	400200a0 	.word	0x400200a0
 800405c:	400200b8 	.word	0x400200b8
 8004060:	40020410 	.word	0x40020410
 8004064:	40020428 	.word	0x40020428
 8004068:	40020440 	.word	0x40020440
 800406c:	40020458 	.word	0x40020458
 8004070:	40020470 	.word	0x40020470
 8004074:	40020488 	.word	0x40020488
 8004078:	400204a0 	.word	0x400204a0
 800407c:	400204b8 	.word	0x400204b8
 8004080:	aaaaaaab 	.word	0xaaaaaaab
 8004084:	0800aa68 	.word	0x0800aa68
 8004088:	fffffc00 	.word	0xfffffc00

0800408c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004094:	2300      	movs	r3, #0
 8004096:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d120      	bne.n	80040e2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a4:	2b03      	cmp	r3, #3
 80040a6:	d858      	bhi.n	800415a <DMA_CheckFifoParam+0xce>
 80040a8:	a201      	add	r2, pc, #4	; (adr r2, 80040b0 <DMA_CheckFifoParam+0x24>)
 80040aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ae:	bf00      	nop
 80040b0:	080040c1 	.word	0x080040c1
 80040b4:	080040d3 	.word	0x080040d3
 80040b8:	080040c1 	.word	0x080040c1
 80040bc:	0800415b 	.word	0x0800415b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d048      	beq.n	800415e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040d0:	e045      	b.n	800415e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040da:	d142      	bne.n	8004162 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040e0:	e03f      	b.n	8004162 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ea:	d123      	bne.n	8004134 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	d838      	bhi.n	8004166 <DMA_CheckFifoParam+0xda>
 80040f4:	a201      	add	r2, pc, #4	; (adr r2, 80040fc <DMA_CheckFifoParam+0x70>)
 80040f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fa:	bf00      	nop
 80040fc:	0800410d 	.word	0x0800410d
 8004100:	08004113 	.word	0x08004113
 8004104:	0800410d 	.word	0x0800410d
 8004108:	08004125 	.word	0x08004125
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	73fb      	strb	r3, [r7, #15]
        break;
 8004110:	e030      	b.n	8004174 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004116:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d025      	beq.n	800416a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004122:	e022      	b.n	800416a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800412c:	d11f      	bne.n	800416e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004132:	e01c      	b.n	800416e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004138:	2b02      	cmp	r3, #2
 800413a:	d902      	bls.n	8004142 <DMA_CheckFifoParam+0xb6>
 800413c:	2b03      	cmp	r3, #3
 800413e:	d003      	beq.n	8004148 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004140:	e018      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	73fb      	strb	r3, [r7, #15]
        break;
 8004146:	e015      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00e      	beq.n	8004172 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	73fb      	strb	r3, [r7, #15]
    break;
 8004158:	e00b      	b.n	8004172 <DMA_CheckFifoParam+0xe6>
        break;
 800415a:	bf00      	nop
 800415c:	e00a      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
        break;
 800415e:	bf00      	nop
 8004160:	e008      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
        break;
 8004162:	bf00      	nop
 8004164:	e006      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
        break;
 8004166:	bf00      	nop
 8004168:	e004      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
        break;
 800416a:	bf00      	nop
 800416c:	e002      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
        break;
 800416e:	bf00      	nop
 8004170:	e000      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
    break;
 8004172:	bf00      	nop
    }
  }

  return status;
 8004174:	7bfb      	ldrb	r3, [r7, #15]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop

08004184 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a38      	ldr	r2, [pc, #224]	; (8004278 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d022      	beq.n	80041e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a36      	ldr	r2, [pc, #216]	; (800427c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d01d      	beq.n	80041e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a35      	ldr	r2, [pc, #212]	; (8004280 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d018      	beq.n	80041e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a33      	ldr	r2, [pc, #204]	; (8004284 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d013      	beq.n	80041e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a32      	ldr	r2, [pc, #200]	; (8004288 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d00e      	beq.n	80041e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a30      	ldr	r2, [pc, #192]	; (800428c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d009      	beq.n	80041e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a2f      	ldr	r2, [pc, #188]	; (8004290 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d004      	beq.n	80041e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a2d      	ldr	r2, [pc, #180]	; (8004294 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d101      	bne.n	80041e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80041e2:	2301      	movs	r3, #1
 80041e4:	e000      	b.n	80041e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80041e6:	2300      	movs	r3, #0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d01a      	beq.n	8004222 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	3b08      	subs	r3, #8
 80041f4:	4a28      	ldr	r2, [pc, #160]	; (8004298 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80041f6:	fba2 2303 	umull	r2, r3, r2, r3
 80041fa:	091b      	lsrs	r3, r3, #4
 80041fc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	4b26      	ldr	r3, [pc, #152]	; (800429c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004202:	4413      	add	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	461a      	mov	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a24      	ldr	r2, [pc, #144]	; (80042a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004210:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f003 031f 	and.w	r3, r3, #31
 8004218:	2201      	movs	r2, #1
 800421a:	409a      	lsls	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004220:	e024      	b.n	800426c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	b2db      	uxtb	r3, r3
 8004228:	3b10      	subs	r3, #16
 800422a:	4a1e      	ldr	r2, [pc, #120]	; (80042a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800422c:	fba2 2303 	umull	r2, r3, r2, r3
 8004230:	091b      	lsrs	r3, r3, #4
 8004232:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4a1c      	ldr	r2, [pc, #112]	; (80042a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d806      	bhi.n	800424a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	4a1b      	ldr	r2, [pc, #108]	; (80042ac <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d902      	bls.n	800424a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	3308      	adds	r3, #8
 8004248:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	4b18      	ldr	r3, [pc, #96]	; (80042b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800424e:	4413      	add	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	461a      	mov	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a16      	ldr	r2, [pc, #88]	; (80042b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800425c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f003 031f 	and.w	r3, r3, #31
 8004264:	2201      	movs	r2, #1
 8004266:	409a      	lsls	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800426c:	bf00      	nop
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	58025408 	.word	0x58025408
 800427c:	5802541c 	.word	0x5802541c
 8004280:	58025430 	.word	0x58025430
 8004284:	58025444 	.word	0x58025444
 8004288:	58025458 	.word	0x58025458
 800428c:	5802546c 	.word	0x5802546c
 8004290:	58025480 	.word	0x58025480
 8004294:	58025494 	.word	0x58025494
 8004298:	cccccccd 	.word	0xcccccccd
 800429c:	16009600 	.word	0x16009600
 80042a0:	58025880 	.word	0x58025880
 80042a4:	aaaaaaab 	.word	0xaaaaaaab
 80042a8:	400204b8 	.word	0x400204b8
 80042ac:	4002040f 	.word	0x4002040f
 80042b0:	10008200 	.word	0x10008200
 80042b4:	40020880 	.word	0x40020880

080042b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d04a      	beq.n	8004364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d847      	bhi.n	8004364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a25      	ldr	r2, [pc, #148]	; (8004370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d022      	beq.n	8004324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a24      	ldr	r2, [pc, #144]	; (8004374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d01d      	beq.n	8004324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a22      	ldr	r2, [pc, #136]	; (8004378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d018      	beq.n	8004324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a21      	ldr	r2, [pc, #132]	; (800437c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d013      	beq.n	8004324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a1f      	ldr	r2, [pc, #124]	; (8004380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d00e      	beq.n	8004324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a1e      	ldr	r2, [pc, #120]	; (8004384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d009      	beq.n	8004324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a1c      	ldr	r2, [pc, #112]	; (8004388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d004      	beq.n	8004324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a1b      	ldr	r2, [pc, #108]	; (800438c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d101      	bne.n	8004328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004324:	2301      	movs	r3, #1
 8004326:	e000      	b.n	800432a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004328:	2300      	movs	r3, #0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00a      	beq.n	8004344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	4b17      	ldr	r3, [pc, #92]	; (8004390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004332:	4413      	add	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	461a      	mov	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a15      	ldr	r2, [pc, #84]	; (8004394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004340:	671a      	str	r2, [r3, #112]	; 0x70
 8004342:	e009      	b.n	8004358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	4b14      	ldr	r3, [pc, #80]	; (8004398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004348:	4413      	add	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	461a      	mov	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a11      	ldr	r2, [pc, #68]	; (800439c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004356:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	3b01      	subs	r3, #1
 800435c:	2201      	movs	r2, #1
 800435e:	409a      	lsls	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004364:	bf00      	nop
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	58025408 	.word	0x58025408
 8004374:	5802541c 	.word	0x5802541c
 8004378:	58025430 	.word	0x58025430
 800437c:	58025444 	.word	0x58025444
 8004380:	58025458 	.word	0x58025458
 8004384:	5802546c 	.word	0x5802546c
 8004388:	58025480 	.word	0x58025480
 800438c:	58025494 	.word	0x58025494
 8004390:	1600963f 	.word	0x1600963f
 8004394:	58025940 	.word	0x58025940
 8004398:	1000823f 	.word	0x1000823f
 800439c:	40020940 	.word	0x40020940

080043a0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e0c6      	b.n	8004540 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d102      	bne.n	80043c0 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7fc ff72 	bl	80012a4 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2223      	movs	r2, #35	; 0x23
 80043c4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043c6:	4b60      	ldr	r3, [pc, #384]	; (8004548 <HAL_ETH_Init+0x1a8>)
 80043c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043cc:	4a5e      	ldr	r2, [pc, #376]	; (8004548 <HAL_ETH_Init+0x1a8>)
 80043ce:	f043 0302 	orr.w	r3, r3, #2
 80043d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80043d6:	4b5c      	ldr	r3, [pc, #368]	; (8004548 <HAL_ETH_Init+0x1a8>)
 80043d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	60bb      	str	r3, [r7, #8]
 80043e2:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	7a1b      	ldrb	r3, [r3, #8]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d103      	bne.n	80043f4 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80043ec:	2000      	movs	r0, #0
 80043ee:	f7fd fb8b 	bl	8001b08 <HAL_SYSCFG_ETHInterfaceSelect>
 80043f2:	e003      	b.n	80043fc <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80043f4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80043f8:	f7fd fb86 	bl	8001b08 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 0201 	orr.w	r2, r2, #1
 800440e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004412:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004414:	f7fd fb3c 	bl	8001a90 <HAL_GetTick>
 8004418:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800441a:	e00f      	b.n	800443c <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 800441c:	f7fd fb38 	bl	8001a90 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800442a:	d907      	bls.n	800443c <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2204      	movs	r2, #4
 8004430:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	22e0      	movs	r2, #224	; 0xe0
 8004436:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e081      	b.n	8004540 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1e6      	bne.n	800441c <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fac0 	bl	80049d4 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004454:	f001 fed8 	bl	8006208 <HAL_RCC_GetHCLKFreq>
 8004458:	4603      	mov	r3, r0
 800445a:	4a3c      	ldr	r2, [pc, #240]	; (800454c <HAL_ETH_Init+0x1ac>)
 800445c:	fba2 2303 	umull	r2, r3, r2, r3
 8004460:	0c9a      	lsrs	r2, r3, #18
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3a01      	subs	r2, #1
 8004468:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 fa13 	bl	8004898 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004488:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800448c:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d007      	beq.n	80044aa <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	22e0      	movs	r2, #224	; 0xe0
 80044a4:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e04a      	b.n	8004540 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	f241 1308 	movw	r3, #4360	; 0x1108
 80044b2:	4413      	add	r3, r2
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	4b26      	ldr	r3, [pc, #152]	; (8004550 <HAL_ETH_Init+0x1b0>)
 80044b8:	4013      	ands	r3, r2
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	6952      	ldr	r2, [r2, #20]
 80044be:	0052      	lsls	r2, r2, #1
 80044c0:	6879      	ldr	r1, [r7, #4]
 80044c2:	6809      	ldr	r1, [r1, #0]
 80044c4:	431a      	orrs	r2, r3
 80044c6:	f241 1308 	movw	r3, #4360	; 0x1108
 80044ca:	440b      	add	r3, r1
 80044cc:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 fad8 	bl	8004a84 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 fb1c 	bl	8004b12 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	3305      	adds	r3, #5
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	021a      	lsls	r2, r3, #8
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	3304      	adds	r3, #4
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	4619      	mov	r1, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	3303      	adds	r3, #3
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	061a      	lsls	r2, r3, #24
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	3302      	adds	r3, #2
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	041b      	lsls	r3, r3, #16
 800450c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	3301      	adds	r3, #1
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004518:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004526:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004528:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2210      	movs	r2, #16
 8004536:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2210      	movs	r2, #16
 800453c:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	58024400 	.word	0x58024400
 800454c:	431bde83 	.word	0x431bde83
 8004550:	ffff8001 	.word	0xffff8001

08004554 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8004566:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	791b      	ldrb	r3, [r3, #4]
 800456c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800456e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	7b1b      	ldrb	r3, [r3, #12]
 8004574:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004576:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	7b5b      	ldrb	r3, [r3, #13]
 800457c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800457e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	7b9b      	ldrb	r3, [r3, #14]
 8004584:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004586:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	7bdb      	ldrb	r3, [r3, #15]
 800458c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800458e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	7c12      	ldrb	r2, [r2, #16]
 8004594:	2a00      	cmp	r2, #0
 8004596:	d102      	bne.n	800459e <ETH_SetMACConfig+0x4a>
 8004598:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800459c:	e000      	b.n	80045a0 <ETH_SetMACConfig+0x4c>
 800459e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80045a0:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	7c52      	ldrb	r2, [r2, #17]
 80045a6:	2a00      	cmp	r2, #0
 80045a8:	d102      	bne.n	80045b0 <ETH_SetMACConfig+0x5c>
 80045aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80045ae:	e000      	b.n	80045b2 <ETH_SetMACConfig+0x5e>
 80045b0:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80045b2:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	7c9b      	ldrb	r3, [r3, #18]
 80045b8:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80045ba:	431a      	orrs	r2, r3
                                macconf->Speed |
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80045c0:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80045c6:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	7f1b      	ldrb	r3, [r3, #28]
 80045cc:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80045ce:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	7f5b      	ldrb	r3, [r3, #29]
 80045d4:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80045d6:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	7f92      	ldrb	r2, [r2, #30]
 80045dc:	2a00      	cmp	r2, #0
 80045de:	d102      	bne.n	80045e6 <ETH_SetMACConfig+0x92>
 80045e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045e4:	e000      	b.n	80045e8 <ETH_SetMACConfig+0x94>
 80045e6:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80045e8:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	7fdb      	ldrb	r3, [r3, #31]
 80045ee:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80045f0:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80045f8:	2a00      	cmp	r2, #0
 80045fa:	d102      	bne.n	8004602 <ETH_SetMACConfig+0xae>
 80045fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004600:	e000      	b.n	8004604 <ETH_SetMACConfig+0xb0>
 8004602:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004604:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800460a:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004612:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8004614:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800461a:	4313      	orrs	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	4b56      	ldr	r3, [pc, #344]	; (8004780 <ETH_SetMACConfig+0x22c>)
 8004626:	4013      	ands	r3, r2
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6812      	ldr	r2, [r2, #0]
 800462c:	68f9      	ldr	r1, [r7, #12]
 800462e:	430b      	orrs	r3, r1
 8004630:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004636:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800463e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004640:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004648:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800464a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004652:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004654:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800465c:	2a00      	cmp	r2, #0
 800465e:	d102      	bne.n	8004666 <ETH_SetMACConfig+0x112>
 8004660:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004664:	e000      	b.n	8004668 <ETH_SetMACConfig+0x114>
 8004666:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004668:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800466e:	4313      	orrs	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	4b42      	ldr	r3, [pc, #264]	; (8004784 <ETH_SetMACConfig+0x230>)
 800467a:	4013      	ands	r3, r2
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6812      	ldr	r2, [r2, #0]
 8004680:	68f9      	ldr	r1, [r7, #12]
 8004682:	430b      	orrs	r3, r1
 8004684:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800468c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004692:	4313      	orrs	r3, r2
 8004694:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68da      	ldr	r2, [r3, #12]
 800469c:	4b3a      	ldr	r3, [pc, #232]	; (8004788 <ETH_SetMACConfig+0x234>)
 800469e:	4013      	ands	r3, r2
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	6812      	ldr	r2, [r2, #0]
 80046a4:	68f9      	ldr	r1, [r7, #12]
 80046a6:	430b      	orrs	r3, r1
 80046a8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80046b0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80046b6:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80046be:	2a00      	cmp	r2, #0
 80046c0:	d101      	bne.n	80046c6 <ETH_SetMACConfig+0x172>
 80046c2:	2280      	movs	r2, #128	; 0x80
 80046c4:	e000      	b.n	80046c8 <ETH_SetMACConfig+0x174>
 80046c6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80046c8:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ce:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046da:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80046de:	4013      	ands	r3, r2
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6812      	ldr	r2, [r2, #0]
 80046e4:	68f9      	ldr	r1, [r7, #12]
 80046e6:	430b      	orrs	r3, r1
 80046e8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80046f0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80046f8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004706:	f023 0103 	bic.w	r1, r3, #3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	430a      	orrs	r2, r1
 8004712:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800471e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800473a:	2a00      	cmp	r2, #0
 800473c:	d101      	bne.n	8004742 <ETH_SetMACConfig+0x1ee>
 800473e:	2240      	movs	r2, #64	; 0x40
 8004740:	e000      	b.n	8004744 <ETH_SetMACConfig+0x1f0>
 8004742:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004744:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800474c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800474e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004756:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004758:	4313      	orrs	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004764:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	430a      	orrs	r2, r1
 8004770:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004774:	bf00      	nop
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	00048083 	.word	0x00048083
 8004784:	c0f88000 	.word	0xc0f88000
 8004788:	fffffef0 	.word	0xfffffef0

0800478c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	4b38      	ldr	r3, [pc, #224]	; (8004884 <ETH_SetDMAConfig+0xf8>)
 80047a2:	4013      	ands	r3, r2
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	6812      	ldr	r2, [r2, #0]
 80047a8:	6879      	ldr	r1, [r7, #4]
 80047aa:	6809      	ldr	r1, [r1, #0]
 80047ac:	431a      	orrs	r2, r3
 80047ae:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80047b2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	791b      	ldrb	r3, [r3, #4]
 80047b8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80047be:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	7b1b      	ldrb	r3, [r3, #12]
 80047c4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	f241 0304 	movw	r3, #4100	; 0x1004
 80047d2:	4413      	add	r3, r2
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	4b2c      	ldr	r3, [pc, #176]	; (8004888 <ETH_SetDMAConfig+0xfc>)
 80047d8:	4013      	ands	r3, r2
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6811      	ldr	r1, [r2, #0]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	431a      	orrs	r2, r3
 80047e2:	f241 0304 	movw	r3, #4100	; 0x1004
 80047e6:	440b      	add	r3, r1
 80047e8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	7b5b      	ldrb	r3, [r3, #13]
 80047ee:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80047f4:	4313      	orrs	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	4b22      	ldr	r3, [pc, #136]	; (800488c <ETH_SetDMAConfig+0x100>)
 8004804:	4013      	ands	r3, r2
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	6811      	ldr	r1, [r2, #0]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	431a      	orrs	r2, r3
 800480e:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8004812:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	7d1b      	ldrb	r3, [r3, #20]
 800481c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800481e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	7f5b      	ldrb	r3, [r3, #29]
 8004824:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	f241 1304 	movw	r3, #4356	; 0x1104
 8004832:	4413      	add	r3, r2
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	4b16      	ldr	r3, [pc, #88]	; (8004890 <ETH_SetDMAConfig+0x104>)
 8004838:	4013      	ands	r3, r2
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6811      	ldr	r1, [r2, #0]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	431a      	orrs	r2, r3
 8004842:	f241 1304 	movw	r3, #4356	; 0x1104
 8004846:	440b      	add	r3, r1
 8004848:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	7f1b      	ldrb	r3, [r3, #28]
 800484e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004854:	4313      	orrs	r3, r2
 8004856:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	f241 1308 	movw	r3, #4360	; 0x1108
 8004860:	4413      	add	r3, r2
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <ETH_SetDMAConfig+0x108>)
 8004866:	4013      	ands	r3, r2
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6811      	ldr	r1, [r2, #0]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	431a      	orrs	r2, r3
 8004870:	f241 1308 	movw	r3, #4360	; 0x1108
 8004874:	440b      	add	r3, r1
 8004876:	601a      	str	r2, [r3, #0]
}
 8004878:	bf00      	nop
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	ffff87fd 	.word	0xffff87fd
 8004888:	ffff2ffe 	.word	0xffff2ffe
 800488c:	fffec000 	.word	0xfffec000
 8004890:	ffc0efef 	.word	0xffc0efef
 8004894:	7fc0ffff 	.word	0x7fc0ffff

08004898 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b0a4      	sub	sp, #144	; 0x90
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80048a0:	2301      	movs	r3, #1
 80048a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80048a6:	2300      	movs	r3, #0
 80048a8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80048aa:	2300      	movs	r3, #0
 80048ac:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80048b0:	2300      	movs	r3, #0
 80048b2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80048b6:	2301      	movs	r3, #1
 80048b8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80048bc:	2301      	movs	r3, #1
 80048be:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80048c2:	2301      	movs	r3, #1
 80048c4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80048c8:	2300      	movs	r3, #0
 80048ca:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80048ce:	2301      	movs	r3, #1
 80048d0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80048d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048d8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80048da:	2300      	movs	r3, #0
 80048dc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80048e0:	2300      	movs	r3, #0
 80048e2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80048e4:	2300      	movs	r3, #0
 80048e6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80048ea:	2300      	movs	r3, #0
 80048ec:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80048f0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80048f4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80048f6:	2300      	movs	r3, #0
 80048f8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80048fc:	2300      	movs	r3, #0
 80048fe:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004900:	2301      	movs	r3, #1
 8004902:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004906:	2300      	movs	r3, #0
 8004908:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800490c:	2300      	movs	r3, #0
 800490e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004912:	2300      	movs	r3, #0
 8004914:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004916:	2300      	movs	r3, #0
 8004918:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800491a:	2300      	movs	r3, #0
 800491c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800491e:	2300      	movs	r3, #0
 8004920:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004924:	2300      	movs	r3, #0
 8004926:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800492a:	2301      	movs	r3, #1
 800492c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004930:	2320      	movs	r3, #32
 8004932:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004936:	2301      	movs	r3, #1
 8004938:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800493c:	2300      	movs	r3, #0
 800493e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004942:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004946:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004948:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800494c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800494e:	2300      	movs	r3, #0
 8004950:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004954:	2302      	movs	r3, #2
 8004956:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800495a:	2300      	movs	r3, #0
 800495c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004960:	2300      	movs	r3, #0
 8004962:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004966:	2300      	movs	r3, #0
 8004968:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800496c:	2301      	movs	r3, #1
 800496e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004972:	2300      	movs	r3, #0
 8004974:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004976:	2301      	movs	r3, #1
 8004978:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800497c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004980:	4619      	mov	r1, r3
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7ff fde6 	bl	8004554 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004988:	2301      	movs	r3, #1
 800498a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800498c:	2301      	movs	r3, #1
 800498e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004990:	2300      	movs	r3, #0
 8004992:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004994:	2300      	movs	r3, #0
 8004996:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800499a:	2300      	movs	r3, #0
 800499c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800499e:	2300      	movs	r3, #0
 80049a0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80049a2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80049a6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80049a8:	2300      	movs	r3, #0
 80049aa:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80049ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80049b0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80049b2:	2300      	movs	r3, #0
 80049b4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80049b8:	f44f 7306 	mov.w	r3, #536	; 0x218
 80049bc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80049be:	f107 0308 	add.w	r3, r7, #8
 80049c2:	4619      	mov	r1, r3
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f7ff fee1 	bl	800478c <ETH_SetDMAConfig>
}
 80049ca:	bf00      	nop
 80049cc:	3790      	adds	r7, #144	; 0x90
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
	...

080049d4 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80049e4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80049ec:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80049ee:	f001 fc0b 	bl	8006208 <HAL_RCC_GetHCLKFreq>
 80049f2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	4a1e      	ldr	r2, [pc, #120]	; (8004a70 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d908      	bls.n	8004a0e <ETH_MAC_MDIO_ClkConfig+0x3a>
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	4a1d      	ldr	r2, [pc, #116]	; (8004a74 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d804      	bhi.n	8004a0e <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	e027      	b.n	8004a5e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	4a18      	ldr	r2, [pc, #96]	; (8004a74 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d908      	bls.n	8004a28 <ETH_MAC_MDIO_ClkConfig+0x54>
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	4a17      	ldr	r2, [pc, #92]	; (8004a78 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d204      	bcs.n	8004a28 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004a24:	60fb      	str	r3, [r7, #12]
 8004a26:	e01a      	b.n	8004a5e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	4a13      	ldr	r2, [pc, #76]	; (8004a78 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d303      	bcc.n	8004a38 <ETH_MAC_MDIO_ClkConfig+0x64>
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4a12      	ldr	r2, [pc, #72]	; (8004a7c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d911      	bls.n	8004a5c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	4a10      	ldr	r2, [pc, #64]	; (8004a7c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d908      	bls.n	8004a52 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	4a0f      	ldr	r2, [pc, #60]	; (8004a80 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d804      	bhi.n	8004a52 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	e005      	b.n	8004a5e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	e000      	b.n	8004a5e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004a5c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004a68:	bf00      	nop
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	01312cff 	.word	0x01312cff
 8004a74:	02160ebf 	.word	0x02160ebf
 8004a78:	03938700 	.word	0x03938700
 8004a7c:	05f5e0ff 	.word	0x05f5e0ff
 8004a80:	08f0d17f 	.word	0x08f0d17f

08004a84 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	e01d      	b.n	8004ace <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68d9      	ldr	r1, [r3, #12]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	4413      	add	r3, r2
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	440b      	add	r3, r1
 8004aa2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2200      	movs	r2, #0
 8004aae:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004abc:	68b9      	ldr	r1, [r7, #8]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	3206      	adds	r2, #6
 8004ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	3301      	adds	r3, #1
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2b03      	cmp	r3, #3
 8004ad2:	d9de      	bls.n	8004a92 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	f241 132c 	movw	r3, #4396	; 0x112c
 8004ae2:	4413      	add	r3, r2
 8004ae4:	2203      	movs	r2, #3
 8004ae6:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68d9      	ldr	r1, [r3, #12]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	f241 1314 	movw	r3, #4372	; 0x1114
 8004af4:	4413      	add	r3, r2
 8004af6:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8004b04:	601a      	str	r2, [r3, #0]
}
 8004b06:	bf00      	nop
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b085      	sub	sp, #20
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60fb      	str	r3, [r7, #12]
 8004b1e:	e024      	b.n	8004b6a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6919      	ldr	r1, [r3, #16]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4613      	mov	r3, r2
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	4413      	add	r3, r2
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	440b      	add	r3, r1
 8004b30:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2200      	movs	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2200      	movs	r2, #0
 8004b42:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2200      	movs	r2, #0
 8004b48:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2200      	movs	r2, #0
 8004b54:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	6879      	ldr	r1, [r7, #4]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	3310      	adds	r3, #16
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	440b      	add	r3, r1
 8004b62:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	3301      	adds	r3, #1
 8004b68:	60fb      	str	r3, [r7, #12]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2b03      	cmp	r3, #3
 8004b6e:	d9d7      	bls.n	8004b20 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	f241 1330 	movw	r3, #4400	; 0x1130
 8004b96:	4413      	add	r3, r2
 8004b98:	2203      	movs	r2, #3
 8004b9a:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6919      	ldr	r1, [r3, #16]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	f241 131c 	movw	r3, #4380	; 0x111c
 8004ba8:	4413      	add	r3, r2
 8004baa:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	f241 1328 	movw	r3, #4392	; 0x1128
 8004bbc:	4413      	add	r3, r2
 8004bbe:	6019      	str	r1, [r3, #0]
}
 8004bc0:	bf00      	nop
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b089      	sub	sp, #36	; 0x24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004bda:	4b89      	ldr	r3, [pc, #548]	; (8004e00 <HAL_GPIO_Init+0x234>)
 8004bdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004bde:	e194      	b.n	8004f0a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	2101      	movs	r1, #1
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bec:	4013      	ands	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 8186 	beq.w	8004f04 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f003 0303 	and.w	r3, r3, #3
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d005      	beq.n	8004c10 <HAL_GPIO_Init+0x44>
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f003 0303 	and.w	r3, r3, #3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d130      	bne.n	8004c72 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	2203      	movs	r2, #3
 8004c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c20:	43db      	mvns	r3, r3
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	4013      	ands	r3, r2
 8004c26:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	68da      	ldr	r2, [r3, #12]
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c46:	2201      	movs	r2, #1
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4e:	43db      	mvns	r3, r3
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	4013      	ands	r3, r2
 8004c54:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	091b      	lsrs	r3, r3, #4
 8004c5c:	f003 0201 	and.w	r2, r3, #1
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	fa02 f303 	lsl.w	r3, r2, r3
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	2b03      	cmp	r3, #3
 8004c7c:	d017      	beq.n	8004cae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	2203      	movs	r2, #3
 8004c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8e:	43db      	mvns	r3, r3
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	4013      	ands	r3, r2
 8004c94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	69ba      	ldr	r2, [r7, #24]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f003 0303 	and.w	r3, r3, #3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d123      	bne.n	8004d02 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	08da      	lsrs	r2, r3, #3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3208      	adds	r2, #8
 8004cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	220f      	movs	r2, #15
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	43db      	mvns	r3, r3
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	691a      	ldr	r2, [r3, #16]
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	fa02 f303 	lsl.w	r3, r2, r3
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	08da      	lsrs	r2, r3, #3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3208      	adds	r2, #8
 8004cfc:	69b9      	ldr	r1, [r7, #24]
 8004cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	2203      	movs	r2, #3
 8004d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d12:	43db      	mvns	r3, r3
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	4013      	ands	r3, r2
 8004d18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f003 0203 	and.w	r2, r3, #3
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 80e0 	beq.w	8004f04 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d44:	4b2f      	ldr	r3, [pc, #188]	; (8004e04 <HAL_GPIO_Init+0x238>)
 8004d46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d4a:	4a2e      	ldr	r2, [pc, #184]	; (8004e04 <HAL_GPIO_Init+0x238>)
 8004d4c:	f043 0302 	orr.w	r3, r3, #2
 8004d50:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004d54:	4b2b      	ldr	r3, [pc, #172]	; (8004e04 <HAL_GPIO_Init+0x238>)
 8004d56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d62:	4a29      	ldr	r2, [pc, #164]	; (8004e08 <HAL_GPIO_Init+0x23c>)
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	089b      	lsrs	r3, r3, #2
 8004d68:	3302      	adds	r3, #2
 8004d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	220f      	movs	r2, #15
 8004d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7e:	43db      	mvns	r3, r3
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	4013      	ands	r3, r2
 8004d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a20      	ldr	r2, [pc, #128]	; (8004e0c <HAL_GPIO_Init+0x240>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d052      	beq.n	8004e34 <HAL_GPIO_Init+0x268>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a1f      	ldr	r2, [pc, #124]	; (8004e10 <HAL_GPIO_Init+0x244>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d031      	beq.n	8004dfa <HAL_GPIO_Init+0x22e>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a1e      	ldr	r2, [pc, #120]	; (8004e14 <HAL_GPIO_Init+0x248>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d02b      	beq.n	8004df6 <HAL_GPIO_Init+0x22a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a1d      	ldr	r2, [pc, #116]	; (8004e18 <HAL_GPIO_Init+0x24c>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d025      	beq.n	8004df2 <HAL_GPIO_Init+0x226>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a1c      	ldr	r2, [pc, #112]	; (8004e1c <HAL_GPIO_Init+0x250>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d01f      	beq.n	8004dee <HAL_GPIO_Init+0x222>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a1b      	ldr	r2, [pc, #108]	; (8004e20 <HAL_GPIO_Init+0x254>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d019      	beq.n	8004dea <HAL_GPIO_Init+0x21e>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a1a      	ldr	r2, [pc, #104]	; (8004e24 <HAL_GPIO_Init+0x258>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d013      	beq.n	8004de6 <HAL_GPIO_Init+0x21a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a19      	ldr	r2, [pc, #100]	; (8004e28 <HAL_GPIO_Init+0x25c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d00d      	beq.n	8004de2 <HAL_GPIO_Init+0x216>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a18      	ldr	r2, [pc, #96]	; (8004e2c <HAL_GPIO_Init+0x260>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d007      	beq.n	8004dde <HAL_GPIO_Init+0x212>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a17      	ldr	r2, [pc, #92]	; (8004e30 <HAL_GPIO_Init+0x264>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d101      	bne.n	8004dda <HAL_GPIO_Init+0x20e>
 8004dd6:	2309      	movs	r3, #9
 8004dd8:	e02d      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004dda:	230a      	movs	r3, #10
 8004ddc:	e02b      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004dde:	2308      	movs	r3, #8
 8004de0:	e029      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004de2:	2307      	movs	r3, #7
 8004de4:	e027      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004de6:	2306      	movs	r3, #6
 8004de8:	e025      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004dea:	2305      	movs	r3, #5
 8004dec:	e023      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004dee:	2304      	movs	r3, #4
 8004df0:	e021      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004df2:	2303      	movs	r3, #3
 8004df4:	e01f      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004df6:	2302      	movs	r3, #2
 8004df8:	e01d      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e01b      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004dfe:	bf00      	nop
 8004e00:	58000080 	.word	0x58000080
 8004e04:	58024400 	.word	0x58024400
 8004e08:	58000400 	.word	0x58000400
 8004e0c:	58020000 	.word	0x58020000
 8004e10:	58020400 	.word	0x58020400
 8004e14:	58020800 	.word	0x58020800
 8004e18:	58020c00 	.word	0x58020c00
 8004e1c:	58021000 	.word	0x58021000
 8004e20:	58021400 	.word	0x58021400
 8004e24:	58021800 	.word	0x58021800
 8004e28:	58021c00 	.word	0x58021c00
 8004e2c:	58022000 	.word	0x58022000
 8004e30:	58022400 	.word	0x58022400
 8004e34:	2300      	movs	r3, #0
 8004e36:	69fa      	ldr	r2, [r7, #28]
 8004e38:	f002 0203 	and.w	r2, r2, #3
 8004e3c:	0092      	lsls	r2, r2, #2
 8004e3e:	4093      	lsls	r3, r2
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e46:	4938      	ldr	r1, [pc, #224]	; (8004f28 <HAL_GPIO_Init+0x35c>)
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	089b      	lsrs	r3, r3, #2
 8004e4c:	3302      	adds	r3, #2
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	43db      	mvns	r3, r3
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	4013      	ands	r3, r2
 8004e64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004e7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	43db      	mvns	r3, r3
 8004e8e:	69ba      	ldr	r2, [r7, #24]
 8004e90:	4013      	ands	r3, r2
 8004e92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004ea8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	43db      	mvns	r3, r3
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	3301      	adds	r3, #1
 8004f08:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	fa22 f303 	lsr.w	r3, r2, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f47f ae63 	bne.w	8004be0 <HAL_GPIO_Init+0x14>
  }
}
 8004f1a:	bf00      	nop
 8004f1c:	bf00      	nop
 8004f1e:	3724      	adds	r7, #36	; 0x24
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	58000400 	.word	0x58000400

08004f2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	460b      	mov	r3, r1
 8004f36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	691a      	ldr	r2, [r3, #16]
 8004f3c:	887b      	ldrh	r3, [r7, #2]
 8004f3e:	4013      	ands	r3, r2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d002      	beq.n	8004f4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f44:	2301      	movs	r3, #1
 8004f46:	73fb      	strb	r3, [r7, #15]
 8004f48:	e001      	b.n	8004f4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	460b      	mov	r3, r1
 8004f66:	807b      	strh	r3, [r7, #2]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f6c:	787b      	ldrb	r3, [r7, #1]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f72:	887a      	ldrh	r2, [r7, #2]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004f78:	e003      	b.n	8004f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004f7a:	887b      	ldrh	r3, [r7, #2]
 8004f7c:	041a      	lsls	r2, r3, #16
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	619a      	str	r2, [r3, #24]
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
	...

08004f90 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004f98:	4a08      	ldr	r2, [pc, #32]	; (8004fbc <HAL_HSEM_FastTake+0x2c>)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	3320      	adds	r3, #32
 8004f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fa2:	4a07      	ldr	r2, [pc, #28]	; (8004fc0 <HAL_HSEM_FastTake+0x30>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d101      	bne.n	8004fac <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	e000      	b.n	8004fae <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	58026400 	.word	0x58026400
 8004fc0:	80000300 	.word	0x80000300

08004fc4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004fce:	4906      	ldr	r1, [pc, #24]	; (8004fe8 <HAL_HSEM_Release+0x24>)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	58026400 	.word	0x58026400

08004fec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fee:	b08f      	sub	sp, #60	; 0x3c
 8004ff0:	af0a      	add	r7, sp, #40	; 0x28
 8004ff2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e116      	b.n	800522c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b00      	cmp	r3, #0
 800500e:	d106      	bne.n	800501e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f7fc fba3 	bl	8001764 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2203      	movs	r2, #3
 8005022:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502e:	2b00      	cmp	r3, #0
 8005030:	d102      	bne.n	8005038 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4618      	mov	r0, r3
 800503e:	f005 fa3d 	bl	800a4bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	603b      	str	r3, [r7, #0]
 8005048:	687e      	ldr	r6, [r7, #4]
 800504a:	466d      	mov	r5, sp
 800504c:	f106 0410 	add.w	r4, r6, #16
 8005050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005052:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005056:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005058:	e894 0003 	ldmia.w	r4, {r0, r1}
 800505c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005060:	1d33      	adds	r3, r6, #4
 8005062:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005064:	6838      	ldr	r0, [r7, #0]
 8005066:	f005 f9bb 	bl	800a3e0 <USB_CoreInit>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d005      	beq.n	800507c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e0d7      	b.n	800522c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2100      	movs	r1, #0
 8005082:	4618      	mov	r0, r3
 8005084:	f005 fa2b 	bl	800a4de <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005088:	2300      	movs	r3, #0
 800508a:	73fb      	strb	r3, [r7, #15]
 800508c:	e04a      	b.n	8005124 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800508e:	7bfa      	ldrb	r2, [r7, #15]
 8005090:	6879      	ldr	r1, [r7, #4]
 8005092:	4613      	mov	r3, r2
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	1a9b      	subs	r3, r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	440b      	add	r3, r1
 800509c:	333d      	adds	r3, #61	; 0x3d
 800509e:	2201      	movs	r2, #1
 80050a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80050a2:	7bfa      	ldrb	r2, [r7, #15]
 80050a4:	6879      	ldr	r1, [r7, #4]
 80050a6:	4613      	mov	r3, r2
 80050a8:	00db      	lsls	r3, r3, #3
 80050aa:	1a9b      	subs	r3, r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	440b      	add	r3, r1
 80050b0:	333c      	adds	r3, #60	; 0x3c
 80050b2:	7bfa      	ldrb	r2, [r7, #15]
 80050b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80050b6:	7bfa      	ldrb	r2, [r7, #15]
 80050b8:	7bfb      	ldrb	r3, [r7, #15]
 80050ba:	b298      	uxth	r0, r3
 80050bc:	6879      	ldr	r1, [r7, #4]
 80050be:	4613      	mov	r3, r2
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	1a9b      	subs	r3, r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	440b      	add	r3, r1
 80050c8:	3342      	adds	r3, #66	; 0x42
 80050ca:	4602      	mov	r2, r0
 80050cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80050ce:	7bfa      	ldrb	r2, [r7, #15]
 80050d0:	6879      	ldr	r1, [r7, #4]
 80050d2:	4613      	mov	r3, r2
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	1a9b      	subs	r3, r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	440b      	add	r3, r1
 80050dc:	333f      	adds	r3, #63	; 0x3f
 80050de:	2200      	movs	r2, #0
 80050e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80050e2:	7bfa      	ldrb	r2, [r7, #15]
 80050e4:	6879      	ldr	r1, [r7, #4]
 80050e6:	4613      	mov	r3, r2
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	1a9b      	subs	r3, r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	440b      	add	r3, r1
 80050f0:	3344      	adds	r3, #68	; 0x44
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80050f6:	7bfa      	ldrb	r2, [r7, #15]
 80050f8:	6879      	ldr	r1, [r7, #4]
 80050fa:	4613      	mov	r3, r2
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	1a9b      	subs	r3, r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	440b      	add	r3, r1
 8005104:	3348      	adds	r3, #72	; 0x48
 8005106:	2200      	movs	r2, #0
 8005108:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800510a:	7bfa      	ldrb	r2, [r7, #15]
 800510c:	6879      	ldr	r1, [r7, #4]
 800510e:	4613      	mov	r3, r2
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	1a9b      	subs	r3, r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	440b      	add	r3, r1
 8005118:	3350      	adds	r3, #80	; 0x50
 800511a:	2200      	movs	r2, #0
 800511c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800511e:	7bfb      	ldrb	r3, [r7, #15]
 8005120:	3301      	adds	r3, #1
 8005122:	73fb      	strb	r3, [r7, #15]
 8005124:	7bfa      	ldrb	r2, [r7, #15]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	429a      	cmp	r2, r3
 800512c:	d3af      	bcc.n	800508e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800512e:	2300      	movs	r3, #0
 8005130:	73fb      	strb	r3, [r7, #15]
 8005132:	e044      	b.n	80051be <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005134:	7bfa      	ldrb	r2, [r7, #15]
 8005136:	6879      	ldr	r1, [r7, #4]
 8005138:	4613      	mov	r3, r2
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	1a9b      	subs	r3, r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	440b      	add	r3, r1
 8005142:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005146:	2200      	movs	r2, #0
 8005148:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800514a:	7bfa      	ldrb	r2, [r7, #15]
 800514c:	6879      	ldr	r1, [r7, #4]
 800514e:	4613      	mov	r3, r2
 8005150:	00db      	lsls	r3, r3, #3
 8005152:	1a9b      	subs	r3, r3, r2
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	440b      	add	r3, r1
 8005158:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800515c:	7bfa      	ldrb	r2, [r7, #15]
 800515e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005160:	7bfa      	ldrb	r2, [r7, #15]
 8005162:	6879      	ldr	r1, [r7, #4]
 8005164:	4613      	mov	r3, r2
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	1a9b      	subs	r3, r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	440b      	add	r3, r1
 800516e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005172:	2200      	movs	r2, #0
 8005174:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005176:	7bfa      	ldrb	r2, [r7, #15]
 8005178:	6879      	ldr	r1, [r7, #4]
 800517a:	4613      	mov	r3, r2
 800517c:	00db      	lsls	r3, r3, #3
 800517e:	1a9b      	subs	r3, r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	440b      	add	r3, r1
 8005184:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800518c:	7bfa      	ldrb	r2, [r7, #15]
 800518e:	6879      	ldr	r1, [r7, #4]
 8005190:	4613      	mov	r3, r2
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	1a9b      	subs	r3, r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	440b      	add	r3, r1
 800519a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800519e:	2200      	movs	r2, #0
 80051a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80051a2:	7bfa      	ldrb	r2, [r7, #15]
 80051a4:	6879      	ldr	r1, [r7, #4]
 80051a6:	4613      	mov	r3, r2
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	1a9b      	subs	r3, r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	440b      	add	r3, r1
 80051b0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80051b4:	2200      	movs	r2, #0
 80051b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
 80051ba:	3301      	adds	r3, #1
 80051bc:	73fb      	strb	r3, [r7, #15]
 80051be:	7bfa      	ldrb	r2, [r7, #15]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d3b5      	bcc.n	8005134 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	603b      	str	r3, [r7, #0]
 80051ce:	687e      	ldr	r6, [r7, #4]
 80051d0:	466d      	mov	r5, sp
 80051d2:	f106 0410 	add.w	r4, r6, #16
 80051d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80051e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80051e6:	1d33      	adds	r3, r6, #4
 80051e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051ea:	6838      	ldr	r0, [r7, #0]
 80051ec:	f005 f9c4 	bl	800a578 <USB_DevInit>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d005      	beq.n	8005202 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2202      	movs	r2, #2
 80051fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e014      	b.n	800522c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	2b01      	cmp	r3, #1
 8005218:	d102      	bne.n	8005220 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f80a 	bl	8005234 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4618      	mov	r0, r3
 8005226:	f005 fb7e 	bl	800a926 <USB_DevDisconnect>

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005234 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005262:	4b05      	ldr	r3, [pc, #20]	; (8005278 <HAL_PCDEx_ActivateLPM+0x44>)
 8005264:	4313      	orrs	r3, r2
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr
 8005278:	10000003 	.word	0x10000003

0800527c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005284:	4b29      	ldr	r3, [pc, #164]	; (800532c <HAL_PWREx_ConfigSupply+0xb0>)
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f003 0307 	and.w	r3, r3, #7
 800528c:	2b06      	cmp	r3, #6
 800528e:	d00a      	beq.n	80052a6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005290:	4b26      	ldr	r3, [pc, #152]	; (800532c <HAL_PWREx_ConfigSupply+0xb0>)
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	429a      	cmp	r2, r3
 800529c:	d001      	beq.n	80052a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e040      	b.n	8005324 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80052a2:	2300      	movs	r3, #0
 80052a4:	e03e      	b.n	8005324 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80052a6:	4b21      	ldr	r3, [pc, #132]	; (800532c <HAL_PWREx_ConfigSupply+0xb0>)
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80052ae:	491f      	ldr	r1, [pc, #124]	; (800532c <HAL_PWREx_ConfigSupply+0xb0>)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80052b6:	f7fc fbeb 	bl	8001a90 <HAL_GetTick>
 80052ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052bc:	e009      	b.n	80052d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80052be:	f7fc fbe7 	bl	8001a90 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052cc:	d901      	bls.n	80052d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e028      	b.n	8005324 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052d2:	4b16      	ldr	r3, [pc, #88]	; (800532c <HAL_PWREx_ConfigSupply+0xb0>)
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052de:	d1ee      	bne.n	80052be <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b1e      	cmp	r3, #30
 80052e4:	d008      	beq.n	80052f8 <HAL_PWREx_ConfigSupply+0x7c>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b2e      	cmp	r3, #46	; 0x2e
 80052ea:	d005      	beq.n	80052f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b1d      	cmp	r3, #29
 80052f0:	d002      	beq.n	80052f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b2d      	cmp	r3, #45	; 0x2d
 80052f6:	d114      	bne.n	8005322 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80052f8:	f7fc fbca 	bl	8001a90 <HAL_GetTick>
 80052fc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80052fe:	e009      	b.n	8005314 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005300:	f7fc fbc6 	bl	8001a90 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800530e:	d901      	bls.n	8005314 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e007      	b.n	8005324 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005314:	4b05      	ldr	r3, [pc, #20]	; (800532c <HAL_PWREx_ConfigSupply+0xb0>)
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800531c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005320:	d1ee      	bne.n	8005300 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	58024800 	.word	0x58024800

08005330 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005334:	4b05      	ldr	r3, [pc, #20]	; (800534c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	4a04      	ldr	r2, [pc, #16]	; (800534c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800533a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800533e:	60d3      	str	r3, [r2, #12]
}
 8005340:	bf00      	nop
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	58024800 	.word	0x58024800

08005350 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b08c      	sub	sp, #48	; 0x30
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d102      	bne.n	8005364 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	f000 bc1c 	b.w	8005b9c <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 8087 	beq.w	8005480 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005372:	4b9e      	ldr	r3, [pc, #632]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800537a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800537c:	4b9b      	ldr	r3, [pc, #620]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 800537e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005380:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005384:	2b10      	cmp	r3, #16
 8005386:	d007      	beq.n	8005398 <HAL_RCC_OscConfig+0x48>
 8005388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538a:	2b18      	cmp	r3, #24
 800538c:	d110      	bne.n	80053b0 <HAL_RCC_OscConfig+0x60>
 800538e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005390:	f003 0303 	and.w	r3, r3, #3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d10b      	bne.n	80053b0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005398:	4b94      	ldr	r3, [pc, #592]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d06c      	beq.n	800547e <HAL_RCC_OscConfig+0x12e>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d168      	bne.n	800547e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e3f5      	b.n	8005b9c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053b8:	d106      	bne.n	80053c8 <HAL_RCC_OscConfig+0x78>
 80053ba:	4b8c      	ldr	r3, [pc, #560]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a8b      	ldr	r2, [pc, #556]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 80053c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053c4:	6013      	str	r3, [r2, #0]
 80053c6:	e02e      	b.n	8005426 <HAL_RCC_OscConfig+0xd6>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10c      	bne.n	80053ea <HAL_RCC_OscConfig+0x9a>
 80053d0:	4b86      	ldr	r3, [pc, #536]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a85      	ldr	r2, [pc, #532]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 80053d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053da:	6013      	str	r3, [r2, #0]
 80053dc:	4b83      	ldr	r3, [pc, #524]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a82      	ldr	r2, [pc, #520]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 80053e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053e6:	6013      	str	r3, [r2, #0]
 80053e8:	e01d      	b.n	8005426 <HAL_RCC_OscConfig+0xd6>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053f2:	d10c      	bne.n	800540e <HAL_RCC_OscConfig+0xbe>
 80053f4:	4b7d      	ldr	r3, [pc, #500]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a7c      	ldr	r2, [pc, #496]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 80053fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053fe:	6013      	str	r3, [r2, #0]
 8005400:	4b7a      	ldr	r3, [pc, #488]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a79      	ldr	r2, [pc, #484]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 8005406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800540a:	6013      	str	r3, [r2, #0]
 800540c:	e00b      	b.n	8005426 <HAL_RCC_OscConfig+0xd6>
 800540e:	4b77      	ldr	r3, [pc, #476]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a76      	ldr	r2, [pc, #472]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 8005414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005418:	6013      	str	r3, [r2, #0]
 800541a:	4b74      	ldr	r3, [pc, #464]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a73      	ldr	r2, [pc, #460]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 8005420:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005424:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d013      	beq.n	8005456 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800542e:	f7fc fb2f 	bl	8001a90 <HAL_GetTick>
 8005432:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005434:	e008      	b.n	8005448 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005436:	f7fc fb2b 	bl	8001a90 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	2b64      	cmp	r3, #100	; 0x64
 8005442:	d901      	bls.n	8005448 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e3a9      	b.n	8005b9c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005448:	4b68      	ldr	r3, [pc, #416]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d0f0      	beq.n	8005436 <HAL_RCC_OscConfig+0xe6>
 8005454:	e014      	b.n	8005480 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005456:	f7fc fb1b 	bl	8001a90 <HAL_GetTick>
 800545a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800545c:	e008      	b.n	8005470 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800545e:	f7fc fb17 	bl	8001a90 <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	2b64      	cmp	r3, #100	; 0x64
 800546a:	d901      	bls.n	8005470 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e395      	b.n	8005b9c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005470:	4b5e      	ldr	r3, [pc, #376]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1f0      	bne.n	800545e <HAL_RCC_OscConfig+0x10e>
 800547c:	e000      	b.n	8005480 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800547e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b00      	cmp	r3, #0
 800548a:	f000 80ca 	beq.w	8005622 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800548e:	4b57      	ldr	r3, [pc, #348]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005496:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005498:	4b54      	ldr	r3, [pc, #336]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 800549a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d007      	beq.n	80054b4 <HAL_RCC_OscConfig+0x164>
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	2b18      	cmp	r3, #24
 80054a8:	d156      	bne.n	8005558 <HAL_RCC_OscConfig+0x208>
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	f003 0303 	and.w	r3, r3, #3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d151      	bne.n	8005558 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054b4:	4b4d      	ldr	r3, [pc, #308]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d005      	beq.n	80054cc <HAL_RCC_OscConfig+0x17c>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d101      	bne.n	80054cc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e367      	b.n	8005b9c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80054cc:	4b47      	ldr	r3, [pc, #284]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f023 0219 	bic.w	r2, r3, #25
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	4944      	ldr	r1, [pc, #272]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054de:	f7fc fad7 	bl	8001a90 <HAL_GetTick>
 80054e2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054e4:	e008      	b.n	80054f8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054e6:	f7fc fad3 	bl	8001a90 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e351      	b.n	8005b9c <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054f8:	4b3c      	ldr	r3, [pc, #240]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0f0      	beq.n	80054e6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005504:	f7fc faf4 	bl	8001af0 <HAL_GetREVID>
 8005508:	4603      	mov	r3, r0
 800550a:	f241 0203 	movw	r2, #4099	; 0x1003
 800550e:	4293      	cmp	r3, r2
 8005510:	d817      	bhi.n	8005542 <HAL_RCC_OscConfig+0x1f2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	2b40      	cmp	r3, #64	; 0x40
 8005518:	d108      	bne.n	800552c <HAL_RCC_OscConfig+0x1dc>
 800551a:	4b34      	ldr	r3, [pc, #208]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005522:	4a32      	ldr	r2, [pc, #200]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 8005524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005528:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800552a:	e07a      	b.n	8005622 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800552c:	4b2f      	ldr	r3, [pc, #188]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	031b      	lsls	r3, r3, #12
 800553a:	492c      	ldr	r1, [pc, #176]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 800553c:	4313      	orrs	r3, r2
 800553e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005540:	e06f      	b.n	8005622 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005542:	4b2a      	ldr	r3, [pc, #168]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	061b      	lsls	r3, r3, #24
 8005550:	4926      	ldr	r1, [pc, #152]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 8005552:	4313      	orrs	r3, r2
 8005554:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005556:	e064      	b.n	8005622 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d047      	beq.n	80055f0 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005560:	4b22      	ldr	r3, [pc, #136]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f023 0219 	bic.w	r2, r3, #25
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	491f      	ldr	r1, [pc, #124]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 800556e:	4313      	orrs	r3, r2
 8005570:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005572:	f7fc fa8d 	bl	8001a90 <HAL_GetTick>
 8005576:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005578:	e008      	b.n	800558c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800557a:	f7fc fa89 	bl	8001a90 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	2b02      	cmp	r3, #2
 8005586:	d901      	bls.n	800558c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e307      	b.n	8005b9c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800558c:	4b17      	ldr	r3, [pc, #92]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b00      	cmp	r3, #0
 8005596:	d0f0      	beq.n	800557a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005598:	f7fc faaa 	bl	8001af0 <HAL_GetREVID>
 800559c:	4603      	mov	r3, r0
 800559e:	f241 0203 	movw	r2, #4099	; 0x1003
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d817      	bhi.n	80055d6 <HAL_RCC_OscConfig+0x286>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	2b40      	cmp	r3, #64	; 0x40
 80055ac:	d108      	bne.n	80055c0 <HAL_RCC_OscConfig+0x270>
 80055ae:	4b0f      	ldr	r3, [pc, #60]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80055b6:	4a0d      	ldr	r2, [pc, #52]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 80055b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055bc:	6053      	str	r3, [r2, #4]
 80055be:	e030      	b.n	8005622 <HAL_RCC_OscConfig+0x2d2>
 80055c0:	4b0a      	ldr	r3, [pc, #40]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	031b      	lsls	r3, r3, #12
 80055ce:	4907      	ldr	r1, [pc, #28]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	604b      	str	r3, [r1, #4]
 80055d4:	e025      	b.n	8005622 <HAL_RCC_OscConfig+0x2d2>
 80055d6:	4b05      	ldr	r3, [pc, #20]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	061b      	lsls	r3, r3, #24
 80055e4:	4901      	ldr	r1, [pc, #4]	; (80055ec <HAL_RCC_OscConfig+0x29c>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	604b      	str	r3, [r1, #4]
 80055ea:	e01a      	b.n	8005622 <HAL_RCC_OscConfig+0x2d2>
 80055ec:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055f0:	4b9e      	ldr	r3, [pc, #632]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a9d      	ldr	r2, [pc, #628]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 80055f6:	f023 0301 	bic.w	r3, r3, #1
 80055fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fc:	f7fc fa48 	bl	8001a90 <HAL_GetTick>
 8005600:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005602:	e008      	b.n	8005616 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005604:	f7fc fa44 	bl	8001a90 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e2c2      	b.n	8005b9c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005616:	4b95      	ldr	r3, [pc, #596]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0304 	and.w	r3, r3, #4
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1f0      	bne.n	8005604 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0310 	and.w	r3, r3, #16
 800562a:	2b00      	cmp	r3, #0
 800562c:	f000 80a9 	beq.w	8005782 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005630:	4b8e      	ldr	r3, [pc, #568]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005638:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800563a:	4b8c      	ldr	r3, [pc, #560]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 800563c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	2b08      	cmp	r3, #8
 8005644:	d007      	beq.n	8005656 <HAL_RCC_OscConfig+0x306>
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	2b18      	cmp	r3, #24
 800564a:	d13a      	bne.n	80056c2 <HAL_RCC_OscConfig+0x372>
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f003 0303 	and.w	r3, r3, #3
 8005652:	2b01      	cmp	r3, #1
 8005654:	d135      	bne.n	80056c2 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005656:	4b85      	ldr	r3, [pc, #532]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565e:	2b00      	cmp	r3, #0
 8005660:	d005      	beq.n	800566e <HAL_RCC_OscConfig+0x31e>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	2b80      	cmp	r3, #128	; 0x80
 8005668:	d001      	beq.n	800566e <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e296      	b.n	8005b9c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800566e:	f7fc fa3f 	bl	8001af0 <HAL_GetREVID>
 8005672:	4603      	mov	r3, r0
 8005674:	f241 0203 	movw	r2, #4099	; 0x1003
 8005678:	4293      	cmp	r3, r2
 800567a:	d817      	bhi.n	80056ac <HAL_RCC_OscConfig+0x35c>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	2b20      	cmp	r3, #32
 8005682:	d108      	bne.n	8005696 <HAL_RCC_OscConfig+0x346>
 8005684:	4b79      	ldr	r3, [pc, #484]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800568c:	4a77      	ldr	r2, [pc, #476]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 800568e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005692:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005694:	e075      	b.n	8005782 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005696:	4b75      	ldr	r3, [pc, #468]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	069b      	lsls	r3, r3, #26
 80056a4:	4971      	ldr	r1, [pc, #452]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80056aa:	e06a      	b.n	8005782 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056ac:	4b6f      	ldr	r3, [pc, #444]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a1b      	ldr	r3, [r3, #32]
 80056b8:	061b      	lsls	r3, r3, #24
 80056ba:	496c      	ldr	r1, [pc, #432]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80056c0:	e05f      	b.n	8005782 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d042      	beq.n	8005750 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80056ca:	4b68      	ldr	r3, [pc, #416]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a67      	ldr	r2, [pc, #412]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 80056d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d6:	f7fc f9db 	bl	8001a90 <HAL_GetTick>
 80056da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056dc:	e008      	b.n	80056f0 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80056de:	f7fc f9d7 	bl	8001a90 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e255      	b.n	8005b9c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056f0:	4b5e      	ldr	r3, [pc, #376]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d0f0      	beq.n	80056de <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056fc:	f7fc f9f8 	bl	8001af0 <HAL_GetREVID>
 8005700:	4603      	mov	r3, r0
 8005702:	f241 0203 	movw	r2, #4099	; 0x1003
 8005706:	4293      	cmp	r3, r2
 8005708:	d817      	bhi.n	800573a <HAL_RCC_OscConfig+0x3ea>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	2b20      	cmp	r3, #32
 8005710:	d108      	bne.n	8005724 <HAL_RCC_OscConfig+0x3d4>
 8005712:	4b56      	ldr	r3, [pc, #344]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800571a:	4a54      	ldr	r2, [pc, #336]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 800571c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005720:	6053      	str	r3, [r2, #4]
 8005722:	e02e      	b.n	8005782 <HAL_RCC_OscConfig+0x432>
 8005724:	4b51      	ldr	r3, [pc, #324]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a1b      	ldr	r3, [r3, #32]
 8005730:	069b      	lsls	r3, r3, #26
 8005732:	494e      	ldr	r1, [pc, #312]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 8005734:	4313      	orrs	r3, r2
 8005736:	604b      	str	r3, [r1, #4]
 8005738:	e023      	b.n	8005782 <HAL_RCC_OscConfig+0x432>
 800573a:	4b4c      	ldr	r3, [pc, #304]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	061b      	lsls	r3, r3, #24
 8005748:	4948      	ldr	r1, [pc, #288]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 800574a:	4313      	orrs	r3, r2
 800574c:	60cb      	str	r3, [r1, #12]
 800574e:	e018      	b.n	8005782 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005750:	4b46      	ldr	r3, [pc, #280]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a45      	ldr	r2, [pc, #276]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 8005756:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800575a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800575c:	f7fc f998 	bl	8001a90 <HAL_GetTick>
 8005760:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005762:	e008      	b.n	8005776 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005764:	f7fc f994 	bl	8001a90 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b02      	cmp	r3, #2
 8005770:	d901      	bls.n	8005776 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e212      	b.n	8005b9c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005776:	4b3d      	ldr	r3, [pc, #244]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1f0      	bne.n	8005764 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0308 	and.w	r3, r3, #8
 800578a:	2b00      	cmp	r3, #0
 800578c:	d036      	beq.n	80057fc <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d019      	beq.n	80057ca <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005796:	4b35      	ldr	r3, [pc, #212]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 8005798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800579a:	4a34      	ldr	r2, [pc, #208]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 800579c:	f043 0301 	orr.w	r3, r3, #1
 80057a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a2:	f7fc f975 	bl	8001a90 <HAL_GetTick>
 80057a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80057a8:	e008      	b.n	80057bc <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057aa:	f7fc f971 	bl	8001a90 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e1ef      	b.n	8005b9c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80057bc:	4b2b      	ldr	r3, [pc, #172]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 80057be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d0f0      	beq.n	80057aa <HAL_RCC_OscConfig+0x45a>
 80057c8:	e018      	b.n	80057fc <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057ca:	4b28      	ldr	r3, [pc, #160]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 80057cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ce:	4a27      	ldr	r2, [pc, #156]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 80057d0:	f023 0301 	bic.w	r3, r3, #1
 80057d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d6:	f7fc f95b 	bl	8001a90 <HAL_GetTick>
 80057da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80057dc:	e008      	b.n	80057f0 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057de:	f7fc f957 	bl	8001a90 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d901      	bls.n	80057f0 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e1d5      	b.n	8005b9c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80057f0:	4b1e      	ldr	r3, [pc, #120]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 80057f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1f0      	bne.n	80057de <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0320 	and.w	r3, r3, #32
 8005804:	2b00      	cmp	r3, #0
 8005806:	d039      	beq.n	800587c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d019      	beq.n	8005844 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005810:	4b16      	ldr	r3, [pc, #88]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a15      	ldr	r2, [pc, #84]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 8005816:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800581a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800581c:	f7fc f938 	bl	8001a90 <HAL_GetTick>
 8005820:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005824:	f7fc f934 	bl	8001a90 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b02      	cmp	r3, #2
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e1b2      	b.n	8005b9c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005836:	4b0d      	ldr	r3, [pc, #52]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d0f0      	beq.n	8005824 <HAL_RCC_OscConfig+0x4d4>
 8005842:	e01b      	b.n	800587c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005844:	4b09      	ldr	r3, [pc, #36]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a08      	ldr	r2, [pc, #32]	; (800586c <HAL_RCC_OscConfig+0x51c>)
 800584a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800584e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005850:	f7fc f91e 	bl	8001a90 <HAL_GetTick>
 8005854:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005856:	e00b      	b.n	8005870 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005858:	f7fc f91a 	bl	8001a90 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d904      	bls.n	8005870 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e198      	b.n	8005b9c <HAL_RCC_OscConfig+0x84c>
 800586a:	bf00      	nop
 800586c:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005870:	4ba3      	ldr	r3, [pc, #652]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1ed      	bne.n	8005858 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 8081 	beq.w	800598c <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800588a:	4b9e      	ldr	r3, [pc, #632]	; (8005b04 <HAL_RCC_OscConfig+0x7b4>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a9d      	ldr	r2, [pc, #628]	; (8005b04 <HAL_RCC_OscConfig+0x7b4>)
 8005890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005894:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005896:	f7fc f8fb 	bl	8001a90 <HAL_GetTick>
 800589a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800589c:	e008      	b.n	80058b0 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800589e:	f7fc f8f7 	bl	8001a90 <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	2b64      	cmp	r3, #100	; 0x64
 80058aa:	d901      	bls.n	80058b0 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e175      	b.n	8005b9c <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058b0:	4b94      	ldr	r3, [pc, #592]	; (8005b04 <HAL_RCC_OscConfig+0x7b4>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d0f0      	beq.n	800589e <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d106      	bne.n	80058d2 <HAL_RCC_OscConfig+0x582>
 80058c4:	4b8e      	ldr	r3, [pc, #568]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 80058c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c8:	4a8d      	ldr	r2, [pc, #564]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 80058ca:	f043 0301 	orr.w	r3, r3, #1
 80058ce:	6713      	str	r3, [r2, #112]	; 0x70
 80058d0:	e02d      	b.n	800592e <HAL_RCC_OscConfig+0x5de>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10c      	bne.n	80058f4 <HAL_RCC_OscConfig+0x5a4>
 80058da:	4b89      	ldr	r3, [pc, #548]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 80058dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058de:	4a88      	ldr	r2, [pc, #544]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 80058e0:	f023 0301 	bic.w	r3, r3, #1
 80058e4:	6713      	str	r3, [r2, #112]	; 0x70
 80058e6:	4b86      	ldr	r3, [pc, #536]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 80058e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ea:	4a85      	ldr	r2, [pc, #532]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 80058ec:	f023 0304 	bic.w	r3, r3, #4
 80058f0:	6713      	str	r3, [r2, #112]	; 0x70
 80058f2:	e01c      	b.n	800592e <HAL_RCC_OscConfig+0x5de>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	2b05      	cmp	r3, #5
 80058fa:	d10c      	bne.n	8005916 <HAL_RCC_OscConfig+0x5c6>
 80058fc:	4b80      	ldr	r3, [pc, #512]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 80058fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005900:	4a7f      	ldr	r2, [pc, #508]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 8005902:	f043 0304 	orr.w	r3, r3, #4
 8005906:	6713      	str	r3, [r2, #112]	; 0x70
 8005908:	4b7d      	ldr	r3, [pc, #500]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 800590a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590c:	4a7c      	ldr	r2, [pc, #496]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 800590e:	f043 0301 	orr.w	r3, r3, #1
 8005912:	6713      	str	r3, [r2, #112]	; 0x70
 8005914:	e00b      	b.n	800592e <HAL_RCC_OscConfig+0x5de>
 8005916:	4b7a      	ldr	r3, [pc, #488]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 8005918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591a:	4a79      	ldr	r2, [pc, #484]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 800591c:	f023 0301 	bic.w	r3, r3, #1
 8005920:	6713      	str	r3, [r2, #112]	; 0x70
 8005922:	4b77      	ldr	r3, [pc, #476]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 8005924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005926:	4a76      	ldr	r2, [pc, #472]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 8005928:	f023 0304 	bic.w	r3, r3, #4
 800592c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d015      	beq.n	8005962 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005936:	f7fc f8ab 	bl	8001a90 <HAL_GetTick>
 800593a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800593c:	e00a      	b.n	8005954 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800593e:	f7fc f8a7 	bl	8001a90 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	f241 3288 	movw	r2, #5000	; 0x1388
 800594c:	4293      	cmp	r3, r2
 800594e:	d901      	bls.n	8005954 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e123      	b.n	8005b9c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005954:	4b6a      	ldr	r3, [pc, #424]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 8005956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d0ee      	beq.n	800593e <HAL_RCC_OscConfig+0x5ee>
 8005960:	e014      	b.n	800598c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005962:	f7fc f895 	bl	8001a90 <HAL_GetTick>
 8005966:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005968:	e00a      	b.n	8005980 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800596a:	f7fc f891 	bl	8001a90 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	f241 3288 	movw	r2, #5000	; 0x1388
 8005978:	4293      	cmp	r3, r2
 800597a:	d901      	bls.n	8005980 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e10d      	b.n	8005b9c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005980:	4b5f      	ldr	r3, [pc, #380]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 8005982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005984:	f003 0302 	and.w	r3, r3, #2
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1ee      	bne.n	800596a <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 8102 	beq.w	8005b9a <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005996:	4b5a      	ldr	r3, [pc, #360]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800599e:	2b18      	cmp	r3, #24
 80059a0:	f000 80bd 	beq.w	8005b1e <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	f040 8095 	bne.w	8005ad8 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ae:	4b54      	ldr	r3, [pc, #336]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a53      	ldr	r2, [pc, #332]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 80059b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ba:	f7fc f869 	bl	8001a90 <HAL_GetTick>
 80059be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059c0:	e008      	b.n	80059d4 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059c2:	f7fc f865 	bl	8001a90 <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d901      	bls.n	80059d4 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e0e3      	b.n	8005b9c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059d4:	4b4a      	ldr	r3, [pc, #296]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1f0      	bne.n	80059c2 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059e0:	4b47      	ldr	r3, [pc, #284]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 80059e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059e4:	4b48      	ldr	r3, [pc, #288]	; (8005b08 <HAL_RCC_OscConfig+0x7b8>)
 80059e6:	4013      	ands	r3, r2
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80059f0:	0112      	lsls	r2, r2, #4
 80059f2:	430a      	orrs	r2, r1
 80059f4:	4942      	ldr	r1, [pc, #264]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	628b      	str	r3, [r1, #40]	; 0x28
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fe:	3b01      	subs	r3, #1
 8005a00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	025b      	lsls	r3, r3, #9
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a14:	3b01      	subs	r3, #1
 8005a16:	041b      	lsls	r3, r3, #16
 8005a18:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a22:	3b01      	subs	r3, #1
 8005a24:	061b      	lsls	r3, r3, #24
 8005a26:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a2a:	4935      	ldr	r1, [pc, #212]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005a30:	4b33      	ldr	r3, [pc, #204]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 8005a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a34:	4a32      	ldr	r2, [pc, #200]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 8005a36:	f023 0301 	bic.w	r3, r3, #1
 8005a3a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005a3c:	4b30      	ldr	r3, [pc, #192]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 8005a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a40:	4b32      	ldr	r3, [pc, #200]	; (8005b0c <HAL_RCC_OscConfig+0x7bc>)
 8005a42:	4013      	ands	r3, r2
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005a48:	00d2      	lsls	r2, r2, #3
 8005a4a:	492d      	ldr	r1, [pc, #180]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005a50:	4b2b      	ldr	r3, [pc, #172]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 8005a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a54:	f023 020c 	bic.w	r2, r3, #12
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5c:	4928      	ldr	r1, [pc, #160]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005a62:	4b27      	ldr	r3, [pc, #156]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 8005a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a66:	f023 0202 	bic.w	r2, r3, #2
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6e:	4924      	ldr	r1, [pc, #144]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a74:	4b22      	ldr	r3, [pc, #136]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 8005a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a78:	4a21      	ldr	r2, [pc, #132]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 8005a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a80:	4b1f      	ldr	r3, [pc, #124]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 8005a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a84:	4a1e      	ldr	r2, [pc, #120]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 8005a86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005a8c:	4b1c      	ldr	r3, [pc, #112]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 8005a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a90:	4a1b      	ldr	r2, [pc, #108]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 8005a92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005a98:	4b19      	ldr	r3, [pc, #100]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 8005a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9c:	4a18      	ldr	r2, [pc, #96]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 8005a9e:	f043 0301 	orr.w	r3, r3, #1
 8005aa2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005aa4:	4b16      	ldr	r3, [pc, #88]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a15      	ldr	r2, [pc, #84]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 8005aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab0:	f7fb ffee 	bl	8001a90 <HAL_GetTick>
 8005ab4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ab6:	e008      	b.n	8005aca <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ab8:	f7fb ffea 	bl	8001a90 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d901      	bls.n	8005aca <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e068      	b.n	8005b9c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005aca:	4b0d      	ldr	r3, [pc, #52]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d0f0      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x768>
 8005ad6:	e060      	b.n	8005b9a <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ad8:	4b09      	ldr	r3, [pc, #36]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a08      	ldr	r2, [pc, #32]	; (8005b00 <HAL_RCC_OscConfig+0x7b0>)
 8005ade:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae4:	f7fb ffd4 	bl	8001a90 <HAL_GetTick>
 8005ae8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005aea:	e011      	b.n	8005b10 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aec:	f7fb ffd0 	bl	8001a90 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d90a      	bls.n	8005b10 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e04e      	b.n	8005b9c <HAL_RCC_OscConfig+0x84c>
 8005afe:	bf00      	nop
 8005b00:	58024400 	.word	0x58024400
 8005b04:	58024800 	.word	0x58024800
 8005b08:	fffffc0c 	.word	0xfffffc0c
 8005b0c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b10:	4b24      	ldr	r3, [pc, #144]	; (8005ba4 <HAL_RCC_OscConfig+0x854>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1e7      	bne.n	8005aec <HAL_RCC_OscConfig+0x79c>
 8005b1c:	e03d      	b.n	8005b9a <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005b1e:	4b21      	ldr	r3, [pc, #132]	; (8005ba4 <HAL_RCC_OscConfig+0x854>)
 8005b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b22:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005b24:	4b1f      	ldr	r3, [pc, #124]	; (8005ba4 <HAL_RCC_OscConfig+0x854>)
 8005b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b28:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d031      	beq.n	8005b96 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	f003 0203 	and.w	r2, r3, #3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d12a      	bne.n	8005b96 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	091b      	lsrs	r3, r3, #4
 8005b44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d122      	bne.n	8005b96 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d11a      	bne.n	8005b96 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	0a5b      	lsrs	r3, r3, #9
 8005b64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b6c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d111      	bne.n	8005b96 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	0c1b      	lsrs	r3, r3, #16
 8005b76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d108      	bne.n	8005b96 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	0e1b      	lsrs	r3, r3, #24
 8005b88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b90:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d001      	beq.n	8005b9a <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e000      	b.n	8005b9c <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3730      	adds	r7, #48	; 0x30
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	58024400 	.word	0x58024400

08005ba8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e19c      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bbc:	4b8a      	ldr	r3, [pc, #552]	; (8005de8 <HAL_RCC_ClockConfig+0x240>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 030f 	and.w	r3, r3, #15
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d910      	bls.n	8005bec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bca:	4b87      	ldr	r3, [pc, #540]	; (8005de8 <HAL_RCC_ClockConfig+0x240>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f023 020f 	bic.w	r2, r3, #15
 8005bd2:	4985      	ldr	r1, [pc, #532]	; (8005de8 <HAL_RCC_ClockConfig+0x240>)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bda:	4b83      	ldr	r3, [pc, #524]	; (8005de8 <HAL_RCC_ClockConfig+0x240>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 030f 	and.w	r3, r3, #15
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d001      	beq.n	8005bec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e184      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0304 	and.w	r3, r3, #4
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d010      	beq.n	8005c1a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	691a      	ldr	r2, [r3, #16]
 8005bfc:	4b7b      	ldr	r3, [pc, #492]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d908      	bls.n	8005c1a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c08:	4b78      	ldr	r3, [pc, #480]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	4975      	ldr	r1, [pc, #468]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0308 	and.w	r3, r3, #8
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d010      	beq.n	8005c48 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	695a      	ldr	r2, [r3, #20]
 8005c2a:	4b70      	ldr	r3, [pc, #448]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d908      	bls.n	8005c48 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c36:	4b6d      	ldr	r3, [pc, #436]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	496a      	ldr	r1, [pc, #424]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0310 	and.w	r3, r3, #16
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d010      	beq.n	8005c76 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	699a      	ldr	r2, [r3, #24]
 8005c58:	4b64      	ldr	r3, [pc, #400]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005c5a:	69db      	ldr	r3, [r3, #28]
 8005c5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d908      	bls.n	8005c76 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c64:	4b61      	ldr	r3, [pc, #388]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	495e      	ldr	r1, [pc, #376]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0320 	and.w	r3, r3, #32
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d010      	beq.n	8005ca4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	69da      	ldr	r2, [r3, #28]
 8005c86:	4b59      	ldr	r3, [pc, #356]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d908      	bls.n	8005ca4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005c92:	4b56      	ldr	r3, [pc, #344]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	4953      	ldr	r1, [pc, #332]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0302 	and.w	r3, r3, #2
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d010      	beq.n	8005cd2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	68da      	ldr	r2, [r3, #12]
 8005cb4:	4b4d      	ldr	r3, [pc, #308]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	f003 030f 	and.w	r3, r3, #15
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d908      	bls.n	8005cd2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cc0:	4b4a      	ldr	r3, [pc, #296]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	f023 020f 	bic.w	r2, r3, #15
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	4947      	ldr	r1, [pc, #284]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d055      	beq.n	8005d8a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005cde:	4b43      	ldr	r3, [pc, #268]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	4940      	ldr	r1, [pc, #256]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d107      	bne.n	8005d08 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005cf8:	4b3c      	ldr	r3, [pc, #240]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d121      	bne.n	8005d48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e0f6      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	2b03      	cmp	r3, #3
 8005d0e:	d107      	bne.n	8005d20 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d10:	4b36      	ldr	r3, [pc, #216]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d115      	bne.n	8005d48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e0ea      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d107      	bne.n	8005d38 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d28:	4b30      	ldr	r3, [pc, #192]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d109      	bne.n	8005d48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e0de      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d38:	4b2c      	ldr	r3, [pc, #176]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d101      	bne.n	8005d48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e0d6      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d48:	4b28      	ldr	r3, [pc, #160]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	f023 0207 	bic.w	r2, r3, #7
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	4925      	ldr	r1, [pc, #148]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d5a:	f7fb fe99 	bl	8001a90 <HAL_GetTick>
 8005d5e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d60:	e00a      	b.n	8005d78 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d62:	f7fb fe95 	bl	8001a90 <HAL_GetTick>
 8005d66:	4602      	mov	r2, r0
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d901      	bls.n	8005d78 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e0be      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d78:	4b1c      	ldr	r3, [pc, #112]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d1eb      	bne.n	8005d62 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d010      	beq.n	8005db8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	4b14      	ldr	r3, [pc, #80]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	f003 030f 	and.w	r3, r3, #15
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d208      	bcs.n	8005db8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005da6:	4b11      	ldr	r3, [pc, #68]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	f023 020f 	bic.w	r2, r3, #15
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	490e      	ldr	r1, [pc, #56]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005db8:	4b0b      	ldr	r3, [pc, #44]	; (8005de8 <HAL_RCC_ClockConfig+0x240>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 030f 	and.w	r3, r3, #15
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d214      	bcs.n	8005df0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dc6:	4b08      	ldr	r3, [pc, #32]	; (8005de8 <HAL_RCC_ClockConfig+0x240>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f023 020f 	bic.w	r2, r3, #15
 8005dce:	4906      	ldr	r1, [pc, #24]	; (8005de8 <HAL_RCC_ClockConfig+0x240>)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dd6:	4b04      	ldr	r3, [pc, #16]	; (8005de8 <HAL_RCC_ClockConfig+0x240>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 030f 	and.w	r3, r3, #15
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d005      	beq.n	8005df0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e086      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x34e>
 8005de8:	52002000 	.word	0x52002000
 8005dec:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0304 	and.w	r3, r3, #4
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d010      	beq.n	8005e1e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	691a      	ldr	r2, [r3, #16]
 8005e00:	4b3f      	ldr	r3, [pc, #252]	; (8005f00 <HAL_RCC_ClockConfig+0x358>)
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d208      	bcs.n	8005e1e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005e0c:	4b3c      	ldr	r3, [pc, #240]	; (8005f00 <HAL_RCC_ClockConfig+0x358>)
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	4939      	ldr	r1, [pc, #228]	; (8005f00 <HAL_RCC_ClockConfig+0x358>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0308 	and.w	r3, r3, #8
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d010      	beq.n	8005e4c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	695a      	ldr	r2, [r3, #20]
 8005e2e:	4b34      	ldr	r3, [pc, #208]	; (8005f00 <HAL_RCC_ClockConfig+0x358>)
 8005e30:	69db      	ldr	r3, [r3, #28]
 8005e32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d208      	bcs.n	8005e4c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e3a:	4b31      	ldr	r3, [pc, #196]	; (8005f00 <HAL_RCC_ClockConfig+0x358>)
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	492e      	ldr	r1, [pc, #184]	; (8005f00 <HAL_RCC_ClockConfig+0x358>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0310 	and.w	r3, r3, #16
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d010      	beq.n	8005e7a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	699a      	ldr	r2, [r3, #24]
 8005e5c:	4b28      	ldr	r3, [pc, #160]	; (8005f00 <HAL_RCC_ClockConfig+0x358>)
 8005e5e:	69db      	ldr	r3, [r3, #28]
 8005e60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d208      	bcs.n	8005e7a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e68:	4b25      	ldr	r3, [pc, #148]	; (8005f00 <HAL_RCC_ClockConfig+0x358>)
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	4922      	ldr	r1, [pc, #136]	; (8005f00 <HAL_RCC_ClockConfig+0x358>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 0320 	and.w	r3, r3, #32
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d010      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	69da      	ldr	r2, [r3, #28]
 8005e8a:	4b1d      	ldr	r3, [pc, #116]	; (8005f00 <HAL_RCC_ClockConfig+0x358>)
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d208      	bcs.n	8005ea8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005e96:	4b1a      	ldr	r3, [pc, #104]	; (8005f00 <HAL_RCC_ClockConfig+0x358>)
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	4917      	ldr	r1, [pc, #92]	; (8005f00 <HAL_RCC_ClockConfig+0x358>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005ea8:	f000 f834 	bl	8005f14 <HAL_RCC_GetSysClockFreq>
 8005eac:	4602      	mov	r2, r0
 8005eae:	4b14      	ldr	r3, [pc, #80]	; (8005f00 <HAL_RCC_ClockConfig+0x358>)
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	0a1b      	lsrs	r3, r3, #8
 8005eb4:	f003 030f 	and.w	r3, r3, #15
 8005eb8:	4912      	ldr	r1, [pc, #72]	; (8005f04 <HAL_RCC_ClockConfig+0x35c>)
 8005eba:	5ccb      	ldrb	r3, [r1, r3]
 8005ebc:	f003 031f 	and.w	r3, r3, #31
 8005ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ec6:	4b0e      	ldr	r3, [pc, #56]	; (8005f00 <HAL_RCC_ClockConfig+0x358>)
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	f003 030f 	and.w	r3, r3, #15
 8005ece:	4a0d      	ldr	r2, [pc, #52]	; (8005f04 <HAL_RCC_ClockConfig+0x35c>)
 8005ed0:	5cd3      	ldrb	r3, [r2, r3]
 8005ed2:	f003 031f 	and.w	r3, r3, #31
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8005edc:	4a0a      	ldr	r2, [pc, #40]	; (8005f08 <HAL_RCC_ClockConfig+0x360>)
 8005ede:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ee0:	4a0a      	ldr	r2, [pc, #40]	; (8005f0c <HAL_RCC_ClockConfig+0x364>)
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005ee6:	4b0a      	ldr	r3, [pc, #40]	; (8005f10 <HAL_RCC_ClockConfig+0x368>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7fb fd86 	bl	80019fc <HAL_InitTick>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	58024400 	.word	0x58024400
 8005f04:	0800aa58 	.word	0x0800aa58
 8005f08:	24000004 	.word	0x24000004
 8005f0c:	24000000 	.word	0x24000000
 8005f10:	2400001c 	.word	0x2400001c

08005f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b089      	sub	sp, #36	; 0x24
 8005f18:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f1a:	4bb3      	ldr	r3, [pc, #716]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f22:	2b18      	cmp	r3, #24
 8005f24:	f200 8155 	bhi.w	80061d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005f28:	a201      	add	r2, pc, #4	; (adr r2, 8005f30 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2e:	bf00      	nop
 8005f30:	08005f95 	.word	0x08005f95
 8005f34:	080061d3 	.word	0x080061d3
 8005f38:	080061d3 	.word	0x080061d3
 8005f3c:	080061d3 	.word	0x080061d3
 8005f40:	080061d3 	.word	0x080061d3
 8005f44:	080061d3 	.word	0x080061d3
 8005f48:	080061d3 	.word	0x080061d3
 8005f4c:	080061d3 	.word	0x080061d3
 8005f50:	08005fbb 	.word	0x08005fbb
 8005f54:	080061d3 	.word	0x080061d3
 8005f58:	080061d3 	.word	0x080061d3
 8005f5c:	080061d3 	.word	0x080061d3
 8005f60:	080061d3 	.word	0x080061d3
 8005f64:	080061d3 	.word	0x080061d3
 8005f68:	080061d3 	.word	0x080061d3
 8005f6c:	080061d3 	.word	0x080061d3
 8005f70:	08005fc1 	.word	0x08005fc1
 8005f74:	080061d3 	.word	0x080061d3
 8005f78:	080061d3 	.word	0x080061d3
 8005f7c:	080061d3 	.word	0x080061d3
 8005f80:	080061d3 	.word	0x080061d3
 8005f84:	080061d3 	.word	0x080061d3
 8005f88:	080061d3 	.word	0x080061d3
 8005f8c:	080061d3 	.word	0x080061d3
 8005f90:	08005fc7 	.word	0x08005fc7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f94:	4b94      	ldr	r3, [pc, #592]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0320 	and.w	r3, r3, #32
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d009      	beq.n	8005fb4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005fa0:	4b91      	ldr	r3, [pc, #580]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	08db      	lsrs	r3, r3, #3
 8005fa6:	f003 0303 	and.w	r3, r3, #3
 8005faa:	4a90      	ldr	r2, [pc, #576]	; (80061ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005fac:	fa22 f303 	lsr.w	r3, r2, r3
 8005fb0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005fb2:	e111      	b.n	80061d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005fb4:	4b8d      	ldr	r3, [pc, #564]	; (80061ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005fb6:	61bb      	str	r3, [r7, #24]
    break;
 8005fb8:	e10e      	b.n	80061d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005fba:	4b8d      	ldr	r3, [pc, #564]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005fbc:	61bb      	str	r3, [r7, #24]
    break;
 8005fbe:	e10b      	b.n	80061d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005fc0:	4b8c      	ldr	r3, [pc, #560]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005fc2:	61bb      	str	r3, [r7, #24]
    break;
 8005fc4:	e108      	b.n	80061d8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005fc6:	4b88      	ldr	r3, [pc, #544]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fca:	f003 0303 	and.w	r3, r3, #3
 8005fce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005fd0:	4b85      	ldr	r3, [pc, #532]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd4:	091b      	lsrs	r3, r3, #4
 8005fd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fda:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005fdc:	4b82      	ldr	r3, [pc, #520]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005fe6:	4b80      	ldr	r3, [pc, #512]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fea:	08db      	lsrs	r3, r3, #3
 8005fec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	fb02 f303 	mul.w	r3, r2, r3
 8005ff6:	ee07 3a90 	vmov	s15, r3
 8005ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ffe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	2b00      	cmp	r3, #0
 8006006:	f000 80e1 	beq.w	80061cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	2b02      	cmp	r3, #2
 800600e:	f000 8083 	beq.w	8006118 <HAL_RCC_GetSysClockFreq+0x204>
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2b02      	cmp	r3, #2
 8006016:	f200 80a1 	bhi.w	800615c <HAL_RCC_GetSysClockFreq+0x248>
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d003      	beq.n	8006028 <HAL_RCC_GetSysClockFreq+0x114>
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d056      	beq.n	80060d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006026:	e099      	b.n	800615c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006028:	4b6f      	ldr	r3, [pc, #444]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0320 	and.w	r3, r3, #32
 8006030:	2b00      	cmp	r3, #0
 8006032:	d02d      	beq.n	8006090 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006034:	4b6c      	ldr	r3, [pc, #432]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	08db      	lsrs	r3, r3, #3
 800603a:	f003 0303 	and.w	r3, r3, #3
 800603e:	4a6b      	ldr	r2, [pc, #428]	; (80061ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006040:	fa22 f303 	lsr.w	r3, r2, r3
 8006044:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	ee07 3a90 	vmov	s15, r3
 800604c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	ee07 3a90 	vmov	s15, r3
 8006056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800605a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800605e:	4b62      	ldr	r3, [pc, #392]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006066:	ee07 3a90 	vmov	s15, r3
 800606a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800606e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006072:	eddf 5a61 	vldr	s11, [pc, #388]	; 80061f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800607a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800607e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800608a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800608e:	e087      	b.n	80061a0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	ee07 3a90 	vmov	s15, r3
 8006096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800609a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80061fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800609e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060a2:	4b51      	ldr	r3, [pc, #324]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060aa:	ee07 3a90 	vmov	s15, r3
 80060ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80060b6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80061f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80060ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060d2:	e065      	b.n	80061a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	ee07 3a90 	vmov	s15, r3
 80060da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060de:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006200 <HAL_RCC_GetSysClockFreq+0x2ec>
 80060e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060e6:	4b40      	ldr	r3, [pc, #256]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ee:	ee07 3a90 	vmov	s15, r3
 80060f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80060fa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80061f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80060fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800610a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800610e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006112:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006116:	e043      	b.n	80061a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	ee07 3a90 	vmov	s15, r3
 800611e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006122:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006204 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800612a:	4b2f      	ldr	r3, [pc, #188]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800612c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006132:	ee07 3a90 	vmov	s15, r3
 8006136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800613a:	ed97 6a02 	vldr	s12, [r7, #8]
 800613e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80061f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800614a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800614e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006156:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800615a:	e021      	b.n	80061a0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	ee07 3a90 	vmov	s15, r3
 8006162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006166:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006200 <HAL_RCC_GetSysClockFreq+0x2ec>
 800616a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800616e:	4b1e      	ldr	r3, [pc, #120]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006176:	ee07 3a90 	vmov	s15, r3
 800617a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800617e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006182:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80061f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800618a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800618e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800619a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800619e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80061a0:	4b11      	ldr	r3, [pc, #68]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a4:	0a5b      	lsrs	r3, r3, #9
 80061a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061aa:	3301      	adds	r3, #1
 80061ac:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	ee07 3a90 	vmov	s15, r3
 80061b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80061b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80061bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061c4:	ee17 3a90 	vmov	r3, s15
 80061c8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80061ca:	e005      	b.n	80061d8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80061cc:	2300      	movs	r3, #0
 80061ce:	61bb      	str	r3, [r7, #24]
    break;
 80061d0:	e002      	b.n	80061d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80061d2:	4b07      	ldr	r3, [pc, #28]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80061d4:	61bb      	str	r3, [r7, #24]
    break;
 80061d6:	bf00      	nop
  }

  return sysclockfreq;
 80061d8:	69bb      	ldr	r3, [r7, #24]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3724      	adds	r7, #36	; 0x24
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	58024400 	.word	0x58024400
 80061ec:	03d09000 	.word	0x03d09000
 80061f0:	003d0900 	.word	0x003d0900
 80061f4:	007a1200 	.word	0x007a1200
 80061f8:	46000000 	.word	0x46000000
 80061fc:	4c742400 	.word	0x4c742400
 8006200:	4a742400 	.word	0x4a742400
 8006204:	4af42400 	.word	0x4af42400

08006208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800620e:	f7ff fe81 	bl	8005f14 <HAL_RCC_GetSysClockFreq>
 8006212:	4602      	mov	r2, r0
 8006214:	4b10      	ldr	r3, [pc, #64]	; (8006258 <HAL_RCC_GetHCLKFreq+0x50>)
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	0a1b      	lsrs	r3, r3, #8
 800621a:	f003 030f 	and.w	r3, r3, #15
 800621e:	490f      	ldr	r1, [pc, #60]	; (800625c <HAL_RCC_GetHCLKFreq+0x54>)
 8006220:	5ccb      	ldrb	r3, [r1, r3]
 8006222:	f003 031f 	and.w	r3, r3, #31
 8006226:	fa22 f303 	lsr.w	r3, r2, r3
 800622a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800622c:	4b0a      	ldr	r3, [pc, #40]	; (8006258 <HAL_RCC_GetHCLKFreq+0x50>)
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	f003 030f 	and.w	r3, r3, #15
 8006234:	4a09      	ldr	r2, [pc, #36]	; (800625c <HAL_RCC_GetHCLKFreq+0x54>)
 8006236:	5cd3      	ldrb	r3, [r2, r3]
 8006238:	f003 031f 	and.w	r3, r3, #31
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	fa22 f303 	lsr.w	r3, r2, r3
 8006242:	4a07      	ldr	r2, [pc, #28]	; (8006260 <HAL_RCC_GetHCLKFreq+0x58>)
 8006244:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006246:	4a07      	ldr	r2, [pc, #28]	; (8006264 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800624c:	4b04      	ldr	r3, [pc, #16]	; (8006260 <HAL_RCC_GetHCLKFreq+0x58>)
 800624e:	681b      	ldr	r3, [r3, #0]
}
 8006250:	4618      	mov	r0, r3
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	58024400 	.word	0x58024400
 800625c:	0800aa58 	.word	0x0800aa58
 8006260:	24000004 	.word	0x24000004
 8006264:	24000000 	.word	0x24000000

08006268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800626c:	f7ff ffcc 	bl	8006208 <HAL_RCC_GetHCLKFreq>
 8006270:	4602      	mov	r2, r0
 8006272:	4b06      	ldr	r3, [pc, #24]	; (800628c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006274:	69db      	ldr	r3, [r3, #28]
 8006276:	091b      	lsrs	r3, r3, #4
 8006278:	f003 0307 	and.w	r3, r3, #7
 800627c:	4904      	ldr	r1, [pc, #16]	; (8006290 <HAL_RCC_GetPCLK1Freq+0x28>)
 800627e:	5ccb      	ldrb	r3, [r1, r3]
 8006280:	f003 031f 	and.w	r3, r3, #31
 8006284:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006288:	4618      	mov	r0, r3
 800628a:	bd80      	pop	{r7, pc}
 800628c:	58024400 	.word	0x58024400
 8006290:	0800aa58 	.word	0x0800aa58

08006294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006298:	f7ff ffb6 	bl	8006208 <HAL_RCC_GetHCLKFreq>
 800629c:	4602      	mov	r2, r0
 800629e:	4b06      	ldr	r3, [pc, #24]	; (80062b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062a0:	69db      	ldr	r3, [r3, #28]
 80062a2:	0a1b      	lsrs	r3, r3, #8
 80062a4:	f003 0307 	and.w	r3, r3, #7
 80062a8:	4904      	ldr	r1, [pc, #16]	; (80062bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80062aa:	5ccb      	ldrb	r3, [r1, r3]
 80062ac:	f003 031f 	and.w	r3, r3, #31
 80062b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	58024400 	.word	0x58024400
 80062bc:	0800aa58 	.word	0x0800aa58

080062c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062c8:	2300      	movs	r3, #0
 80062ca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80062cc:	2300      	movs	r3, #0
 80062ce:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d03f      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062e4:	d02a      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80062e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062ea:	d824      	bhi.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80062ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062f0:	d018      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80062f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062f6:	d81e      	bhi.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d003      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80062fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006300:	d007      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006302:	e018      	b.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006304:	4bab      	ldr	r3, [pc, #684]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006308:	4aaa      	ldr	r2, [pc, #680]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800630a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800630e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006310:	e015      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	3304      	adds	r3, #4
 8006316:	2102      	movs	r1, #2
 8006318:	4618      	mov	r0, r3
 800631a:	f001 f9cf 	bl	80076bc <RCCEx_PLL2_Config>
 800631e:	4603      	mov	r3, r0
 8006320:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006322:	e00c      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	3324      	adds	r3, #36	; 0x24
 8006328:	2102      	movs	r1, #2
 800632a:	4618      	mov	r0, r3
 800632c:	f001 fa78 	bl	8007820 <RCCEx_PLL3_Config>
 8006330:	4603      	mov	r3, r0
 8006332:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006334:	e003      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	75fb      	strb	r3, [r7, #23]
      break;
 800633a:	e000      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800633c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800633e:	7dfb      	ldrb	r3, [r7, #23]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d109      	bne.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006344:	4b9b      	ldr	r3, [pc, #620]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006348:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006350:	4998      	ldr	r1, [pc, #608]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006352:	4313      	orrs	r3, r2
 8006354:	650b      	str	r3, [r1, #80]	; 0x50
 8006356:	e001      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006358:	7dfb      	ldrb	r3, [r7, #23]
 800635a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006364:	2b00      	cmp	r3, #0
 8006366:	d03d      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800636c:	2b04      	cmp	r3, #4
 800636e:	d826      	bhi.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006370:	a201      	add	r2, pc, #4	; (adr r2, 8006378 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006376:	bf00      	nop
 8006378:	0800638d 	.word	0x0800638d
 800637c:	0800639b 	.word	0x0800639b
 8006380:	080063ad 	.word	0x080063ad
 8006384:	080063c5 	.word	0x080063c5
 8006388:	080063c5 	.word	0x080063c5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800638c:	4b89      	ldr	r3, [pc, #548]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800638e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006390:	4a88      	ldr	r2, [pc, #544]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006396:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006398:	e015      	b.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	3304      	adds	r3, #4
 800639e:	2100      	movs	r1, #0
 80063a0:	4618      	mov	r0, r3
 80063a2:	f001 f98b 	bl	80076bc <RCCEx_PLL2_Config>
 80063a6:	4603      	mov	r3, r0
 80063a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063aa:	e00c      	b.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	3324      	adds	r3, #36	; 0x24
 80063b0:	2100      	movs	r1, #0
 80063b2:	4618      	mov	r0, r3
 80063b4:	f001 fa34 	bl	8007820 <RCCEx_PLL3_Config>
 80063b8:	4603      	mov	r3, r0
 80063ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063bc:	e003      	b.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	75fb      	strb	r3, [r7, #23]
      break;
 80063c2:	e000      	b.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80063c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063c6:	7dfb      	ldrb	r3, [r7, #23]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d109      	bne.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063cc:	4b79      	ldr	r3, [pc, #484]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d0:	f023 0207 	bic.w	r2, r3, #7
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d8:	4976      	ldr	r1, [pc, #472]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	650b      	str	r3, [r1, #80]	; 0x50
 80063de:	e001      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e0:	7dfb      	ldrb	r3, [r7, #23]
 80063e2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d042      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063f8:	d02b      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80063fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063fe:	d825      	bhi.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006400:	2bc0      	cmp	r3, #192	; 0xc0
 8006402:	d028      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006404:	2bc0      	cmp	r3, #192	; 0xc0
 8006406:	d821      	bhi.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006408:	2b80      	cmp	r3, #128	; 0x80
 800640a:	d016      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800640c:	2b80      	cmp	r3, #128	; 0x80
 800640e:	d81d      	bhi.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006410:	2b00      	cmp	r3, #0
 8006412:	d002      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006414:	2b40      	cmp	r3, #64	; 0x40
 8006416:	d007      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006418:	e018      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800641a:	4b66      	ldr	r3, [pc, #408]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800641c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641e:	4a65      	ldr	r2, [pc, #404]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006424:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006426:	e017      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	3304      	adds	r3, #4
 800642c:	2100      	movs	r1, #0
 800642e:	4618      	mov	r0, r3
 8006430:	f001 f944 	bl	80076bc <RCCEx_PLL2_Config>
 8006434:	4603      	mov	r3, r0
 8006436:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006438:	e00e      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	3324      	adds	r3, #36	; 0x24
 800643e:	2100      	movs	r1, #0
 8006440:	4618      	mov	r0, r3
 8006442:	f001 f9ed 	bl	8007820 <RCCEx_PLL3_Config>
 8006446:	4603      	mov	r3, r0
 8006448:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800644a:	e005      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	75fb      	strb	r3, [r7, #23]
      break;
 8006450:	e002      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006452:	bf00      	nop
 8006454:	e000      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006456:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006458:	7dfb      	ldrb	r3, [r7, #23]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d109      	bne.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800645e:	4b55      	ldr	r3, [pc, #340]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006462:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800646a:	4952      	ldr	r1, [pc, #328]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800646c:	4313      	orrs	r3, r2
 800646e:	650b      	str	r3, [r1, #80]	; 0x50
 8006470:	e001      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006472:	7dfb      	ldrb	r3, [r7, #23]
 8006474:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800647e:	2b00      	cmp	r3, #0
 8006480:	d049      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006488:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800648c:	d030      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800648e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006492:	d82a      	bhi.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006494:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006498:	d02c      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800649a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800649e:	d824      	bhi.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80064a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064a4:	d018      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80064a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064aa:	d81e      	bhi.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d003      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80064b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064b4:	d007      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80064b6:	e018      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064b8:	4b3e      	ldr	r3, [pc, #248]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064bc:	4a3d      	ldr	r2, [pc, #244]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064c4:	e017      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	3304      	adds	r3, #4
 80064ca:	2100      	movs	r1, #0
 80064cc:	4618      	mov	r0, r3
 80064ce:	f001 f8f5 	bl	80076bc <RCCEx_PLL2_Config>
 80064d2:	4603      	mov	r3, r0
 80064d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80064d6:	e00e      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	3324      	adds	r3, #36	; 0x24
 80064dc:	2100      	movs	r1, #0
 80064de:	4618      	mov	r0, r3
 80064e0:	f001 f99e 	bl	8007820 <RCCEx_PLL3_Config>
 80064e4:	4603      	mov	r3, r0
 80064e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064e8:	e005      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	75fb      	strb	r3, [r7, #23]
      break;
 80064ee:	e002      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80064f0:	bf00      	nop
 80064f2:	e000      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80064f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064f6:	7dfb      	ldrb	r3, [r7, #23]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d10a      	bne.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80064fc:	4b2d      	ldr	r3, [pc, #180]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006500:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800650a:	492a      	ldr	r1, [pc, #168]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800650c:	4313      	orrs	r3, r2
 800650e:	658b      	str	r3, [r1, #88]	; 0x58
 8006510:	e001      	b.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006512:	7dfb      	ldrb	r3, [r7, #23]
 8006514:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800651e:	2b00      	cmp	r3, #0
 8006520:	d04c      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006528:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800652c:	d030      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800652e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006532:	d82a      	bhi.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006534:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006538:	d02c      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800653a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800653e:	d824      	bhi.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006540:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006544:	d018      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006546:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800654a:	d81e      	bhi.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800654c:	2b00      	cmp	r3, #0
 800654e:	d003      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006554:	d007      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006556:	e018      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006558:	4b16      	ldr	r3, [pc, #88]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800655a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655c:	4a15      	ldr	r2, [pc, #84]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800655e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006562:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006564:	e017      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	3304      	adds	r3, #4
 800656a:	2100      	movs	r1, #0
 800656c:	4618      	mov	r0, r3
 800656e:	f001 f8a5 	bl	80076bc <RCCEx_PLL2_Config>
 8006572:	4603      	mov	r3, r0
 8006574:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006576:	e00e      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	3324      	adds	r3, #36	; 0x24
 800657c:	2100      	movs	r1, #0
 800657e:	4618      	mov	r0, r3
 8006580:	f001 f94e 	bl	8007820 <RCCEx_PLL3_Config>
 8006584:	4603      	mov	r3, r0
 8006586:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006588:	e005      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	75fb      	strb	r3, [r7, #23]
      break;
 800658e:	e002      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006590:	bf00      	nop
 8006592:	e000      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006594:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006596:	7dfb      	ldrb	r3, [r7, #23]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10d      	bne.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800659c:	4b05      	ldr	r3, [pc, #20]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800659e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065a0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80065aa:	4902      	ldr	r1, [pc, #8]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	658b      	str	r3, [r1, #88]	; 0x58
 80065b0:	e004      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80065b2:	bf00      	nop
 80065b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b8:	7dfb      	ldrb	r3, [r7, #23]
 80065ba:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d032      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065cc:	2b30      	cmp	r3, #48	; 0x30
 80065ce:	d01c      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80065d0:	2b30      	cmp	r3, #48	; 0x30
 80065d2:	d817      	bhi.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80065d4:	2b20      	cmp	r3, #32
 80065d6:	d00c      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80065d8:	2b20      	cmp	r3, #32
 80065da:	d813      	bhi.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d016      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80065e0:	2b10      	cmp	r3, #16
 80065e2:	d10f      	bne.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065e4:	4baf      	ldr	r3, [pc, #700]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e8:	4aae      	ldr	r2, [pc, #696]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80065f0:	e00e      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	3304      	adds	r3, #4
 80065f6:	2102      	movs	r1, #2
 80065f8:	4618      	mov	r0, r3
 80065fa:	f001 f85f 	bl	80076bc <RCCEx_PLL2_Config>
 80065fe:	4603      	mov	r3, r0
 8006600:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006602:	e005      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	75fb      	strb	r3, [r7, #23]
      break;
 8006608:	e002      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800660a:	bf00      	nop
 800660c:	e000      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800660e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006610:	7dfb      	ldrb	r3, [r7, #23]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d109      	bne.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006616:	4ba3      	ldr	r3, [pc, #652]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800661a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006622:	49a0      	ldr	r1, [pc, #640]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006624:	4313      	orrs	r3, r2
 8006626:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006628:	e001      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800662a:	7dfb      	ldrb	r3, [r7, #23]
 800662c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d047      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800663e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006642:	d030      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006644:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006648:	d82a      	bhi.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800664a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800664e:	d02c      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006650:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006654:	d824      	bhi.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800665a:	d018      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800665c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006660:	d81e      	bhi.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006662:	2b00      	cmp	r3, #0
 8006664:	d003      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8006666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800666a:	d007      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800666c:	e018      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800666e:	4b8d      	ldr	r3, [pc, #564]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006672:	4a8c      	ldr	r2, [pc, #560]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006678:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800667a:	e017      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	3304      	adds	r3, #4
 8006680:	2100      	movs	r1, #0
 8006682:	4618      	mov	r0, r3
 8006684:	f001 f81a 	bl	80076bc <RCCEx_PLL2_Config>
 8006688:	4603      	mov	r3, r0
 800668a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800668c:	e00e      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	3324      	adds	r3, #36	; 0x24
 8006692:	2100      	movs	r1, #0
 8006694:	4618      	mov	r0, r3
 8006696:	f001 f8c3 	bl	8007820 <RCCEx_PLL3_Config>
 800669a:	4603      	mov	r3, r0
 800669c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800669e:	e005      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	75fb      	strb	r3, [r7, #23]
      break;
 80066a4:	e002      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80066a6:	bf00      	nop
 80066a8:	e000      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80066aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066ac:	7dfb      	ldrb	r3, [r7, #23]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d109      	bne.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80066b2:	4b7c      	ldr	r3, [pc, #496]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066b6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066be:	4979      	ldr	r1, [pc, #484]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	650b      	str	r3, [r1, #80]	; 0x50
 80066c4:	e001      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c6:	7dfb      	ldrb	r3, [r7, #23]
 80066c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d049      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066de:	d02e      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80066e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066e4:	d828      	bhi.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80066e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066ea:	d02a      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80066ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066f0:	d822      	bhi.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80066f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066f6:	d026      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80066f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066fc:	d81c      	bhi.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80066fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006702:	d010      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8006704:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006708:	d816      	bhi.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800670a:	2b00      	cmp	r3, #0
 800670c:	d01d      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800670e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006712:	d111      	bne.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	3304      	adds	r3, #4
 8006718:	2101      	movs	r1, #1
 800671a:	4618      	mov	r0, r3
 800671c:	f000 ffce 	bl	80076bc <RCCEx_PLL2_Config>
 8006720:	4603      	mov	r3, r0
 8006722:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006724:	e012      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	3324      	adds	r3, #36	; 0x24
 800672a:	2101      	movs	r1, #1
 800672c:	4618      	mov	r0, r3
 800672e:	f001 f877 	bl	8007820 <RCCEx_PLL3_Config>
 8006732:	4603      	mov	r3, r0
 8006734:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006736:	e009      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	75fb      	strb	r3, [r7, #23]
      break;
 800673c:	e006      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800673e:	bf00      	nop
 8006740:	e004      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006742:	bf00      	nop
 8006744:	e002      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006746:	bf00      	nop
 8006748:	e000      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800674a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800674c:	7dfb      	ldrb	r3, [r7, #23]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d109      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006752:	4b54      	ldr	r3, [pc, #336]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006756:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800675e:	4951      	ldr	r1, [pc, #324]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006760:	4313      	orrs	r3, r2
 8006762:	650b      	str	r3, [r1, #80]	; 0x50
 8006764:	e001      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006766:	7dfb      	ldrb	r3, [r7, #23]
 8006768:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d04b      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800677c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006780:	d02e      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8006782:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006786:	d828      	bhi.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800678c:	d02a      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800678e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006792:	d822      	bhi.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006794:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006798:	d026      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800679a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800679e:	d81c      	bhi.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80067a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067a4:	d010      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80067a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067aa:	d816      	bhi.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d01d      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80067b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067b4:	d111      	bne.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3304      	adds	r3, #4
 80067ba:	2101      	movs	r1, #1
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 ff7d 	bl	80076bc <RCCEx_PLL2_Config>
 80067c2:	4603      	mov	r3, r0
 80067c4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80067c6:	e012      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	3324      	adds	r3, #36	; 0x24
 80067cc:	2101      	movs	r1, #1
 80067ce:	4618      	mov	r0, r3
 80067d0:	f001 f826 	bl	8007820 <RCCEx_PLL3_Config>
 80067d4:	4603      	mov	r3, r0
 80067d6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80067d8:	e009      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	75fb      	strb	r3, [r7, #23]
      break;
 80067de:	e006      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80067e0:	bf00      	nop
 80067e2:	e004      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80067e4:	bf00      	nop
 80067e6:	e002      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80067e8:	bf00      	nop
 80067ea:	e000      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80067ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067ee:	7dfb      	ldrb	r3, [r7, #23]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10a      	bne.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80067f4:	4b2b      	ldr	r3, [pc, #172]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006802:	4928      	ldr	r1, [pc, #160]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006804:	4313      	orrs	r3, r2
 8006806:	658b      	str	r3, [r1, #88]	; 0x58
 8006808:	e001      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800680a:	7dfb      	ldrb	r3, [r7, #23]
 800680c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d02f      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800681e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006822:	d00e      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006824:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006828:	d814      	bhi.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800682a:	2b00      	cmp	r3, #0
 800682c:	d015      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800682e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006832:	d10f      	bne.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006834:	4b1b      	ldr	r3, [pc, #108]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006838:	4a1a      	ldr	r2, [pc, #104]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800683a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800683e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006840:	e00c      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	3304      	adds	r3, #4
 8006846:	2101      	movs	r1, #1
 8006848:	4618      	mov	r0, r3
 800684a:	f000 ff37 	bl	80076bc <RCCEx_PLL2_Config>
 800684e:	4603      	mov	r3, r0
 8006850:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006852:	e003      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	75fb      	strb	r3, [r7, #23]
      break;
 8006858:	e000      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800685a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800685c:	7dfb      	ldrb	r3, [r7, #23]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d109      	bne.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006862:	4b10      	ldr	r3, [pc, #64]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006866:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800686e:	490d      	ldr	r1, [pc, #52]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006870:	4313      	orrs	r3, r2
 8006872:	650b      	str	r3, [r1, #80]	; 0x50
 8006874:	e001      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006876:	7dfb      	ldrb	r3, [r7, #23]
 8006878:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d033      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688a:	2b03      	cmp	r3, #3
 800688c:	d81c      	bhi.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800688e:	a201      	add	r2, pc, #4	; (adr r2, 8006894 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006894:	080068cf 	.word	0x080068cf
 8006898:	080068a9 	.word	0x080068a9
 800689c:	080068b7 	.word	0x080068b7
 80068a0:	080068cf 	.word	0x080068cf
 80068a4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068a8:	4bb8      	ldr	r3, [pc, #736]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ac:	4ab7      	ldr	r2, [pc, #732]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80068b4:	e00c      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	3304      	adds	r3, #4
 80068ba:	2102      	movs	r1, #2
 80068bc:	4618      	mov	r0, r3
 80068be:	f000 fefd 	bl	80076bc <RCCEx_PLL2_Config>
 80068c2:	4603      	mov	r3, r0
 80068c4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80068c6:	e003      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	75fb      	strb	r3, [r7, #23]
      break;
 80068cc:	e000      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80068ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068d0:	7dfb      	ldrb	r3, [r7, #23]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d109      	bne.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80068d6:	4bad      	ldr	r3, [pc, #692]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068da:	f023 0203 	bic.w	r2, r3, #3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e2:	49aa      	ldr	r1, [pc, #680]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80068e8:	e001      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ea:	7dfb      	ldrb	r3, [r7, #23]
 80068ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f000 8086 	beq.w	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068fc:	4ba4      	ldr	r3, [pc, #656]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4aa3      	ldr	r2, [pc, #652]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006906:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006908:	f7fb f8c2 	bl	8001a90 <HAL_GetTick>
 800690c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800690e:	e009      	b.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006910:	f7fb f8be 	bl	8001a90 <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	2b64      	cmp	r3, #100	; 0x64
 800691c:	d902      	bls.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	75fb      	strb	r3, [r7, #23]
        break;
 8006922:	e005      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006924:	4b9a      	ldr	r3, [pc, #616]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800692c:	2b00      	cmp	r3, #0
 800692e:	d0ef      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006930:	7dfb      	ldrb	r3, [r7, #23]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d166      	bne.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006936:	4b95      	ldr	r3, [pc, #596]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006938:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006940:	4053      	eors	r3, r2
 8006942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006946:	2b00      	cmp	r3, #0
 8006948:	d013      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800694a:	4b90      	ldr	r3, [pc, #576]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800694c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800694e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006952:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006954:	4b8d      	ldr	r3, [pc, #564]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006958:	4a8c      	ldr	r2, [pc, #560]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800695a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800695e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006960:	4b8a      	ldr	r3, [pc, #552]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006964:	4a89      	ldr	r2, [pc, #548]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800696a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800696c:	4a87      	ldr	r2, [pc, #540]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800697c:	d115      	bne.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800697e:	f7fb f887 	bl	8001a90 <HAL_GetTick>
 8006982:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006984:	e00b      	b.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006986:	f7fb f883 	bl	8001a90 <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	f241 3288 	movw	r2, #5000	; 0x1388
 8006994:	4293      	cmp	r3, r2
 8006996:	d902      	bls.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	75fb      	strb	r3, [r7, #23]
            break;
 800699c:	e005      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800699e:	4b7b      	ldr	r3, [pc, #492]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d0ed      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80069aa:	7dfb      	ldrb	r3, [r7, #23]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d126      	bne.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069be:	d10d      	bne.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80069c0:	4b72      	ldr	r3, [pc, #456]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069ce:	0919      	lsrs	r1, r3, #4
 80069d0:	4b70      	ldr	r3, [pc, #448]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80069d2:	400b      	ands	r3, r1
 80069d4:	496d      	ldr	r1, [pc, #436]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	610b      	str	r3, [r1, #16]
 80069da:	e005      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80069dc:	4b6b      	ldr	r3, [pc, #428]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	4a6a      	ldr	r2, [pc, #424]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80069e6:	6113      	str	r3, [r2, #16]
 80069e8:	4b68      	ldr	r3, [pc, #416]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069f6:	4965      	ldr	r1, [pc, #404]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	670b      	str	r3, [r1, #112]	; 0x70
 80069fc:	e004      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069fe:	7dfb      	ldrb	r3, [r7, #23]
 8006a00:	75bb      	strb	r3, [r7, #22]
 8006a02:	e001      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a04:	7dfb      	ldrb	r3, [r7, #23]
 8006a06:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0301 	and.w	r3, r3, #1
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d07e      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a18:	2b28      	cmp	r3, #40	; 0x28
 8006a1a:	d867      	bhi.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006a1c:	a201      	add	r2, pc, #4	; (adr r2, 8006a24 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a22:	bf00      	nop
 8006a24:	08006af3 	.word	0x08006af3
 8006a28:	08006aed 	.word	0x08006aed
 8006a2c:	08006aed 	.word	0x08006aed
 8006a30:	08006aed 	.word	0x08006aed
 8006a34:	08006aed 	.word	0x08006aed
 8006a38:	08006aed 	.word	0x08006aed
 8006a3c:	08006aed 	.word	0x08006aed
 8006a40:	08006aed 	.word	0x08006aed
 8006a44:	08006ac9 	.word	0x08006ac9
 8006a48:	08006aed 	.word	0x08006aed
 8006a4c:	08006aed 	.word	0x08006aed
 8006a50:	08006aed 	.word	0x08006aed
 8006a54:	08006aed 	.word	0x08006aed
 8006a58:	08006aed 	.word	0x08006aed
 8006a5c:	08006aed 	.word	0x08006aed
 8006a60:	08006aed 	.word	0x08006aed
 8006a64:	08006adb 	.word	0x08006adb
 8006a68:	08006aed 	.word	0x08006aed
 8006a6c:	08006aed 	.word	0x08006aed
 8006a70:	08006aed 	.word	0x08006aed
 8006a74:	08006aed 	.word	0x08006aed
 8006a78:	08006aed 	.word	0x08006aed
 8006a7c:	08006aed 	.word	0x08006aed
 8006a80:	08006aed 	.word	0x08006aed
 8006a84:	08006af3 	.word	0x08006af3
 8006a88:	08006aed 	.word	0x08006aed
 8006a8c:	08006aed 	.word	0x08006aed
 8006a90:	08006aed 	.word	0x08006aed
 8006a94:	08006aed 	.word	0x08006aed
 8006a98:	08006aed 	.word	0x08006aed
 8006a9c:	08006aed 	.word	0x08006aed
 8006aa0:	08006aed 	.word	0x08006aed
 8006aa4:	08006af3 	.word	0x08006af3
 8006aa8:	08006aed 	.word	0x08006aed
 8006aac:	08006aed 	.word	0x08006aed
 8006ab0:	08006aed 	.word	0x08006aed
 8006ab4:	08006aed 	.word	0x08006aed
 8006ab8:	08006aed 	.word	0x08006aed
 8006abc:	08006aed 	.word	0x08006aed
 8006ac0:	08006aed 	.word	0x08006aed
 8006ac4:	08006af3 	.word	0x08006af3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	3304      	adds	r3, #4
 8006acc:	2101      	movs	r1, #1
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f000 fdf4 	bl	80076bc <RCCEx_PLL2_Config>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006ad8:	e00c      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	3324      	adds	r3, #36	; 0x24
 8006ade:	2101      	movs	r1, #1
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f000 fe9d 	bl	8007820 <RCCEx_PLL3_Config>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006aea:	e003      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	75fb      	strb	r3, [r7, #23]
      break;
 8006af0:	e000      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006af2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006af4:	7dfb      	ldrb	r3, [r7, #23]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d109      	bne.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006afa:	4b24      	ldr	r3, [pc, #144]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006afe:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b06:	4921      	ldr	r1, [pc, #132]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	654b      	str	r3, [r1, #84]	; 0x54
 8006b0c:	e001      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b0e:	7dfb      	ldrb	r3, [r7, #23]
 8006b10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0302 	and.w	r3, r3, #2
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d03e      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b22:	2b05      	cmp	r3, #5
 8006b24:	d820      	bhi.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8006b26:	a201      	add	r2, pc, #4	; (adr r2, 8006b2c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2c:	08006b6f 	.word	0x08006b6f
 8006b30:	08006b45 	.word	0x08006b45
 8006b34:	08006b57 	.word	0x08006b57
 8006b38:	08006b6f 	.word	0x08006b6f
 8006b3c:	08006b6f 	.word	0x08006b6f
 8006b40:	08006b6f 	.word	0x08006b6f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	3304      	adds	r3, #4
 8006b48:	2101      	movs	r1, #1
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 fdb6 	bl	80076bc <RCCEx_PLL2_Config>
 8006b50:	4603      	mov	r3, r0
 8006b52:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006b54:	e00c      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	3324      	adds	r3, #36	; 0x24
 8006b5a:	2101      	movs	r1, #1
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f000 fe5f 	bl	8007820 <RCCEx_PLL3_Config>
 8006b62:	4603      	mov	r3, r0
 8006b64:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006b66:	e003      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b6c:	e000      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006b6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b70:	7dfb      	ldrb	r3, [r7, #23]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d110      	bne.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006b76:	4b05      	ldr	r3, [pc, #20]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b7a:	f023 0207 	bic.w	r2, r3, #7
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b82:	4902      	ldr	r1, [pc, #8]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b84:	4313      	orrs	r3, r2
 8006b86:	654b      	str	r3, [r1, #84]	; 0x54
 8006b88:	e008      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006b8a:	bf00      	nop
 8006b8c:	58024400 	.word	0x58024400
 8006b90:	58024800 	.word	0x58024800
 8006b94:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b98:	7dfb      	ldrb	r3, [r7, #23]
 8006b9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0304 	and.w	r3, r3, #4
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d039      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bae:	2b05      	cmp	r3, #5
 8006bb0:	d820      	bhi.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006bb2:	a201      	add	r2, pc, #4	; (adr r2, 8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb8:	08006bfb 	.word	0x08006bfb
 8006bbc:	08006bd1 	.word	0x08006bd1
 8006bc0:	08006be3 	.word	0x08006be3
 8006bc4:	08006bfb 	.word	0x08006bfb
 8006bc8:	08006bfb 	.word	0x08006bfb
 8006bcc:	08006bfb 	.word	0x08006bfb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	2101      	movs	r1, #1
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 fd70 	bl	80076bc <RCCEx_PLL2_Config>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006be0:	e00c      	b.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	3324      	adds	r3, #36	; 0x24
 8006be6:	2101      	movs	r1, #1
 8006be8:	4618      	mov	r0, r3
 8006bea:	f000 fe19 	bl	8007820 <RCCEx_PLL3_Config>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006bf2:	e003      	b.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8006bf8:	e000      	b.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006bfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bfc:	7dfb      	ldrb	r3, [r7, #23]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10a      	bne.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c02:	4bb7      	ldr	r3, [pc, #732]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c06:	f023 0207 	bic.w	r2, r3, #7
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c10:	49b3      	ldr	r1, [pc, #716]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	658b      	str	r3, [r1, #88]	; 0x58
 8006c16:	e001      	b.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c18:	7dfb      	ldrb	r3, [r7, #23]
 8006c1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0320 	and.w	r3, r3, #32
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d04b      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c32:	d02e      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006c34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c38:	d828      	bhi.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c3e:	d02a      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c44:	d822      	bhi.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006c46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c4a:	d026      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006c4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c50:	d81c      	bhi.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006c52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c56:	d010      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006c58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c5c:	d816      	bhi.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d01d      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006c62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c66:	d111      	bne.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	3304      	adds	r3, #4
 8006c6c:	2100      	movs	r1, #0
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f000 fd24 	bl	80076bc <RCCEx_PLL2_Config>
 8006c74:	4603      	mov	r3, r0
 8006c76:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006c78:	e012      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	3324      	adds	r3, #36	; 0x24
 8006c7e:	2102      	movs	r1, #2
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 fdcd 	bl	8007820 <RCCEx_PLL3_Config>
 8006c86:	4603      	mov	r3, r0
 8006c88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006c8a:	e009      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c90:	e006      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006c92:	bf00      	nop
 8006c94:	e004      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006c96:	bf00      	nop
 8006c98:	e002      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006c9a:	bf00      	nop
 8006c9c:	e000      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006c9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ca0:	7dfb      	ldrb	r3, [r7, #23]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10a      	bne.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ca6:	4b8e      	ldr	r3, [pc, #568]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006caa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cb4:	498a      	ldr	r1, [pc, #552]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	654b      	str	r3, [r1, #84]	; 0x54
 8006cba:	e001      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cbc:	7dfb      	ldrb	r3, [r7, #23]
 8006cbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d04b      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cd2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006cd6:	d02e      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006cd8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006cdc:	d828      	bhi.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ce2:	d02a      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ce8:	d822      	bhi.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006cea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cee:	d026      	beq.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006cf0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cf4:	d81c      	bhi.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006cf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cfa:	d010      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006cfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d00:	d816      	bhi.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d01d      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d0a:	d111      	bne.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	3304      	adds	r3, #4
 8006d10:	2100      	movs	r1, #0
 8006d12:	4618      	mov	r0, r3
 8006d14:	f000 fcd2 	bl	80076bc <RCCEx_PLL2_Config>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006d1c:	e012      	b.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	3324      	adds	r3, #36	; 0x24
 8006d22:	2102      	movs	r1, #2
 8006d24:	4618      	mov	r0, r3
 8006d26:	f000 fd7b 	bl	8007820 <RCCEx_PLL3_Config>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006d2e:	e009      	b.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	75fb      	strb	r3, [r7, #23]
      break;
 8006d34:	e006      	b.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006d36:	bf00      	nop
 8006d38:	e004      	b.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006d3a:	bf00      	nop
 8006d3c:	e002      	b.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006d3e:	bf00      	nop
 8006d40:	e000      	b.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006d42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d44:	7dfb      	ldrb	r3, [r7, #23]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10a      	bne.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d4a:	4b65      	ldr	r3, [pc, #404]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d4e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d58:	4961      	ldr	r1, [pc, #388]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	658b      	str	r3, [r1, #88]	; 0x58
 8006d5e:	e001      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d60:	7dfb      	ldrb	r3, [r7, #23]
 8006d62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d04b      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d76:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d7a:	d02e      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006d7c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d80:	d828      	bhi.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006d82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d86:	d02a      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d8c:	d822      	bhi.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006d8e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006d92:	d026      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006d94:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006d98:	d81c      	bhi.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006d9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d9e:	d010      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006da0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006da4:	d816      	bhi.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d01d      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dae:	d111      	bne.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	3304      	adds	r3, #4
 8006db4:	2100      	movs	r1, #0
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 fc80 	bl	80076bc <RCCEx_PLL2_Config>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006dc0:	e012      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	3324      	adds	r3, #36	; 0x24
 8006dc6:	2102      	movs	r1, #2
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f000 fd29 	bl	8007820 <RCCEx_PLL3_Config>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006dd2:	e009      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	75fb      	strb	r3, [r7, #23]
      break;
 8006dd8:	e006      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006dda:	bf00      	nop
 8006ddc:	e004      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006dde:	bf00      	nop
 8006de0:	e002      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006de2:	bf00      	nop
 8006de4:	e000      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006de6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006de8:	7dfb      	ldrb	r3, [r7, #23]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10a      	bne.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006dee:	4b3c      	ldr	r3, [pc, #240]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006dfc:	4938      	ldr	r1, [pc, #224]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	658b      	str	r3, [r1, #88]	; 0x58
 8006e02:	e001      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e04:	7dfb      	ldrb	r3, [r7, #23]
 8006e06:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 0308 	and.w	r3, r3, #8
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d01a      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e1e:	d10a      	bne.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	3324      	adds	r3, #36	; 0x24
 8006e24:	2102      	movs	r1, #2
 8006e26:	4618      	mov	r0, r3
 8006e28:	f000 fcfa 	bl	8007820 <RCCEx_PLL3_Config>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006e36:	4b2a      	ldr	r3, [pc, #168]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e3a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e44:	4926      	ldr	r1, [pc, #152]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e46:	4313      	orrs	r3, r2
 8006e48:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0310 	and.w	r3, r3, #16
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d01a      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e60:	d10a      	bne.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	3324      	adds	r3, #36	; 0x24
 8006e66:	2102      	movs	r1, #2
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f000 fcd9 	bl	8007820 <RCCEx_PLL3_Config>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d001      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e78:	4b19      	ldr	r3, [pc, #100]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e86:	4916      	ldr	r1, [pc, #88]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d036      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ea2:	d01f      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006ea4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ea8:	d817      	bhi.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d003      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eb2:	d009      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006eb4:	e011      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	3304      	adds	r3, #4
 8006eba:	2100      	movs	r1, #0
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f000 fbfd 	bl	80076bc <RCCEx_PLL2_Config>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006ec6:	e00e      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	3324      	adds	r3, #36	; 0x24
 8006ecc:	2102      	movs	r1, #2
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f000 fca6 	bl	8007820 <RCCEx_PLL3_Config>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006ed8:	e005      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	75fb      	strb	r3, [r7, #23]
      break;
 8006ede:	e002      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006ee0:	58024400 	.word	0x58024400
      break;
 8006ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ee6:	7dfb      	ldrb	r3, [r7, #23]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10a      	bne.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006eec:	4b93      	ldr	r3, [pc, #588]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ef0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006efa:	4990      	ldr	r1, [pc, #576]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006efc:	4313      	orrs	r3, r2
 8006efe:	658b      	str	r3, [r1, #88]	; 0x58
 8006f00:	e001      	b.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f02:	7dfb      	ldrb	r3, [r7, #23]
 8006f04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d033      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f1c:	d01c      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006f1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f22:	d816      	bhi.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006f24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f28:	d003      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006f2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f2e:	d007      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006f30:	e00f      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f32:	4b82      	ldr	r3, [pc, #520]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f36:	4a81      	ldr	r2, [pc, #516]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006f3e:	e00c      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	3324      	adds	r3, #36	; 0x24
 8006f44:	2101      	movs	r1, #1
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 fc6a 	bl	8007820 <RCCEx_PLL3_Config>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006f50:	e003      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	75fb      	strb	r3, [r7, #23]
      break;
 8006f56:	e000      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006f58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f5a:	7dfb      	ldrb	r3, [r7, #23]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d10a      	bne.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f60:	4b76      	ldr	r3, [pc, #472]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f6e:	4973      	ldr	r1, [pc, #460]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f70:	4313      	orrs	r3, r2
 8006f72:	654b      	str	r3, [r1, #84]	; 0x54
 8006f74:	e001      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f76:	7dfb      	ldrb	r3, [r7, #23]
 8006f78:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d029      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d003      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f92:	d007      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006f94:	e00f      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f96:	4b69      	ldr	r3, [pc, #420]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9a:	4a68      	ldr	r2, [pc, #416]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fa0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006fa2:	e00b      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	3304      	adds	r3, #4
 8006fa8:	2102      	movs	r1, #2
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 fb86 	bl	80076bc <RCCEx_PLL2_Config>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006fb4:	e002      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	75fb      	strb	r3, [r7, #23]
      break;
 8006fba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fbc:	7dfb      	ldrb	r3, [r7, #23]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d109      	bne.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006fc2:	4b5e      	ldr	r3, [pc, #376]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fc6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fce:	495b      	ldr	r1, [pc, #364]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006fd4:	e001      	b.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd6:	7dfb      	ldrb	r3, [r7, #23]
 8006fd8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00a      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	3324      	adds	r3, #36	; 0x24
 8006fea:	2102      	movs	r1, #2
 8006fec:	4618      	mov	r0, r3
 8006fee:	f000 fc17 	bl	8007820 <RCCEx_PLL3_Config>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d001      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d030      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800700c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007010:	d017      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007012:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007016:	d811      	bhi.n	800703c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800701c:	d013      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800701e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007022:	d80b      	bhi.n	800703c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007024:	2b00      	cmp	r3, #0
 8007026:	d010      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800702c:	d106      	bne.n	800703c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800702e:	4b43      	ldr	r3, [pc, #268]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007032:	4a42      	ldr	r2, [pc, #264]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007038:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800703a:	e007      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	75fb      	strb	r3, [r7, #23]
      break;
 8007040:	e004      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007042:	bf00      	nop
 8007044:	e002      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007046:	bf00      	nop
 8007048:	e000      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800704a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800704c:	7dfb      	ldrb	r3, [r7, #23]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d109      	bne.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007052:	4b3a      	ldr	r3, [pc, #232]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007056:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800705e:	4937      	ldr	r1, [pc, #220]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007060:	4313      	orrs	r3, r2
 8007062:	654b      	str	r3, [r1, #84]	; 0x54
 8007064:	e001      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007066:	7dfb      	ldrb	r3, [r7, #23]
 8007068:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d008      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007076:	4b31      	ldr	r3, [pc, #196]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800707a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007082:	492e      	ldr	r1, [pc, #184]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007084:	4313      	orrs	r3, r2
 8007086:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007090:	2b00      	cmp	r3, #0
 8007092:	d009      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007094:	4b29      	ldr	r3, [pc, #164]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80070a2:	4926      	ldr	r1, [pc, #152]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070a4:	4313      	orrs	r3, r2
 80070a6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d008      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80070b4:	4b21      	ldr	r3, [pc, #132]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070c0:	491e      	ldr	r1, [pc, #120]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070c2:	4313      	orrs	r3, r2
 80070c4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00d      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070d2:	4b1a      	ldr	r3, [pc, #104]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	4a19      	ldr	r2, [pc, #100]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80070dc:	6113      	str	r3, [r2, #16]
 80070de:	4b17      	ldr	r3, [pc, #92]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070e0:	691a      	ldr	r2, [r3, #16]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80070e8:	4914      	ldr	r1, [pc, #80]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070ea:	4313      	orrs	r3, r2
 80070ec:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	da08      	bge.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80070f6:	4b11      	ldr	r3, [pc, #68]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007102:	490e      	ldr	r1, [pc, #56]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007104:	4313      	orrs	r3, r2
 8007106:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d009      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007114:	4b09      	ldr	r3, [pc, #36]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007118:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007122:	4906      	ldr	r1, [pc, #24]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007124:	4313      	orrs	r3, r2
 8007126:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007128:	7dbb      	ldrb	r3, [r7, #22]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d101      	bne.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800712e:	2300      	movs	r3, #0
 8007130:	e000      	b.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
}
 8007134:	4618      	mov	r0, r3
 8007136:	3718      	adds	r7, #24
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	58024400 	.word	0x58024400

08007140 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007144:	f7ff f860 	bl	8006208 <HAL_RCC_GetHCLKFreq>
 8007148:	4602      	mov	r2, r0
 800714a:	4b06      	ldr	r3, [pc, #24]	; (8007164 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	091b      	lsrs	r3, r3, #4
 8007150:	f003 0307 	and.w	r3, r3, #7
 8007154:	4904      	ldr	r1, [pc, #16]	; (8007168 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007156:	5ccb      	ldrb	r3, [r1, r3]
 8007158:	f003 031f 	and.w	r3, r3, #31
 800715c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007160:	4618      	mov	r0, r3
 8007162:	bd80      	pop	{r7, pc}
 8007164:	58024400 	.word	0x58024400
 8007168:	0800aa58 	.word	0x0800aa58

0800716c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800716c:	b480      	push	{r7}
 800716e:	b089      	sub	sp, #36	; 0x24
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007174:	4ba1      	ldr	r3, [pc, #644]	; (80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007178:	f003 0303 	and.w	r3, r3, #3
 800717c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800717e:	4b9f      	ldr	r3, [pc, #636]	; (80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007182:	0b1b      	lsrs	r3, r3, #12
 8007184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007188:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800718a:	4b9c      	ldr	r3, [pc, #624]	; (80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800718c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718e:	091b      	lsrs	r3, r3, #4
 8007190:	f003 0301 	and.w	r3, r3, #1
 8007194:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007196:	4b99      	ldr	r3, [pc, #612]	; (80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800719a:	08db      	lsrs	r3, r3, #3
 800719c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071a0:	693a      	ldr	r2, [r7, #16]
 80071a2:	fb02 f303 	mul.w	r3, r2, r3
 80071a6:	ee07 3a90 	vmov	s15, r3
 80071aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f000 8111 	beq.w	80073dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	2b02      	cmp	r3, #2
 80071be:	f000 8083 	beq.w	80072c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	f200 80a1 	bhi.w	800730c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d003      	beq.n	80071d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d056      	beq.n	8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80071d6:	e099      	b.n	800730c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071d8:	4b88      	ldr	r3, [pc, #544]	; (80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0320 	and.w	r3, r3, #32
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d02d      	beq.n	8007240 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80071e4:	4b85      	ldr	r3, [pc, #532]	; (80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	08db      	lsrs	r3, r3, #3
 80071ea:	f003 0303 	and.w	r3, r3, #3
 80071ee:	4a84      	ldr	r2, [pc, #528]	; (8007400 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80071f0:	fa22 f303 	lsr.w	r3, r2, r3
 80071f4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	ee07 3a90 	vmov	s15, r3
 80071fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	ee07 3a90 	vmov	s15, r3
 8007206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800720a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800720e:	4b7b      	ldr	r3, [pc, #492]	; (80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007216:	ee07 3a90 	vmov	s15, r3
 800721a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800721e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007222:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007404 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800722a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800722e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800723a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800723e:	e087      	b.n	8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	ee07 3a90 	vmov	s15, r3
 8007246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800724a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007408 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800724e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007252:	4b6a      	ldr	r3, [pc, #424]	; (80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800725a:	ee07 3a90 	vmov	s15, r3
 800725e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007262:	ed97 6a03 	vldr	s12, [r7, #12]
 8007266:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007404 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800726a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800726e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800727a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800727e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007282:	e065      	b.n	8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	ee07 3a90 	vmov	s15, r3
 800728a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800728e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800740c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007296:	4b59      	ldr	r3, [pc, #356]	; (80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800729e:	ee07 3a90 	vmov	s15, r3
 80072a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007404 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072c6:	e043      	b.n	8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	ee07 3a90 	vmov	s15, r3
 80072ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007410 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80072d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072da:	4b48      	ldr	r3, [pc, #288]	; (80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072e2:	ee07 3a90 	vmov	s15, r3
 80072e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007404 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007306:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800730a:	e021      	b.n	8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	ee07 3a90 	vmov	s15, r3
 8007312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007316:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800740c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800731a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800731e:	4b37      	ldr	r3, [pc, #220]	; (80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007326:	ee07 3a90 	vmov	s15, r3
 800732a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800732e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007332:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007404 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800733a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800733e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800734a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800734e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007350:	4b2a      	ldr	r3, [pc, #168]	; (80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007354:	0a5b      	lsrs	r3, r3, #9
 8007356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800735a:	ee07 3a90 	vmov	s15, r3
 800735e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007362:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007366:	ee37 7a87 	vadd.f32	s14, s15, s14
 800736a:	edd7 6a07 	vldr	s13, [r7, #28]
 800736e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007372:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007376:	ee17 2a90 	vmov	r2, s15
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800737e:	4b1f      	ldr	r3, [pc, #124]	; (80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007382:	0c1b      	lsrs	r3, r3, #16
 8007384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007388:	ee07 3a90 	vmov	s15, r3
 800738c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007390:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007394:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007398:	edd7 6a07 	vldr	s13, [r7, #28]
 800739c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073a4:	ee17 2a90 	vmov	r2, s15
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80073ac:	4b13      	ldr	r3, [pc, #76]	; (80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b0:	0e1b      	lsrs	r3, r3, #24
 80073b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073b6:	ee07 3a90 	vmov	s15, r3
 80073ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80073ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073d2:	ee17 2a90 	vmov	r2, s15
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80073da:	e008      	b.n	80073ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	609a      	str	r2, [r3, #8]
}
 80073ee:	bf00      	nop
 80073f0:	3724      	adds	r7, #36	; 0x24
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	58024400 	.word	0x58024400
 8007400:	03d09000 	.word	0x03d09000
 8007404:	46000000 	.word	0x46000000
 8007408:	4c742400 	.word	0x4c742400
 800740c:	4a742400 	.word	0x4a742400
 8007410:	4af42400 	.word	0x4af42400

08007414 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007414:	b480      	push	{r7}
 8007416:	b089      	sub	sp, #36	; 0x24
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800741c:	4ba1      	ldr	r3, [pc, #644]	; (80076a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800741e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007420:	f003 0303 	and.w	r3, r3, #3
 8007424:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007426:	4b9f      	ldr	r3, [pc, #636]	; (80076a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742a:	0d1b      	lsrs	r3, r3, #20
 800742c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007430:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007432:	4b9c      	ldr	r3, [pc, #624]	; (80076a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007436:	0a1b      	lsrs	r3, r3, #8
 8007438:	f003 0301 	and.w	r3, r3, #1
 800743c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800743e:	4b99      	ldr	r3, [pc, #612]	; (80076a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007442:	08db      	lsrs	r3, r3, #3
 8007444:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	fb02 f303 	mul.w	r3, r2, r3
 800744e:	ee07 3a90 	vmov	s15, r3
 8007452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007456:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	2b00      	cmp	r3, #0
 800745e:	f000 8111 	beq.w	8007684 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	2b02      	cmp	r3, #2
 8007466:	f000 8083 	beq.w	8007570 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	2b02      	cmp	r3, #2
 800746e:	f200 80a1 	bhi.w	80075b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d003      	beq.n	8007480 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d056      	beq.n	800752c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800747e:	e099      	b.n	80075b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007480:	4b88      	ldr	r3, [pc, #544]	; (80076a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 0320 	and.w	r3, r3, #32
 8007488:	2b00      	cmp	r3, #0
 800748a:	d02d      	beq.n	80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800748c:	4b85      	ldr	r3, [pc, #532]	; (80076a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	08db      	lsrs	r3, r3, #3
 8007492:	f003 0303 	and.w	r3, r3, #3
 8007496:	4a84      	ldr	r2, [pc, #528]	; (80076a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007498:	fa22 f303 	lsr.w	r3, r2, r3
 800749c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	ee07 3a90 	vmov	s15, r3
 80074a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	ee07 3a90 	vmov	s15, r3
 80074ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074b6:	4b7b      	ldr	r3, [pc, #492]	; (80076a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074be:	ee07 3a90 	vmov	s15, r3
 80074c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 80076ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074e2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80074e6:	e087      	b.n	80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	ee07 3a90 	vmov	s15, r3
 80074ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80076b0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80074f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074fa:	4b6a      	ldr	r3, [pc, #424]	; (80076a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007502:	ee07 3a90 	vmov	s15, r3
 8007506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800750a:	ed97 6a03 	vldr	s12, [r7, #12]
 800750e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80076ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800751a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800751e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007526:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800752a:	e065      	b.n	80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	ee07 3a90 	vmov	s15, r3
 8007532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007536:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80076b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800753a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800753e:	4b59      	ldr	r3, [pc, #356]	; (80076a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007546:	ee07 3a90 	vmov	s15, r3
 800754a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800754e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007552:	eddf 5a56 	vldr	s11, [pc, #344]	; 80076ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800755a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800755e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800756a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800756e:	e043      	b.n	80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	ee07 3a90 	vmov	s15, r3
 8007576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800757a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80076b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800757e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007582:	4b48      	ldr	r3, [pc, #288]	; (80076a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800758a:	ee07 3a90 	vmov	s15, r3
 800758e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007592:	ed97 6a03 	vldr	s12, [r7, #12]
 8007596:	eddf 5a45 	vldr	s11, [pc, #276]	; 80076ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800759a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800759e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075b2:	e021      	b.n	80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	ee07 3a90 	vmov	s15, r3
 80075ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80076b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80075c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075c6:	4b37      	ldr	r3, [pc, #220]	; (80076a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ce:	ee07 3a90 	vmov	s15, r3
 80075d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075da:	eddf 5a34 	vldr	s11, [pc, #208]	; 80076ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075f6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80075f8:	4b2a      	ldr	r3, [pc, #168]	; (80076a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fc:	0a5b      	lsrs	r3, r3, #9
 80075fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007602:	ee07 3a90 	vmov	s15, r3
 8007606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800760a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800760e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007612:	edd7 6a07 	vldr	s13, [r7, #28]
 8007616:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800761a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800761e:	ee17 2a90 	vmov	r2, s15
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007626:	4b1f      	ldr	r3, [pc, #124]	; (80076a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762a:	0c1b      	lsrs	r3, r3, #16
 800762c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007630:	ee07 3a90 	vmov	s15, r3
 8007634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007638:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800763c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007640:	edd7 6a07 	vldr	s13, [r7, #28]
 8007644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800764c:	ee17 2a90 	vmov	r2, s15
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007654:	4b13      	ldr	r3, [pc, #76]	; (80076a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007658:	0e1b      	lsrs	r3, r3, #24
 800765a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800765e:	ee07 3a90 	vmov	s15, r3
 8007662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007666:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800766a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800766e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007672:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800767a:	ee17 2a90 	vmov	r2, s15
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007682:	e008      	b.n	8007696 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	609a      	str	r2, [r3, #8]
}
 8007696:	bf00      	nop
 8007698:	3724      	adds	r7, #36	; 0x24
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	58024400 	.word	0x58024400
 80076a8:	03d09000 	.word	0x03d09000
 80076ac:	46000000 	.word	0x46000000
 80076b0:	4c742400 	.word	0x4c742400
 80076b4:	4a742400 	.word	0x4a742400
 80076b8:	4af42400 	.word	0x4af42400

080076bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80076c6:	2300      	movs	r3, #0
 80076c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076ca:	4b53      	ldr	r3, [pc, #332]	; (8007818 <RCCEx_PLL2_Config+0x15c>)
 80076cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ce:	f003 0303 	and.w	r3, r3, #3
 80076d2:	2b03      	cmp	r3, #3
 80076d4:	d101      	bne.n	80076da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e099      	b.n	800780e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80076da:	4b4f      	ldr	r3, [pc, #316]	; (8007818 <RCCEx_PLL2_Config+0x15c>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a4e      	ldr	r2, [pc, #312]	; (8007818 <RCCEx_PLL2_Config+0x15c>)
 80076e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80076e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076e6:	f7fa f9d3 	bl	8001a90 <HAL_GetTick>
 80076ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076ec:	e008      	b.n	8007700 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80076ee:	f7fa f9cf 	bl	8001a90 <HAL_GetTick>
 80076f2:	4602      	mov	r2, r0
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	1ad3      	subs	r3, r2, r3
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d901      	bls.n	8007700 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80076fc:	2303      	movs	r3, #3
 80076fe:	e086      	b.n	800780e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007700:	4b45      	ldr	r3, [pc, #276]	; (8007818 <RCCEx_PLL2_Config+0x15c>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d1f0      	bne.n	80076ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800770c:	4b42      	ldr	r3, [pc, #264]	; (8007818 <RCCEx_PLL2_Config+0x15c>)
 800770e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007710:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	031b      	lsls	r3, r3, #12
 800771a:	493f      	ldr	r1, [pc, #252]	; (8007818 <RCCEx_PLL2_Config+0x15c>)
 800771c:	4313      	orrs	r3, r2
 800771e:	628b      	str	r3, [r1, #40]	; 0x28
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	3b01      	subs	r3, #1
 8007726:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	3b01      	subs	r3, #1
 8007730:	025b      	lsls	r3, r3, #9
 8007732:	b29b      	uxth	r3, r3
 8007734:	431a      	orrs	r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	3b01      	subs	r3, #1
 800773c:	041b      	lsls	r3, r3, #16
 800773e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007742:	431a      	orrs	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	3b01      	subs	r3, #1
 800774a:	061b      	lsls	r3, r3, #24
 800774c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007750:	4931      	ldr	r1, [pc, #196]	; (8007818 <RCCEx_PLL2_Config+0x15c>)
 8007752:	4313      	orrs	r3, r2
 8007754:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007756:	4b30      	ldr	r3, [pc, #192]	; (8007818 <RCCEx_PLL2_Config+0x15c>)
 8007758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	695b      	ldr	r3, [r3, #20]
 8007762:	492d      	ldr	r1, [pc, #180]	; (8007818 <RCCEx_PLL2_Config+0x15c>)
 8007764:	4313      	orrs	r3, r2
 8007766:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007768:	4b2b      	ldr	r3, [pc, #172]	; (8007818 <RCCEx_PLL2_Config+0x15c>)
 800776a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776c:	f023 0220 	bic.w	r2, r3, #32
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	699b      	ldr	r3, [r3, #24]
 8007774:	4928      	ldr	r1, [pc, #160]	; (8007818 <RCCEx_PLL2_Config+0x15c>)
 8007776:	4313      	orrs	r3, r2
 8007778:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800777a:	4b27      	ldr	r3, [pc, #156]	; (8007818 <RCCEx_PLL2_Config+0x15c>)
 800777c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777e:	4a26      	ldr	r2, [pc, #152]	; (8007818 <RCCEx_PLL2_Config+0x15c>)
 8007780:	f023 0310 	bic.w	r3, r3, #16
 8007784:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007786:	4b24      	ldr	r3, [pc, #144]	; (8007818 <RCCEx_PLL2_Config+0x15c>)
 8007788:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800778a:	4b24      	ldr	r3, [pc, #144]	; (800781c <RCCEx_PLL2_Config+0x160>)
 800778c:	4013      	ands	r3, r2
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	69d2      	ldr	r2, [r2, #28]
 8007792:	00d2      	lsls	r2, r2, #3
 8007794:	4920      	ldr	r1, [pc, #128]	; (8007818 <RCCEx_PLL2_Config+0x15c>)
 8007796:	4313      	orrs	r3, r2
 8007798:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800779a:	4b1f      	ldr	r3, [pc, #124]	; (8007818 <RCCEx_PLL2_Config+0x15c>)
 800779c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779e:	4a1e      	ldr	r2, [pc, #120]	; (8007818 <RCCEx_PLL2_Config+0x15c>)
 80077a0:	f043 0310 	orr.w	r3, r3, #16
 80077a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d106      	bne.n	80077ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80077ac:	4b1a      	ldr	r3, [pc, #104]	; (8007818 <RCCEx_PLL2_Config+0x15c>)
 80077ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b0:	4a19      	ldr	r2, [pc, #100]	; (8007818 <RCCEx_PLL2_Config+0x15c>)
 80077b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077b8:	e00f      	b.n	80077da <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d106      	bne.n	80077ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80077c0:	4b15      	ldr	r3, [pc, #84]	; (8007818 <RCCEx_PLL2_Config+0x15c>)
 80077c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c4:	4a14      	ldr	r2, [pc, #80]	; (8007818 <RCCEx_PLL2_Config+0x15c>)
 80077c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077cc:	e005      	b.n	80077da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80077ce:	4b12      	ldr	r3, [pc, #72]	; (8007818 <RCCEx_PLL2_Config+0x15c>)
 80077d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d2:	4a11      	ldr	r2, [pc, #68]	; (8007818 <RCCEx_PLL2_Config+0x15c>)
 80077d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80077d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80077da:	4b0f      	ldr	r3, [pc, #60]	; (8007818 <RCCEx_PLL2_Config+0x15c>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a0e      	ldr	r2, [pc, #56]	; (8007818 <RCCEx_PLL2_Config+0x15c>)
 80077e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80077e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077e6:	f7fa f953 	bl	8001a90 <HAL_GetTick>
 80077ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80077ec:	e008      	b.n	8007800 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80077ee:	f7fa f94f 	bl	8001a90 <HAL_GetTick>
 80077f2:	4602      	mov	r2, r0
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d901      	bls.n	8007800 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e006      	b.n	800780e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007800:	4b05      	ldr	r3, [pc, #20]	; (8007818 <RCCEx_PLL2_Config+0x15c>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007808:	2b00      	cmp	r3, #0
 800780a:	d0f0      	beq.n	80077ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800780c:	7bfb      	ldrb	r3, [r7, #15]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	58024400 	.word	0x58024400
 800781c:	ffff0007 	.word	0xffff0007

08007820 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800782a:	2300      	movs	r3, #0
 800782c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800782e:	4b53      	ldr	r3, [pc, #332]	; (800797c <RCCEx_PLL3_Config+0x15c>)
 8007830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007832:	f003 0303 	and.w	r3, r3, #3
 8007836:	2b03      	cmp	r3, #3
 8007838:	d101      	bne.n	800783e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	e099      	b.n	8007972 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800783e:	4b4f      	ldr	r3, [pc, #316]	; (800797c <RCCEx_PLL3_Config+0x15c>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a4e      	ldr	r2, [pc, #312]	; (800797c <RCCEx_PLL3_Config+0x15c>)
 8007844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007848:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800784a:	f7fa f921 	bl	8001a90 <HAL_GetTick>
 800784e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007850:	e008      	b.n	8007864 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007852:	f7fa f91d 	bl	8001a90 <HAL_GetTick>
 8007856:	4602      	mov	r2, r0
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	1ad3      	subs	r3, r2, r3
 800785c:	2b02      	cmp	r3, #2
 800785e:	d901      	bls.n	8007864 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007860:	2303      	movs	r3, #3
 8007862:	e086      	b.n	8007972 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007864:	4b45      	ldr	r3, [pc, #276]	; (800797c <RCCEx_PLL3_Config+0x15c>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1f0      	bne.n	8007852 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007870:	4b42      	ldr	r3, [pc, #264]	; (800797c <RCCEx_PLL3_Config+0x15c>)
 8007872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007874:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	051b      	lsls	r3, r3, #20
 800787e:	493f      	ldr	r1, [pc, #252]	; (800797c <RCCEx_PLL3_Config+0x15c>)
 8007880:	4313      	orrs	r3, r2
 8007882:	628b      	str	r3, [r1, #40]	; 0x28
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	3b01      	subs	r3, #1
 800788a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	3b01      	subs	r3, #1
 8007894:	025b      	lsls	r3, r3, #9
 8007896:	b29b      	uxth	r3, r3
 8007898:	431a      	orrs	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	3b01      	subs	r3, #1
 80078a0:	041b      	lsls	r3, r3, #16
 80078a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80078a6:	431a      	orrs	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	691b      	ldr	r3, [r3, #16]
 80078ac:	3b01      	subs	r3, #1
 80078ae:	061b      	lsls	r3, r3, #24
 80078b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80078b4:	4931      	ldr	r1, [pc, #196]	; (800797c <RCCEx_PLL3_Config+0x15c>)
 80078b6:	4313      	orrs	r3, r2
 80078b8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80078ba:	4b30      	ldr	r3, [pc, #192]	; (800797c <RCCEx_PLL3_Config+0x15c>)
 80078bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	492d      	ldr	r1, [pc, #180]	; (800797c <RCCEx_PLL3_Config+0x15c>)
 80078c8:	4313      	orrs	r3, r2
 80078ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80078cc:	4b2b      	ldr	r3, [pc, #172]	; (800797c <RCCEx_PLL3_Config+0x15c>)
 80078ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	699b      	ldr	r3, [r3, #24]
 80078d8:	4928      	ldr	r1, [pc, #160]	; (800797c <RCCEx_PLL3_Config+0x15c>)
 80078da:	4313      	orrs	r3, r2
 80078dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80078de:	4b27      	ldr	r3, [pc, #156]	; (800797c <RCCEx_PLL3_Config+0x15c>)
 80078e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e2:	4a26      	ldr	r2, [pc, #152]	; (800797c <RCCEx_PLL3_Config+0x15c>)
 80078e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80078ea:	4b24      	ldr	r3, [pc, #144]	; (800797c <RCCEx_PLL3_Config+0x15c>)
 80078ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078ee:	4b24      	ldr	r3, [pc, #144]	; (8007980 <RCCEx_PLL3_Config+0x160>)
 80078f0:	4013      	ands	r3, r2
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	69d2      	ldr	r2, [r2, #28]
 80078f6:	00d2      	lsls	r2, r2, #3
 80078f8:	4920      	ldr	r1, [pc, #128]	; (800797c <RCCEx_PLL3_Config+0x15c>)
 80078fa:	4313      	orrs	r3, r2
 80078fc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80078fe:	4b1f      	ldr	r3, [pc, #124]	; (800797c <RCCEx_PLL3_Config+0x15c>)
 8007900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007902:	4a1e      	ldr	r2, [pc, #120]	; (800797c <RCCEx_PLL3_Config+0x15c>)
 8007904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007908:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d106      	bne.n	800791e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007910:	4b1a      	ldr	r3, [pc, #104]	; (800797c <RCCEx_PLL3_Config+0x15c>)
 8007912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007914:	4a19      	ldr	r2, [pc, #100]	; (800797c <RCCEx_PLL3_Config+0x15c>)
 8007916:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800791a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800791c:	e00f      	b.n	800793e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d106      	bne.n	8007932 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007924:	4b15      	ldr	r3, [pc, #84]	; (800797c <RCCEx_PLL3_Config+0x15c>)
 8007926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007928:	4a14      	ldr	r2, [pc, #80]	; (800797c <RCCEx_PLL3_Config+0x15c>)
 800792a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800792e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007930:	e005      	b.n	800793e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007932:	4b12      	ldr	r3, [pc, #72]	; (800797c <RCCEx_PLL3_Config+0x15c>)
 8007934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007936:	4a11      	ldr	r2, [pc, #68]	; (800797c <RCCEx_PLL3_Config+0x15c>)
 8007938:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800793c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800793e:	4b0f      	ldr	r3, [pc, #60]	; (800797c <RCCEx_PLL3_Config+0x15c>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a0e      	ldr	r2, [pc, #56]	; (800797c <RCCEx_PLL3_Config+0x15c>)
 8007944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007948:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800794a:	f7fa f8a1 	bl	8001a90 <HAL_GetTick>
 800794e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007950:	e008      	b.n	8007964 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007952:	f7fa f89d 	bl	8001a90 <HAL_GetTick>
 8007956:	4602      	mov	r2, r0
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	2b02      	cmp	r3, #2
 800795e:	d901      	bls.n	8007964 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007960:	2303      	movs	r3, #3
 8007962:	e006      	b.n	8007972 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007964:	4b05      	ldr	r3, [pc, #20]	; (800797c <RCCEx_PLL3_Config+0x15c>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800796c:	2b00      	cmp	r3, #0
 800796e:	d0f0      	beq.n	8007952 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007970:	7bfb      	ldrb	r3, [r7, #15]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	58024400 	.word	0x58024400
 8007980:	ffff0007 	.word	0xffff0007

08007984 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d101      	bne.n	8007996 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	e0f1      	b.n	8007b7a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a78      	ldr	r2, [pc, #480]	; (8007b84 <HAL_SPI_Init+0x200>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d00f      	beq.n	80079c6 <HAL_SPI_Init+0x42>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a77      	ldr	r2, [pc, #476]	; (8007b88 <HAL_SPI_Init+0x204>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d00a      	beq.n	80079c6 <HAL_SPI_Init+0x42>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a75      	ldr	r2, [pc, #468]	; (8007b8c <HAL_SPI_Init+0x208>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d005      	beq.n	80079c6 <HAL_SPI_Init+0x42>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	2b0f      	cmp	r3, #15
 80079c0:	d901      	bls.n	80079c6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	e0d9      	b.n	8007b7a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 ff6c 	bl	80088a4 <SPI_GetPacketSize>
 80079cc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a6c      	ldr	r2, [pc, #432]	; (8007b84 <HAL_SPI_Init+0x200>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d00c      	beq.n	80079f2 <HAL_SPI_Init+0x6e>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a6a      	ldr	r2, [pc, #424]	; (8007b88 <HAL_SPI_Init+0x204>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d007      	beq.n	80079f2 <HAL_SPI_Init+0x6e>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a69      	ldr	r2, [pc, #420]	; (8007b8c <HAL_SPI_Init+0x208>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d002      	beq.n	80079f2 <HAL_SPI_Init+0x6e>
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2b08      	cmp	r3, #8
 80079f0:	d811      	bhi.n	8007a16 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80079f6:	4a63      	ldr	r2, [pc, #396]	; (8007b84 <HAL_SPI_Init+0x200>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d009      	beq.n	8007a10 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a61      	ldr	r2, [pc, #388]	; (8007b88 <HAL_SPI_Init+0x204>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d004      	beq.n	8007a10 <HAL_SPI_Init+0x8c>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a60      	ldr	r2, [pc, #384]	; (8007b8c <HAL_SPI_Init+0x208>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d104      	bne.n	8007a1a <HAL_SPI_Init+0x96>
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2b10      	cmp	r3, #16
 8007a14:	d901      	bls.n	8007a1a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e0af      	b.n	8007b7a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d106      	bne.n	8007a34 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f7f9 fd06 	bl	8001440 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2202      	movs	r2, #2
 8007a38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f022 0201 	bic.w	r2, r2, #1
 8007a4a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007a56:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a60:	d119      	bne.n	8007a96 <HAL_SPI_Init+0x112>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a6a:	d103      	bne.n	8007a74 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d008      	beq.n	8007a86 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10c      	bne.n	8007a96 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007a80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a84:	d107      	bne.n	8007a96 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a94:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	69da      	ldr	r2, [r3, #28]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9e:	431a      	orrs	r2, r3
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	431a      	orrs	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa8:	ea42 0103 	orr.w	r1, r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	68da      	ldr	r2, [r3, #12]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	430a      	orrs	r2, r1
 8007ab6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac0:	431a      	orrs	r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac6:	431a      	orrs	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	431a      	orrs	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	431a      	orrs	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	695b      	ldr	r3, [r3, #20]
 8007ad8:	431a      	orrs	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a1b      	ldr	r3, [r3, #32]
 8007ade:	431a      	orrs	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	431a      	orrs	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aea:	431a      	orrs	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	431a      	orrs	r2, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007af6:	ea42 0103 	orr.w	r1, r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d113      	bne.n	8007b36 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b20:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b34:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f022 0201 	bic.w	r2, r2, #1
 8007b44:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00a      	beq.n	8007b68 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	430a      	orrs	r2, r1
 8007b66:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	40013000 	.word	0x40013000
 8007b88:	40003800 	.word	0x40003800
 8007b8c:	40003c00 	.word	0x40003c00

08007b90 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b08a      	sub	sp, #40	; 0x28
 8007b94:	af02      	add	r7, sp, #8
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	603b      	str	r3, [r7, #0]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3320      	adds	r3, #32
 8007ba6:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d101      	bne.n	8007bba <HAL_SPI_Transmit+0x2a>
 8007bb6:	2302      	movs	r3, #2
 8007bb8:	e1d7      	b.n	8007f6a <HAL_SPI_Transmit+0x3da>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007bc2:	f7f9 ff65 	bl	8001a90 <HAL_GetTick>
 8007bc6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d007      	beq.n	8007be4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007be0:	7efb      	ldrb	r3, [r7, #27]
 8007be2:	e1c2      	b.n	8007f6a <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d002      	beq.n	8007bf0 <HAL_SPI_Transmit+0x60>
 8007bea:	88fb      	ldrh	r3, [r7, #6]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d107      	bne.n	8007c00 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007bfc:	7efb      	ldrb	r3, [r7, #27]
 8007bfe:	e1b4      	b.n	8007f6a <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2203      	movs	r2, #3
 8007c04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	88fa      	ldrh	r2, [r7, #6]
 8007c1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	88fa      	ldrh	r2, [r7, #6]
 8007c22:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007c50:	d107      	bne.n	8007c62 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c60:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	685a      	ldr	r2, [r3, #4]
 8007c68:	4b96      	ldr	r3, [pc, #600]	; (8007ec4 <HAL_SPI_Transmit+0x334>)
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	88f9      	ldrh	r1, [r7, #6]
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	6812      	ldr	r2, [r2, #0]
 8007c72:	430b      	orrs	r3, r1
 8007c74:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f042 0201 	orr.w	r2, r2, #1
 8007c84:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c8e:	d107      	bne.n	8007ca0 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	2b0f      	cmp	r3, #15
 8007ca6:	d947      	bls.n	8007d38 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007ca8:	e03f      	b.n	8007d2a <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	695b      	ldr	r3, [r3, #20]
 8007cb0:	f003 0302 	and.w	r3, r3, #2
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d114      	bne.n	8007ce2 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6812      	ldr	r2, [r2, #0]
 8007cc2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cc8:	1d1a      	adds	r2, r3, #4
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	b29a      	uxth	r2, r3
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007ce0:	e023      	b.n	8007d2a <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ce2:	f7f9 fed5 	bl	8001a90 <HAL_GetTick>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	1ad3      	subs	r3, r2, r3
 8007cec:	683a      	ldr	r2, [r7, #0]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d803      	bhi.n	8007cfa <HAL_SPI_Transmit+0x16a>
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf8:	d102      	bne.n	8007d00 <HAL_SPI_Transmit+0x170>
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d114      	bne.n	8007d2a <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f000 fd01 	bl	8008708 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2201      	movs	r2, #1
 8007d22:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007d26:	2303      	movs	r3, #3
 8007d28:	e11f      	b.n	8007f6a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1b9      	bne.n	8007caa <HAL_SPI_Transmit+0x11a>
 8007d36:	e0f2      	b.n	8007f1e <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	2b07      	cmp	r3, #7
 8007d3e:	f240 80e7 	bls.w	8007f10 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007d42:	e05d      	b.n	8007e00 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	695b      	ldr	r3, [r3, #20]
 8007d4a:	f003 0302 	and.w	r3, r3, #2
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d132      	bne.n	8007db8 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d918      	bls.n	8007d90 <HAL_SPI_Transmit+0x200>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d014      	beq.n	8007d90 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	6812      	ldr	r2, [r2, #0]
 8007d70:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d76:	1d1a      	adds	r2, r3, #4
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	3b02      	subs	r3, #2
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007d8e:	e037      	b.n	8007e00 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d94:	881a      	ldrh	r2, [r3, #0]
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d9e:	1c9a      	adds	r2, r3, #2
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	3b01      	subs	r3, #1
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007db6:	e023      	b.n	8007e00 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007db8:	f7f9 fe6a 	bl	8001a90 <HAL_GetTick>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	683a      	ldr	r2, [r7, #0]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d803      	bhi.n	8007dd0 <HAL_SPI_Transmit+0x240>
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dce:	d102      	bne.n	8007dd6 <HAL_SPI_Transmit+0x246>
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d114      	bne.n	8007e00 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f000 fc96 	bl	8008708 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	e0b4      	b.n	8007f6a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d19b      	bne.n	8007d44 <HAL_SPI_Transmit+0x1b4>
 8007e0c:	e087      	b.n	8007f1e <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	695b      	ldr	r3, [r3, #20]
 8007e14:	f003 0302 	and.w	r3, r3, #2
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d155      	bne.n	8007ec8 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	2b03      	cmp	r3, #3
 8007e26:	d918      	bls.n	8007e5a <HAL_SPI_Transmit+0x2ca>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e2c:	2b40      	cmp	r3, #64	; 0x40
 8007e2e:	d914      	bls.n	8007e5a <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	6812      	ldr	r2, [r2, #0]
 8007e3a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e40:	1d1a      	adds	r2, r3, #4
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	3b04      	subs	r3, #4
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007e58:	e05a      	b.n	8007f10 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d917      	bls.n	8007e96 <HAL_SPI_Transmit+0x306>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d013      	beq.n	8007e96 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e72:	881a      	ldrh	r2, [r3, #0]
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e7c:	1c9a      	adds	r2, r3, #2
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	3b02      	subs	r3, #2
 8007e8c:	b29a      	uxth	r2, r3
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007e94:	e03c      	b.n	8007f10 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	3320      	adds	r3, #32
 8007ea0:	7812      	ldrb	r2, [r2, #0]
 8007ea2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ea8:	1c5a      	adds	r2, r3, #1
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	3b01      	subs	r3, #1
 8007eb8:	b29a      	uxth	r2, r3
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007ec0:	e026      	b.n	8007f10 <HAL_SPI_Transmit+0x380>
 8007ec2:	bf00      	nop
 8007ec4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ec8:	f7f9 fde2 	bl	8001a90 <HAL_GetTick>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d803      	bhi.n	8007ee0 <HAL_SPI_Transmit+0x350>
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ede:	d102      	bne.n	8007ee6 <HAL_SPI_Transmit+0x356>
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d114      	bne.n	8007f10 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007ee6:	68f8      	ldr	r0, [r7, #12]
 8007ee8:	f000 fc0e 	bl	8008708 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007efa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	e02c      	b.n	8007f6a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f47f af78 	bne.w	8007e0e <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	9300      	str	r3, [sp, #0]
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	2200      	movs	r2, #0
 8007f26:	2108      	movs	r1, #8
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f000 fc8d 	bl	8008848 <SPI_WaitOnFlagUntilTimeout>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d007      	beq.n	8007f44 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f3a:	f043 0220 	orr.w	r2, r3, #32
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f000 fbdf 	bl	8008708 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2201      	movs	r2, #1
 8007f56:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d001      	beq.n	8007f68 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	e000      	b.n	8007f6a <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8007f68:	7efb      	ldrb	r3, [r7, #27]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3720      	adds	r7, #32
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop

08007f74 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b086      	sub	sp, #24
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	4613      	mov	r3, r2
 8007f80:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f82:	2300      	movs	r3, #0
 8007f84:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d101      	bne.n	8007f94 <HAL_SPI_Transmit_DMA+0x20>
 8007f90:	2302      	movs	r3, #2
 8007f92:	e12c      	b.n	80081ee <HAL_SPI_Transmit_DMA+0x27a>
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d007      	beq.n	8007fb8 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 8007fa8:	2302      	movs	r3, #2
 8007faa:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007fb4:	7dfb      	ldrb	r3, [r7, #23]
 8007fb6:	e11a      	b.n	80081ee <HAL_SPI_Transmit_DMA+0x27a>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d002      	beq.n	8007fc4 <HAL_SPI_Transmit_DMA+0x50>
 8007fbe:	88fb      	ldrh	r3, [r7, #6]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d107      	bne.n	8007fd4 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007fd0:	7dfb      	ldrb	r3, [r7, #23]
 8007fd2:	e10c      	b.n	80081ee <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2203      	movs	r2, #3
 8007fd8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	68ba      	ldr	r2, [r7, #8]
 8007fe8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	88fa      	ldrh	r2, [r7, #6]
 8007fee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	88fa      	ldrh	r2, [r7, #6]
 8007ff6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2200      	movs	r2, #0
 8008004:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008024:	d107      	bne.n	8008036 <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008034:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	2b0f      	cmp	r3, #15
 800803c:	d905      	bls.n	800804a <HAL_SPI_Transmit_DMA+0xd6>
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008048:	d10f      	bne.n	800806a <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800804e:	2b07      	cmp	r3, #7
 8008050:	d913      	bls.n	800807a <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008056:	699b      	ldr	r3, [r3, #24]
 8008058:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800805c:	d00d      	beq.n	800807a <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008062:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008064:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008068:	d007      	beq.n	800807a <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2200      	movs	r2, #0
 8008072:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008076:	7dfb      	ldrb	r3, [r7, #23]
 8008078:	e0b9      	b.n	80081ee <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	2b07      	cmp	r3, #7
 8008080:	d820      	bhi.n	80080c4 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008086:	699b      	ldr	r3, [r3, #24]
 8008088:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800808c:	d109      	bne.n	80080a2 <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008094:	b29b      	uxth	r3, r3
 8008096:	3301      	adds	r3, #1
 8008098:	105b      	asrs	r3, r3, #1
 800809a:	b29a      	uxth	r2, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080ac:	d11e      	bne.n	80080ec <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	3303      	adds	r3, #3
 80080b8:	109b      	asrs	r3, r3, #2
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80080c2:	e013      	b.n	80080ec <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	2b0f      	cmp	r3, #15
 80080ca:	d80f      	bhi.n	80080ec <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080d0:	699b      	ldr	r3, [r3, #24]
 80080d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080d6:	d109      	bne.n	80080ec <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80080de:	b29b      	uxth	r3, r3
 80080e0:	3301      	adds	r3, #1
 80080e2:	105b      	asrs	r3, r3, #1
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080f0:	4a41      	ldr	r2, [pc, #260]	; (80081f8 <HAL_SPI_Transmit_DMA+0x284>)
 80080f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080f8:	4a40      	ldr	r2, [pc, #256]	; (80081fc <HAL_SPI_Transmit_DMA+0x288>)
 80080fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008100:	4a3f      	ldr	r2, [pc, #252]	; (8008200 <HAL_SPI_Transmit_DMA+0x28c>)
 8008102:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008108:	2200      	movs	r2, #0
 800810a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	689a      	ldr	r2, [r3, #8]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800811a:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008124:	4619      	mov	r1, r3
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	3320      	adds	r3, #32
 800812c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008134:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008136:	f7fa f967 	bl	8002408 <HAL_DMA_Start_IT>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d013      	beq.n	8008168 <HAL_SPI_Transmit_DMA+0x1f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008146:	f043 0210 	orr.w	r2, r3, #16
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2200      	movs	r2, #0
 8008154:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8008164:	7dfb      	ldrb	r3, [r7, #23]
 8008166:	e042      	b.n	80081ee <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800816c:	69db      	ldr	r3, [r3, #28]
 800816e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008172:	d108      	bne.n	8008186 <HAL_SPI_Transmit_DMA+0x212>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	6859      	ldr	r1, [r3, #4]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	4b21      	ldr	r3, [pc, #132]	; (8008204 <HAL_SPI_Transmit_DMA+0x290>)
 8008180:	400b      	ands	r3, r1
 8008182:	6053      	str	r3, [r2, #4]
 8008184:	e009      	b.n	800819a <HAL_SPI_Transmit_DMA+0x226>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	685a      	ldr	r2, [r3, #4]
 800818c:	4b1d      	ldr	r3, [pc, #116]	; (8008204 <HAL_SPI_Transmit_DMA+0x290>)
 800818e:	4013      	ands	r3, r2
 8008190:	88f9      	ldrh	r1, [r7, #6]
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	6812      	ldr	r2, [r2, #0]
 8008196:	430b      	orrs	r3, r1
 8008198:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	689a      	ldr	r2, [r3, #8]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081a8:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	691a      	ldr	r2, [r3, #16]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 80081b8:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f042 0201 	orr.w	r2, r2, #1
 80081c8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081d2:	d107      	bne.n	80081e4 <HAL_SPI_Transmit_DMA+0x270>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081e2:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 80081ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3718      	adds	r7, #24
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	08008673 	.word	0x08008673
 80081fc:	0800862d 	.word	0x0800862d
 8008200:	0800868f 	.word	0x0800868f
 8008204:	ffff0000 	.word	0xffff0000

08008208 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b08a      	sub	sp, #40	; 0x28
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	695b      	ldr	r3, [r3, #20]
 800821e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008220:	6a3a      	ldr	r2, [r7, #32]
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	4013      	ands	r3, r2
 8008226:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008230:	2300      	movs	r3, #0
 8008232:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800823a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	3330      	adds	r3, #48	; 0x30
 8008242:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800824a:	2b00      	cmp	r3, #0
 800824c:	d113      	bne.n	8008276 <HAL_SPI_IRQHandler+0x6e>
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	f003 0320 	and.w	r3, r3, #32
 8008254:	2b00      	cmp	r3, #0
 8008256:	d10e      	bne.n	8008276 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800825e:	2b00      	cmp	r3, #0
 8008260:	d009      	beq.n	8008276 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	4798      	blx	r3
    hspi->RxISR(hspi);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	4798      	blx	r3
    handled = 1UL;
 8008272:	2301      	movs	r3, #1
 8008274:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10f      	bne.n	80082a0 <HAL_SPI_IRQHandler+0x98>
 8008280:	69bb      	ldr	r3, [r7, #24]
 8008282:	f003 0301 	and.w	r3, r3, #1
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00a      	beq.n	80082a0 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008290:	2b00      	cmp	r3, #0
 8008292:	d105      	bne.n	80082a0 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	4798      	blx	r3
    handled = 1UL;
 800829c:	2301      	movs	r3, #1
 800829e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	f003 0320 	and.w	r3, r3, #32
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d10f      	bne.n	80082ca <HAL_SPI_IRQHandler+0xc2>
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	f003 0302 	and.w	r3, r3, #2
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00a      	beq.n	80082ca <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d105      	bne.n	80082ca <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	4798      	blx	r3
    handled = 1UL;
 80082c6:	2301      	movs	r3, #1
 80082c8:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80082ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f040 816f 	bne.w	80085b0 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	f003 0308 	and.w	r3, r3, #8
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f000 80a0 	beq.w	800841e <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	699a      	ldr	r2, [r3, #24]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f042 0208 	orr.w	r2, r2, #8
 80082ec:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	699a      	ldr	r2, [r3, #24]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f042 0210 	orr.w	r2, r2, #16
 80082fc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	699a      	ldr	r2, [r3, #24]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800830c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	691a      	ldr	r2, [r3, #16]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f022 0208 	bic.w	r2, r2, #8
 800831c:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00f      	beq.n	8008348 <HAL_SPI_IRQHandler+0x140>
 8008328:	7cfb      	ldrb	r3, [r7, #19]
 800832a:	2b04      	cmp	r3, #4
 800832c:	d004      	beq.n	8008338 <HAL_SPI_IRQHandler+0x130>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008332:	69db      	ldr	r3, [r3, #28]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d007      	beq.n	8008348 <HAL_SPI_IRQHandler+0x140>
 8008338:	7cfb      	ldrb	r3, [r7, #19]
 800833a:	2b03      	cmp	r3, #3
 800833c:	d059      	beq.n	80083f2 <HAL_SPI_IRQHandler+0x1ea>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008342:	69db      	ldr	r3, [r3, #28]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d154      	bne.n	80083f2 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008352:	2b00      	cmp	r3, #0
 8008354:	d13d      	bne.n	80083d2 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8008356:	e036      	b.n	80083c6 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	2b0f      	cmp	r3, #15
 800835e:	d90b      	bls.n	8008378 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008368:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800836a:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008370:	1d1a      	adds	r2, r3, #4
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	665a      	str	r2, [r3, #100]	; 0x64
 8008376:	e01d      	b.n	80083b4 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	2b07      	cmp	r3, #7
 800837e:	d90b      	bls.n	8008398 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	8812      	ldrh	r2, [r2, #0]
 8008388:	b292      	uxth	r2, r2
 800838a:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008390:	1c9a      	adds	r2, r3, #2
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	665a      	str	r2, [r3, #100]	; 0x64
 8008396:	e00d      	b.n	80083b4 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083a4:	7812      	ldrb	r2, [r2, #0]
 80083a6:	b2d2      	uxtb	r2, r2
 80083a8:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083ae:	1c5a      	adds	r2, r3, #1
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	3b01      	subs	r3, #1
 80083be:	b29a      	uxth	r2, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1c2      	bne.n	8008358 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 f998 	bl	8008708 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d003      	beq.n	80083f2 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f914 	bl	8008618 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 80083f0:	e0e3      	b.n	80085ba <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80083f2:	7cfb      	ldrb	r3, [r7, #19]
 80083f4:	2b05      	cmp	r3, #5
 80083f6:	d103      	bne.n	8008400 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 f8f9 	bl	80085f0 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80083fe:	e0d9      	b.n	80085b4 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008400:	7cfb      	ldrb	r3, [r7, #19]
 8008402:	2b04      	cmp	r3, #4
 8008404:	d103      	bne.n	800840e <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 f8e8 	bl	80085dc <HAL_SPI_RxCpltCallback>
    return;
 800840c:	e0d2      	b.n	80085b4 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800840e:	7cfb      	ldrb	r3, [r7, #19]
 8008410:	2b03      	cmp	r3, #3
 8008412:	f040 80cf 	bne.w	80085b4 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f8d6 	bl	80085c8 <HAL_SPI_TxCpltCallback>
    return;
 800841c:	e0ca      	b.n	80085b4 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00d      	beq.n	8008444 <HAL_SPI_IRQHandler+0x23c>
 8008428:	6a3b      	ldr	r3, [r7, #32]
 800842a:	f003 0308 	and.w	r3, r3, #8
 800842e:	2b00      	cmp	r3, #0
 8008430:	d008      	beq.n	8008444 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	699a      	ldr	r2, [r3, #24]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008440:	619a      	str	r2, [r3, #24]

    return;
 8008442:	e0ba      	b.n	80085ba <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800844a:	2b00      	cmp	r3, #0
 800844c:	f000 80b5 	beq.w	80085ba <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008456:	2b00      	cmp	r3, #0
 8008458:	d00f      	beq.n	800847a <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008460:	f043 0204 	orr.w	r2, r3, #4
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	699a      	ldr	r2, [r3, #24]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008478:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00f      	beq.n	80084a4 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800848a:	f043 0201 	orr.w	r2, r3, #1
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	699a      	ldr	r2, [r3, #24]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084a2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00f      	beq.n	80084ce <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084b4:	f043 0208 	orr.w	r2, r3, #8
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	699a      	ldr	r2, [r3, #24]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084cc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	f003 0320 	and.w	r3, r3, #32
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00f      	beq.n	80084f8 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084de:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	699a      	ldr	r2, [r3, #24]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f042 0220 	orr.w	r2, r2, #32
 80084f6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d05a      	beq.n	80085b8 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f022 0201 	bic.w	r2, r2, #1
 8008510:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	6919      	ldr	r1, [r3, #16]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	4b28      	ldr	r3, [pc, #160]	; (80085c0 <HAL_SPI_IRQHandler+0x3b8>)
 800851e:	400b      	ands	r3, r1
 8008520:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008528:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800852c:	d138      	bne.n	80085a0 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	689a      	ldr	r2, [r3, #8]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800853c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008542:	2b00      	cmp	r3, #0
 8008544:	d013      	beq.n	800856e <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800854a:	4a1e      	ldr	r2, [pc, #120]	; (80085c4 <HAL_SPI_IRQHandler+0x3bc>)
 800854c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008552:	4618      	mov	r0, r3
 8008554:	f7fa f9c2 	bl	80028dc <HAL_DMA_Abort_IT>
 8008558:	4603      	mov	r3, r0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d007      	beq.n	800856e <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008564:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008572:	2b00      	cmp	r3, #0
 8008574:	d020      	beq.n	80085b8 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800857a:	4a12      	ldr	r2, [pc, #72]	; (80085c4 <HAL_SPI_IRQHandler+0x3bc>)
 800857c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008582:	4618      	mov	r0, r3
 8008584:	f7fa f9aa 	bl	80028dc <HAL_DMA_Abort_IT>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d014      	beq.n	80085b8 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008594:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800859e:	e00b      	b.n	80085b8 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 f835 	bl	8008618 <HAL_SPI_ErrorCallback>
    return;
 80085ae:	e003      	b.n	80085b8 <HAL_SPI_IRQHandler+0x3b0>
    return;
 80085b0:	bf00      	nop
 80085b2:	e002      	b.n	80085ba <HAL_SPI_IRQHandler+0x3b2>
    return;
 80085b4:	bf00      	nop
 80085b6:	e000      	b.n	80085ba <HAL_SPI_IRQHandler+0x3b2>
    return;
 80085b8:	bf00      	nop
  }
}
 80085ba:	3728      	adds	r7, #40	; 0x28
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	fffffc94 	.word	0xfffffc94
 80085c4:	080086d5 	.word	0x080086d5

080085c8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008638:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008640:	b2db      	uxtb	r3, r3
 8008642:	2b07      	cmp	r3, #7
 8008644:	d011      	beq.n	800866a <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800864a:	69db      	ldr	r3, [r3, #28]
 800864c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008650:	d103      	bne.n	800865a <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8008652:	68f8      	ldr	r0, [r7, #12]
 8008654:	f7ff ffb8 	bl	80085c8 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8008658:	e007      	b.n	800866a <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	691a      	ldr	r2, [r3, #16]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f042 0208 	orr.w	r2, r2, #8
 8008668:	611a      	str	r2, [r3, #16]
}
 800866a:	bf00      	nop
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b084      	sub	sp, #16
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800867e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	f7ff ffbf 	bl	8008604 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008686:	bf00      	nop
 8008688:	3710      	adds	r7, #16
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b084      	sub	sp, #16
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869a:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f7fb fa8b 	bl	8003bb8 <HAL_DMA_GetError>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d011      	beq.n	80086cc <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80086a8:	68f8      	ldr	r0, [r7, #12]
 80086aa:	f000 f82d 	bl	8008708 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086b4:	f043 0210 	orr.w	r2, r3, #16
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2201      	movs	r2, #1
 80086c2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f7ff ffa6 	bl	8008618 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80086cc:	bf00      	nop
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2201      	movs	r2, #1
 80086f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f7ff ff8c 	bl	8008618 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008700:	bf00      	nop
 8008702:	3710      	adds	r7, #16
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	695b      	ldr	r3, [r3, #20]
 8008716:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	699a      	ldr	r2, [r3, #24]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f042 0208 	orr.w	r2, r2, #8
 8008726:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	699a      	ldr	r2, [r3, #24]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f042 0210 	orr.w	r2, r2, #16
 8008736:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f022 0201 	bic.w	r2, r2, #1
 8008746:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	6919      	ldr	r1, [r3, #16]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	4b3c      	ldr	r3, [pc, #240]	; (8008844 <SPI_CloseTransfer+0x13c>)
 8008754:	400b      	ands	r3, r1
 8008756:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	689a      	ldr	r2, [r3, #8]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008766:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800876e:	b2db      	uxtb	r3, r3
 8008770:	2b04      	cmp	r3, #4
 8008772:	d014      	beq.n	800879e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f003 0320 	and.w	r3, r3, #32
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00f      	beq.n	800879e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008784:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	699a      	ldr	r2, [r3, #24]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f042 0220 	orr.w	r2, r2, #32
 800879c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	2b03      	cmp	r3, #3
 80087a8:	d014      	beq.n	80087d4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d00f      	beq.n	80087d4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087ba:	f043 0204 	orr.w	r2, r3, #4
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	699a      	ldr	r2, [r3, #24]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087d2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00f      	beq.n	80087fe <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087e4:	f043 0201 	orr.w	r2, r3, #1
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	699a      	ldr	r2, [r3, #24]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087fc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00f      	beq.n	8008828 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800880e:	f043 0208 	orr.w	r2, r3, #8
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	699a      	ldr	r2, [r3, #24]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008826:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008838:	bf00      	nop
 800883a:	3714      	adds	r7, #20
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr
 8008844:	fffffc90 	.word	0xfffffc90

08008848 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	603b      	str	r3, [r7, #0]
 8008854:	4613      	mov	r3, r2
 8008856:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008858:	e010      	b.n	800887c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800885a:	f7f9 f919 	bl	8001a90 <HAL_GetTick>
 800885e:	4602      	mov	r2, r0
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	1ad3      	subs	r3, r2, r3
 8008864:	69ba      	ldr	r2, [r7, #24]
 8008866:	429a      	cmp	r2, r3
 8008868:	d803      	bhi.n	8008872 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008870:	d102      	bne.n	8008878 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d101      	bne.n	800887c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008878:	2303      	movs	r3, #3
 800887a:	e00f      	b.n	800889c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	695a      	ldr	r2, [r3, #20]
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	4013      	ands	r3, r2
 8008886:	68ba      	ldr	r2, [r7, #8]
 8008888:	429a      	cmp	r2, r3
 800888a:	bf0c      	ite	eq
 800888c:	2301      	moveq	r3, #1
 800888e:	2300      	movne	r3, #0
 8008890:	b2db      	uxtb	r3, r3
 8008892:	461a      	mov	r2, r3
 8008894:	79fb      	ldrb	r3, [r7, #7]
 8008896:	429a      	cmp	r2, r3
 8008898:	d0df      	beq.n	800885a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800889a:	2300      	movs	r3, #0
}
 800889c:	4618      	mov	r0, r3
 800889e:	3710      	adds	r7, #16
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088b0:	095b      	lsrs	r3, r3, #5
 80088b2:	3301      	adds	r3, #1
 80088b4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	3301      	adds	r3, #1
 80088bc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	3307      	adds	r3, #7
 80088c2:	08db      	lsrs	r3, r3, #3
 80088c4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	68fa      	ldr	r2, [r7, #12]
 80088ca:	fb02 f303 	mul.w	r3, r2, r3
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3714      	adds	r7, #20
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr

080088da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b082      	sub	sp, #8
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d101      	bne.n	80088ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e049      	b.n	8008980 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d106      	bne.n	8008906 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f7f8 fe63 	bl	80015cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2202      	movs	r2, #2
 800890a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	3304      	adds	r3, #4
 8008916:	4619      	mov	r1, r3
 8008918:	4610      	mov	r0, r2
 800891a:	f000 fb15 	bl	8008f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2201      	movs	r2, #1
 8008922:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2201      	movs	r2, #1
 8008932:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2201      	movs	r2, #1
 800893a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2201      	movs	r2, #1
 8008942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2201      	movs	r2, #1
 8008952:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2201      	movs	r2, #1
 800895a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2201      	movs	r2, #1
 8008972:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2201      	movs	r2, #1
 800897a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800897e:	2300      	movs	r3, #0
}
 8008980:	4618      	mov	r0, r3
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	6a1a      	ldr	r2, [r3, #32]
 8008996:	f241 1311 	movw	r3, #4369	; 0x1111
 800899a:	4013      	ands	r3, r2
 800899c:	2b00      	cmp	r3, #0
 800899e:	d10f      	bne.n	80089c0 <HAL_TIM_Base_Stop+0x38>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6a1a      	ldr	r2, [r3, #32]
 80089a6:	f240 4344 	movw	r3, #1092	; 0x444
 80089aa:	4013      	ands	r3, r2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d107      	bne.n	80089c0 <HAL_TIM_Base_Stop+0x38>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f022 0201 	bic.w	r2, r2, #1
 80089be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	370c      	adds	r7, #12
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr
	...

080089d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d001      	beq.n	80089f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	e054      	b.n	8008a9a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2202      	movs	r2, #2
 80089f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	68da      	ldr	r2, [r3, #12]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f042 0201 	orr.w	r2, r2, #1
 8008a06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a26      	ldr	r2, [pc, #152]	; (8008aa8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d022      	beq.n	8008a58 <HAL_TIM_Base_Start_IT+0x80>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a1a:	d01d      	beq.n	8008a58 <HAL_TIM_Base_Start_IT+0x80>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a22      	ldr	r2, [pc, #136]	; (8008aac <HAL_TIM_Base_Start_IT+0xd4>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d018      	beq.n	8008a58 <HAL_TIM_Base_Start_IT+0x80>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a21      	ldr	r2, [pc, #132]	; (8008ab0 <HAL_TIM_Base_Start_IT+0xd8>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d013      	beq.n	8008a58 <HAL_TIM_Base_Start_IT+0x80>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a1f      	ldr	r2, [pc, #124]	; (8008ab4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d00e      	beq.n	8008a58 <HAL_TIM_Base_Start_IT+0x80>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a1e      	ldr	r2, [pc, #120]	; (8008ab8 <HAL_TIM_Base_Start_IT+0xe0>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d009      	beq.n	8008a58 <HAL_TIM_Base_Start_IT+0x80>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a1c      	ldr	r2, [pc, #112]	; (8008abc <HAL_TIM_Base_Start_IT+0xe4>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d004      	beq.n	8008a58 <HAL_TIM_Base_Start_IT+0x80>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a1b      	ldr	r2, [pc, #108]	; (8008ac0 <HAL_TIM_Base_Start_IT+0xe8>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d115      	bne.n	8008a84 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	689a      	ldr	r2, [r3, #8]
 8008a5e:	4b19      	ldr	r3, [pc, #100]	; (8008ac4 <HAL_TIM_Base_Start_IT+0xec>)
 8008a60:	4013      	ands	r3, r2
 8008a62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2b06      	cmp	r3, #6
 8008a68:	d015      	beq.n	8008a96 <HAL_TIM_Base_Start_IT+0xbe>
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a70:	d011      	beq.n	8008a96 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f042 0201 	orr.w	r2, r2, #1
 8008a80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a82:	e008      	b.n	8008a96 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f042 0201 	orr.w	r2, r2, #1
 8008a92:	601a      	str	r2, [r3, #0]
 8008a94:	e000      	b.n	8008a98 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3714      	adds	r7, #20
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr
 8008aa6:	bf00      	nop
 8008aa8:	40010000 	.word	0x40010000
 8008aac:	40000400 	.word	0x40000400
 8008ab0:	40000800 	.word	0x40000800
 8008ab4:	40000c00 	.word	0x40000c00
 8008ab8:	40010400 	.word	0x40010400
 8008abc:	40001800 	.word	0x40001800
 8008ac0:	40014000 	.word	0x40014000
 8008ac4:	00010007 	.word	0x00010007

08008ac8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	f003 0302 	and.w	r3, r3, #2
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d122      	bne.n	8008b24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	f003 0302 	and.w	r3, r3, #2
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	d11b      	bne.n	8008b24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f06f 0202 	mvn.w	r2, #2
 8008af4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2201      	movs	r2, #1
 8008afa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	f003 0303 	and.w	r3, r3, #3
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d003      	beq.n	8008b12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 f9fe 	bl	8008f0c <HAL_TIM_IC_CaptureCallback>
 8008b10:	e005      	b.n	8008b1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f9f0 	bl	8008ef8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 fa01 	bl	8008f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	f003 0304 	and.w	r3, r3, #4
 8008b2e:	2b04      	cmp	r3, #4
 8008b30:	d122      	bne.n	8008b78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	f003 0304 	and.w	r3, r3, #4
 8008b3c:	2b04      	cmp	r3, #4
 8008b3e:	d11b      	bne.n	8008b78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f06f 0204 	mvn.w	r2, #4
 8008b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2202      	movs	r2, #2
 8008b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	699b      	ldr	r3, [r3, #24]
 8008b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d003      	beq.n	8008b66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f9d4 	bl	8008f0c <HAL_TIM_IC_CaptureCallback>
 8008b64:	e005      	b.n	8008b72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 f9c6 	bl	8008ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 f9d7 	bl	8008f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	691b      	ldr	r3, [r3, #16]
 8008b7e:	f003 0308 	and.w	r3, r3, #8
 8008b82:	2b08      	cmp	r3, #8
 8008b84:	d122      	bne.n	8008bcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	f003 0308 	and.w	r3, r3, #8
 8008b90:	2b08      	cmp	r3, #8
 8008b92:	d11b      	bne.n	8008bcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f06f 0208 	mvn.w	r2, #8
 8008b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2204      	movs	r2, #4
 8008ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	69db      	ldr	r3, [r3, #28]
 8008baa:	f003 0303 	and.w	r3, r3, #3
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d003      	beq.n	8008bba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f9aa 	bl	8008f0c <HAL_TIM_IC_CaptureCallback>
 8008bb8:	e005      	b.n	8008bc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 f99c 	bl	8008ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 f9ad 	bl	8008f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	f003 0310 	and.w	r3, r3, #16
 8008bd6:	2b10      	cmp	r3, #16
 8008bd8:	d122      	bne.n	8008c20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	f003 0310 	and.w	r3, r3, #16
 8008be4:	2b10      	cmp	r3, #16
 8008be6:	d11b      	bne.n	8008c20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f06f 0210 	mvn.w	r2, #16
 8008bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2208      	movs	r2, #8
 8008bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	69db      	ldr	r3, [r3, #28]
 8008bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d003      	beq.n	8008c0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f980 	bl	8008f0c <HAL_TIM_IC_CaptureCallback>
 8008c0c:	e005      	b.n	8008c1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f972 	bl	8008ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 f983 	bl	8008f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	f003 0301 	and.w	r3, r3, #1
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d10e      	bne.n	8008c4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	f003 0301 	and.w	r3, r3, #1
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d107      	bne.n	8008c4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f06f 0201 	mvn.w	r2, #1
 8008c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f7f8 f942 	bl	8000ed0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c56:	2b80      	cmp	r3, #128	; 0x80
 8008c58:	d10e      	bne.n	8008c78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c64:	2b80      	cmp	r3, #128	; 0x80
 8008c66:	d107      	bne.n	8008c78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 fb38 	bl	80092e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c86:	d10e      	bne.n	8008ca6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c92:	2b80      	cmp	r3, #128	; 0x80
 8008c94:	d107      	bne.n	8008ca6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 fb2b 	bl	80092fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	691b      	ldr	r3, [r3, #16]
 8008cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cb0:	2b40      	cmp	r3, #64	; 0x40
 8008cb2:	d10e      	bne.n	8008cd2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cbe:	2b40      	cmp	r3, #64	; 0x40
 8008cc0:	d107      	bne.n	8008cd2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 f931 	bl	8008f34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	f003 0320 	and.w	r3, r3, #32
 8008cdc:	2b20      	cmp	r3, #32
 8008cde:	d10e      	bne.n	8008cfe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	68db      	ldr	r3, [r3, #12]
 8008ce6:	f003 0320 	and.w	r3, r3, #32
 8008cea:	2b20      	cmp	r3, #32
 8008cec:	d107      	bne.n	8008cfe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f06f 0220 	mvn.w	r2, #32
 8008cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 faeb 	bl	80092d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008cfe:	bf00      	nop
 8008d00:	3708      	adds	r7, #8
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
	...

08008d08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d12:	2300      	movs	r3, #0
 8008d14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d101      	bne.n	8008d24 <HAL_TIM_ConfigClockSource+0x1c>
 8008d20:	2302      	movs	r3, #2
 8008d22:	e0dc      	b.n	8008ede <HAL_TIM_ConfigClockSource+0x1d6>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2202      	movs	r2, #2
 8008d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008d3c:	68ba      	ldr	r2, [r7, #8]
 8008d3e:	4b6a      	ldr	r3, [pc, #424]	; (8008ee8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008d40:	4013      	ands	r3, r2
 8008d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	68ba      	ldr	r2, [r7, #8]
 8008d52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a64      	ldr	r2, [pc, #400]	; (8008eec <HAL_TIM_ConfigClockSource+0x1e4>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	f000 80a9 	beq.w	8008eb2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008d60:	4a62      	ldr	r2, [pc, #392]	; (8008eec <HAL_TIM_ConfigClockSource+0x1e4>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	f200 80ae 	bhi.w	8008ec4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008d68:	4a61      	ldr	r2, [pc, #388]	; (8008ef0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	f000 80a1 	beq.w	8008eb2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008d70:	4a5f      	ldr	r2, [pc, #380]	; (8008ef0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	f200 80a6 	bhi.w	8008ec4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008d78:	4a5e      	ldr	r2, [pc, #376]	; (8008ef4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	f000 8099 	beq.w	8008eb2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008d80:	4a5c      	ldr	r2, [pc, #368]	; (8008ef4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	f200 809e 	bhi.w	8008ec4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008d88:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008d8c:	f000 8091 	beq.w	8008eb2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008d90:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008d94:	f200 8096 	bhi.w	8008ec4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008d98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d9c:	f000 8089 	beq.w	8008eb2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008da0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008da4:	f200 808e 	bhi.w	8008ec4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008da8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dac:	d03e      	beq.n	8008e2c <HAL_TIM_ConfigClockSource+0x124>
 8008dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008db2:	f200 8087 	bhi.w	8008ec4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dba:	f000 8086 	beq.w	8008eca <HAL_TIM_ConfigClockSource+0x1c2>
 8008dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dc2:	d87f      	bhi.n	8008ec4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008dc4:	2b70      	cmp	r3, #112	; 0x70
 8008dc6:	d01a      	beq.n	8008dfe <HAL_TIM_ConfigClockSource+0xf6>
 8008dc8:	2b70      	cmp	r3, #112	; 0x70
 8008dca:	d87b      	bhi.n	8008ec4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008dcc:	2b60      	cmp	r3, #96	; 0x60
 8008dce:	d050      	beq.n	8008e72 <HAL_TIM_ConfigClockSource+0x16a>
 8008dd0:	2b60      	cmp	r3, #96	; 0x60
 8008dd2:	d877      	bhi.n	8008ec4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008dd4:	2b50      	cmp	r3, #80	; 0x50
 8008dd6:	d03c      	beq.n	8008e52 <HAL_TIM_ConfigClockSource+0x14a>
 8008dd8:	2b50      	cmp	r3, #80	; 0x50
 8008dda:	d873      	bhi.n	8008ec4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ddc:	2b40      	cmp	r3, #64	; 0x40
 8008dde:	d058      	beq.n	8008e92 <HAL_TIM_ConfigClockSource+0x18a>
 8008de0:	2b40      	cmp	r3, #64	; 0x40
 8008de2:	d86f      	bhi.n	8008ec4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008de4:	2b30      	cmp	r3, #48	; 0x30
 8008de6:	d064      	beq.n	8008eb2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008de8:	2b30      	cmp	r3, #48	; 0x30
 8008dea:	d86b      	bhi.n	8008ec4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008dec:	2b20      	cmp	r3, #32
 8008dee:	d060      	beq.n	8008eb2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008df0:	2b20      	cmp	r3, #32
 8008df2:	d867      	bhi.n	8008ec4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d05c      	beq.n	8008eb2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008df8:	2b10      	cmp	r3, #16
 8008dfa:	d05a      	beq.n	8008eb2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008dfc:	e062      	b.n	8008ec4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6818      	ldr	r0, [r3, #0]
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	6899      	ldr	r1, [r3, #8]
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	685a      	ldr	r2, [r3, #4]
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	68db      	ldr	r3, [r3, #12]
 8008e0e:	f000 f9b3 	bl	8009178 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008e20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	68ba      	ldr	r2, [r7, #8]
 8008e28:	609a      	str	r2, [r3, #8]
      break;
 8008e2a:	e04f      	b.n	8008ecc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6818      	ldr	r0, [r3, #0]
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	6899      	ldr	r1, [r3, #8]
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	685a      	ldr	r2, [r3, #4]
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	f000 f99c 	bl	8009178 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	689a      	ldr	r2, [r3, #8]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e4e:	609a      	str	r2, [r3, #8]
      break;
 8008e50:	e03c      	b.n	8008ecc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6818      	ldr	r0, [r3, #0]
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	6859      	ldr	r1, [r3, #4]
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	461a      	mov	r2, r3
 8008e60:	f000 f90c 	bl	800907c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2150      	movs	r1, #80	; 0x50
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f000 f966 	bl	800913c <TIM_ITRx_SetConfig>
      break;
 8008e70:	e02c      	b.n	8008ecc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6818      	ldr	r0, [r3, #0]
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	6859      	ldr	r1, [r3, #4]
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	68db      	ldr	r3, [r3, #12]
 8008e7e:	461a      	mov	r2, r3
 8008e80:	f000 f92b 	bl	80090da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2160      	movs	r1, #96	; 0x60
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f000 f956 	bl	800913c <TIM_ITRx_SetConfig>
      break;
 8008e90:	e01c      	b.n	8008ecc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6818      	ldr	r0, [r3, #0]
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	6859      	ldr	r1, [r3, #4]
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	f000 f8ec 	bl	800907c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2140      	movs	r1, #64	; 0x40
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 f946 	bl	800913c <TIM_ITRx_SetConfig>
      break;
 8008eb0:	e00c      	b.n	8008ecc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4619      	mov	r1, r3
 8008ebc:	4610      	mov	r0, r2
 8008ebe:	f000 f93d 	bl	800913c <TIM_ITRx_SetConfig>
      break;
 8008ec2:	e003      	b.n	8008ecc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ec8:	e000      	b.n	8008ecc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008eca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	ffceff88 	.word	0xffceff88
 8008eec:	00100040 	.word	0x00100040
 8008ef0:	00100030 	.word	0x00100030
 8008ef4:	00100020 	.word	0x00100020

08008ef8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f00:	bf00      	nop
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f14:	bf00      	nop
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f28:	bf00      	nop
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f3c:	bf00      	nop
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b085      	sub	sp, #20
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4a40      	ldr	r2, [pc, #256]	; (800905c <TIM_Base_SetConfig+0x114>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d013      	beq.n	8008f88 <TIM_Base_SetConfig+0x40>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f66:	d00f      	beq.n	8008f88 <TIM_Base_SetConfig+0x40>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4a3d      	ldr	r2, [pc, #244]	; (8009060 <TIM_Base_SetConfig+0x118>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d00b      	beq.n	8008f88 <TIM_Base_SetConfig+0x40>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a3c      	ldr	r2, [pc, #240]	; (8009064 <TIM_Base_SetConfig+0x11c>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d007      	beq.n	8008f88 <TIM_Base_SetConfig+0x40>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a3b      	ldr	r2, [pc, #236]	; (8009068 <TIM_Base_SetConfig+0x120>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d003      	beq.n	8008f88 <TIM_Base_SetConfig+0x40>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a3a      	ldr	r2, [pc, #232]	; (800906c <TIM_Base_SetConfig+0x124>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d108      	bne.n	8008f9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	4313      	orrs	r3, r2
 8008f98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	4a2f      	ldr	r2, [pc, #188]	; (800905c <TIM_Base_SetConfig+0x114>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d01f      	beq.n	8008fe2 <TIM_Base_SetConfig+0x9a>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fa8:	d01b      	beq.n	8008fe2 <TIM_Base_SetConfig+0x9a>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	4a2c      	ldr	r2, [pc, #176]	; (8009060 <TIM_Base_SetConfig+0x118>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d017      	beq.n	8008fe2 <TIM_Base_SetConfig+0x9a>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	4a2b      	ldr	r2, [pc, #172]	; (8009064 <TIM_Base_SetConfig+0x11c>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d013      	beq.n	8008fe2 <TIM_Base_SetConfig+0x9a>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4a2a      	ldr	r2, [pc, #168]	; (8009068 <TIM_Base_SetConfig+0x120>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d00f      	beq.n	8008fe2 <TIM_Base_SetConfig+0x9a>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	4a29      	ldr	r2, [pc, #164]	; (800906c <TIM_Base_SetConfig+0x124>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d00b      	beq.n	8008fe2 <TIM_Base_SetConfig+0x9a>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	4a28      	ldr	r2, [pc, #160]	; (8009070 <TIM_Base_SetConfig+0x128>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d007      	beq.n	8008fe2 <TIM_Base_SetConfig+0x9a>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	4a27      	ldr	r2, [pc, #156]	; (8009074 <TIM_Base_SetConfig+0x12c>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d003      	beq.n	8008fe2 <TIM_Base_SetConfig+0x9a>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4a26      	ldr	r2, [pc, #152]	; (8009078 <TIM_Base_SetConfig+0x130>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d108      	bne.n	8008ff4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	695b      	ldr	r3, [r3, #20]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	689a      	ldr	r2, [r3, #8]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	4a10      	ldr	r2, [pc, #64]	; (800905c <TIM_Base_SetConfig+0x114>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d00f      	beq.n	8009040 <TIM_Base_SetConfig+0xf8>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	4a12      	ldr	r2, [pc, #72]	; (800906c <TIM_Base_SetConfig+0x124>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d00b      	beq.n	8009040 <TIM_Base_SetConfig+0xf8>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	4a11      	ldr	r2, [pc, #68]	; (8009070 <TIM_Base_SetConfig+0x128>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d007      	beq.n	8009040 <TIM_Base_SetConfig+0xf8>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4a10      	ldr	r2, [pc, #64]	; (8009074 <TIM_Base_SetConfig+0x12c>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d003      	beq.n	8009040 <TIM_Base_SetConfig+0xf8>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4a0f      	ldr	r2, [pc, #60]	; (8009078 <TIM_Base_SetConfig+0x130>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d103      	bne.n	8009048 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	691a      	ldr	r2, [r3, #16]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2201      	movs	r2, #1
 800904c:	615a      	str	r2, [r3, #20]
}
 800904e:	bf00      	nop
 8009050:	3714      	adds	r7, #20
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	40010000 	.word	0x40010000
 8009060:	40000400 	.word	0x40000400
 8009064:	40000800 	.word	0x40000800
 8009068:	40000c00 	.word	0x40000c00
 800906c:	40010400 	.word	0x40010400
 8009070:	40014000 	.word	0x40014000
 8009074:	40014400 	.word	0x40014400
 8009078:	40014800 	.word	0x40014800

0800907c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800907c:	b480      	push	{r7}
 800907e:	b087      	sub	sp, #28
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6a1b      	ldr	r3, [r3, #32]
 800908c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6a1b      	ldr	r3, [r3, #32]
 8009092:	f023 0201 	bic.w	r2, r3, #1
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	699b      	ldr	r3, [r3, #24]
 800909e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80090a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	011b      	lsls	r3, r3, #4
 80090ac:	693a      	ldr	r2, [r7, #16]
 80090ae:	4313      	orrs	r3, r2
 80090b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	f023 030a 	bic.w	r3, r3, #10
 80090b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80090ba:	697a      	ldr	r2, [r7, #20]
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	4313      	orrs	r3, r2
 80090c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	693a      	ldr	r2, [r7, #16]
 80090c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	697a      	ldr	r2, [r7, #20]
 80090cc:	621a      	str	r2, [r3, #32]
}
 80090ce:	bf00      	nop
 80090d0:	371c      	adds	r7, #28
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr

080090da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090da:	b480      	push	{r7}
 80090dc:	b087      	sub	sp, #28
 80090de:	af00      	add	r7, sp, #0
 80090e0:	60f8      	str	r0, [r7, #12]
 80090e2:	60b9      	str	r1, [r7, #8]
 80090e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	6a1b      	ldr	r3, [r3, #32]
 80090ea:	f023 0210 	bic.w	r2, r3, #16
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	699b      	ldr	r3, [r3, #24]
 80090f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	6a1b      	ldr	r3, [r3, #32]
 80090fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009104:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	031b      	lsls	r3, r3, #12
 800910a:	697a      	ldr	r2, [r7, #20]
 800910c:	4313      	orrs	r3, r2
 800910e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009116:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	011b      	lsls	r3, r3, #4
 800911c:	693a      	ldr	r2, [r7, #16]
 800911e:	4313      	orrs	r3, r2
 8009120:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	697a      	ldr	r2, [r7, #20]
 8009126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	693a      	ldr	r2, [r7, #16]
 800912c:	621a      	str	r2, [r3, #32]
}
 800912e:	bf00      	nop
 8009130:	371c      	adds	r7, #28
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr
	...

0800913c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	4b09      	ldr	r3, [pc, #36]	; (8009174 <TIM_ITRx_SetConfig+0x38>)
 8009150:	4013      	ands	r3, r2
 8009152:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009154:	683a      	ldr	r2, [r7, #0]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	4313      	orrs	r3, r2
 800915a:	f043 0307 	orr.w	r3, r3, #7
 800915e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	68fa      	ldr	r2, [r7, #12]
 8009164:	609a      	str	r2, [r3, #8]
}
 8009166:	bf00      	nop
 8009168:	3714      	adds	r7, #20
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop
 8009174:	ffcfff8f 	.word	0xffcfff8f

08009178 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009178:	b480      	push	{r7}
 800917a:	b087      	sub	sp, #28
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	607a      	str	r2, [r7, #4]
 8009184:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009192:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	021a      	lsls	r2, r3, #8
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	431a      	orrs	r2, r3
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	4313      	orrs	r3, r2
 80091a0:	697a      	ldr	r2, [r7, #20]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	697a      	ldr	r2, [r7, #20]
 80091aa:	609a      	str	r2, [r3, #8]
}
 80091ac:	bf00      	nop
 80091ae:	371c      	adds	r7, #28
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d101      	bne.n	80091d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80091cc:	2302      	movs	r3, #2
 80091ce:	e06d      	b.n	80092ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2202      	movs	r2, #2
 80091dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a30      	ldr	r2, [pc, #192]	; (80092b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d004      	beq.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a2f      	ldr	r2, [pc, #188]	; (80092bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d108      	bne.n	8009216 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800920a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	4313      	orrs	r3, r2
 8009214:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800921c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	68fa      	ldr	r2, [r7, #12]
 8009224:	4313      	orrs	r3, r2
 8009226:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	68fa      	ldr	r2, [r7, #12]
 800922e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a20      	ldr	r2, [pc, #128]	; (80092b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d022      	beq.n	8009280 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009242:	d01d      	beq.n	8009280 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a1d      	ldr	r2, [pc, #116]	; (80092c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d018      	beq.n	8009280 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4a1c      	ldr	r2, [pc, #112]	; (80092c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d013      	beq.n	8009280 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a1a      	ldr	r2, [pc, #104]	; (80092c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d00e      	beq.n	8009280 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a15      	ldr	r2, [pc, #84]	; (80092bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d009      	beq.n	8009280 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a16      	ldr	r2, [pc, #88]	; (80092cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d004      	beq.n	8009280 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a15      	ldr	r2, [pc, #84]	; (80092d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d10c      	bne.n	800929a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009286:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	68ba      	ldr	r2, [r7, #8]
 800928e:	4313      	orrs	r3, r2
 8009290:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	68ba      	ldr	r2, [r7, #8]
 8009298:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2201      	movs	r2, #1
 800929e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3714      	adds	r7, #20
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr
 80092b8:	40010000 	.word	0x40010000
 80092bc:	40010400 	.word	0x40010400
 80092c0:	40000400 	.word	0x40000400
 80092c4:	40000800 	.word	0x40000800
 80092c8:	40000c00 	.word	0x40000c00
 80092cc:	40001800 	.word	0x40001800
 80092d0:	40014000 	.word	0x40014000

080092d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80092dc:	bf00      	nop
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80092f0:	bf00      	nop
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009304:	bf00      	nop
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d101      	bne.n	8009322 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	e042      	b.n	80093a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009328:	2b00      	cmp	r3, #0
 800932a:	d106      	bne.n	800933a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f7f8 f9af 	bl	8001698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2224      	movs	r2, #36	; 0x24
 800933e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f022 0201 	bic.w	r2, r2, #1
 8009350:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 f82c 	bl	80093b0 <UART_SetConfig>
 8009358:	4603      	mov	r3, r0
 800935a:	2b01      	cmp	r3, #1
 800935c:	d101      	bne.n	8009362 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e022      	b.n	80093a8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009366:	2b00      	cmp	r3, #0
 8009368:	d002      	beq.n	8009370 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 fd80 	bl	8009e70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	685a      	ldr	r2, [r3, #4]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800937e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	689a      	ldr	r2, [r3, #8]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800938e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f042 0201 	orr.w	r2, r2, #1
 800939e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 fe07 	bl	8009fb4 <UART_CheckIdleState>
 80093a6:	4603      	mov	r3, r0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3708      	adds	r7, #8
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093b0:	b5b0      	push	{r4, r5, r7, lr}
 80093b2:	b08e      	sub	sp, #56	; 0x38
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80093b8:	2300      	movs	r3, #0
 80093ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	689a      	ldr	r2, [r3, #8]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	691b      	ldr	r3, [r3, #16]
 80093c6:	431a      	orrs	r2, r3
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	695b      	ldr	r3, [r3, #20]
 80093cc:	431a      	orrs	r2, r3
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	69db      	ldr	r3, [r3, #28]
 80093d2:	4313      	orrs	r3, r2
 80093d4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	4bbf      	ldr	r3, [pc, #764]	; (80096dc <UART_SetConfig+0x32c>)
 80093de:	4013      	ands	r3, r2
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	6812      	ldr	r2, [r2, #0]
 80093e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80093e6:	430b      	orrs	r3, r1
 80093e8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	68da      	ldr	r2, [r3, #12]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	430a      	orrs	r2, r1
 80093fe:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	699b      	ldr	r3, [r3, #24]
 8009404:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4ab5      	ldr	r2, [pc, #724]	; (80096e0 <UART_SetConfig+0x330>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d004      	beq.n	800941a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6a1b      	ldr	r3, [r3, #32]
 8009414:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009416:	4313      	orrs	r3, r2
 8009418:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	689a      	ldr	r2, [r3, #8]
 8009420:	4bb0      	ldr	r3, [pc, #704]	; (80096e4 <UART_SetConfig+0x334>)
 8009422:	4013      	ands	r3, r2
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	6812      	ldr	r2, [r2, #0]
 8009428:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800942a:	430b      	orrs	r3, r1
 800942c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009434:	f023 010f 	bic.w	r1, r3, #15
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	430a      	orrs	r2, r1
 8009442:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4aa7      	ldr	r2, [pc, #668]	; (80096e8 <UART_SetConfig+0x338>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d176      	bne.n	800953c <UART_SetConfig+0x18c>
 800944e:	4ba7      	ldr	r3, [pc, #668]	; (80096ec <UART_SetConfig+0x33c>)
 8009450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009452:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009456:	2b28      	cmp	r3, #40	; 0x28
 8009458:	d86c      	bhi.n	8009534 <UART_SetConfig+0x184>
 800945a:	a201      	add	r2, pc, #4	; (adr r2, 8009460 <UART_SetConfig+0xb0>)
 800945c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009460:	08009505 	.word	0x08009505
 8009464:	08009535 	.word	0x08009535
 8009468:	08009535 	.word	0x08009535
 800946c:	08009535 	.word	0x08009535
 8009470:	08009535 	.word	0x08009535
 8009474:	08009535 	.word	0x08009535
 8009478:	08009535 	.word	0x08009535
 800947c:	08009535 	.word	0x08009535
 8009480:	0800950d 	.word	0x0800950d
 8009484:	08009535 	.word	0x08009535
 8009488:	08009535 	.word	0x08009535
 800948c:	08009535 	.word	0x08009535
 8009490:	08009535 	.word	0x08009535
 8009494:	08009535 	.word	0x08009535
 8009498:	08009535 	.word	0x08009535
 800949c:	08009535 	.word	0x08009535
 80094a0:	08009515 	.word	0x08009515
 80094a4:	08009535 	.word	0x08009535
 80094a8:	08009535 	.word	0x08009535
 80094ac:	08009535 	.word	0x08009535
 80094b0:	08009535 	.word	0x08009535
 80094b4:	08009535 	.word	0x08009535
 80094b8:	08009535 	.word	0x08009535
 80094bc:	08009535 	.word	0x08009535
 80094c0:	0800951d 	.word	0x0800951d
 80094c4:	08009535 	.word	0x08009535
 80094c8:	08009535 	.word	0x08009535
 80094cc:	08009535 	.word	0x08009535
 80094d0:	08009535 	.word	0x08009535
 80094d4:	08009535 	.word	0x08009535
 80094d8:	08009535 	.word	0x08009535
 80094dc:	08009535 	.word	0x08009535
 80094e0:	08009525 	.word	0x08009525
 80094e4:	08009535 	.word	0x08009535
 80094e8:	08009535 	.word	0x08009535
 80094ec:	08009535 	.word	0x08009535
 80094f0:	08009535 	.word	0x08009535
 80094f4:	08009535 	.word	0x08009535
 80094f8:	08009535 	.word	0x08009535
 80094fc:	08009535 	.word	0x08009535
 8009500:	0800952d 	.word	0x0800952d
 8009504:	2301      	movs	r3, #1
 8009506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800950a:	e222      	b.n	8009952 <UART_SetConfig+0x5a2>
 800950c:	2304      	movs	r3, #4
 800950e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009512:	e21e      	b.n	8009952 <UART_SetConfig+0x5a2>
 8009514:	2308      	movs	r3, #8
 8009516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800951a:	e21a      	b.n	8009952 <UART_SetConfig+0x5a2>
 800951c:	2310      	movs	r3, #16
 800951e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009522:	e216      	b.n	8009952 <UART_SetConfig+0x5a2>
 8009524:	2320      	movs	r3, #32
 8009526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800952a:	e212      	b.n	8009952 <UART_SetConfig+0x5a2>
 800952c:	2340      	movs	r3, #64	; 0x40
 800952e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009532:	e20e      	b.n	8009952 <UART_SetConfig+0x5a2>
 8009534:	2380      	movs	r3, #128	; 0x80
 8009536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800953a:	e20a      	b.n	8009952 <UART_SetConfig+0x5a2>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a6b      	ldr	r2, [pc, #428]	; (80096f0 <UART_SetConfig+0x340>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d130      	bne.n	80095a8 <UART_SetConfig+0x1f8>
 8009546:	4b69      	ldr	r3, [pc, #420]	; (80096ec <UART_SetConfig+0x33c>)
 8009548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800954a:	f003 0307 	and.w	r3, r3, #7
 800954e:	2b05      	cmp	r3, #5
 8009550:	d826      	bhi.n	80095a0 <UART_SetConfig+0x1f0>
 8009552:	a201      	add	r2, pc, #4	; (adr r2, 8009558 <UART_SetConfig+0x1a8>)
 8009554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009558:	08009571 	.word	0x08009571
 800955c:	08009579 	.word	0x08009579
 8009560:	08009581 	.word	0x08009581
 8009564:	08009589 	.word	0x08009589
 8009568:	08009591 	.word	0x08009591
 800956c:	08009599 	.word	0x08009599
 8009570:	2300      	movs	r3, #0
 8009572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009576:	e1ec      	b.n	8009952 <UART_SetConfig+0x5a2>
 8009578:	2304      	movs	r3, #4
 800957a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800957e:	e1e8      	b.n	8009952 <UART_SetConfig+0x5a2>
 8009580:	2308      	movs	r3, #8
 8009582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009586:	e1e4      	b.n	8009952 <UART_SetConfig+0x5a2>
 8009588:	2310      	movs	r3, #16
 800958a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800958e:	e1e0      	b.n	8009952 <UART_SetConfig+0x5a2>
 8009590:	2320      	movs	r3, #32
 8009592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009596:	e1dc      	b.n	8009952 <UART_SetConfig+0x5a2>
 8009598:	2340      	movs	r3, #64	; 0x40
 800959a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800959e:	e1d8      	b.n	8009952 <UART_SetConfig+0x5a2>
 80095a0:	2380      	movs	r3, #128	; 0x80
 80095a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095a6:	e1d4      	b.n	8009952 <UART_SetConfig+0x5a2>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a51      	ldr	r2, [pc, #324]	; (80096f4 <UART_SetConfig+0x344>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d130      	bne.n	8009614 <UART_SetConfig+0x264>
 80095b2:	4b4e      	ldr	r3, [pc, #312]	; (80096ec <UART_SetConfig+0x33c>)
 80095b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095b6:	f003 0307 	and.w	r3, r3, #7
 80095ba:	2b05      	cmp	r3, #5
 80095bc:	d826      	bhi.n	800960c <UART_SetConfig+0x25c>
 80095be:	a201      	add	r2, pc, #4	; (adr r2, 80095c4 <UART_SetConfig+0x214>)
 80095c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c4:	080095dd 	.word	0x080095dd
 80095c8:	080095e5 	.word	0x080095e5
 80095cc:	080095ed 	.word	0x080095ed
 80095d0:	080095f5 	.word	0x080095f5
 80095d4:	080095fd 	.word	0x080095fd
 80095d8:	08009605 	.word	0x08009605
 80095dc:	2300      	movs	r3, #0
 80095de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095e2:	e1b6      	b.n	8009952 <UART_SetConfig+0x5a2>
 80095e4:	2304      	movs	r3, #4
 80095e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095ea:	e1b2      	b.n	8009952 <UART_SetConfig+0x5a2>
 80095ec:	2308      	movs	r3, #8
 80095ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095f2:	e1ae      	b.n	8009952 <UART_SetConfig+0x5a2>
 80095f4:	2310      	movs	r3, #16
 80095f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095fa:	e1aa      	b.n	8009952 <UART_SetConfig+0x5a2>
 80095fc:	2320      	movs	r3, #32
 80095fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009602:	e1a6      	b.n	8009952 <UART_SetConfig+0x5a2>
 8009604:	2340      	movs	r3, #64	; 0x40
 8009606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800960a:	e1a2      	b.n	8009952 <UART_SetConfig+0x5a2>
 800960c:	2380      	movs	r3, #128	; 0x80
 800960e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009612:	e19e      	b.n	8009952 <UART_SetConfig+0x5a2>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a37      	ldr	r2, [pc, #220]	; (80096f8 <UART_SetConfig+0x348>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d130      	bne.n	8009680 <UART_SetConfig+0x2d0>
 800961e:	4b33      	ldr	r3, [pc, #204]	; (80096ec <UART_SetConfig+0x33c>)
 8009620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009622:	f003 0307 	and.w	r3, r3, #7
 8009626:	2b05      	cmp	r3, #5
 8009628:	d826      	bhi.n	8009678 <UART_SetConfig+0x2c8>
 800962a:	a201      	add	r2, pc, #4	; (adr r2, 8009630 <UART_SetConfig+0x280>)
 800962c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009630:	08009649 	.word	0x08009649
 8009634:	08009651 	.word	0x08009651
 8009638:	08009659 	.word	0x08009659
 800963c:	08009661 	.word	0x08009661
 8009640:	08009669 	.word	0x08009669
 8009644:	08009671 	.word	0x08009671
 8009648:	2300      	movs	r3, #0
 800964a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800964e:	e180      	b.n	8009952 <UART_SetConfig+0x5a2>
 8009650:	2304      	movs	r3, #4
 8009652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009656:	e17c      	b.n	8009952 <UART_SetConfig+0x5a2>
 8009658:	2308      	movs	r3, #8
 800965a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800965e:	e178      	b.n	8009952 <UART_SetConfig+0x5a2>
 8009660:	2310      	movs	r3, #16
 8009662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009666:	e174      	b.n	8009952 <UART_SetConfig+0x5a2>
 8009668:	2320      	movs	r3, #32
 800966a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800966e:	e170      	b.n	8009952 <UART_SetConfig+0x5a2>
 8009670:	2340      	movs	r3, #64	; 0x40
 8009672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009676:	e16c      	b.n	8009952 <UART_SetConfig+0x5a2>
 8009678:	2380      	movs	r3, #128	; 0x80
 800967a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800967e:	e168      	b.n	8009952 <UART_SetConfig+0x5a2>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a1d      	ldr	r2, [pc, #116]	; (80096fc <UART_SetConfig+0x34c>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d142      	bne.n	8009710 <UART_SetConfig+0x360>
 800968a:	4b18      	ldr	r3, [pc, #96]	; (80096ec <UART_SetConfig+0x33c>)
 800968c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800968e:	f003 0307 	and.w	r3, r3, #7
 8009692:	2b05      	cmp	r3, #5
 8009694:	d838      	bhi.n	8009708 <UART_SetConfig+0x358>
 8009696:	a201      	add	r2, pc, #4	; (adr r2, 800969c <UART_SetConfig+0x2ec>)
 8009698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800969c:	080096b5 	.word	0x080096b5
 80096a0:	080096bd 	.word	0x080096bd
 80096a4:	080096c5 	.word	0x080096c5
 80096a8:	080096cd 	.word	0x080096cd
 80096ac:	080096d5 	.word	0x080096d5
 80096b0:	08009701 	.word	0x08009701
 80096b4:	2300      	movs	r3, #0
 80096b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ba:	e14a      	b.n	8009952 <UART_SetConfig+0x5a2>
 80096bc:	2304      	movs	r3, #4
 80096be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096c2:	e146      	b.n	8009952 <UART_SetConfig+0x5a2>
 80096c4:	2308      	movs	r3, #8
 80096c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ca:	e142      	b.n	8009952 <UART_SetConfig+0x5a2>
 80096cc:	2310      	movs	r3, #16
 80096ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096d2:	e13e      	b.n	8009952 <UART_SetConfig+0x5a2>
 80096d4:	2320      	movs	r3, #32
 80096d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096da:	e13a      	b.n	8009952 <UART_SetConfig+0x5a2>
 80096dc:	cfff69f3 	.word	0xcfff69f3
 80096e0:	58000c00 	.word	0x58000c00
 80096e4:	11fff4ff 	.word	0x11fff4ff
 80096e8:	40011000 	.word	0x40011000
 80096ec:	58024400 	.word	0x58024400
 80096f0:	40004400 	.word	0x40004400
 80096f4:	40004800 	.word	0x40004800
 80096f8:	40004c00 	.word	0x40004c00
 80096fc:	40005000 	.word	0x40005000
 8009700:	2340      	movs	r3, #64	; 0x40
 8009702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009706:	e124      	b.n	8009952 <UART_SetConfig+0x5a2>
 8009708:	2380      	movs	r3, #128	; 0x80
 800970a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800970e:	e120      	b.n	8009952 <UART_SetConfig+0x5a2>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4acc      	ldr	r2, [pc, #816]	; (8009a48 <UART_SetConfig+0x698>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d176      	bne.n	8009808 <UART_SetConfig+0x458>
 800971a:	4bcc      	ldr	r3, [pc, #816]	; (8009a4c <UART_SetConfig+0x69c>)
 800971c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800971e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009722:	2b28      	cmp	r3, #40	; 0x28
 8009724:	d86c      	bhi.n	8009800 <UART_SetConfig+0x450>
 8009726:	a201      	add	r2, pc, #4	; (adr r2, 800972c <UART_SetConfig+0x37c>)
 8009728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800972c:	080097d1 	.word	0x080097d1
 8009730:	08009801 	.word	0x08009801
 8009734:	08009801 	.word	0x08009801
 8009738:	08009801 	.word	0x08009801
 800973c:	08009801 	.word	0x08009801
 8009740:	08009801 	.word	0x08009801
 8009744:	08009801 	.word	0x08009801
 8009748:	08009801 	.word	0x08009801
 800974c:	080097d9 	.word	0x080097d9
 8009750:	08009801 	.word	0x08009801
 8009754:	08009801 	.word	0x08009801
 8009758:	08009801 	.word	0x08009801
 800975c:	08009801 	.word	0x08009801
 8009760:	08009801 	.word	0x08009801
 8009764:	08009801 	.word	0x08009801
 8009768:	08009801 	.word	0x08009801
 800976c:	080097e1 	.word	0x080097e1
 8009770:	08009801 	.word	0x08009801
 8009774:	08009801 	.word	0x08009801
 8009778:	08009801 	.word	0x08009801
 800977c:	08009801 	.word	0x08009801
 8009780:	08009801 	.word	0x08009801
 8009784:	08009801 	.word	0x08009801
 8009788:	08009801 	.word	0x08009801
 800978c:	080097e9 	.word	0x080097e9
 8009790:	08009801 	.word	0x08009801
 8009794:	08009801 	.word	0x08009801
 8009798:	08009801 	.word	0x08009801
 800979c:	08009801 	.word	0x08009801
 80097a0:	08009801 	.word	0x08009801
 80097a4:	08009801 	.word	0x08009801
 80097a8:	08009801 	.word	0x08009801
 80097ac:	080097f1 	.word	0x080097f1
 80097b0:	08009801 	.word	0x08009801
 80097b4:	08009801 	.word	0x08009801
 80097b8:	08009801 	.word	0x08009801
 80097bc:	08009801 	.word	0x08009801
 80097c0:	08009801 	.word	0x08009801
 80097c4:	08009801 	.word	0x08009801
 80097c8:	08009801 	.word	0x08009801
 80097cc:	080097f9 	.word	0x080097f9
 80097d0:	2301      	movs	r3, #1
 80097d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097d6:	e0bc      	b.n	8009952 <UART_SetConfig+0x5a2>
 80097d8:	2304      	movs	r3, #4
 80097da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097de:	e0b8      	b.n	8009952 <UART_SetConfig+0x5a2>
 80097e0:	2308      	movs	r3, #8
 80097e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097e6:	e0b4      	b.n	8009952 <UART_SetConfig+0x5a2>
 80097e8:	2310      	movs	r3, #16
 80097ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ee:	e0b0      	b.n	8009952 <UART_SetConfig+0x5a2>
 80097f0:	2320      	movs	r3, #32
 80097f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097f6:	e0ac      	b.n	8009952 <UART_SetConfig+0x5a2>
 80097f8:	2340      	movs	r3, #64	; 0x40
 80097fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097fe:	e0a8      	b.n	8009952 <UART_SetConfig+0x5a2>
 8009800:	2380      	movs	r3, #128	; 0x80
 8009802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009806:	e0a4      	b.n	8009952 <UART_SetConfig+0x5a2>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a90      	ldr	r2, [pc, #576]	; (8009a50 <UART_SetConfig+0x6a0>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d130      	bne.n	8009874 <UART_SetConfig+0x4c4>
 8009812:	4b8e      	ldr	r3, [pc, #568]	; (8009a4c <UART_SetConfig+0x69c>)
 8009814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009816:	f003 0307 	and.w	r3, r3, #7
 800981a:	2b05      	cmp	r3, #5
 800981c:	d826      	bhi.n	800986c <UART_SetConfig+0x4bc>
 800981e:	a201      	add	r2, pc, #4	; (adr r2, 8009824 <UART_SetConfig+0x474>)
 8009820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009824:	0800983d 	.word	0x0800983d
 8009828:	08009845 	.word	0x08009845
 800982c:	0800984d 	.word	0x0800984d
 8009830:	08009855 	.word	0x08009855
 8009834:	0800985d 	.word	0x0800985d
 8009838:	08009865 	.word	0x08009865
 800983c:	2300      	movs	r3, #0
 800983e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009842:	e086      	b.n	8009952 <UART_SetConfig+0x5a2>
 8009844:	2304      	movs	r3, #4
 8009846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800984a:	e082      	b.n	8009952 <UART_SetConfig+0x5a2>
 800984c:	2308      	movs	r3, #8
 800984e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009852:	e07e      	b.n	8009952 <UART_SetConfig+0x5a2>
 8009854:	2310      	movs	r3, #16
 8009856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800985a:	e07a      	b.n	8009952 <UART_SetConfig+0x5a2>
 800985c:	2320      	movs	r3, #32
 800985e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009862:	e076      	b.n	8009952 <UART_SetConfig+0x5a2>
 8009864:	2340      	movs	r3, #64	; 0x40
 8009866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800986a:	e072      	b.n	8009952 <UART_SetConfig+0x5a2>
 800986c:	2380      	movs	r3, #128	; 0x80
 800986e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009872:	e06e      	b.n	8009952 <UART_SetConfig+0x5a2>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a76      	ldr	r2, [pc, #472]	; (8009a54 <UART_SetConfig+0x6a4>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d130      	bne.n	80098e0 <UART_SetConfig+0x530>
 800987e:	4b73      	ldr	r3, [pc, #460]	; (8009a4c <UART_SetConfig+0x69c>)
 8009880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009882:	f003 0307 	and.w	r3, r3, #7
 8009886:	2b05      	cmp	r3, #5
 8009888:	d826      	bhi.n	80098d8 <UART_SetConfig+0x528>
 800988a:	a201      	add	r2, pc, #4	; (adr r2, 8009890 <UART_SetConfig+0x4e0>)
 800988c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009890:	080098a9 	.word	0x080098a9
 8009894:	080098b1 	.word	0x080098b1
 8009898:	080098b9 	.word	0x080098b9
 800989c:	080098c1 	.word	0x080098c1
 80098a0:	080098c9 	.word	0x080098c9
 80098a4:	080098d1 	.word	0x080098d1
 80098a8:	2300      	movs	r3, #0
 80098aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ae:	e050      	b.n	8009952 <UART_SetConfig+0x5a2>
 80098b0:	2304      	movs	r3, #4
 80098b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098b6:	e04c      	b.n	8009952 <UART_SetConfig+0x5a2>
 80098b8:	2308      	movs	r3, #8
 80098ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098be:	e048      	b.n	8009952 <UART_SetConfig+0x5a2>
 80098c0:	2310      	movs	r3, #16
 80098c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098c6:	e044      	b.n	8009952 <UART_SetConfig+0x5a2>
 80098c8:	2320      	movs	r3, #32
 80098ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ce:	e040      	b.n	8009952 <UART_SetConfig+0x5a2>
 80098d0:	2340      	movs	r3, #64	; 0x40
 80098d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098d6:	e03c      	b.n	8009952 <UART_SetConfig+0x5a2>
 80098d8:	2380      	movs	r3, #128	; 0x80
 80098da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098de:	e038      	b.n	8009952 <UART_SetConfig+0x5a2>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a5c      	ldr	r2, [pc, #368]	; (8009a58 <UART_SetConfig+0x6a8>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d130      	bne.n	800994c <UART_SetConfig+0x59c>
 80098ea:	4b58      	ldr	r3, [pc, #352]	; (8009a4c <UART_SetConfig+0x69c>)
 80098ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098ee:	f003 0307 	and.w	r3, r3, #7
 80098f2:	2b05      	cmp	r3, #5
 80098f4:	d826      	bhi.n	8009944 <UART_SetConfig+0x594>
 80098f6:	a201      	add	r2, pc, #4	; (adr r2, 80098fc <UART_SetConfig+0x54c>)
 80098f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098fc:	08009915 	.word	0x08009915
 8009900:	0800991d 	.word	0x0800991d
 8009904:	08009925 	.word	0x08009925
 8009908:	0800992d 	.word	0x0800992d
 800990c:	08009935 	.word	0x08009935
 8009910:	0800993d 	.word	0x0800993d
 8009914:	2302      	movs	r3, #2
 8009916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800991a:	e01a      	b.n	8009952 <UART_SetConfig+0x5a2>
 800991c:	2304      	movs	r3, #4
 800991e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009922:	e016      	b.n	8009952 <UART_SetConfig+0x5a2>
 8009924:	2308      	movs	r3, #8
 8009926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800992a:	e012      	b.n	8009952 <UART_SetConfig+0x5a2>
 800992c:	2310      	movs	r3, #16
 800992e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009932:	e00e      	b.n	8009952 <UART_SetConfig+0x5a2>
 8009934:	2320      	movs	r3, #32
 8009936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800993a:	e00a      	b.n	8009952 <UART_SetConfig+0x5a2>
 800993c:	2340      	movs	r3, #64	; 0x40
 800993e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009942:	e006      	b.n	8009952 <UART_SetConfig+0x5a2>
 8009944:	2380      	movs	r3, #128	; 0x80
 8009946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800994a:	e002      	b.n	8009952 <UART_SetConfig+0x5a2>
 800994c:	2380      	movs	r3, #128	; 0x80
 800994e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a40      	ldr	r2, [pc, #256]	; (8009a58 <UART_SetConfig+0x6a8>)
 8009958:	4293      	cmp	r3, r2
 800995a:	f040 80ef 	bne.w	8009b3c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800995e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009962:	2b20      	cmp	r3, #32
 8009964:	dc46      	bgt.n	80099f4 <UART_SetConfig+0x644>
 8009966:	2b02      	cmp	r3, #2
 8009968:	f2c0 8081 	blt.w	8009a6e <UART_SetConfig+0x6be>
 800996c:	3b02      	subs	r3, #2
 800996e:	2b1e      	cmp	r3, #30
 8009970:	d87d      	bhi.n	8009a6e <UART_SetConfig+0x6be>
 8009972:	a201      	add	r2, pc, #4	; (adr r2, 8009978 <UART_SetConfig+0x5c8>)
 8009974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009978:	080099fb 	.word	0x080099fb
 800997c:	08009a6f 	.word	0x08009a6f
 8009980:	08009a03 	.word	0x08009a03
 8009984:	08009a6f 	.word	0x08009a6f
 8009988:	08009a6f 	.word	0x08009a6f
 800998c:	08009a6f 	.word	0x08009a6f
 8009990:	08009a13 	.word	0x08009a13
 8009994:	08009a6f 	.word	0x08009a6f
 8009998:	08009a6f 	.word	0x08009a6f
 800999c:	08009a6f 	.word	0x08009a6f
 80099a0:	08009a6f 	.word	0x08009a6f
 80099a4:	08009a6f 	.word	0x08009a6f
 80099a8:	08009a6f 	.word	0x08009a6f
 80099ac:	08009a6f 	.word	0x08009a6f
 80099b0:	08009a23 	.word	0x08009a23
 80099b4:	08009a6f 	.word	0x08009a6f
 80099b8:	08009a6f 	.word	0x08009a6f
 80099bc:	08009a6f 	.word	0x08009a6f
 80099c0:	08009a6f 	.word	0x08009a6f
 80099c4:	08009a6f 	.word	0x08009a6f
 80099c8:	08009a6f 	.word	0x08009a6f
 80099cc:	08009a6f 	.word	0x08009a6f
 80099d0:	08009a6f 	.word	0x08009a6f
 80099d4:	08009a6f 	.word	0x08009a6f
 80099d8:	08009a6f 	.word	0x08009a6f
 80099dc:	08009a6f 	.word	0x08009a6f
 80099e0:	08009a6f 	.word	0x08009a6f
 80099e4:	08009a6f 	.word	0x08009a6f
 80099e8:	08009a6f 	.word	0x08009a6f
 80099ec:	08009a6f 	.word	0x08009a6f
 80099f0:	08009a61 	.word	0x08009a61
 80099f4:	2b40      	cmp	r3, #64	; 0x40
 80099f6:	d036      	beq.n	8009a66 <UART_SetConfig+0x6b6>
 80099f8:	e039      	b.n	8009a6e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80099fa:	f7fd fba1 	bl	8007140 <HAL_RCCEx_GetD3PCLK1Freq>
 80099fe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009a00:	e03b      	b.n	8009a7a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a02:	f107 0314 	add.w	r3, r7, #20
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7fd fbb0 	bl	800716c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a10:	e033      	b.n	8009a7a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a12:	f107 0308 	add.w	r3, r7, #8
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7fd fcfc 	bl	8007414 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a20:	e02b      	b.n	8009a7a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a22:	4b0a      	ldr	r3, [pc, #40]	; (8009a4c <UART_SetConfig+0x69c>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f003 0320 	and.w	r3, r3, #32
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d009      	beq.n	8009a42 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009a2e:	4b07      	ldr	r3, [pc, #28]	; (8009a4c <UART_SetConfig+0x69c>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	08db      	lsrs	r3, r3, #3
 8009a34:	f003 0303 	and.w	r3, r3, #3
 8009a38:	4a08      	ldr	r2, [pc, #32]	; (8009a5c <UART_SetConfig+0x6ac>)
 8009a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8009a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009a40:	e01b      	b.n	8009a7a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009a42:	4b06      	ldr	r3, [pc, #24]	; (8009a5c <UART_SetConfig+0x6ac>)
 8009a44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a46:	e018      	b.n	8009a7a <UART_SetConfig+0x6ca>
 8009a48:	40011400 	.word	0x40011400
 8009a4c:	58024400 	.word	0x58024400
 8009a50:	40007800 	.word	0x40007800
 8009a54:	40007c00 	.word	0x40007c00
 8009a58:	58000c00 	.word	0x58000c00
 8009a5c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009a60:	4bc4      	ldr	r3, [pc, #784]	; (8009d74 <UART_SetConfig+0x9c4>)
 8009a62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a64:	e009      	b.n	8009a7a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a6c:	e005      	b.n	8009a7a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009a78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f000 81da 	beq.w	8009e36 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a86:	4abc      	ldr	r2, [pc, #752]	; (8009d78 <UART_SetConfig+0x9c8>)
 8009a88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a90:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a94:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	685a      	ldr	r2, [r3, #4]
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	005b      	lsls	r3, r3, #1
 8009a9e:	4413      	add	r3, r2
 8009aa0:	6a3a      	ldr	r2, [r7, #32]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d305      	bcc.n	8009ab2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009aac:	6a3a      	ldr	r2, [r7, #32]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d903      	bls.n	8009aba <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009ab8:	e1bd      	b.n	8009e36 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009abc:	4618      	mov	r0, r3
 8009abe:	f04f 0100 	mov.w	r1, #0
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac6:	4aac      	ldr	r2, [pc, #688]	; (8009d78 <UART_SetConfig+0x9c8>)
 8009ac8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009acc:	b29a      	uxth	r2, r3
 8009ace:	f04f 0300 	mov.w	r3, #0
 8009ad2:	f7f6 fc01 	bl	80002d8 <__aeabi_uldivmod>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	460b      	mov	r3, r1
 8009ada:	4610      	mov	r0, r2
 8009adc:	4619      	mov	r1, r3
 8009ade:	f04f 0200 	mov.w	r2, #0
 8009ae2:	f04f 0300 	mov.w	r3, #0
 8009ae6:	020b      	lsls	r3, r1, #8
 8009ae8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009aec:	0202      	lsls	r2, r0, #8
 8009aee:	6879      	ldr	r1, [r7, #4]
 8009af0:	6849      	ldr	r1, [r1, #4]
 8009af2:	0849      	lsrs	r1, r1, #1
 8009af4:	4608      	mov	r0, r1
 8009af6:	f04f 0100 	mov.w	r1, #0
 8009afa:	1814      	adds	r4, r2, r0
 8009afc:	eb43 0501 	adc.w	r5, r3, r1
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	461a      	mov	r2, r3
 8009b06:	f04f 0300 	mov.w	r3, #0
 8009b0a:	4620      	mov	r0, r4
 8009b0c:	4629      	mov	r1, r5
 8009b0e:	f7f6 fbe3 	bl	80002d8 <__aeabi_uldivmod>
 8009b12:	4602      	mov	r2, r0
 8009b14:	460b      	mov	r3, r1
 8009b16:	4613      	mov	r3, r2
 8009b18:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b20:	d308      	bcc.n	8009b34 <UART_SetConfig+0x784>
 8009b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b28:	d204      	bcs.n	8009b34 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b30:	60da      	str	r2, [r3, #12]
 8009b32:	e180      	b.n	8009e36 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009b34:	2301      	movs	r3, #1
 8009b36:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009b3a:	e17c      	b.n	8009e36 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	69db      	ldr	r3, [r3, #28]
 8009b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b44:	f040 80be 	bne.w	8009cc4 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8009b48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009b4c:	2b20      	cmp	r3, #32
 8009b4e:	dc49      	bgt.n	8009be4 <UART_SetConfig+0x834>
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	db7c      	blt.n	8009c4e <UART_SetConfig+0x89e>
 8009b54:	2b20      	cmp	r3, #32
 8009b56:	d87a      	bhi.n	8009c4e <UART_SetConfig+0x89e>
 8009b58:	a201      	add	r2, pc, #4	; (adr r2, 8009b60 <UART_SetConfig+0x7b0>)
 8009b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b5e:	bf00      	nop
 8009b60:	08009beb 	.word	0x08009beb
 8009b64:	08009bf3 	.word	0x08009bf3
 8009b68:	08009c4f 	.word	0x08009c4f
 8009b6c:	08009c4f 	.word	0x08009c4f
 8009b70:	08009bfb 	.word	0x08009bfb
 8009b74:	08009c4f 	.word	0x08009c4f
 8009b78:	08009c4f 	.word	0x08009c4f
 8009b7c:	08009c4f 	.word	0x08009c4f
 8009b80:	08009c0b 	.word	0x08009c0b
 8009b84:	08009c4f 	.word	0x08009c4f
 8009b88:	08009c4f 	.word	0x08009c4f
 8009b8c:	08009c4f 	.word	0x08009c4f
 8009b90:	08009c4f 	.word	0x08009c4f
 8009b94:	08009c4f 	.word	0x08009c4f
 8009b98:	08009c4f 	.word	0x08009c4f
 8009b9c:	08009c4f 	.word	0x08009c4f
 8009ba0:	08009c1b 	.word	0x08009c1b
 8009ba4:	08009c4f 	.word	0x08009c4f
 8009ba8:	08009c4f 	.word	0x08009c4f
 8009bac:	08009c4f 	.word	0x08009c4f
 8009bb0:	08009c4f 	.word	0x08009c4f
 8009bb4:	08009c4f 	.word	0x08009c4f
 8009bb8:	08009c4f 	.word	0x08009c4f
 8009bbc:	08009c4f 	.word	0x08009c4f
 8009bc0:	08009c4f 	.word	0x08009c4f
 8009bc4:	08009c4f 	.word	0x08009c4f
 8009bc8:	08009c4f 	.word	0x08009c4f
 8009bcc:	08009c4f 	.word	0x08009c4f
 8009bd0:	08009c4f 	.word	0x08009c4f
 8009bd4:	08009c4f 	.word	0x08009c4f
 8009bd8:	08009c4f 	.word	0x08009c4f
 8009bdc:	08009c4f 	.word	0x08009c4f
 8009be0:	08009c41 	.word	0x08009c41
 8009be4:	2b40      	cmp	r3, #64	; 0x40
 8009be6:	d02e      	beq.n	8009c46 <UART_SetConfig+0x896>
 8009be8:	e031      	b.n	8009c4e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bea:	f7fc fb3d 	bl	8006268 <HAL_RCC_GetPCLK1Freq>
 8009bee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009bf0:	e033      	b.n	8009c5a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009bf2:	f7fc fb4f 	bl	8006294 <HAL_RCC_GetPCLK2Freq>
 8009bf6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009bf8:	e02f      	b.n	8009c5a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bfa:	f107 0314 	add.w	r3, r7, #20
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f7fd fab4 	bl	800716c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c08:	e027      	b.n	8009c5a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c0a:	f107 0308 	add.w	r3, r7, #8
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7fd fc00 	bl	8007414 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c18:	e01f      	b.n	8009c5a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c1a:	4b58      	ldr	r3, [pc, #352]	; (8009d7c <UART_SetConfig+0x9cc>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f003 0320 	and.w	r3, r3, #32
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d009      	beq.n	8009c3a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c26:	4b55      	ldr	r3, [pc, #340]	; (8009d7c <UART_SetConfig+0x9cc>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	08db      	lsrs	r3, r3, #3
 8009c2c:	f003 0303 	and.w	r3, r3, #3
 8009c30:	4a53      	ldr	r2, [pc, #332]	; (8009d80 <UART_SetConfig+0x9d0>)
 8009c32:	fa22 f303 	lsr.w	r3, r2, r3
 8009c36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c38:	e00f      	b.n	8009c5a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8009c3a:	4b51      	ldr	r3, [pc, #324]	; (8009d80 <UART_SetConfig+0x9d0>)
 8009c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c3e:	e00c      	b.n	8009c5a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c40:	4b4c      	ldr	r3, [pc, #304]	; (8009d74 <UART_SetConfig+0x9c4>)
 8009c42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c44:	e009      	b.n	8009c5a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c4c:	e005      	b.n	8009c5a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009c52:	2301      	movs	r3, #1
 8009c54:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009c58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f000 80ea 	beq.w	8009e36 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c66:	4a44      	ldr	r2, [pc, #272]	; (8009d78 <UART_SetConfig+0x9c8>)
 8009c68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c70:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c74:	005a      	lsls	r2, r3, #1
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	085b      	lsrs	r3, r3, #1
 8009c7c:	441a      	add	r2, r3
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c86:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8a:	2b0f      	cmp	r3, #15
 8009c8c:	d916      	bls.n	8009cbc <UART_SetConfig+0x90c>
 8009c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c94:	d212      	bcs.n	8009cbc <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	f023 030f 	bic.w	r3, r3, #15
 8009c9e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca2:	085b      	lsrs	r3, r3, #1
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	f003 0307 	and.w	r3, r3, #7
 8009caa:	b29a      	uxth	r2, r3
 8009cac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009cb8:	60da      	str	r2, [r3, #12]
 8009cba:	e0bc      	b.n	8009e36 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009cc2:	e0b8      	b.n	8009e36 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009cc4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009cc8:	2b20      	cmp	r3, #32
 8009cca:	dc4b      	bgt.n	8009d64 <UART_SetConfig+0x9b4>
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	f2c0 8087 	blt.w	8009de0 <UART_SetConfig+0xa30>
 8009cd2:	2b20      	cmp	r3, #32
 8009cd4:	f200 8084 	bhi.w	8009de0 <UART_SetConfig+0xa30>
 8009cd8:	a201      	add	r2, pc, #4	; (adr r2, 8009ce0 <UART_SetConfig+0x930>)
 8009cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cde:	bf00      	nop
 8009ce0:	08009d6b 	.word	0x08009d6b
 8009ce4:	08009d85 	.word	0x08009d85
 8009ce8:	08009de1 	.word	0x08009de1
 8009cec:	08009de1 	.word	0x08009de1
 8009cf0:	08009d8d 	.word	0x08009d8d
 8009cf4:	08009de1 	.word	0x08009de1
 8009cf8:	08009de1 	.word	0x08009de1
 8009cfc:	08009de1 	.word	0x08009de1
 8009d00:	08009d9d 	.word	0x08009d9d
 8009d04:	08009de1 	.word	0x08009de1
 8009d08:	08009de1 	.word	0x08009de1
 8009d0c:	08009de1 	.word	0x08009de1
 8009d10:	08009de1 	.word	0x08009de1
 8009d14:	08009de1 	.word	0x08009de1
 8009d18:	08009de1 	.word	0x08009de1
 8009d1c:	08009de1 	.word	0x08009de1
 8009d20:	08009dad 	.word	0x08009dad
 8009d24:	08009de1 	.word	0x08009de1
 8009d28:	08009de1 	.word	0x08009de1
 8009d2c:	08009de1 	.word	0x08009de1
 8009d30:	08009de1 	.word	0x08009de1
 8009d34:	08009de1 	.word	0x08009de1
 8009d38:	08009de1 	.word	0x08009de1
 8009d3c:	08009de1 	.word	0x08009de1
 8009d40:	08009de1 	.word	0x08009de1
 8009d44:	08009de1 	.word	0x08009de1
 8009d48:	08009de1 	.word	0x08009de1
 8009d4c:	08009de1 	.word	0x08009de1
 8009d50:	08009de1 	.word	0x08009de1
 8009d54:	08009de1 	.word	0x08009de1
 8009d58:	08009de1 	.word	0x08009de1
 8009d5c:	08009de1 	.word	0x08009de1
 8009d60:	08009dd3 	.word	0x08009dd3
 8009d64:	2b40      	cmp	r3, #64	; 0x40
 8009d66:	d037      	beq.n	8009dd8 <UART_SetConfig+0xa28>
 8009d68:	e03a      	b.n	8009de0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d6a:	f7fc fa7d 	bl	8006268 <HAL_RCC_GetPCLK1Freq>
 8009d6e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009d70:	e03c      	b.n	8009dec <UART_SetConfig+0xa3c>
 8009d72:	bf00      	nop
 8009d74:	003d0900 	.word	0x003d0900
 8009d78:	0800aa70 	.word	0x0800aa70
 8009d7c:	58024400 	.word	0x58024400
 8009d80:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d84:	f7fc fa86 	bl	8006294 <HAL_RCC_GetPCLK2Freq>
 8009d88:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009d8a:	e02f      	b.n	8009dec <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d8c:	f107 0314 	add.w	r3, r7, #20
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7fd f9eb 	bl	800716c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d9a:	e027      	b.n	8009dec <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d9c:	f107 0308 	add.w	r3, r7, #8
 8009da0:	4618      	mov	r0, r3
 8009da2:	f7fd fb37 	bl	8007414 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009daa:	e01f      	b.n	8009dec <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dac:	4b2c      	ldr	r3, [pc, #176]	; (8009e60 <UART_SetConfig+0xab0>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 0320 	and.w	r3, r3, #32
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d009      	beq.n	8009dcc <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009db8:	4b29      	ldr	r3, [pc, #164]	; (8009e60 <UART_SetConfig+0xab0>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	08db      	lsrs	r3, r3, #3
 8009dbe:	f003 0303 	and.w	r3, r3, #3
 8009dc2:	4a28      	ldr	r2, [pc, #160]	; (8009e64 <UART_SetConfig+0xab4>)
 8009dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8009dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009dca:	e00f      	b.n	8009dec <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8009dcc:	4b25      	ldr	r3, [pc, #148]	; (8009e64 <UART_SetConfig+0xab4>)
 8009dce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009dd0:	e00c      	b.n	8009dec <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009dd2:	4b25      	ldr	r3, [pc, #148]	; (8009e68 <UART_SetConfig+0xab8>)
 8009dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009dd6:	e009      	b.n	8009dec <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009dde:	e005      	b.n	8009dec <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8009de0:	2300      	movs	r3, #0
 8009de2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009de4:	2301      	movs	r3, #1
 8009de6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009dea:	bf00      	nop
    }

    if (pclk != 0U)
 8009dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d021      	beq.n	8009e36 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df6:	4a1d      	ldr	r2, [pc, #116]	; (8009e6c <UART_SetConfig+0xabc>)
 8009df8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e00:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	085b      	lsrs	r3, r3, #1
 8009e0a:	441a      	add	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e14:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e18:	2b0f      	cmp	r3, #15
 8009e1a:	d909      	bls.n	8009e30 <UART_SetConfig+0xa80>
 8009e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e22:	d205      	bcs.n	8009e30 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e26:	b29a      	uxth	r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	60da      	str	r2, [r3, #12]
 8009e2e:	e002      	b.n	8009e36 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2201      	movs	r2, #1
 8009e3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2201      	movs	r2, #1
 8009e42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009e52:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3738      	adds	r7, #56	; 0x38
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bdb0      	pop	{r4, r5, r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	58024400 	.word	0x58024400
 8009e64:	03d09000 	.word	0x03d09000
 8009e68:	003d0900 	.word	0x003d0900
 8009e6c:	0800aa70 	.word	0x0800aa70

08009e70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e7c:	f003 0301 	and.w	r3, r3, #1
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d00a      	beq.n	8009e9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	430a      	orrs	r2, r1
 8009e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e9e:	f003 0302 	and.w	r3, r3, #2
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d00a      	beq.n	8009ebc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	430a      	orrs	r2, r1
 8009eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ec0:	f003 0304 	and.w	r3, r3, #4
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d00a      	beq.n	8009ede <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	430a      	orrs	r2, r1
 8009edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ee2:	f003 0308 	and.w	r3, r3, #8
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d00a      	beq.n	8009f00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	430a      	orrs	r2, r1
 8009efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f04:	f003 0310 	and.w	r3, r3, #16
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d00a      	beq.n	8009f22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	430a      	orrs	r2, r1
 8009f20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f26:	f003 0320 	and.w	r3, r3, #32
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d00a      	beq.n	8009f44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	689b      	ldr	r3, [r3, #8]
 8009f34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	430a      	orrs	r2, r1
 8009f42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d01a      	beq.n	8009f86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	430a      	orrs	r2, r1
 8009f64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f6e:	d10a      	bne.n	8009f86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	430a      	orrs	r2, r1
 8009f84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d00a      	beq.n	8009fa8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	430a      	orrs	r2, r1
 8009fa6:	605a      	str	r2, [r3, #4]
  }
}
 8009fa8:	bf00      	nop
 8009faa:	370c      	adds	r7, #12
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b086      	sub	sp, #24
 8009fb8:	af02      	add	r7, sp, #8
 8009fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009fc4:	f7f7 fd64 	bl	8001a90 <HAL_GetTick>
 8009fc8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f003 0308 	and.w	r3, r3, #8
 8009fd4:	2b08      	cmp	r3, #8
 8009fd6:	d10e      	bne.n	8009ff6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009fdc:	9300      	str	r3, [sp, #0]
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 f82f 	bl	800a04a <UART_WaitOnFlagUntilTimeout>
 8009fec:	4603      	mov	r3, r0
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d001      	beq.n	8009ff6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ff2:	2303      	movs	r3, #3
 8009ff4:	e025      	b.n	800a042 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f003 0304 	and.w	r3, r3, #4
 800a000:	2b04      	cmp	r3, #4
 800a002:	d10e      	bne.n	800a022 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a004:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a008:	9300      	str	r3, [sp, #0]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2200      	movs	r2, #0
 800a00e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 f819 	bl	800a04a <UART_WaitOnFlagUntilTimeout>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d001      	beq.n	800a022 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a01e:	2303      	movs	r3, #3
 800a020:	e00f      	b.n	800a042 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2220      	movs	r2, #32
 800a026:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2220      	movs	r2, #32
 800a02e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3710      	adds	r7, #16
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b09c      	sub	sp, #112	; 0x70
 800a04e:	af00      	add	r7, sp, #0
 800a050:	60f8      	str	r0, [r7, #12]
 800a052:	60b9      	str	r1, [r7, #8]
 800a054:	603b      	str	r3, [r7, #0]
 800a056:	4613      	mov	r3, r2
 800a058:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a05a:	e0a9      	b.n	800a1b0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a05c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a05e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a062:	f000 80a5 	beq.w	800a1b0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a066:	f7f7 fd13 	bl	8001a90 <HAL_GetTick>
 800a06a:	4602      	mov	r2, r0
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	1ad3      	subs	r3, r2, r3
 800a070:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a072:	429a      	cmp	r2, r3
 800a074:	d302      	bcc.n	800a07c <UART_WaitOnFlagUntilTimeout+0x32>
 800a076:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d140      	bne.n	800a0fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a084:	e853 3f00 	ldrex	r3, [r3]
 800a088:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a08a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a08c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a090:	667b      	str	r3, [r7, #100]	; 0x64
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	461a      	mov	r2, r3
 800a098:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a09a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a09c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a09e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a0a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a0a2:	e841 2300 	strex	r3, r2, [r1]
 800a0a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a0a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d1e6      	bne.n	800a07c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	3308      	adds	r3, #8
 800a0b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0b8:	e853 3f00 	ldrex	r3, [r3]
 800a0bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c0:	f023 0301 	bic.w	r3, r3, #1
 800a0c4:	663b      	str	r3, [r7, #96]	; 0x60
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	3308      	adds	r3, #8
 800a0cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a0ce:	64ba      	str	r2, [r7, #72]	; 0x48
 800a0d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a0d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0d6:	e841 2300 	strex	r3, r2, [r1]
 800a0da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a0dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d1e5      	bne.n	800a0ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2220      	movs	r2, #32
 800a0e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2220      	movs	r2, #32
 800a0ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a0fa:	2303      	movs	r3, #3
 800a0fc:	e069      	b.n	800a1d2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f003 0304 	and.w	r3, r3, #4
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d051      	beq.n	800a1b0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	69db      	ldr	r3, [r3, #28]
 800a112:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a116:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a11a:	d149      	bne.n	800a1b0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a124:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a12e:	e853 3f00 	ldrex	r3, [r3]
 800a132:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a136:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a13a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	461a      	mov	r2, r3
 800a142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a144:	637b      	str	r3, [r7, #52]	; 0x34
 800a146:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a148:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a14a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a14c:	e841 2300 	strex	r3, r2, [r1]
 800a150:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a154:	2b00      	cmp	r3, #0
 800a156:	d1e6      	bne.n	800a126 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	3308      	adds	r3, #8
 800a15e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	e853 3f00 	ldrex	r3, [r3]
 800a166:	613b      	str	r3, [r7, #16]
   return(result);
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	f023 0301 	bic.w	r3, r3, #1
 800a16e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	3308      	adds	r3, #8
 800a176:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a178:	623a      	str	r2, [r7, #32]
 800a17a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17c:	69f9      	ldr	r1, [r7, #28]
 800a17e:	6a3a      	ldr	r2, [r7, #32]
 800a180:	e841 2300 	strex	r3, r2, [r1]
 800a184:	61bb      	str	r3, [r7, #24]
   return(result);
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d1e5      	bne.n	800a158 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2220      	movs	r2, #32
 800a190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2220      	movs	r2, #32
 800a198:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2220      	movs	r2, #32
 800a1a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a1ac:	2303      	movs	r3, #3
 800a1ae:	e010      	b.n	800a1d2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	69da      	ldr	r2, [r3, #28]
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	4013      	ands	r3, r2
 800a1ba:	68ba      	ldr	r2, [r7, #8]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	bf0c      	ite	eq
 800a1c0:	2301      	moveq	r3, #1
 800a1c2:	2300      	movne	r3, #0
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	79fb      	ldrb	r3, [r7, #7]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	f43f af46 	beq.w	800a05c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3770      	adds	r7, #112	; 0x70
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a1da:	b480      	push	{r7}
 800a1dc:	b085      	sub	sp, #20
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d101      	bne.n	800a1f0 <HAL_UARTEx_DisableFifoMode+0x16>
 800a1ec:	2302      	movs	r3, #2
 800a1ee:	e027      	b.n	800a240 <HAL_UARTEx_DisableFifoMode+0x66>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2224      	movs	r2, #36	; 0x24
 800a1fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f022 0201 	bic.w	r2, r2, #1
 800a216:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a21e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	68fa      	ldr	r2, [r7, #12]
 800a22c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2220      	movs	r2, #32
 800a232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2200      	movs	r2, #0
 800a23a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a23e:	2300      	movs	r3, #0
}
 800a240:	4618      	mov	r0, r3
 800a242:	3714      	adds	r7, #20
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d101      	bne.n	800a264 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a260:	2302      	movs	r3, #2
 800a262:	e02d      	b.n	800a2c0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2201      	movs	r2, #1
 800a268:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2224      	movs	r2, #36	; 0x24
 800a270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f022 0201 	bic.w	r2, r2, #1
 800a28a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	689b      	ldr	r3, [r3, #8]
 800a292:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	683a      	ldr	r2, [r7, #0]
 800a29c:	430a      	orrs	r2, r1
 800a29e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f000 f84f 	bl	800a344 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2220      	movs	r2, #32
 800a2b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a2be:	2300      	movs	r3, #0
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3710      	adds	r7, #16
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d101      	bne.n	800a2e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a2dc:	2302      	movs	r3, #2
 800a2de:	e02d      	b.n	800a33c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2224      	movs	r2, #36	; 0x24
 800a2ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f022 0201 	bic.w	r2, r2, #1
 800a306:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	689b      	ldr	r3, [r3, #8]
 800a30e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	683a      	ldr	r2, [r7, #0]
 800a318:	430a      	orrs	r2, r1
 800a31a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f000 f811 	bl	800a344 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	68fa      	ldr	r2, [r7, #12]
 800a328:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2220      	movs	r2, #32
 800a32e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a33a:	2300      	movs	r3, #0
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3710      	adds	r7, #16
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a344:	b480      	push	{r7}
 800a346:	b085      	sub	sp, #20
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a350:	2b00      	cmp	r3, #0
 800a352:	d108      	bne.n	800a366 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2201      	movs	r2, #1
 800a358:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2201      	movs	r2, #1
 800a360:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a364:	e031      	b.n	800a3ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a366:	2310      	movs	r3, #16
 800a368:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a36a:	2310      	movs	r3, #16
 800a36c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	0e5b      	lsrs	r3, r3, #25
 800a376:	b2db      	uxtb	r3, r3
 800a378:	f003 0307 	and.w	r3, r3, #7
 800a37c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	0f5b      	lsrs	r3, r3, #29
 800a386:	b2db      	uxtb	r3, r3
 800a388:	f003 0307 	and.w	r3, r3, #7
 800a38c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a38e:	7bbb      	ldrb	r3, [r7, #14]
 800a390:	7b3a      	ldrb	r2, [r7, #12]
 800a392:	4911      	ldr	r1, [pc, #68]	; (800a3d8 <UARTEx_SetNbDataToProcess+0x94>)
 800a394:	5c8a      	ldrb	r2, [r1, r2]
 800a396:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a39a:	7b3a      	ldrb	r2, [r7, #12]
 800a39c:	490f      	ldr	r1, [pc, #60]	; (800a3dc <UARTEx_SetNbDataToProcess+0x98>)
 800a39e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a3a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3a4:	b29a      	uxth	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a3ac:	7bfb      	ldrb	r3, [r7, #15]
 800a3ae:	7b7a      	ldrb	r2, [r7, #13]
 800a3b0:	4909      	ldr	r1, [pc, #36]	; (800a3d8 <UARTEx_SetNbDataToProcess+0x94>)
 800a3b2:	5c8a      	ldrb	r2, [r1, r2]
 800a3b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a3b8:	7b7a      	ldrb	r2, [r7, #13]
 800a3ba:	4908      	ldr	r1, [pc, #32]	; (800a3dc <UARTEx_SetNbDataToProcess+0x98>)
 800a3bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a3be:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3c2:	b29a      	uxth	r2, r3
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a3ca:	bf00      	nop
 800a3cc:	3714      	adds	r7, #20
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr
 800a3d6:	bf00      	nop
 800a3d8:	0800aa88 	.word	0x0800aa88
 800a3dc:	0800aa90 	.word	0x0800aa90

0800a3e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a3e0:	b084      	sub	sp, #16
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b084      	sub	sp, #16
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
 800a3ea:	f107 001c 	add.w	r0, r7, #28
 800a3ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d120      	bne.n	800a43a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	68da      	ldr	r2, [r3, #12]
 800a408:	4b2a      	ldr	r3, [pc, #168]	; (800a4b4 <USB_CoreInit+0xd4>)
 800a40a:	4013      	ands	r3, r2
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	68db      	ldr	r3, [r3, #12]
 800a414:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a41c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d105      	bne.n	800a42e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	68db      	ldr	r3, [r3, #12]
 800a426:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 faa8 	bl	800a984 <USB_CoreReset>
 800a434:	4603      	mov	r3, r0
 800a436:	73fb      	strb	r3, [r7, #15]
 800a438:	e01a      	b.n	800a470 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	68db      	ldr	r3, [r3, #12]
 800a43e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 fa9c 	bl	800a984 <USB_CoreReset>
 800a44c:	4603      	mov	r3, r0
 800a44e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a452:	2b00      	cmp	r3, #0
 800a454:	d106      	bne.n	800a464 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a45a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	639a      	str	r2, [r3, #56]	; 0x38
 800a462:	e005      	b.n	800a470 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a468:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a472:	2b01      	cmp	r3, #1
 800a474:	d116      	bne.n	800a4a4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a47a:	b29a      	uxth	r2, r3
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a484:	4b0c      	ldr	r3, [pc, #48]	; (800a4b8 <USB_CoreInit+0xd8>)
 800a486:	4313      	orrs	r3, r2
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	689b      	ldr	r3, [r3, #8]
 800a490:	f043 0206 	orr.w	r2, r3, #6
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	f043 0220 	orr.w	r2, r3, #32
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a4a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a4b0:	b004      	add	sp, #16
 800a4b2:	4770      	bx	lr
 800a4b4:	ffbdffbf 	.word	0xffbdffbf
 800a4b8:	03ee0000 	.word	0x03ee0000

0800a4bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	f023 0201 	bic.w	r2, r3, #1
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a4d0:	2300      	movs	r3, #0
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	370c      	adds	r7, #12
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr

0800a4de <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b084      	sub	sp, #16
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a4fa:	78fb      	ldrb	r3, [r7, #3]
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d115      	bne.n	800a52c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a50c:	2001      	movs	r0, #1
 800a50e:	f7f7 facb 	bl	8001aa8 <HAL_Delay>
      ms++;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	3301      	adds	r3, #1
 800a516:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 fa25 	bl	800a968 <USB_GetMode>
 800a51e:	4603      	mov	r3, r0
 800a520:	2b01      	cmp	r3, #1
 800a522:	d01e      	beq.n	800a562 <USB_SetCurrentMode+0x84>
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2b31      	cmp	r3, #49	; 0x31
 800a528:	d9f0      	bls.n	800a50c <USB_SetCurrentMode+0x2e>
 800a52a:	e01a      	b.n	800a562 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a52c:	78fb      	ldrb	r3, [r7, #3]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d115      	bne.n	800a55e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a53e:	2001      	movs	r0, #1
 800a540:	f7f7 fab2 	bl	8001aa8 <HAL_Delay>
      ms++;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	3301      	adds	r3, #1
 800a548:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 fa0c 	bl	800a968 <USB_GetMode>
 800a550:	4603      	mov	r3, r0
 800a552:	2b00      	cmp	r3, #0
 800a554:	d005      	beq.n	800a562 <USB_SetCurrentMode+0x84>
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2b31      	cmp	r3, #49	; 0x31
 800a55a:	d9f0      	bls.n	800a53e <USB_SetCurrentMode+0x60>
 800a55c:	e001      	b.n	800a562 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a55e:	2301      	movs	r3, #1
 800a560:	e005      	b.n	800a56e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2b32      	cmp	r3, #50	; 0x32
 800a566:	d101      	bne.n	800a56c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a568:	2301      	movs	r3, #1
 800a56a:	e000      	b.n	800a56e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a56c:	2300      	movs	r3, #0
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3710      	adds	r7, #16
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
	...

0800a578 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a578:	b084      	sub	sp, #16
 800a57a:	b580      	push	{r7, lr}
 800a57c:	b086      	sub	sp, #24
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
 800a582:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a586:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a58a:	2300      	movs	r3, #0
 800a58c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a592:	2300      	movs	r3, #0
 800a594:	613b      	str	r3, [r7, #16]
 800a596:	e009      	b.n	800a5ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	3340      	adds	r3, #64	; 0x40
 800a59e:	009b      	lsls	r3, r3, #2
 800a5a0:	4413      	add	r3, r2
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	613b      	str	r3, [r7, #16]
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	2b0e      	cmp	r3, #14
 800a5b0:	d9f2      	bls.n	800a598 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a5b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d11c      	bne.n	800a5f2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	68fa      	ldr	r2, [r7, #12]
 800a5c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a5c6:	f043 0302 	orr.w	r3, r3, #2
 800a5ca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	601a      	str	r2, [r3, #0]
 800a5f0:	e005      	b.n	800a5fe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a604:	461a      	mov	r2, r3
 800a606:	2300      	movs	r3, #0
 800a608:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a610:	4619      	mov	r1, r3
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a618:	461a      	mov	r2, r3
 800a61a:	680b      	ldr	r3, [r1, #0]
 800a61c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a620:	2b01      	cmp	r3, #1
 800a622:	d10c      	bne.n	800a63e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a626:	2b00      	cmp	r3, #0
 800a628:	d104      	bne.n	800a634 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a62a:	2100      	movs	r1, #0
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 f961 	bl	800a8f4 <USB_SetDevSpeed>
 800a632:	e008      	b.n	800a646 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a634:	2101      	movs	r1, #1
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f000 f95c 	bl	800a8f4 <USB_SetDevSpeed>
 800a63c:	e003      	b.n	800a646 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a63e:	2103      	movs	r1, #3
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 f957 	bl	800a8f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a646:	2110      	movs	r1, #16
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 f8f3 	bl	800a834 <USB_FlushTxFifo>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d001      	beq.n	800a658 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 f91d 	bl	800a898 <USB_FlushRxFifo>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d001      	beq.n	800a668 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a664:	2301      	movs	r3, #1
 800a666:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a66e:	461a      	mov	r2, r3
 800a670:	2300      	movs	r3, #0
 800a672:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a67a:	461a      	mov	r2, r3
 800a67c:	2300      	movs	r3, #0
 800a67e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a686:	461a      	mov	r2, r3
 800a688:	2300      	movs	r3, #0
 800a68a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a68c:	2300      	movs	r3, #0
 800a68e:	613b      	str	r3, [r7, #16]
 800a690:	e043      	b.n	800a71a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	015a      	lsls	r2, r3, #5
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	4413      	add	r3, r2
 800a69a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a6a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a6a8:	d118      	bne.n	800a6dc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d10a      	bne.n	800a6c6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	015a      	lsls	r2, r3, #5
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	4413      	add	r3, r2
 800a6b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6bc:	461a      	mov	r2, r3
 800a6be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a6c2:	6013      	str	r3, [r2, #0]
 800a6c4:	e013      	b.n	800a6ee <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	015a      	lsls	r2, r3, #5
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	4413      	add	r3, r2
 800a6ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a6d8:	6013      	str	r3, [r2, #0]
 800a6da:	e008      	b.n	800a6ee <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	015a      	lsls	r2, r3, #5
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	015a      	lsls	r2, r3, #5
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	4413      	add	r3, r2
 800a6f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	015a      	lsls	r2, r3, #5
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	4413      	add	r3, r2
 800a708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a70c:	461a      	mov	r2, r3
 800a70e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a712:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	3301      	adds	r3, #1
 800a718:	613b      	str	r3, [r7, #16]
 800a71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71c:	693a      	ldr	r2, [r7, #16]
 800a71e:	429a      	cmp	r2, r3
 800a720:	d3b7      	bcc.n	800a692 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a722:	2300      	movs	r3, #0
 800a724:	613b      	str	r3, [r7, #16]
 800a726:	e043      	b.n	800a7b0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	015a      	lsls	r2, r3, #5
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	4413      	add	r3, r2
 800a730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a73a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a73e:	d118      	bne.n	800a772 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d10a      	bne.n	800a75c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	015a      	lsls	r2, r3, #5
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	4413      	add	r3, r2
 800a74e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a752:	461a      	mov	r2, r3
 800a754:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a758:	6013      	str	r3, [r2, #0]
 800a75a:	e013      	b.n	800a784 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	015a      	lsls	r2, r3, #5
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	4413      	add	r3, r2
 800a764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a768:	461a      	mov	r2, r3
 800a76a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a76e:	6013      	str	r3, [r2, #0]
 800a770:	e008      	b.n	800a784 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	015a      	lsls	r2, r3, #5
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	4413      	add	r3, r2
 800a77a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a77e:	461a      	mov	r2, r3
 800a780:	2300      	movs	r3, #0
 800a782:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	015a      	lsls	r2, r3, #5
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	4413      	add	r3, r2
 800a78c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a790:	461a      	mov	r2, r3
 800a792:	2300      	movs	r3, #0
 800a794:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	015a      	lsls	r2, r3, #5
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	4413      	add	r3, r2
 800a79e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a7a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	613b      	str	r3, [r7, #16]
 800a7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b2:	693a      	ldr	r2, [r7, #16]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d3b7      	bcc.n	800a728 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7be:	691b      	ldr	r3, [r3, #16]
 800a7c0:	68fa      	ldr	r2, [r7, #12]
 800a7c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a7c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a7d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d105      	bne.n	800a7ec <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	699b      	ldr	r3, [r3, #24]
 800a7e4:	f043 0210 	orr.w	r2, r3, #16
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	699a      	ldr	r2, [r3, #24]
 800a7f0:	4b0e      	ldr	r3, [pc, #56]	; (800a82c <USB_DevInit+0x2b4>)
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d005      	beq.n	800a80a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	699b      	ldr	r3, [r3, #24]
 800a802:	f043 0208 	orr.w	r2, r3, #8
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a80a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d105      	bne.n	800a81c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	699a      	ldr	r2, [r3, #24]
 800a814:	4b06      	ldr	r3, [pc, #24]	; (800a830 <USB_DevInit+0x2b8>)
 800a816:	4313      	orrs	r3, r2
 800a818:	687a      	ldr	r2, [r7, #4]
 800a81a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a81c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3718      	adds	r7, #24
 800a822:	46bd      	mov	sp, r7
 800a824:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a828:	b004      	add	sp, #16
 800a82a:	4770      	bx	lr
 800a82c:	803c3800 	.word	0x803c3800
 800a830:	40000004 	.word	0x40000004

0800a834 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a834:	b480      	push	{r7}
 800a836:	b085      	sub	sp, #20
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a83e:	2300      	movs	r3, #0
 800a840:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	3301      	adds	r3, #1
 800a846:	60fb      	str	r3, [r7, #12]
 800a848:	4a12      	ldr	r2, [pc, #72]	; (800a894 <USB_FlushTxFifo+0x60>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d901      	bls.n	800a852 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a84e:	2303      	movs	r3, #3
 800a850:	e01a      	b.n	800a888 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	691b      	ldr	r3, [r3, #16]
 800a856:	2b00      	cmp	r3, #0
 800a858:	daf3      	bge.n	800a842 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a85a:	2300      	movs	r3, #0
 800a85c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	019b      	lsls	r3, r3, #6
 800a862:	f043 0220 	orr.w	r2, r3, #32
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	3301      	adds	r3, #1
 800a86e:	60fb      	str	r3, [r7, #12]
 800a870:	4a08      	ldr	r2, [pc, #32]	; (800a894 <USB_FlushTxFifo+0x60>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d901      	bls.n	800a87a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800a876:	2303      	movs	r3, #3
 800a878:	e006      	b.n	800a888 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	691b      	ldr	r3, [r3, #16]
 800a87e:	f003 0320 	and.w	r3, r3, #32
 800a882:	2b20      	cmp	r3, #32
 800a884:	d0f1      	beq.n	800a86a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3714      	adds	r7, #20
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr
 800a894:	00030d40 	.word	0x00030d40

0800a898 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a898:	b480      	push	{r7}
 800a89a:	b085      	sub	sp, #20
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	60fb      	str	r3, [r7, #12]
 800a8aa:	4a11      	ldr	r2, [pc, #68]	; (800a8f0 <USB_FlushRxFifo+0x58>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d901      	bls.n	800a8b4 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800a8b0:	2303      	movs	r3, #3
 800a8b2:	e017      	b.n	800a8e4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	691b      	ldr	r3, [r3, #16]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	daf3      	bge.n	800a8a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2210      	movs	r2, #16
 800a8c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	60fb      	str	r3, [r7, #12]
 800a8cc:	4a08      	ldr	r2, [pc, #32]	; (800a8f0 <USB_FlushRxFifo+0x58>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d901      	bls.n	800a8d6 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800a8d2:	2303      	movs	r3, #3
 800a8d4:	e006      	b.n	800a8e4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	691b      	ldr	r3, [r3, #16]
 800a8da:	f003 0310 	and.w	r3, r3, #16
 800a8de:	2b10      	cmp	r3, #16
 800a8e0:	d0f1      	beq.n	800a8c6 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3714      	adds	r7, #20
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr
 800a8f0:	00030d40 	.word	0x00030d40

0800a8f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b085      	sub	sp, #20
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a90a:	681a      	ldr	r2, [r3, #0]
 800a90c:	78fb      	ldrb	r3, [r7, #3]
 800a90e:	68f9      	ldr	r1, [r7, #12]
 800a910:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a914:	4313      	orrs	r3, r2
 800a916:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a918:	2300      	movs	r3, #0
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3714      	adds	r7, #20
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr

0800a926 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a926:	b480      	push	{r7}
 800a928:	b085      	sub	sp, #20
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a940:	f023 0303 	bic.w	r3, r3, #3
 800a944:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	68fa      	ldr	r2, [r7, #12]
 800a950:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a954:	f043 0302 	orr.w	r3, r3, #2
 800a958:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a95a:	2300      	movs	r3, #0
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3714      	adds	r7, #20
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a968:	b480      	push	{r7}
 800a96a:	b083      	sub	sp, #12
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	695b      	ldr	r3, [r3, #20]
 800a974:	f003 0301 	and.w	r3, r3, #1
}
 800a978:	4618      	mov	r0, r3
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a984:	b480      	push	{r7}
 800a986:	b085      	sub	sp, #20
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a98c:	2300      	movs	r3, #0
 800a98e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	3301      	adds	r3, #1
 800a994:	60fb      	str	r3, [r7, #12]
 800a996:	4a13      	ldr	r2, [pc, #76]	; (800a9e4 <USB_CoreReset+0x60>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d901      	bls.n	800a9a0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800a99c:	2303      	movs	r3, #3
 800a99e:	e01a      	b.n	800a9d6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	691b      	ldr	r3, [r3, #16]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	daf3      	bge.n	800a990 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	691b      	ldr	r3, [r3, #16]
 800a9b0:	f043 0201 	orr.w	r2, r3, #1
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	3301      	adds	r3, #1
 800a9bc:	60fb      	str	r3, [r7, #12]
 800a9be:	4a09      	ldr	r2, [pc, #36]	; (800a9e4 <USB_CoreReset+0x60>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d901      	bls.n	800a9c8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800a9c4:	2303      	movs	r3, #3
 800a9c6:	e006      	b.n	800a9d6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	691b      	ldr	r3, [r3, #16]
 800a9cc:	f003 0301 	and.w	r3, r3, #1
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d0f1      	beq.n	800a9b8 <USB_CoreReset+0x34>

  return HAL_OK;
 800a9d4:	2300      	movs	r3, #0
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3714      	adds	r7, #20
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	00030d40 	.word	0x00030d40

0800a9e8 <__libc_init_array>:
 800a9e8:	b570      	push	{r4, r5, r6, lr}
 800a9ea:	4d0d      	ldr	r5, [pc, #52]	; (800aa20 <__libc_init_array+0x38>)
 800a9ec:	4c0d      	ldr	r4, [pc, #52]	; (800aa24 <__libc_init_array+0x3c>)
 800a9ee:	1b64      	subs	r4, r4, r5
 800a9f0:	10a4      	asrs	r4, r4, #2
 800a9f2:	2600      	movs	r6, #0
 800a9f4:	42a6      	cmp	r6, r4
 800a9f6:	d109      	bne.n	800aa0c <__libc_init_array+0x24>
 800a9f8:	4d0b      	ldr	r5, [pc, #44]	; (800aa28 <__libc_init_array+0x40>)
 800a9fa:	4c0c      	ldr	r4, [pc, #48]	; (800aa2c <__libc_init_array+0x44>)
 800a9fc:	f000 f820 	bl	800aa40 <_init>
 800aa00:	1b64      	subs	r4, r4, r5
 800aa02:	10a4      	asrs	r4, r4, #2
 800aa04:	2600      	movs	r6, #0
 800aa06:	42a6      	cmp	r6, r4
 800aa08:	d105      	bne.n	800aa16 <__libc_init_array+0x2e>
 800aa0a:	bd70      	pop	{r4, r5, r6, pc}
 800aa0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa10:	4798      	blx	r3
 800aa12:	3601      	adds	r6, #1
 800aa14:	e7ee      	b.n	800a9f4 <__libc_init_array+0xc>
 800aa16:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa1a:	4798      	blx	r3
 800aa1c:	3601      	adds	r6, #1
 800aa1e:	e7f2      	b.n	800aa06 <__libc_init_array+0x1e>
 800aa20:	0800aaa0 	.word	0x0800aaa0
 800aa24:	0800aaa0 	.word	0x0800aaa0
 800aa28:	0800aaa0 	.word	0x0800aaa0
 800aa2c:	0800aaa4 	.word	0x0800aaa4

0800aa30 <memset>:
 800aa30:	4402      	add	r2, r0
 800aa32:	4603      	mov	r3, r0
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d100      	bne.n	800aa3a <memset+0xa>
 800aa38:	4770      	bx	lr
 800aa3a:	f803 1b01 	strb.w	r1, [r3], #1
 800aa3e:	e7f9      	b.n	800aa34 <memset+0x4>

0800aa40 <_init>:
 800aa40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa42:	bf00      	nop
 800aa44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa46:	bc08      	pop	{r3}
 800aa48:	469e      	mov	lr, r3
 800aa4a:	4770      	bx	lr

0800aa4c <_fini>:
 800aa4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa4e:	bf00      	nop
 800aa50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa52:	bc08      	pop	{r3}
 800aa54:	469e      	mov	lr, r3
 800aa56:	4770      	bx	lr
