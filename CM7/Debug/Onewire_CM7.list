
Onewire_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d10  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006fa8  08006fa8  00016fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fe0  08006fe0  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006fe0  08006fe0  00016fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fe8  08006fe8  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fe8  08006fe8  00016fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fec  08006fec  00016fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  24000000  08006ff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000014  08007004  00020014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000074  08007064  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000648  240000d8  080070c4  000200d8  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  24000720  080070c4  00020720  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002a5b5  00000000  00000000  00020102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003ae9  00000000  00000000  0004a6b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015c8  00000000  00000000  0004e1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000014c0  00000000  00000000  0004f768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003b751  00000000  00000000  00050c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001aa57  00000000  00000000  0008c379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0018c33d  00000000  00000000  000a6dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  0023310d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005e48  00000000  00000000  00233160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d8 	.word	0x240000d8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006f90 	.word	0x08006f90

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000dc 	.word	0x240000dc
 80002d4:	08006f90 	.word	0x08006f90

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000710:	bf00      	nop
 8000712:	4b2e      	ldr	r3, [pc, #184]	; (80007cc <main+0xc8>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071a:	2b00      	cmp	r3, #0
 800071c:	d004      	beq.n	8000728 <main+0x24>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	1e5a      	subs	r2, r3, #1
 8000722:	607a      	str	r2, [r7, #4]
 8000724:	2b00      	cmp	r3, #0
 8000726:	dcf4      	bgt.n	8000712 <main+0xe>
  if ( timeout < 0 )
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	da01      	bge.n	8000732 <main+0x2e>
  {
  Error_Handler();
 800072e:	f000 fc3d 	bl	8000fac <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000732:	f000 fec9 	bl	80014c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000736:	f000 f851 	bl	80007dc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073a:	4b24      	ldr	r3, [pc, #144]	; (80007cc <main+0xc8>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000740:	4a22      	ldr	r2, [pc, #136]	; (80007cc <main+0xc8>)
 8000742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000746:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074a:	4b20      	ldr	r3, [pc, #128]	; (80007cc <main+0xc8>)
 800074c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000758:	2000      	movs	r0, #0
 800075a:	f001 fe93 	bl	8002484 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075e:	2100      	movs	r1, #0
 8000760:	2000      	movs	r0, #0
 8000762:	f001 fea9 	bl	80024b8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000766:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800076c:	bf00      	nop
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <main+0xc8>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000776:	2b00      	cmp	r3, #0
 8000778:	d104      	bne.n	8000784 <main+0x80>
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	1e5a      	subs	r2, r3, #1
 800077e:	607a      	str	r2, [r7, #4]
 8000780:	2b00      	cmp	r3, #0
 8000782:	dcf4      	bgt.n	800076e <main+0x6a>
if ( timeout < 0 )
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b00      	cmp	r3, #0
 8000788:	da01      	bge.n	800078e <main+0x8a>
{
Error_Handler();
 800078a:	f000 fc0f 	bl	8000fac <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078e:	f000 fa11 	bl	8000bb4 <MX_GPIO_Init>
  MX_ETH_Init();
 8000792:	f000 f8a9 	bl	80008e8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000796:	f000 f98f 	bl	8000ab8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800079a:	f000 f9d9 	bl	8000b50 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 800079e:	f000 f8ef 	bl	8000980 <MX_TIM3_Init>
  MX_TIM5_Init();
 80007a2:	f000 f93b 	bl	8000a1c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 1);
 80007a6:	2201      	movs	r2, #1
 80007a8:	2102      	movs	r1, #2
 80007aa:	4809      	ldr	r0, [pc, #36]	; (80007d0 <main+0xcc>)
 80007ac:	f001 fe50 	bl	8002450 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim3);
 80007b0:	4808      	ldr	r0, [pc, #32]	; (80007d4 <main+0xd0>)
 80007b2:	f004 fbb9 	bl	8004f28 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 80007b6:	4808      	ldr	r0, [pc, #32]	; (80007d8 <main+0xd4>)
 80007b8:	f004 fbb6 	bl	8004f28 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		requestT();
 80007bc:	f000 fabc 	bl	8000d38 <requestT>
		get_value();
 80007c0:	f000 fae0 	bl	8000d84 <get_value>
		Update_check_Value();
 80007c4:	f000 fb3c 	bl	8000e40 <Update_check_Value>
		requestT();
 80007c8:	e7f8      	b.n	80007bc <main+0xb8>
 80007ca:	bf00      	nop
 80007cc:	58024400 	.word	0x58024400
 80007d0:	58020c00 	.word	0x58020c00
 80007d4:	24000614 	.word	0x24000614
 80007d8:	240005c8 	.word	0x240005c8

080007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b09c      	sub	sp, #112	; 0x70
 80007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e6:	224c      	movs	r2, #76	; 0x4c
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f006 fbc8 	bl	8006f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2220      	movs	r2, #32
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f006 fbc2 	bl	8006f80 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007fc:	2004      	movs	r0, #4
 80007fe:	f001 ffb7 	bl	8002770 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	4b35      	ldr	r3, [pc, #212]	; (80008dc <SystemClock_Config+0x100>)
 8000808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800080a:	4a34      	ldr	r2, [pc, #208]	; (80008dc <SystemClock_Config+0x100>)
 800080c:	f023 0301 	bic.w	r3, r3, #1
 8000810:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000812:	4b32      	ldr	r3, [pc, #200]	; (80008dc <SystemClock_Config+0x100>)
 8000814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	4b30      	ldr	r3, [pc, #192]	; (80008e0 <SystemClock_Config+0x104>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000824:	4a2e      	ldr	r2, [pc, #184]	; (80008e0 <SystemClock_Config+0x104>)
 8000826:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082a:	6193      	str	r3, [r2, #24]
 800082c:	4b2c      	ldr	r3, [pc, #176]	; (80008e0 <SystemClock_Config+0x104>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000838:	bf00      	nop
 800083a:	4b29      	ldr	r3, [pc, #164]	; (80008e0 <SystemClock_Config+0x104>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000846:	d1f8      	bne.n	800083a <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000848:	4b26      	ldr	r3, [pc, #152]	; (80008e4 <SystemClock_Config+0x108>)
 800084a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800084c:	f023 0303 	bic.w	r3, r3, #3
 8000850:	4a24      	ldr	r2, [pc, #144]	; (80008e4 <SystemClock_Config+0x108>)
 8000852:	f043 0302 	orr.w	r3, r3, #2
 8000856:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000858:	2301      	movs	r3, #1
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800085c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000862:	2302      	movs	r3, #2
 8000864:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000866:	2302      	movs	r3, #2
 8000868:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800086a:	2301      	movs	r3, #1
 800086c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 800086e:	2319      	movs	r3, #25
 8000870:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000872:	2302      	movs	r3, #2
 8000874:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000876:	2302      	movs	r3, #2
 8000878:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800087a:	2302      	movs	r3, #2
 800087c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800087e:	230c      	movs	r3, #12
 8000880:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000882:	2300      	movs	r3, #0
 8000884:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088e:	4618      	mov	r0, r3
 8000890:	f001 ffd8 	bl	8002844 <HAL_RCC_OscConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800089a:	f000 fb87 	bl	8000fac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089e:	233f      	movs	r3, #63	; 0x3f
 80008a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a2:	2303      	movs	r3, #3
 80008a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008ae:	2340      	movs	r3, #64	; 0x40
 80008b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008b2:	2340      	movs	r3, #64	; 0x40
 80008b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008bc:	2340      	movs	r3, #64	; 0x40
 80008be:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2102      	movs	r1, #2
 80008c4:	4618      	mov	r0, r3
 80008c6:	f002 fbe9 	bl	800309c <HAL_RCC_ClockConfig>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80008d0:	f000 fb6c 	bl	8000fac <Error_Handler>
  }
}
 80008d4:	bf00      	nop
 80008d6:	3770      	adds	r7, #112	; 0x70
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	58000400 	.word	0x58000400
 80008e0:	58024800 	.word	0x58024800
 80008e4:	58024400 	.word	0x58024400

080008e8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008ec:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <MX_ETH_Init+0x80>)
 80008ee:	4a1f      	ldr	r2, [pc, #124]	; (800096c <MX_ETH_Init+0x84>)
 80008f0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008f2:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <MX_ETH_Init+0x88>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <MX_ETH_Init+0x88>)
 80008fa:	2280      	movs	r2, #128	; 0x80
 80008fc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <MX_ETH_Init+0x88>)
 8000900:	22e1      	movs	r2, #225	; 0xe1
 8000902:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000904:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <MX_ETH_Init+0x88>)
 8000906:	2200      	movs	r2, #0
 8000908:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <MX_ETH_Init+0x88>)
 800090c:	2200      	movs	r2, #0
 800090e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000910:	4b17      	ldr	r3, [pc, #92]	; (8000970 <MX_ETH_Init+0x88>)
 8000912:	2200      	movs	r2, #0
 8000914:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_ETH_Init+0x80>)
 8000918:	4a15      	ldr	r2, [pc, #84]	; (8000970 <MX_ETH_Init+0x88>)
 800091a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <MX_ETH_Init+0x80>)
 800091e:	2201      	movs	r2, #1
 8000920:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_ETH_Init+0x80>)
 8000924:	4a13      	ldr	r2, [pc, #76]	; (8000974 <MX_ETH_Init+0x8c>)
 8000926:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_ETH_Init+0x80>)
 800092a:	4a13      	ldr	r2, [pc, #76]	; (8000978 <MX_ETH_Init+0x90>)
 800092c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_ETH_Init+0x80>)
 8000930:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000934:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000936:	480c      	ldr	r0, [pc, #48]	; (8000968 <MX_ETH_Init+0x80>)
 8000938:	f000 ffac 	bl	8001894 <HAL_ETH_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000942:	f000 fb33 	bl	8000fac <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000946:	2234      	movs	r2, #52	; 0x34
 8000948:	2100      	movs	r1, #0
 800094a:	480c      	ldr	r0, [pc, #48]	; (800097c <MX_ETH_Init+0x94>)
 800094c:	f006 fb18 	bl	8006f80 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000950:	4b0a      	ldr	r3, [pc, #40]	; (800097c <MX_ETH_Init+0x94>)
 8000952:	2221      	movs	r2, #33	; 0x21
 8000954:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_ETH_Init+0x94>)
 8000958:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800095c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800095e:	4b07      	ldr	r3, [pc, #28]	; (800097c <MX_ETH_Init+0x94>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	24000660 	.word	0x24000660
 800096c:	40028000 	.word	0x40028000
 8000970:	24000128 	.word	0x24000128
 8000974:	24000074 	.word	0x24000074
 8000978:	24000014 	.word	0x24000014
 800097c:	240006e8 	.word	0x240006e8

08000980 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000986:	f107 0310 	add.w	r3, r7, #16
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800099e:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <MX_TIM3_Init+0x94>)
 80009a0:	4a1d      	ldr	r2, [pc, #116]	; (8000a18 <MX_TIM3_Init+0x98>)
 80009a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 80009a4:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <MX_TIM3_Init+0x94>)
 80009a6:	2263      	movs	r2, #99	; 0x63
 80009a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009aa:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <MX_TIM3_Init+0x94>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80009b0:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <MX_TIM3_Init+0x94>)
 80009b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80009b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b8:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <MX_TIM3_Init+0x94>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <MX_TIM3_Init+0x94>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009c4:	4813      	ldr	r0, [pc, #76]	; (8000a14 <MX_TIM3_Init+0x94>)
 80009c6:	f004 fa57 	bl	8004e78 <HAL_TIM_Base_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80009d0:	f000 faec 	bl	8000fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009da:	f107 0310 	add.w	r3, r7, #16
 80009de:	4619      	mov	r1, r3
 80009e0:	480c      	ldr	r0, [pc, #48]	; (8000a14 <MX_TIM3_Init+0x94>)
 80009e2:	f004 fc39 	bl	8005258 <HAL_TIM_ConfigClockSource>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80009ec:	f000 fade 	bl	8000fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f0:	2300      	movs	r3, #0
 80009f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	4619      	mov	r1, r3
 80009fc:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_TIM3_Init+0x94>)
 80009fe:	f004 fe83 	bl	8005708 <HAL_TIMEx_MasterConfigSynchronization>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000a08:	f000 fad0 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	3720      	adds	r7, #32
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	24000614 	.word	0x24000614
 8000a18:	40000400 	.word	0x40000400

08000a1c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a22:	f107 0310 	add.w	r3, r7, #16
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000a3a:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <MX_TIM5_Init+0x94>)
 8000a3c:	4a1d      	ldr	r2, [pc, #116]	; (8000ab4 <MX_TIM5_Init+0x98>)
 8000a3e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <MX_TIM5_Init+0x94>)
 8000a42:	2263      	movs	r2, #99	; 0x63
 8000a44:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <MX_TIM5_Init+0x94>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <MX_TIM5_Init+0x94>)
 8000a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8000a52:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <MX_TIM5_Init+0x94>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <MX_TIM5_Init+0x94>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000a60:	4813      	ldr	r0, [pc, #76]	; (8000ab0 <MX_TIM5_Init+0x94>)
 8000a62:	f004 fa09 	bl	8004e78 <HAL_TIM_Base_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000a6c:	f000 fa9e 	bl	8000fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000a76:	f107 0310 	add.w	r3, r7, #16
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <MX_TIM5_Init+0x94>)
 8000a7e:	f004 fbeb 	bl	8005258 <HAL_TIM_ConfigClockSource>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000a88:	f000 fa90 	bl	8000fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	4619      	mov	r1, r3
 8000a98:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_TIM5_Init+0x94>)
 8000a9a:	f004 fe35 	bl	8005708 <HAL_TIMEx_MasterConfigSynchronization>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000aa4:	f000 fa82 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	3720      	adds	r7, #32
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	240005c8 	.word	0x240005c8
 8000ab4:	40000c00 	.word	0x40000c00

08000ab8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000abc:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000abe:	4a23      	ldr	r2, [pc, #140]	; (8000b4c <MX_USART3_UART_Init+0x94>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ac2:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aee:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b00:	4811      	ldr	r0, [pc, #68]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000b02:	f004 fead 	bl	8005860 <HAL_UART_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b0c:	f000 fa4e 	bl	8000fac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b10:	2100      	movs	r1, #0
 8000b12:	480d      	ldr	r0, [pc, #52]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000b14:	f005 fe42 	bl	800679c <HAL_UARTEx_SetTxFifoThreshold>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b1e:	f000 fa45 	bl	8000fac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b22:	2100      	movs	r1, #0
 8000b24:	4808      	ldr	r0, [pc, #32]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000b26:	f005 fe77 	bl	8006818 <HAL_UARTEx_SetRxFifoThreshold>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b30:	f000 fa3c 	bl	8000fac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b34:	4804      	ldr	r0, [pc, #16]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000b36:	f005 fdf8 	bl	800672a <HAL_UARTEx_DisableFifoMode>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b40:	f000 fa34 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	24000130 	.word	0x24000130
 8000b4c:	40004800 	.word	0x40004800

08000b50 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b54:	4b15      	ldr	r3, [pc, #84]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b56:	4a16      	ldr	r2, [pc, #88]	; (8000bb0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b58:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b5a:	4b14      	ldr	r3, [pc, #80]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b5c:	2209      	movs	r2, #9
 8000b5e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b62:	2202      	movs	r2, #2
 8000b64:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b6e:	2202      	movs	r2, #2
 8000b70:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b96:	4805      	ldr	r0, [pc, #20]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b98:	f001 fca2 	bl	80024e0 <HAL_PCD_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000ba2:	f000 fa03 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	240001c0 	.word	0x240001c0
 8000bb0:	40080000 	.word	0x40080000

08000bb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08c      	sub	sp, #48	; 0x30
 8000bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bca:	4b38      	ldr	r3, [pc, #224]	; (8000cac <MX_GPIO_Init+0xf8>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd0:	4a36      	ldr	r2, [pc, #216]	; (8000cac <MX_GPIO_Init+0xf8>)
 8000bd2:	f043 0304 	orr.w	r3, r3, #4
 8000bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bda:	4b34      	ldr	r3, [pc, #208]	; (8000cac <MX_GPIO_Init+0xf8>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be0:	f003 0304 	and.w	r3, r3, #4
 8000be4:	61bb      	str	r3, [r7, #24]
 8000be6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be8:	4b30      	ldr	r3, [pc, #192]	; (8000cac <MX_GPIO_Init+0xf8>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bee:	4a2f      	ldr	r2, [pc, #188]	; (8000cac <MX_GPIO_Init+0xf8>)
 8000bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf8:	4b2c      	ldr	r3, [pc, #176]	; (8000cac <MX_GPIO_Init+0xf8>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	4b29      	ldr	r3, [pc, #164]	; (8000cac <MX_GPIO_Init+0xf8>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0c:	4a27      	ldr	r2, [pc, #156]	; (8000cac <MX_GPIO_Init+0xf8>)
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c16:	4b25      	ldr	r3, [pc, #148]	; (8000cac <MX_GPIO_Init+0xf8>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1c:	f003 0301 	and.w	r3, r3, #1
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c24:	4b21      	ldr	r3, [pc, #132]	; (8000cac <MX_GPIO_Init+0xf8>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a20      	ldr	r2, [pc, #128]	; (8000cac <MX_GPIO_Init+0xf8>)
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <MX_GPIO_Init+0xf8>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <MX_GPIO_Init+0xf8>)
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c48:	4a18      	ldr	r2, [pc, #96]	; (8000cac <MX_GPIO_Init+0xf8>)
 8000c4a:	f043 0308 	orr.w	r3, r3, #8
 8000c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c52:	4b16      	ldr	r3, [pc, #88]	; (8000cac <MX_GPIO_Init+0xf8>)
 8000c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c58:	f003 0308 	and.w	r3, r3, #8
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <MX_GPIO_Init+0xf8>)
 8000c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c66:	4a11      	ldr	r2, [pc, #68]	; (8000cac <MX_GPIO_Init+0xf8>)
 8000c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c70:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <MX_GPIO_Init+0xf8>)
 8000c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	2102      	movs	r1, #2
 8000c82:	480b      	ldr	r0, [pc, #44]	; (8000cb0 <MX_GPIO_Init+0xfc>)
 8000c84:	f001 fbe4 	bl	8002450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c8c:	2311      	movs	r3, #17
 8000c8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c94:	2303      	movs	r3, #3
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c98:	f107 031c 	add.w	r3, r7, #28
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <MX_GPIO_Init+0xfc>)
 8000ca0:	f001 fa0e 	bl	80020c0 <HAL_GPIO_Init>

}
 8000ca4:	bf00      	nop
 8000ca6:	3730      	adds	r7, #48	; 0x30
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	58024400 	.word	0x58024400
 8000cb0:	58020c00 	.word	0x58020c00

08000cb4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cb4:	b5b0      	push	{r4, r5, r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a0d      	ldr	r2, [pc, #52]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d105      	bne.n	8000cd0 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 1);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2102      	movs	r1, #2
 8000cc8:	480b      	ldr	r0, [pc, #44]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000cca:	f001 fbc1 	bl	8002450 <HAL_GPIO_WritePin>

	}else if(htim== &htim5){
		_micross=_micross+4294967295;
	}

}
 8000cce:	e00d      	b.n	8000cec <HAL_TIM_PeriodElapsedCallback+0x38>
	}else if(htim== &htim5){
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d109      	bne.n	8000cec <HAL_TIM_PeriodElapsedCallback+0x38>
		_micross=_micross+4294967295;
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cde:	f112 34ff 	adds.w	r4, r2, #4294967295
 8000ce2:	f143 0500 	adc.w	r5, r3, #0
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000ce8:	e9c3 4500 	strd	r4, r5, [r3]
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8000cf4:	24000614 	.word	0x24000614
 8000cf8:	58020c00 	.word	0x58020c00
 8000cfc:	240005c8 	.word	0x240005c8
 8000d00:	24000108 	.word	0x24000108

08000d04 <micross>:

uint64_t micross(){
 8000d04:	b4b0      	push	{r4, r5, r7}
 8000d06:	af00      	add	r7, sp, #0
	return _micross+ htim5.Instance->CNT;
 8000d08:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <micross+0x2c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f04f 0100 	mov.w	r1, #0
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <micross+0x30>)
 8000d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d1a:	1884      	adds	r4, r0, r2
 8000d1c:	eb41 0503 	adc.w	r5, r1, r3
 8000d20:	4622      	mov	r2, r4
 8000d22:	462b      	mov	r3, r5
}
 8000d24:	4610      	mov	r0, r2
 8000d26:	4619      	mov	r1, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bcb0      	pop	{r4, r5, r7}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	240005c8 	.word	0x240005c8
 8000d34:	24000108 	.word	0x24000108

08000d38 <requestT>:





void requestT(){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	if(flag){
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <requestT+0x3c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d015      	beq.n	8000d70 <requestT+0x38>
		value=0;
 8000d44:	490c      	ldr	r1, [pc, #48]	; (8000d78 <requestT+0x40>)
 8000d46:	f04f 0200 	mov.w	r2, #0
 8000d4a:	f04f 0300 	mov.w	r3, #0
 8000d4e:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2102      	movs	r1, #2
 8000d56:	4809      	ldr	r0, [pc, #36]	; (8000d7c <requestT+0x44>)
 8000d58:	f001 fb7a 	bl	8002450 <HAL_GPIO_WritePin>
		htim3.Instance->CNT=0;
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <requestT+0x48>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2200      	movs	r2, #0
 8000d62:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim3);
 8000d64:	4806      	ldr	r0, [pc, #24]	; (8000d80 <requestT+0x48>)
 8000d66:	f004 f8df 	bl	8004f28 <HAL_TIM_Base_Start_IT>
		flag=0;
 8000d6a:	4b02      	ldr	r3, [pc, #8]	; (8000d74 <requestT+0x3c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
	}
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	240000f4 	.word	0x240000f4
 8000d78:	240000f8 	.word	0x240000f8
 8000d7c:	58020c00 	.word	0x58020c00
 8000d80:	24000614 	.word	0x24000614

08000d84 <get_value>:

void get_value(){
 8000d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d88:	af00      	add	r7, sp, #0
	now=HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
 8000d8a:	2102      	movs	r1, #2
 8000d8c:	4826      	ldr	r0, [pc, #152]	; (8000e28 <get_value+0xa4>)
 8000d8e:	f001 fb47 	bl	8002420 <HAL_GPIO_ReadPin>
 8000d92:	4603      	mov	r3, r0
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <get_value+0xa8>)
 8000d98:	701a      	strb	r2, [r3, #0]
	if(pre==0 && now==1){
 8000d9a:	4b25      	ldr	r3, [pc, #148]	; (8000e30 <get_value+0xac>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d10d      	bne.n	8000dbe <get_value+0x3a>
 8000da2:	4b22      	ldr	r3, [pc, #136]	; (8000e2c <get_value+0xa8>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d109      	bne.n	8000dbe <get_value+0x3a>
	  startT=micross();
 8000daa:	f7ff ffab 	bl	8000d04 <micross>
 8000dae:	4602      	mov	r2, r0
 8000db0:	460b      	mov	r3, r1
 8000db2:	4920      	ldr	r1, [pc, #128]	; (8000e34 <get_value+0xb0>)
 8000db4:	e9c1 2300 	strd	r2, r3, [r1]
	  flagT=1;
 8000db8:	4b1f      	ldr	r3, [pc, #124]	; (8000e38 <get_value+0xb4>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	701a      	strb	r2, [r3, #0]
	}
	pre=now;
 8000dbe:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <get_value+0xa8>)
 8000dc0:	781a      	ldrb	r2, [r3, #0]
 8000dc2:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <get_value+0xac>)
 8000dc4:	701a      	strb	r2, [r3, #0]
	if(micross()-startT >=35 && flagT==1){
 8000dc6:	f7ff ff9d 	bl	8000d04 <micross>
 8000dca:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <get_value+0xb0>)
 8000dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd0:	ebb0 0802 	subs.w	r8, r0, r2
 8000dd4:	eb61 0903 	sbc.w	r9, r1, r3
 8000dd8:	f1b9 0f00 	cmp.w	r9, #0
 8000ddc:	bf08      	it	eq
 8000dde:	f1b8 0f23 	cmpeq.w	r8, #35	; 0x23
 8000de2:	d31e      	bcc.n	8000e22 <get_value+0x9e>
 8000de4:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <get_value+0xb4>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d11a      	bne.n	8000e22 <get_value+0x9e>
	  value=(value<<1)|HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <get_value+0xb8>)
 8000dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df2:	eb12 0a02 	adds.w	sl, r2, r2
 8000df6:	eb43 0b03 	adc.w	fp, r3, r3
 8000dfa:	46d0      	mov	r8, sl
 8000dfc:	46d9      	mov	r9, fp
 8000dfe:	2102      	movs	r1, #2
 8000e00:	4809      	ldr	r0, [pc, #36]	; (8000e28 <get_value+0xa4>)
 8000e02:	f001 fb0d 	bl	8002420 <HAL_GPIO_ReadPin>
 8000e06:	4603      	mov	r3, r0
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	f04f 0300 	mov.w	r3, #0
 8000e0e:	ea48 0402 	orr.w	r4, r8, r2
 8000e12:	ea49 0503 	orr.w	r5, r9, r3
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <get_value+0xb8>)
 8000e18:	e9c3 4500 	strd	r4, r5, [r3]
	  flagT=0;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <get_value+0xb4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]
	}
}
 8000e22:	bf00      	nop
 8000e24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000e28:	58020c00 	.word	0x58020c00
 8000e2c:	24000008 	.word	0x24000008
 8000e30:	24000100 	.word	0x24000100
 8000e34:	24000110 	.word	0x24000110
 8000e38:	24000118 	.word	0x24000118
 8000e3c:	240000f8 	.word	0x240000f8

08000e40 <Update_check_Value>:
uint8_t sum=0;
uint8_t realsum=0;
float realtemp=0;
float realhumidity=0;

void Update_check_Value(){
 8000e40:	b4b0      	push	{r4, r5, r7}
 8000e42:	af00      	add	r7, sp, #0
	if(value>=0b100000000000000000000000000000000000000000){
 8000e44:	4951      	ldr	r1, [pc, #324]	; (8000f8c <Update_check_Value+0x14c>)
 8000e46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e4a:	f04f 34ff 	mov.w	r4, #4294967295
 8000e4e:	f240 15ff 	movw	r5, #511	; 0x1ff
 8000e52:	428d      	cmp	r5, r1
 8000e54:	bf08      	it	eq
 8000e56:	4284      	cmpeq	r4, r0
 8000e58:	f080 8093 	bcs.w	8000f82 <Update_check_Value+0x142>
		value=value&0b01111111111111111111111111111111111111110;
 8000e5c:	494b      	ldr	r1, [pc, #300]	; (8000f8c <Update_check_Value+0x14c>)
 8000e5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e62:	f06f 0401 	mvn.w	r4, #1
 8000e66:	f04f 05ff 	mov.w	r5, #255	; 0xff
 8000e6a:	ea00 0204 	and.w	r2, r0, r4
 8000e6e:	ea01 0305 	and.w	r3, r1, r5
 8000e72:	4946      	ldr	r1, [pc, #280]	; (8000f8c <Update_check_Value+0x14c>)
 8000e74:	e9c1 2300 	strd	r2, r3, [r1]
		value=value>>1;
 8000e78:	4b44      	ldr	r3, [pc, #272]	; (8000f8c <Update_check_Value+0x14c>)
 8000e7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e7e:	f04f 0200 	mov.w	r2, #0
 8000e82:	f04f 0300 	mov.w	r3, #0
 8000e86:	0842      	lsrs	r2, r0, #1
 8000e88:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8000e8c:	084b      	lsrs	r3, r1, #1
 8000e8e:	493f      	ldr	r1, [pc, #252]	; (8000f8c <Update_check_Value+0x14c>)
 8000e90:	e9c1 2300 	strd	r2, r3, [r1]
		sum=value&0b11111111;
 8000e94:	4b3d      	ldr	r3, [pc, #244]	; (8000f8c <Update_check_Value+0x14c>)
 8000e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9a:	b2d2      	uxtb	r2, r2
 8000e9c:	4b3c      	ldr	r3, [pc, #240]	; (8000f90 <Update_check_Value+0x150>)
 8000e9e:	701a      	strb	r2, [r3, #0]
		temp=(value>>8)&0b1111111111111111;
 8000ea0:	4b3a      	ldr	r3, [pc, #232]	; (8000f8c <Update_check_Value+0x14c>)
 8000ea2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ea6:	f04f 0200 	mov.w	r2, #0
 8000eaa:	f04f 0300 	mov.w	r3, #0
 8000eae:	0a02      	lsrs	r2, r0, #8
 8000eb0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000eb4:	0a0b      	lsrs	r3, r1, #8
 8000eb6:	b292      	uxth	r2, r2
 8000eb8:	4b36      	ldr	r3, [pc, #216]	; (8000f94 <Update_check_Value+0x154>)
 8000eba:	801a      	strh	r2, [r3, #0]
		humidity=(value>>24)&0b1111111111111111;
 8000ebc:	4b33      	ldr	r3, [pc, #204]	; (8000f8c <Update_check_Value+0x14c>)
 8000ebe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ec2:	f04f 0200 	mov.w	r2, #0
 8000ec6:	f04f 0300 	mov.w	r3, #0
 8000eca:	0e02      	lsrs	r2, r0, #24
 8000ecc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000ed0:	0e0b      	lsrs	r3, r1, #24
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	4b30      	ldr	r3, [pc, #192]	; (8000f98 <Update_check_Value+0x158>)
 8000ed6:	801a      	strh	r2, [r3, #0]

		//check sum
		realsum=((humidity>>8)&0b11111111) + (humidity&0b11111111) +((temp>>8)&0b11111111) + (temp&0b11111111);
 8000ed8:	4b2f      	ldr	r3, [pc, #188]	; (8000f98 <Update_check_Value+0x158>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	0a1b      	lsrs	r3, r3, #8
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4b2d      	ldr	r3, [pc, #180]	; (8000f98 <Update_check_Value+0x158>)
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	4413      	add	r3, r2
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	4b29      	ldr	r3, [pc, #164]	; (8000f94 <Update_check_Value+0x154>)
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	0a1b      	lsrs	r3, r3, #8
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	4413      	add	r3, r2
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4b26      	ldr	r3, [pc, #152]	; (8000f94 <Update_check_Value+0x154>)
 8000efc:	881b      	ldrh	r3, [r3, #0]
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	4413      	add	r3, r2
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	4b25      	ldr	r3, [pc, #148]	; (8000f9c <Update_check_Value+0x15c>)
 8000f06:	701a      	strb	r2, [r3, #0]
		if(sum!=realsum){
 8000f08:	4b21      	ldr	r3, [pc, #132]	; (8000f90 <Update_check_Value+0x150>)
 8000f0a:	781a      	ldrb	r2, [r3, #0]
 8000f0c:	4b23      	ldr	r3, [pc, #140]	; (8000f9c <Update_check_Value+0x15c>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d003      	beq.n	8000f1c <Update_check_Value+0xdc>
			flag=1;  //request again
 8000f14:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <Update_check_Value+0x160>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	701a      	strb	r2, [r3, #0]
			}
		}


	}
}
 8000f1a:	e032      	b.n	8000f82 <Update_check_Value+0x142>
			realhumidity=humidity/10.0;
 8000f1c:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <Update_check_Value+0x158>)
 8000f1e:	881b      	ldrh	r3, [r3, #0]
 8000f20:	ee07 3a90 	vmov	s15, r3
 8000f24:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f28:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8000f2c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f30:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f34:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <Update_check_Value+0x164>)
 8000f36:	edc3 7a00 	vstr	s15, [r3]
			if(temp>0b1000000000000000){
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <Update_check_Value+0x154>)
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f42:	d90f      	bls.n	8000f64 <Update_check_Value+0x124>
				realtemp=temp/(-10.00);
 8000f44:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <Update_check_Value+0x154>)
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	ee07 3a90 	vmov	s15, r3
 8000f4c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f50:	eeba 5b04 	vmov.f64	d5, #164	; 0xc1200000 -10.0
 8000f54:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f58:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <Update_check_Value+0x168>)
 8000f5e:	edc3 7a00 	vstr	s15, [r3]
}
 8000f62:	e00e      	b.n	8000f82 <Update_check_Value+0x142>
				realtemp=temp/(10.00);
 8000f64:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <Update_check_Value+0x154>)
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	ee07 3a90 	vmov	s15, r3
 8000f6c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f70:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8000f74:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f78:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <Update_check_Value+0x168>)
 8000f7e:	edc3 7a00 	vstr	s15, [r3]
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bcb0      	pop	{r4, r5, r7}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	240000f8 	.word	0x240000f8
 8000f90:	2400011e 	.word	0x2400011e
 8000f94:	2400011c 	.word	0x2400011c
 8000f98:	2400011a 	.word	0x2400011a
 8000f9c:	2400011f 	.word	0x2400011f
 8000fa0:	240000f4 	.word	0x240000f4
 8000fa4:	24000124 	.word	0x24000124
 8000fa8:	24000120 	.word	0x24000120

08000fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb0:	b672      	cpsid	i
}
 8000fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <Error_Handler+0x8>
	...

08000fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <HAL_MspInit+0x30>)
 8000fc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fc4:	4a08      	ldr	r2, [pc, #32]	; (8000fe8 <HAL_MspInit+0x30>)
 8000fc6:	f043 0302 	orr.w	r3, r3, #2
 8000fca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_MspInit+0x30>)
 8000fd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	58024400 	.word	0x58024400

08000fec <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08e      	sub	sp, #56	; 0x38
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a59      	ldr	r2, [pc, #356]	; (8001170 <HAL_ETH_MspInit+0x184>)
 800100a:	4293      	cmp	r3, r2
 800100c:	f040 80ab 	bne.w	8001166 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001010:	4b58      	ldr	r3, [pc, #352]	; (8001174 <HAL_ETH_MspInit+0x188>)
 8001012:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001016:	4a57      	ldr	r2, [pc, #348]	; (8001174 <HAL_ETH_MspInit+0x188>)
 8001018:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800101c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001020:	4b54      	ldr	r3, [pc, #336]	; (8001174 <HAL_ETH_MspInit+0x188>)
 8001022:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001026:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800102a:	623b      	str	r3, [r7, #32]
 800102c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800102e:	4b51      	ldr	r3, [pc, #324]	; (8001174 <HAL_ETH_MspInit+0x188>)
 8001030:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001034:	4a4f      	ldr	r2, [pc, #316]	; (8001174 <HAL_ETH_MspInit+0x188>)
 8001036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800103a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800103e:	4b4d      	ldr	r3, [pc, #308]	; (8001174 <HAL_ETH_MspInit+0x188>)
 8001040:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001048:	61fb      	str	r3, [r7, #28]
 800104a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800104c:	4b49      	ldr	r3, [pc, #292]	; (8001174 <HAL_ETH_MspInit+0x188>)
 800104e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001052:	4a48      	ldr	r2, [pc, #288]	; (8001174 <HAL_ETH_MspInit+0x188>)
 8001054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001058:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800105c:	4b45      	ldr	r3, [pc, #276]	; (8001174 <HAL_ETH_MspInit+0x188>)
 800105e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001066:	61bb      	str	r3, [r7, #24]
 8001068:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800106a:	4b42      	ldr	r3, [pc, #264]	; (8001174 <HAL_ETH_MspInit+0x188>)
 800106c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001070:	4a40      	ldr	r2, [pc, #256]	; (8001174 <HAL_ETH_MspInit+0x188>)
 8001072:	f043 0304 	orr.w	r3, r3, #4
 8001076:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800107a:	4b3e      	ldr	r3, [pc, #248]	; (8001174 <HAL_ETH_MspInit+0x188>)
 800107c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	617b      	str	r3, [r7, #20]
 8001086:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	4b3a      	ldr	r3, [pc, #232]	; (8001174 <HAL_ETH_MspInit+0x188>)
 800108a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108e:	4a39      	ldr	r2, [pc, #228]	; (8001174 <HAL_ETH_MspInit+0x188>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001098:	4b36      	ldr	r3, [pc, #216]	; (8001174 <HAL_ETH_MspInit+0x188>)
 800109a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a6:	4b33      	ldr	r3, [pc, #204]	; (8001174 <HAL_ETH_MspInit+0x188>)
 80010a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ac:	4a31      	ldr	r2, [pc, #196]	; (8001174 <HAL_ETH_MspInit+0x188>)
 80010ae:	f043 0302 	orr.w	r3, r3, #2
 80010b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b6:	4b2f      	ldr	r3, [pc, #188]	; (8001174 <HAL_ETH_MspInit+0x188>)
 80010b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010c4:	4b2b      	ldr	r3, [pc, #172]	; (8001174 <HAL_ETH_MspInit+0x188>)
 80010c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ca:	4a2a      	ldr	r2, [pc, #168]	; (8001174 <HAL_ETH_MspInit+0x188>)
 80010cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010d4:	4b27      	ldr	r3, [pc, #156]	; (8001174 <HAL_ETH_MspInit+0x188>)
 80010d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80010e2:	2332      	movs	r3, #50	; 0x32
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010f2:	230b      	movs	r3, #11
 80010f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fa:	4619      	mov	r1, r3
 80010fc:	481e      	ldr	r0, [pc, #120]	; (8001178 <HAL_ETH_MspInit+0x18c>)
 80010fe:	f000 ffdf 	bl	80020c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001102:	2386      	movs	r3, #134	; 0x86
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001112:	230b      	movs	r3, #11
 8001114:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111a:	4619      	mov	r1, r3
 800111c:	4817      	ldr	r0, [pc, #92]	; (800117c <HAL_ETH_MspInit+0x190>)
 800111e:	f000 ffcf 	bl	80020c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001122:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001134:	230b      	movs	r3, #11
 8001136:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113c:	4619      	mov	r1, r3
 800113e:	4810      	ldr	r0, [pc, #64]	; (8001180 <HAL_ETH_MspInit+0x194>)
 8001140:	f000 ffbe 	bl	80020c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001144:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001156:	230b      	movs	r3, #11
 8001158:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800115a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115e:	4619      	mov	r1, r3
 8001160:	4808      	ldr	r0, [pc, #32]	; (8001184 <HAL_ETH_MspInit+0x198>)
 8001162:	f000 ffad 	bl	80020c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001166:	bf00      	nop
 8001168:	3738      	adds	r7, #56	; 0x38
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40028000 	.word	0x40028000
 8001174:	58024400 	.word	0x58024400
 8001178:	58020800 	.word	0x58020800
 800117c:	58020000 	.word	0x58020000
 8001180:	58020400 	.word	0x58020400
 8001184:	58021800 	.word	0x58021800

08001188 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a1d      	ldr	r2, [pc, #116]	; (800120c <HAL_TIM_Base_MspInit+0x84>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d117      	bne.n	80011ca <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800119a:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <HAL_TIM_Base_MspInit+0x88>)
 800119c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011a0:	4a1b      	ldr	r2, [pc, #108]	; (8001210 <HAL_TIM_Base_MspInit+0x88>)
 80011a2:	f043 0302 	orr.w	r3, r3, #2
 80011a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011aa:	4b19      	ldr	r3, [pc, #100]	; (8001210 <HAL_TIM_Base_MspInit+0x88>)
 80011ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2100      	movs	r1, #0
 80011bc:	201d      	movs	r0, #29
 80011be:	f000 fb34 	bl	800182a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011c2:	201d      	movs	r0, #29
 80011c4:	f000 fb4b 	bl	800185e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80011c8:	e01b      	b.n	8001202 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM5)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a11      	ldr	r2, [pc, #68]	; (8001214 <HAL_TIM_Base_MspInit+0x8c>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d116      	bne.n	8001202 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80011d4:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <HAL_TIM_Base_MspInit+0x88>)
 80011d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011da:	4a0d      	ldr	r2, [pc, #52]	; (8001210 <HAL_TIM_Base_MspInit+0x88>)
 80011dc:	f043 0308 	orr.w	r3, r3, #8
 80011e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011e4:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <HAL_TIM_Base_MspInit+0x88>)
 80011e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	2032      	movs	r0, #50	; 0x32
 80011f8:	f000 fb17 	bl	800182a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80011fc:	2032      	movs	r0, #50	; 0x32
 80011fe:	f000 fb2e 	bl	800185e <HAL_NVIC_EnableIRQ>
}
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40000400 	.word	0x40000400
 8001210:	58024400 	.word	0x58024400
 8001214:	40000c00 	.word	0x40000c00

08001218 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b0b8      	sub	sp, #224	; 0xe0
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	22bc      	movs	r2, #188	; 0xbc
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f005 fea1 	bl	8006f80 <memset>
  if(huart->Instance==USART3)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a25      	ldr	r2, [pc, #148]	; (80012d8 <HAL_UART_MspInit+0xc0>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d142      	bne.n	80012ce <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001248:	2302      	movs	r3, #2
 800124a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800124c:	2300      	movs	r3, #0
 800124e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001252:	f107 0310 	add.w	r3, r7, #16
 8001256:	4618      	mov	r0, r3
 8001258:	f002 faac 	bl	80037b4 <HAL_RCCEx_PeriphCLKConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001262:	f7ff fea3 	bl	8000fac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001266:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <HAL_UART_MspInit+0xc4>)
 8001268:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800126c:	4a1b      	ldr	r2, [pc, #108]	; (80012dc <HAL_UART_MspInit+0xc4>)
 800126e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001272:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <HAL_UART_MspInit+0xc4>)
 8001278:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800127c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <HAL_UART_MspInit+0xc4>)
 8001286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128a:	4a14      	ldr	r2, [pc, #80]	; (80012dc <HAL_UART_MspInit+0xc4>)
 800128c:	f043 0308 	orr.w	r3, r3, #8
 8001290:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <HAL_UART_MspInit+0xc4>)
 8001296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80012a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012bc:	2307      	movs	r3, #7
 80012be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012c2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012c6:	4619      	mov	r1, r3
 80012c8:	4805      	ldr	r0, [pc, #20]	; (80012e0 <HAL_UART_MspInit+0xc8>)
 80012ca:	f000 fef9 	bl	80020c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012ce:	bf00      	nop
 80012d0:	37e0      	adds	r7, #224	; 0xe0
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40004800 	.word	0x40004800
 80012dc:	58024400 	.word	0x58024400
 80012e0:	58020c00 	.word	0x58020c00

080012e4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b0b8      	sub	sp, #224	; 0xe0
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	22bc      	movs	r2, #188	; 0xbc
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f005 fe3b 	bl	8006f80 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a37      	ldr	r2, [pc, #220]	; (80013ec <HAL_PCD_MspInit+0x108>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d166      	bne.n	80013e2 <HAL_PCD_MspInit+0xfe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001314:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001318:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800131a:	2301      	movs	r3, #1
 800131c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 800131e:	2312      	movs	r3, #18
 8001320:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001322:	2302      	movs	r3, #2
 8001324:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001326:	2303      	movs	r3, #3
 8001328:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800132a:	2302      	movs	r3, #2
 800132c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800132e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001332:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8001334:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001338:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800133a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800133e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001342:	f107 0310 	add.w	r3, r7, #16
 8001346:	4618      	mov	r0, r3
 8001348:	f002 fa34 	bl	80037b4 <HAL_RCCEx_PeriphCLKConfig>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8001352:	f7ff fe2b 	bl	8000fac <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001356:	f001 fa65 	bl	8002824 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135a:	4b25      	ldr	r3, [pc, #148]	; (80013f0 <HAL_PCD_MspInit+0x10c>)
 800135c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001360:	4a23      	ldr	r2, [pc, #140]	; (80013f0 <HAL_PCD_MspInit+0x10c>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800136a:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <HAL_PCD_MspInit+0x10c>)
 800136c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001378:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800137c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	2300      	movs	r3, #0
 800138e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001392:	230a      	movs	r3, #10
 8001394:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001398:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800139c:	4619      	mov	r1, r3
 800139e:	4815      	ldr	r0, [pc, #84]	; (80013f4 <HAL_PCD_MspInit+0x110>)
 80013a0:	f000 fe8e 	bl	80020c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ac:	2300      	movs	r3, #0
 80013ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013bc:	4619      	mov	r1, r3
 80013be:	480d      	ldr	r0, [pc, #52]	; (80013f4 <HAL_PCD_MspInit+0x110>)
 80013c0:	f000 fe7e 	bl	80020c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80013c4:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <HAL_PCD_MspInit+0x10c>)
 80013c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013ca:	4a09      	ldr	r2, [pc, #36]	; (80013f0 <HAL_PCD_MspInit+0x10c>)
 80013cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80013d0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_PCD_MspInit+0x10c>)
 80013d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80013e2:	bf00      	nop
 80013e4:	37e0      	adds	r7, #224	; 0xe0
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40080000 	.word	0x40080000
 80013f0:	58024400 	.word	0x58024400
 80013f4:	58020000 	.word	0x58020000

080013f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <NMI_Handler+0x4>

080013fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001402:	e7fe      	b.n	8001402 <HardFault_Handler+0x4>

08001404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <MemManage_Handler+0x4>

0800140a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140e:	e7fe      	b.n	800140e <BusFault_Handler+0x4>

08001410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <UsageFault_Handler+0x4>

08001416 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001444:	f000 f8b2 	bl	80015ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}

0800144c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <TIM3_IRQHandler+0x10>)
 8001452:	f003 fde1 	bl	8005018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	24000614 	.word	0x24000614

08001460 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <TIM5_IRQHandler+0x10>)
 8001466:	f003 fdd7 	bl	8005018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	240005c8 	.word	0x240005c8

08001474 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001474:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001478:	f7ff f8aa 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800147c:	480c      	ldr	r0, [pc, #48]	; (80014b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800147e:	490d      	ldr	r1, [pc, #52]	; (80014b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001480:	4a0d      	ldr	r2, [pc, #52]	; (80014b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001484:	e002      	b.n	800148c <LoopCopyDataInit>

08001486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148a:	3304      	adds	r3, #4

0800148c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800148c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001490:	d3f9      	bcc.n	8001486 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001492:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001494:	4c0a      	ldr	r4, [pc, #40]	; (80014c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001498:	e001      	b.n	800149e <LoopFillZerobss>

0800149a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800149c:	3204      	adds	r2, #4

0800149e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a0:	d3fb      	bcc.n	800149a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014a2:	f005 fd49 	bl	8006f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014a6:	f7ff f92d 	bl	8000704 <main>
  bx  lr
 80014aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014ac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80014b0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014b4:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80014b8:	08006ff0 	.word	0x08006ff0
  ldr r2, =_sbss
 80014bc:	240000d8 	.word	0x240000d8
  ldr r4, =_ebss
 80014c0:	24000720 	.word	0x24000720

080014c4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014c4:	e7fe      	b.n	80014c4 <ADC3_IRQHandler>
	...

080014c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ce:	2003      	movs	r0, #3
 80014d0:	f000 f9a0 	bl	8001814 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014d4:	f001 ff98 	bl	8003408 <HAL_RCC_GetSysClockFreq>
 80014d8:	4602      	mov	r2, r0
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <HAL_Init+0x68>)
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	0a1b      	lsrs	r3, r3, #8
 80014e0:	f003 030f 	and.w	r3, r3, #15
 80014e4:	4913      	ldr	r1, [pc, #76]	; (8001534 <HAL_Init+0x6c>)
 80014e6:	5ccb      	ldrb	r3, [r1, r3]
 80014e8:	f003 031f 	and.w	r3, r3, #31
 80014ec:	fa22 f303 	lsr.w	r3, r2, r3
 80014f0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014f2:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <HAL_Init+0x68>)
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	4a0e      	ldr	r2, [pc, #56]	; (8001534 <HAL_Init+0x6c>)
 80014fc:	5cd3      	ldrb	r3, [r2, r3]
 80014fe:	f003 031f 	and.w	r3, r3, #31
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	fa22 f303 	lsr.w	r3, r2, r3
 8001508:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <HAL_Init+0x70>)
 800150a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800150c:	4a0b      	ldr	r2, [pc, #44]	; (800153c <HAL_Init+0x74>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001512:	2000      	movs	r0, #0
 8001514:	f000 f814 	bl	8001540 <HAL_InitTick>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e002      	b.n	8001528 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001522:	f7ff fd49 	bl	8000fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	58024400 	.word	0x58024400
 8001534:	08006fa8 	.word	0x08006fa8
 8001538:	24000004 	.word	0x24000004
 800153c:	24000000 	.word	0x24000000

08001540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_InitTick+0x60>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d101      	bne.n	8001554 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e021      	b.n	8001598 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001554:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <HAL_InitTick+0x64>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <HAL_InitTick+0x60>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4619      	mov	r1, r3
 800155e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001562:	fbb3 f3f1 	udiv	r3, r3, r1
 8001566:	fbb2 f3f3 	udiv	r3, r2, r3
 800156a:	4618      	mov	r0, r3
 800156c:	f000 f985 	bl	800187a <HAL_SYSTICK_Config>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e00e      	b.n	8001598 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b0f      	cmp	r3, #15
 800157e:	d80a      	bhi.n	8001596 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001580:	2200      	movs	r2, #0
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	f000 f94f 	bl	800182a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800158c:	4a06      	ldr	r2, [pc, #24]	; (80015a8 <HAL_InitTick+0x68>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
 8001594:	e000      	b.n	8001598 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	24000010 	.word	0x24000010
 80015a4:	24000000 	.word	0x24000000
 80015a8:	2400000c 	.word	0x2400000c

080015ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_IncTick+0x20>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_IncTick+0x24>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <HAL_IncTick+0x24>)
 80015be:	6013      	str	r3, [r2, #0]
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	24000010 	.word	0x24000010
 80015d0:	2400071c 	.word	0x2400071c

080015d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return uwTick;
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <HAL_GetTick+0x14>)
 80015da:	681b      	ldr	r3, [r3, #0]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	2400071c 	.word	0x2400071c

080015ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f4:	f7ff ffee 	bl	80015d4 <HAL_GetTick>
 80015f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001604:	d005      	beq.n	8001612 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <HAL_Delay+0x44>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4413      	add	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001612:	bf00      	nop
 8001614:	f7ff ffde 	bl	80015d4 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	429a      	cmp	r2, r3
 8001622:	d8f7      	bhi.n	8001614 <HAL_Delay+0x28>
  {
  }
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	24000010 	.word	0x24000010

08001634 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001638:	4b03      	ldr	r3, [pc, #12]	; (8001648 <HAL_GetREVID+0x14>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	0c1b      	lsrs	r3, r3, #16
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	5c001000 	.word	0x5c001000

0800164c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800165c:	4904      	ldr	r1, [pc, #16]	; (8001670 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4313      	orrs	r3, r2
 8001662:	604b      	str	r3, [r1, #4]
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	58000400 	.word	0x58000400

08001674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001684:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <__NVIC_SetPriorityGrouping+0x40>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001690:	4013      	ands	r3, r2
 8001692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a2:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <__NVIC_SetPriorityGrouping+0x40>)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	60d3      	str	r3, [r2, #12]
}
 80016a8:	bf00      	nop
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000ed00 	.word	0xe000ed00
 80016b8:	05fa0000 	.word	0x05fa0000

080016bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <__NVIC_GetPriorityGrouping+0x18>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	0a1b      	lsrs	r3, r3, #8
 80016c6:	f003 0307 	and.w	r3, r3, #7
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	db0b      	blt.n	8001702 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ea:	88fb      	ldrh	r3, [r7, #6]
 80016ec:	f003 021f 	and.w	r2, r3, #31
 80016f0:	4907      	ldr	r1, [pc, #28]	; (8001710 <__NVIC_EnableIRQ+0x38>)
 80016f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016f6:	095b      	lsrs	r3, r3, #5
 80016f8:	2001      	movs	r0, #1
 80016fa:	fa00 f202 	lsl.w	r2, r0, r2
 80016fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000e100 	.word	0xe000e100

08001714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	6039      	str	r1, [r7, #0]
 800171e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001720:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001724:	2b00      	cmp	r3, #0
 8001726:	db0a      	blt.n	800173e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	b2da      	uxtb	r2, r3
 800172c:	490c      	ldr	r1, [pc, #48]	; (8001760 <__NVIC_SetPriority+0x4c>)
 800172e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001732:	0112      	lsls	r2, r2, #4
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	440b      	add	r3, r1
 8001738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800173c:	e00a      	b.n	8001754 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4908      	ldr	r1, [pc, #32]	; (8001764 <__NVIC_SetPriority+0x50>)
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	3b04      	subs	r3, #4
 800174c:	0112      	lsls	r2, r2, #4
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	440b      	add	r3, r1
 8001752:	761a      	strb	r2, [r3, #24]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000e100 	.word	0xe000e100
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001768:	b480      	push	{r7}
 800176a:	b089      	sub	sp, #36	; 0x24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f1c3 0307 	rsb	r3, r3, #7
 8001782:	2b04      	cmp	r3, #4
 8001784:	bf28      	it	cs
 8001786:	2304      	movcs	r3, #4
 8001788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3304      	adds	r3, #4
 800178e:	2b06      	cmp	r3, #6
 8001790:	d902      	bls.n	8001798 <NVIC_EncodePriority+0x30>
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3b03      	subs	r3, #3
 8001796:	e000      	b.n	800179a <NVIC_EncodePriority+0x32>
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	f04f 32ff 	mov.w	r2, #4294967295
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43da      	mvns	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	401a      	ands	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b0:	f04f 31ff 	mov.w	r1, #4294967295
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ba:	43d9      	mvns	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	4313      	orrs	r3, r2
         );
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3724      	adds	r7, #36	; 0x24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
	...

080017d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e0:	d301      	bcc.n	80017e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00f      	b.n	8001806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <SysTick_Config+0x40>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ee:	210f      	movs	r1, #15
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f7ff ff8e 	bl	8001714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <SysTick_Config+0x40>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <SysTick_Config+0x40>)
 8001800:	2207      	movs	r2, #7
 8001802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	e000e010 	.word	0xe000e010

08001814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff29 	bl	8001674 <__NVIC_SetPriorityGrouping>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001838:	f7ff ff40 	bl	80016bc <__NVIC_GetPriorityGrouping>
 800183c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	68b9      	ldr	r1, [r7, #8]
 8001842:	6978      	ldr	r0, [r7, #20]
 8001844:	f7ff ff90 	bl	8001768 <NVIC_EncodePriority>
 8001848:	4602      	mov	r2, r0
 800184a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff5f 	bl	8001714 <__NVIC_SetPriority>
}
 8001856:	bf00      	nop
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	4603      	mov	r3, r0
 8001866:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001868:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff33 	bl	80016d8 <__NVIC_EnableIRQ>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff ffa4 	bl	80017d0 <SysTick_Config>
 8001888:	4603      	mov	r3, r0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e0c6      	b.n	8001a34 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d102      	bne.n	80018b4 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff fb9c 	bl	8000fec <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2223      	movs	r2, #35	; 0x23
 80018b8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ba:	4b60      	ldr	r3, [pc, #384]	; (8001a3c <HAL_ETH_Init+0x1a8>)
 80018bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018c0:	4a5e      	ldr	r2, [pc, #376]	; (8001a3c <HAL_ETH_Init+0x1a8>)
 80018c2:	f043 0302 	orr.w	r3, r3, #2
 80018c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80018ca:	4b5c      	ldr	r3, [pc, #368]	; (8001a3c <HAL_ETH_Init+0x1a8>)
 80018cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	7a1b      	ldrb	r3, [r3, #8]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d103      	bne.n	80018e8 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80018e0:	2000      	movs	r0, #0
 80018e2:	f7ff feb3 	bl	800164c <HAL_SYSCFG_ETHInterfaceSelect>
 80018e6:	e003      	b.n	80018f0 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80018e8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80018ec:	f7ff feae 	bl	800164c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 0201 	orr.w	r2, r2, #1
 8001902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001906:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001908:	f7ff fe64 	bl	80015d4 <HAL_GetTick>
 800190c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800190e:	e00f      	b.n	8001930 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001910:	f7ff fe60 	bl	80015d4 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800191e:	d907      	bls.n	8001930 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2204      	movs	r2, #4
 8001924:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	22e0      	movs	r2, #224	; 0xe0
 800192a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e081      	b.n	8001a34 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1e6      	bne.n	8001910 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 fac0 	bl	8001ec8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001948:	f001 fed8 	bl	80036fc <HAL_RCC_GetHCLKFreq>
 800194c:	4603      	mov	r3, r0
 800194e:	4a3c      	ldr	r2, [pc, #240]	; (8001a40 <HAL_ETH_Init+0x1ac>)
 8001950:	fba2 2303 	umull	r2, r3, r2, r3
 8001954:	0c9a      	lsrs	r2, r3, #18
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	3a01      	subs	r2, #1
 800195c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 fa13 	bl	8001d8c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800197c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001980:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d007      	beq.n	800199e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	22e0      	movs	r2, #224	; 0xe0
 8001998:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e04a      	b.n	8001a34 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	f241 1308 	movw	r3, #4360	; 0x1108
 80019a6:	4413      	add	r3, r2
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	4b26      	ldr	r3, [pc, #152]	; (8001a44 <HAL_ETH_Init+0x1b0>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6952      	ldr	r2, [r2, #20]
 80019b2:	0052      	lsls	r2, r2, #1
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	6809      	ldr	r1, [r1, #0]
 80019b8:	431a      	orrs	r2, r3
 80019ba:	f241 1308 	movw	r3, #4360	; 0x1108
 80019be:	440b      	add	r3, r1
 80019c0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 fad8 	bl	8001f78 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 fb1c 	bl	8002006 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	3305      	adds	r3, #5
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	021a      	lsls	r2, r3, #8
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	3304      	adds	r3, #4
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	4619      	mov	r1, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	3303      	adds	r3, #3
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	061a      	lsls	r2, r3, #24
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	3302      	adds	r3, #2
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	041b      	lsls	r3, r3, #16
 8001a00:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	3301      	adds	r3, #1
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a0c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a1a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a1c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2210      	movs	r2, #16
 8001a2a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2210      	movs	r2, #16
 8001a30:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	58024400 	.word	0x58024400
 8001a40:	431bde83 	.word	0x431bde83
 8001a44:	ffff8001 	.word	0xffff8001

08001a48 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001a5a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	791b      	ldrb	r3, [r3, #4]
 8001a60:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001a62:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	7b1b      	ldrb	r3, [r3, #12]
 8001a68:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001a6a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	7b5b      	ldrb	r3, [r3, #13]
 8001a70:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001a72:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	7b9b      	ldrb	r3, [r3, #14]
 8001a78:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001a7a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	7bdb      	ldrb	r3, [r3, #15]
 8001a80:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001a82:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	7c12      	ldrb	r2, [r2, #16]
 8001a88:	2a00      	cmp	r2, #0
 8001a8a:	d102      	bne.n	8001a92 <ETH_SetMACConfig+0x4a>
 8001a8c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a90:	e000      	b.n	8001a94 <ETH_SetMACConfig+0x4c>
 8001a92:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001a94:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	7c52      	ldrb	r2, [r2, #17]
 8001a9a:	2a00      	cmp	r2, #0
 8001a9c:	d102      	bne.n	8001aa4 <ETH_SetMACConfig+0x5c>
 8001a9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001aa2:	e000      	b.n	8001aa6 <ETH_SetMACConfig+0x5e>
 8001aa4:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001aa6:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	7c9b      	ldrb	r3, [r3, #18]
 8001aac:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001aae:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001ab4:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001aba:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	7f1b      	ldrb	r3, [r3, #28]
 8001ac0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001ac2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	7f5b      	ldrb	r3, [r3, #29]
 8001ac8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001aca:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	7f92      	ldrb	r2, [r2, #30]
 8001ad0:	2a00      	cmp	r2, #0
 8001ad2:	d102      	bne.n	8001ada <ETH_SetMACConfig+0x92>
 8001ad4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ad8:	e000      	b.n	8001adc <ETH_SetMACConfig+0x94>
 8001ada:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001adc:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	7fdb      	ldrb	r3, [r3, #31]
 8001ae2:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001ae4:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001aec:	2a00      	cmp	r2, #0
 8001aee:	d102      	bne.n	8001af6 <ETH_SetMACConfig+0xae>
 8001af0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001af4:	e000      	b.n	8001af8 <ETH_SetMACConfig+0xb0>
 8001af6:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001af8:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001afe:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b06:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001b08:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b56      	ldr	r3, [pc, #344]	; (8001c74 <ETH_SetMACConfig+0x22c>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6812      	ldr	r2, [r2, #0]
 8001b20:	68f9      	ldr	r1, [r7, #12]
 8001b22:	430b      	orrs	r3, r1
 8001b24:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b2a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b32:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001b34:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b3c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001b3e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001b46:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001b48:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001b50:	2a00      	cmp	r2, #0
 8001b52:	d102      	bne.n	8001b5a <ETH_SetMACConfig+0x112>
 8001b54:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b58:	e000      	b.n	8001b5c <ETH_SetMACConfig+0x114>
 8001b5a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001b5c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001b62:	4313      	orrs	r3, r2
 8001b64:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	4b42      	ldr	r3, [pc, #264]	; (8001c78 <ETH_SetMACConfig+0x230>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6812      	ldr	r2, [r2, #0]
 8001b74:	68f9      	ldr	r1, [r7, #12]
 8001b76:	430b      	orrs	r3, r1
 8001b78:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b80:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001b86:	4313      	orrs	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68da      	ldr	r2, [r3, #12]
 8001b90:	4b3a      	ldr	r3, [pc, #232]	; (8001c7c <ETH_SetMACConfig+0x234>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	68f9      	ldr	r1, [r7, #12]
 8001b9a:	430b      	orrs	r3, r1
 8001b9c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001ba4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001baa:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001bb2:	2a00      	cmp	r2, #0
 8001bb4:	d101      	bne.n	8001bba <ETH_SetMACConfig+0x172>
 8001bb6:	2280      	movs	r2, #128	; 0x80
 8001bb8:	e000      	b.n	8001bbc <ETH_SetMACConfig+0x174>
 8001bba:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001bbc:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bc2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001bce:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	68f9      	ldr	r1, [r7, #12]
 8001bda:	430b      	orrs	r3, r1
 8001bdc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001be4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001bec:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bfa:	f023 0103 	bic.w	r1, r3, #3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001c12:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001c2e:	2a00      	cmp	r2, #0
 8001c30:	d101      	bne.n	8001c36 <ETH_SetMACConfig+0x1ee>
 8001c32:	2240      	movs	r2, #64	; 0x40
 8001c34:	e000      	b.n	8001c38 <ETH_SetMACConfig+0x1f0>
 8001c36:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001c38:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001c40:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001c42:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001c4a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001c58:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001c68:	bf00      	nop
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	00048083 	.word	0x00048083
 8001c78:	c0f88000 	.word	0xc0f88000
 8001c7c:	fffffef0 	.word	0xfffffef0

08001c80 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4b38      	ldr	r3, [pc, #224]	; (8001d78 <ETH_SetDMAConfig+0xf8>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	6812      	ldr	r2, [r2, #0]
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	6809      	ldr	r1, [r1, #0]
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001ca6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	791b      	ldrb	r3, [r3, #4]
 8001cac:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001cb2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	7b1b      	ldrb	r3, [r3, #12]
 8001cb8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	f241 0304 	movw	r3, #4100	; 0x1004
 8001cc6:	4413      	add	r3, r2
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	4b2c      	ldr	r3, [pc, #176]	; (8001d7c <ETH_SetDMAConfig+0xfc>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6811      	ldr	r1, [r2, #0]
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	f241 0304 	movw	r3, #4100	; 0x1004
 8001cda:	440b      	add	r3, r1
 8001cdc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	7b5b      	ldrb	r3, [r3, #13]
 8001ce2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	4b22      	ldr	r3, [pc, #136]	; (8001d80 <ETH_SetDMAConfig+0x100>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6811      	ldr	r1, [r2, #0]
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	431a      	orrs	r2, r3
 8001d02:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001d06:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	7d1b      	ldrb	r3, [r3, #20]
 8001d10:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d12:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	7f5b      	ldrb	r3, [r3, #29]
 8001d18:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	f241 1304 	movw	r3, #4356	; 0x1104
 8001d26:	4413      	add	r3, r2
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	4b16      	ldr	r3, [pc, #88]	; (8001d84 <ETH_SetDMAConfig+0x104>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6811      	ldr	r1, [r2, #0]
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	431a      	orrs	r2, r3
 8001d36:	f241 1304 	movw	r3, #4356	; 0x1104
 8001d3a:	440b      	add	r3, r1
 8001d3c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	7f1b      	ldrb	r3, [r3, #28]
 8001d42:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	f241 1308 	movw	r3, #4360	; 0x1108
 8001d54:	4413      	add	r3, r2
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <ETH_SetDMAConfig+0x108>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6811      	ldr	r1, [r2, #0]
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	431a      	orrs	r2, r3
 8001d64:	f241 1308 	movw	r3, #4360	; 0x1108
 8001d68:	440b      	add	r3, r1
 8001d6a:	601a      	str	r2, [r3, #0]
}
 8001d6c:	bf00      	nop
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	ffff87fd 	.word	0xffff87fd
 8001d7c:	ffff2ffe 	.word	0xffff2ffe
 8001d80:	fffec000 	.word	0xfffec000
 8001d84:	ffc0efef 	.word	0xffc0efef
 8001d88:	7fc0ffff 	.word	0x7fc0ffff

08001d8c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b0a4      	sub	sp, #144	; 0x90
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001d94:	2301      	movs	r3, #1
 8001d96:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001daa:	2301      	movs	r3, #1
 8001dac:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001db0:	2301      	movs	r3, #1
 8001db2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001db6:	2301      	movs	r3, #1
 8001db8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001dc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dcc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001de4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001de8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001dea:	2300      	movs	r3, #0
 8001dec:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001df0:	2300      	movs	r3, #0
 8001df2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001df4:	2301      	movs	r3, #1
 8001df6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001e00:	2300      	movs	r3, #0
 8001e02:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001e06:	2300      	movs	r3, #0
 8001e08:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001e12:	2300      	movs	r3, #0
 8001e14:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001e24:	2320      	movs	r3, #32
 8001e26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001e36:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001e3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e40:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001e60:	2301      	movs	r3, #1
 8001e62:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001e66:	2300      	movs	r3, #0
 8001e68:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001e70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e74:	4619      	mov	r1, r3
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff fde6 	bl	8001a48 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001e80:	2301      	movs	r3, #1
 8001e82:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001e96:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e9a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ea0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ea4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001eac:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001eb0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001eb2:	f107 0308 	add.w	r3, r7, #8
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff fee1 	bl	8001c80 <ETH_SetDMAConfig>
}
 8001ebe:	bf00      	nop
 8001ec0:	3790      	adds	r7, #144	; 0x90
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ee0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001ee2:	f001 fc0b 	bl	80036fc <HAL_RCC_GetHCLKFreq>
 8001ee6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	4a1e      	ldr	r2, [pc, #120]	; (8001f64 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d908      	bls.n	8001f02 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	4a1d      	ldr	r2, [pc, #116]	; (8001f68 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d804      	bhi.n	8001f02 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	e027      	b.n	8001f52 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	4a18      	ldr	r2, [pc, #96]	; (8001f68 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d908      	bls.n	8001f1c <ETH_MAC_MDIO_ClkConfig+0x54>
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	4a17      	ldr	r2, [pc, #92]	; (8001f6c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d204      	bcs.n	8001f1c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	e01a      	b.n	8001f52 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	4a13      	ldr	r2, [pc, #76]	; (8001f6c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d303      	bcc.n	8001f2c <ETH_MAC_MDIO_ClkConfig+0x64>
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	4a12      	ldr	r2, [pc, #72]	; (8001f70 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d911      	bls.n	8001f50 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	4a10      	ldr	r2, [pc, #64]	; (8001f70 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d908      	bls.n	8001f46 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	4a0f      	ldr	r2, [pc, #60]	; (8001f74 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d804      	bhi.n	8001f46 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	e005      	b.n	8001f52 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	e000      	b.n	8001f52 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001f50:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001f5c:	bf00      	nop
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	01312cff 	.word	0x01312cff
 8001f68:	02160ebf 	.word	0x02160ebf
 8001f6c:	03938700 	.word	0x03938700
 8001f70:	05f5e0ff 	.word	0x05f5e0ff
 8001f74:	08f0d17f 	.word	0x08f0d17f

08001f78 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f80:	2300      	movs	r3, #0
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	e01d      	b.n	8001fc2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68d9      	ldr	r1, [r3, #12]
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4413      	add	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	440b      	add	r3, r1
 8001f96:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	2200      	movs	r2, #0
 8001fae:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001fb0:	68b9      	ldr	r1, [r7, #8]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	3206      	adds	r2, #6
 8001fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	d9de      	bls.n	8001f86 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	f241 132c 	movw	r3, #4396	; 0x112c
 8001fd6:	4413      	add	r3, r2
 8001fd8:	2203      	movs	r2, #3
 8001fda:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68d9      	ldr	r1, [r3, #12]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	f241 1314 	movw	r3, #4372	; 0x1114
 8001fe8:	4413      	add	r3, r2
 8001fea:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68da      	ldr	r2, [r3, #12]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001ff8:	601a      	str	r2, [r3, #0]
}
 8001ffa:	bf00      	nop
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002006:	b480      	push	{r7}
 8002008:	b085      	sub	sp, #20
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	e024      	b.n	800205e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6919      	ldr	r1, [r3, #16]
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	4613      	mov	r3, r2
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	4413      	add	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	440b      	add	r3, r1
 8002024:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	2200      	movs	r2, #0
 8002030:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	2200      	movs	r2, #0
 800203c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	2200      	movs	r2, #0
 8002042:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	2200      	movs	r2, #0
 8002048:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	3310      	adds	r3, #16
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	3301      	adds	r3, #1
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2b03      	cmp	r3, #3
 8002062:	d9d7      	bls.n	8002014 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	f241 1330 	movw	r3, #4400	; 0x1130
 800208a:	4413      	add	r3, r2
 800208c:	2203      	movs	r2, #3
 800208e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6919      	ldr	r1, [r3, #16]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	f241 131c 	movw	r3, #4380	; 0x111c
 800209c:	4413      	add	r3, r2
 800209e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	f241 1328 	movw	r3, #4392	; 0x1128
 80020b0:	4413      	add	r3, r2
 80020b2:	6019      	str	r1, [r3, #0]
}
 80020b4:	bf00      	nop
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b089      	sub	sp, #36	; 0x24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80020ce:	4b89      	ldr	r3, [pc, #548]	; (80022f4 <HAL_GPIO_Init+0x234>)
 80020d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020d2:	e194      	b.n	80023fe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	2101      	movs	r1, #1
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	fa01 f303 	lsl.w	r3, r1, r3
 80020e0:	4013      	ands	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 8186 	beq.w	80023f8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d005      	beq.n	8002104 <HAL_GPIO_Init+0x44>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d130      	bne.n	8002166 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	2203      	movs	r2, #3
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	68da      	ldr	r2, [r3, #12]
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800213a:	2201      	movs	r2, #1
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4013      	ands	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	091b      	lsrs	r3, r3, #4
 8002150:	f003 0201 	and.w	r2, r3, #1
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	2b03      	cmp	r3, #3
 8002170:	d017      	beq.n	80021a2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	2203      	movs	r2, #3
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d123      	bne.n	80021f6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	08da      	lsrs	r2, r3, #3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3208      	adds	r2, #8
 80021b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	220f      	movs	r2, #15
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43db      	mvns	r3, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4013      	ands	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	691a      	ldr	r2, [r3, #16]
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	08da      	lsrs	r2, r3, #3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3208      	adds	r2, #8
 80021f0:	69b9      	ldr	r1, [r7, #24]
 80021f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	2203      	movs	r2, #3
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43db      	mvns	r3, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4013      	ands	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 0203 	and.w	r2, r3, #3
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 80e0 	beq.w	80023f8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002238:	4b2f      	ldr	r3, [pc, #188]	; (80022f8 <HAL_GPIO_Init+0x238>)
 800223a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800223e:	4a2e      	ldr	r2, [pc, #184]	; (80022f8 <HAL_GPIO_Init+0x238>)
 8002240:	f043 0302 	orr.w	r3, r3, #2
 8002244:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002248:	4b2b      	ldr	r3, [pc, #172]	; (80022f8 <HAL_GPIO_Init+0x238>)
 800224a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002256:	4a29      	ldr	r2, [pc, #164]	; (80022fc <HAL_GPIO_Init+0x23c>)
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	089b      	lsrs	r3, r3, #2
 800225c:	3302      	adds	r3, #2
 800225e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	220f      	movs	r2, #15
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43db      	mvns	r3, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4013      	ands	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a20      	ldr	r2, [pc, #128]	; (8002300 <HAL_GPIO_Init+0x240>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d052      	beq.n	8002328 <HAL_GPIO_Init+0x268>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a1f      	ldr	r2, [pc, #124]	; (8002304 <HAL_GPIO_Init+0x244>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d031      	beq.n	80022ee <HAL_GPIO_Init+0x22e>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a1e      	ldr	r2, [pc, #120]	; (8002308 <HAL_GPIO_Init+0x248>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d02b      	beq.n	80022ea <HAL_GPIO_Init+0x22a>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a1d      	ldr	r2, [pc, #116]	; (800230c <HAL_GPIO_Init+0x24c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d025      	beq.n	80022e6 <HAL_GPIO_Init+0x226>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a1c      	ldr	r2, [pc, #112]	; (8002310 <HAL_GPIO_Init+0x250>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d01f      	beq.n	80022e2 <HAL_GPIO_Init+0x222>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a1b      	ldr	r2, [pc, #108]	; (8002314 <HAL_GPIO_Init+0x254>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d019      	beq.n	80022de <HAL_GPIO_Init+0x21e>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a1a      	ldr	r2, [pc, #104]	; (8002318 <HAL_GPIO_Init+0x258>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d013      	beq.n	80022da <HAL_GPIO_Init+0x21a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a19      	ldr	r2, [pc, #100]	; (800231c <HAL_GPIO_Init+0x25c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d00d      	beq.n	80022d6 <HAL_GPIO_Init+0x216>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a18      	ldr	r2, [pc, #96]	; (8002320 <HAL_GPIO_Init+0x260>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d007      	beq.n	80022d2 <HAL_GPIO_Init+0x212>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a17      	ldr	r2, [pc, #92]	; (8002324 <HAL_GPIO_Init+0x264>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d101      	bne.n	80022ce <HAL_GPIO_Init+0x20e>
 80022ca:	2309      	movs	r3, #9
 80022cc:	e02d      	b.n	800232a <HAL_GPIO_Init+0x26a>
 80022ce:	230a      	movs	r3, #10
 80022d0:	e02b      	b.n	800232a <HAL_GPIO_Init+0x26a>
 80022d2:	2308      	movs	r3, #8
 80022d4:	e029      	b.n	800232a <HAL_GPIO_Init+0x26a>
 80022d6:	2307      	movs	r3, #7
 80022d8:	e027      	b.n	800232a <HAL_GPIO_Init+0x26a>
 80022da:	2306      	movs	r3, #6
 80022dc:	e025      	b.n	800232a <HAL_GPIO_Init+0x26a>
 80022de:	2305      	movs	r3, #5
 80022e0:	e023      	b.n	800232a <HAL_GPIO_Init+0x26a>
 80022e2:	2304      	movs	r3, #4
 80022e4:	e021      	b.n	800232a <HAL_GPIO_Init+0x26a>
 80022e6:	2303      	movs	r3, #3
 80022e8:	e01f      	b.n	800232a <HAL_GPIO_Init+0x26a>
 80022ea:	2302      	movs	r3, #2
 80022ec:	e01d      	b.n	800232a <HAL_GPIO_Init+0x26a>
 80022ee:	2301      	movs	r3, #1
 80022f0:	e01b      	b.n	800232a <HAL_GPIO_Init+0x26a>
 80022f2:	bf00      	nop
 80022f4:	58000080 	.word	0x58000080
 80022f8:	58024400 	.word	0x58024400
 80022fc:	58000400 	.word	0x58000400
 8002300:	58020000 	.word	0x58020000
 8002304:	58020400 	.word	0x58020400
 8002308:	58020800 	.word	0x58020800
 800230c:	58020c00 	.word	0x58020c00
 8002310:	58021000 	.word	0x58021000
 8002314:	58021400 	.word	0x58021400
 8002318:	58021800 	.word	0x58021800
 800231c:	58021c00 	.word	0x58021c00
 8002320:	58022000 	.word	0x58022000
 8002324:	58022400 	.word	0x58022400
 8002328:	2300      	movs	r3, #0
 800232a:	69fa      	ldr	r2, [r7, #28]
 800232c:	f002 0203 	and.w	r2, r2, #3
 8002330:	0092      	lsls	r2, r2, #2
 8002332:	4093      	lsls	r3, r2
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800233a:	4938      	ldr	r1, [pc, #224]	; (800241c <HAL_GPIO_Init+0x35c>)
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	089b      	lsrs	r3, r3, #2
 8002340:	3302      	adds	r3, #2
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800236e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800239c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	3301      	adds	r3, #1
 80023fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	fa22 f303 	lsr.w	r3, r2, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	f47f ae63 	bne.w	80020d4 <HAL_GPIO_Init+0x14>
  }
}
 800240e:	bf00      	nop
 8002410:	bf00      	nop
 8002412:	3724      	adds	r7, #36	; 0x24
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	58000400 	.word	0x58000400

08002420 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691a      	ldr	r2, [r3, #16]
 8002430:	887b      	ldrh	r3, [r7, #2]
 8002432:	4013      	ands	r3, r2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d002      	beq.n	800243e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
 800243c:	e001      	b.n	8002442 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800243e:	2300      	movs	r3, #0
 8002440:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002442:	7bfb      	ldrb	r3, [r7, #15]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	807b      	strh	r3, [r7, #2]
 800245c:	4613      	mov	r3, r2
 800245e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002460:	787b      	ldrb	r3, [r7, #1]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002466:	887a      	ldrh	r2, [r7, #2]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800246c:	e003      	b.n	8002476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800246e:	887b      	ldrh	r3, [r7, #2]
 8002470:	041a      	lsls	r2, r3, #16
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	619a      	str	r2, [r3, #24]
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
	...

08002484 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800248c:	4a08      	ldr	r2, [pc, #32]	; (80024b0 <HAL_HSEM_FastTake+0x2c>)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3320      	adds	r3, #32
 8002492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002496:	4a07      	ldr	r2, [pc, #28]	; (80024b4 <HAL_HSEM_FastTake+0x30>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d101      	bne.n	80024a0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800249c:	2300      	movs	r3, #0
 800249e:	e000      	b.n	80024a2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	58026400 	.word	0x58026400
 80024b4:	80000300 	.word	0x80000300

080024b8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80024c2:	4906      	ldr	r1, [pc, #24]	; (80024dc <HAL_HSEM_Release+0x24>)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	58026400 	.word	0x58026400

080024e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024e2:	b08f      	sub	sp, #60	; 0x3c
 80024e4:	af0a      	add	r7, sp, #40	; 0x28
 80024e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e116      	b.n	8002720 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d106      	bne.n	8002512 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7fe fee9 	bl	80012e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2203      	movs	r2, #3
 8002516:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002522:	2b00      	cmp	r3, #0
 8002524:	d102      	bne.n	800252c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f004 fa6b 	bl	8006a0c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	687e      	ldr	r6, [r7, #4]
 800253e:	466d      	mov	r5, sp
 8002540:	f106 0410 	add.w	r4, r6, #16
 8002544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002548:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800254a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800254c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002550:	e885 0003 	stmia.w	r5, {r0, r1}
 8002554:	1d33      	adds	r3, r6, #4
 8002556:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002558:	6838      	ldr	r0, [r7, #0]
 800255a:	f004 f9e9 	bl	8006930 <USB_CoreInit>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0d7      	b.n	8002720 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	f004 fa59 	bl	8006a2e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800257c:	2300      	movs	r3, #0
 800257e:	73fb      	strb	r3, [r7, #15]
 8002580:	e04a      	b.n	8002618 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002582:	7bfa      	ldrb	r2, [r7, #15]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	1a9b      	subs	r3, r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	333d      	adds	r3, #61	; 0x3d
 8002592:	2201      	movs	r2, #1
 8002594:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002596:	7bfa      	ldrb	r2, [r7, #15]
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	1a9b      	subs	r3, r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	440b      	add	r3, r1
 80025a4:	333c      	adds	r3, #60	; 0x3c
 80025a6:	7bfa      	ldrb	r2, [r7, #15]
 80025a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025aa:	7bfa      	ldrb	r2, [r7, #15]
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
 80025ae:	b298      	uxth	r0, r3
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	1a9b      	subs	r3, r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	440b      	add	r3, r1
 80025bc:	3342      	adds	r3, #66	; 0x42
 80025be:	4602      	mov	r2, r0
 80025c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025c2:	7bfa      	ldrb	r2, [r7, #15]
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	4613      	mov	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	1a9b      	subs	r3, r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	440b      	add	r3, r1
 80025d0:	333f      	adds	r3, #63	; 0x3f
 80025d2:	2200      	movs	r2, #0
 80025d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025d6:	7bfa      	ldrb	r2, [r7, #15]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	1a9b      	subs	r3, r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	440b      	add	r3, r1
 80025e4:	3344      	adds	r3, #68	; 0x44
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025ea:	7bfa      	ldrb	r2, [r7, #15]
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	1a9b      	subs	r3, r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	440b      	add	r3, r1
 80025f8:	3348      	adds	r3, #72	; 0x48
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025fe:	7bfa      	ldrb	r2, [r7, #15]
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	1a9b      	subs	r3, r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	3350      	adds	r3, #80	; 0x50
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002612:	7bfb      	ldrb	r3, [r7, #15]
 8002614:	3301      	adds	r3, #1
 8002616:	73fb      	strb	r3, [r7, #15]
 8002618:	7bfa      	ldrb	r2, [r7, #15]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	429a      	cmp	r2, r3
 8002620:	d3af      	bcc.n	8002582 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002622:	2300      	movs	r3, #0
 8002624:	73fb      	strb	r3, [r7, #15]
 8002626:	e044      	b.n	80026b2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002628:	7bfa      	ldrb	r2, [r7, #15]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800263a:	2200      	movs	r2, #0
 800263c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800263e:	7bfa      	ldrb	r2, [r7, #15]
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	4613      	mov	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	1a9b      	subs	r3, r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002650:	7bfa      	ldrb	r2, [r7, #15]
 8002652:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002654:	7bfa      	ldrb	r2, [r7, #15]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	1a9b      	subs	r3, r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002666:	2200      	movs	r2, #0
 8002668:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800266a:	7bfa      	ldrb	r2, [r7, #15]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	1a9b      	subs	r3, r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002680:	7bfa      	ldrb	r2, [r7, #15]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	1a9b      	subs	r3, r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002696:	7bfa      	ldrb	r2, [r7, #15]
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	1a9b      	subs	r3, r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	440b      	add	r3, r1
 80026a4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	3301      	adds	r3, #1
 80026b0:	73fb      	strb	r3, [r7, #15]
 80026b2:	7bfa      	ldrb	r2, [r7, #15]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d3b5      	bcc.n	8002628 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	603b      	str	r3, [r7, #0]
 80026c2:	687e      	ldr	r6, [r7, #4]
 80026c4:	466d      	mov	r5, sp
 80026c6:	f106 0410 	add.w	r4, r6, #16
 80026ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80026da:	1d33      	adds	r3, r6, #4
 80026dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026de:	6838      	ldr	r0, [r7, #0]
 80026e0:	f004 f9f2 	bl	8006ac8 <USB_DevInit>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d005      	beq.n	80026f6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2202      	movs	r2, #2
 80026ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e014      	b.n	8002720 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	2b01      	cmp	r3, #1
 800270c:	d102      	bne.n	8002714 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f80a 	bl	8002728 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f004 fbac 	bl	8006e76 <USB_DevDisconnect>

  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002728 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002756:	4b05      	ldr	r3, [pc, #20]	; (800276c <HAL_PCDEx_ActivateLPM+0x44>)
 8002758:	4313      	orrs	r3, r2
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	10000003 	.word	0x10000003

08002770 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002778:	4b29      	ldr	r3, [pc, #164]	; (8002820 <HAL_PWREx_ConfigSupply+0xb0>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	2b06      	cmp	r3, #6
 8002782:	d00a      	beq.n	800279a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002784:	4b26      	ldr	r3, [pc, #152]	; (8002820 <HAL_PWREx_ConfigSupply+0xb0>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	429a      	cmp	r2, r3
 8002790:	d001      	beq.n	8002796 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e040      	b.n	8002818 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	e03e      	b.n	8002818 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800279a:	4b21      	ldr	r3, [pc, #132]	; (8002820 <HAL_PWREx_ConfigSupply+0xb0>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80027a2:	491f      	ldr	r1, [pc, #124]	; (8002820 <HAL_PWREx_ConfigSupply+0xb0>)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80027aa:	f7fe ff13 	bl	80015d4 <HAL_GetTick>
 80027ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027b0:	e009      	b.n	80027c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80027b2:	f7fe ff0f 	bl	80015d4 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027c0:	d901      	bls.n	80027c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e028      	b.n	8002818 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027c6:	4b16      	ldr	r3, [pc, #88]	; (8002820 <HAL_PWREx_ConfigSupply+0xb0>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027d2:	d1ee      	bne.n	80027b2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b1e      	cmp	r3, #30
 80027d8:	d008      	beq.n	80027ec <HAL_PWREx_ConfigSupply+0x7c>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b2e      	cmp	r3, #46	; 0x2e
 80027de:	d005      	beq.n	80027ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b1d      	cmp	r3, #29
 80027e4:	d002      	beq.n	80027ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b2d      	cmp	r3, #45	; 0x2d
 80027ea:	d114      	bne.n	8002816 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80027ec:	f7fe fef2 	bl	80015d4 <HAL_GetTick>
 80027f0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80027f2:	e009      	b.n	8002808 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80027f4:	f7fe feee 	bl	80015d4 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002802:	d901      	bls.n	8002808 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e007      	b.n	8002818 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002808:	4b05      	ldr	r3, [pc, #20]	; (8002820 <HAL_PWREx_ConfigSupply+0xb0>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002814:	d1ee      	bne.n	80027f4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	58024800 	.word	0x58024800

08002824 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002828:	4b05      	ldr	r3, [pc, #20]	; (8002840 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4a04      	ldr	r2, [pc, #16]	; (8002840 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800282e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002832:	60d3      	str	r3, [r2, #12]
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	58024800 	.word	0x58024800

08002844 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08c      	sub	sp, #48	; 0x30
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d102      	bne.n	8002858 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	f000 bc1c 	b.w	8003090 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 8087 	beq.w	8002974 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002866:	4b9e      	ldr	r3, [pc, #632]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800286e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002870:	4b9b      	ldr	r3, [pc, #620]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 8002872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002874:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002878:	2b10      	cmp	r3, #16
 800287a:	d007      	beq.n	800288c <HAL_RCC_OscConfig+0x48>
 800287c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287e:	2b18      	cmp	r3, #24
 8002880:	d110      	bne.n	80028a4 <HAL_RCC_OscConfig+0x60>
 8002882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d10b      	bne.n	80028a4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288c:	4b94      	ldr	r3, [pc, #592]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d06c      	beq.n	8002972 <HAL_RCC_OscConfig+0x12e>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d168      	bne.n	8002972 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e3f5      	b.n	8003090 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ac:	d106      	bne.n	80028bc <HAL_RCC_OscConfig+0x78>
 80028ae:	4b8c      	ldr	r3, [pc, #560]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a8b      	ldr	r2, [pc, #556]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 80028b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	e02e      	b.n	800291a <HAL_RCC_OscConfig+0xd6>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10c      	bne.n	80028de <HAL_RCC_OscConfig+0x9a>
 80028c4:	4b86      	ldr	r3, [pc, #536]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a85      	ldr	r2, [pc, #532]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 80028ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ce:	6013      	str	r3, [r2, #0]
 80028d0:	4b83      	ldr	r3, [pc, #524]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a82      	ldr	r2, [pc, #520]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 80028d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	e01d      	b.n	800291a <HAL_RCC_OscConfig+0xd6>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028e6:	d10c      	bne.n	8002902 <HAL_RCC_OscConfig+0xbe>
 80028e8:	4b7d      	ldr	r3, [pc, #500]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a7c      	ldr	r2, [pc, #496]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 80028ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	4b7a      	ldr	r3, [pc, #488]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a79      	ldr	r2, [pc, #484]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 80028fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	e00b      	b.n	800291a <HAL_RCC_OscConfig+0xd6>
 8002902:	4b77      	ldr	r3, [pc, #476]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a76      	ldr	r2, [pc, #472]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 8002908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	4b74      	ldr	r3, [pc, #464]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a73      	ldr	r2, [pc, #460]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 8002914:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002918:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d013      	beq.n	800294a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002922:	f7fe fe57 	bl	80015d4 <HAL_GetTick>
 8002926:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800292a:	f7fe fe53 	bl	80015d4 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b64      	cmp	r3, #100	; 0x64
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e3a9      	b.n	8003090 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800293c:	4b68      	ldr	r3, [pc, #416]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0f0      	beq.n	800292a <HAL_RCC_OscConfig+0xe6>
 8002948:	e014      	b.n	8002974 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294a:	f7fe fe43 	bl	80015d4 <HAL_GetTick>
 800294e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002952:	f7fe fe3f 	bl	80015d4 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b64      	cmp	r3, #100	; 0x64
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e395      	b.n	8003090 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002964:	4b5e      	ldr	r3, [pc, #376]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1f0      	bne.n	8002952 <HAL_RCC_OscConfig+0x10e>
 8002970:	e000      	b.n	8002974 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002972:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 80ca 	beq.w	8002b16 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002982:	4b57      	ldr	r3, [pc, #348]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800298a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800298c:	4b54      	ldr	r3, [pc, #336]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 800298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002990:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d007      	beq.n	80029a8 <HAL_RCC_OscConfig+0x164>
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	2b18      	cmp	r3, #24
 800299c:	d156      	bne.n	8002a4c <HAL_RCC_OscConfig+0x208>
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d151      	bne.n	8002a4c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029a8:	4b4d      	ldr	r3, [pc, #308]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <HAL_RCC_OscConfig+0x17c>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e367      	b.n	8003090 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029c0:	4b47      	ldr	r3, [pc, #284]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f023 0219 	bic.w	r2, r3, #25
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4944      	ldr	r1, [pc, #272]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029d2:	f7fe fdff 	bl	80015d4 <HAL_GetTick>
 80029d6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029da:	f7fe fdfb 	bl	80015d4 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e351      	b.n	8003090 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029ec:	4b3c      	ldr	r3, [pc, #240]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0f0      	beq.n	80029da <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f8:	f7fe fe1c 	bl	8001634 <HAL_GetREVID>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d817      	bhi.n	8002a36 <HAL_RCC_OscConfig+0x1f2>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	2b40      	cmp	r3, #64	; 0x40
 8002a0c:	d108      	bne.n	8002a20 <HAL_RCC_OscConfig+0x1dc>
 8002a0e:	4b34      	ldr	r3, [pc, #208]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002a16:	4a32      	ldr	r2, [pc, #200]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 8002a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a1c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a1e:	e07a      	b.n	8002b16 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a20:	4b2f      	ldr	r3, [pc, #188]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	031b      	lsls	r3, r3, #12
 8002a2e:	492c      	ldr	r1, [pc, #176]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a34:	e06f      	b.n	8002b16 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a36:	4b2a      	ldr	r3, [pc, #168]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	061b      	lsls	r3, r3, #24
 8002a44:	4926      	ldr	r1, [pc, #152]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a4a:	e064      	b.n	8002b16 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d047      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a54:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f023 0219 	bic.w	r2, r3, #25
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	491f      	ldr	r1, [pc, #124]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a66:	f7fe fdb5 	bl	80015d4 <HAL_GetTick>
 8002a6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a6e:	f7fe fdb1 	bl	80015d4 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e307      	b.n	8003090 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a80:	4b17      	ldr	r3, [pc, #92]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a8c:	f7fe fdd2 	bl	8001634 <HAL_GetREVID>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d817      	bhi.n	8002aca <HAL_RCC_OscConfig+0x286>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	2b40      	cmp	r3, #64	; 0x40
 8002aa0:	d108      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x270>
 8002aa2:	4b0f      	ldr	r3, [pc, #60]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002aaa:	4a0d      	ldr	r2, [pc, #52]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 8002aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab0:	6053      	str	r3, [r2, #4]
 8002ab2:	e030      	b.n	8002b16 <HAL_RCC_OscConfig+0x2d2>
 8002ab4:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	031b      	lsls	r3, r3, #12
 8002ac2:	4907      	ldr	r1, [pc, #28]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	604b      	str	r3, [r1, #4]
 8002ac8:	e025      	b.n	8002b16 <HAL_RCC_OscConfig+0x2d2>
 8002aca:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	061b      	lsls	r3, r3, #24
 8002ad8:	4901      	ldr	r1, [pc, #4]	; (8002ae0 <HAL_RCC_OscConfig+0x29c>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	604b      	str	r3, [r1, #4]
 8002ade:	e01a      	b.n	8002b16 <HAL_RCC_OscConfig+0x2d2>
 8002ae0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ae4:	4b9e      	ldr	r3, [pc, #632]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a9d      	ldr	r2, [pc, #628]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002aea:	f023 0301 	bic.w	r3, r3, #1
 8002aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af0:	f7fe fd70 	bl	80015d4 <HAL_GetTick>
 8002af4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002af8:	f7fe fd6c 	bl	80015d4 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e2c2      	b.n	8003090 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b0a:	4b95      	ldr	r3, [pc, #596]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0310 	and.w	r3, r3, #16
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 80a9 	beq.w	8002c76 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b24:	4b8e      	ldr	r3, [pc, #568]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b2c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b2e:	4b8c      	ldr	r3, [pc, #560]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b32:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	2b08      	cmp	r3, #8
 8002b38:	d007      	beq.n	8002b4a <HAL_RCC_OscConfig+0x306>
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	2b18      	cmp	r3, #24
 8002b3e:	d13a      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x372>
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d135      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b4a:	4b85      	ldr	r3, [pc, #532]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d005      	beq.n	8002b62 <HAL_RCC_OscConfig+0x31e>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	2b80      	cmp	r3, #128	; 0x80
 8002b5c:	d001      	beq.n	8002b62 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e296      	b.n	8003090 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b62:	f7fe fd67 	bl	8001634 <HAL_GetREVID>
 8002b66:	4603      	mov	r3, r0
 8002b68:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d817      	bhi.n	8002ba0 <HAL_RCC_OscConfig+0x35c>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	2b20      	cmp	r3, #32
 8002b76:	d108      	bne.n	8002b8a <HAL_RCC_OscConfig+0x346>
 8002b78:	4b79      	ldr	r3, [pc, #484]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002b80:	4a77      	ldr	r2, [pc, #476]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002b82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b86:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b88:	e075      	b.n	8002c76 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b8a:	4b75      	ldr	r3, [pc, #468]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	069b      	lsls	r3, r3, #26
 8002b98:	4971      	ldr	r1, [pc, #452]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b9e:	e06a      	b.n	8002c76 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ba0:	4b6f      	ldr	r3, [pc, #444]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	061b      	lsls	r3, r3, #24
 8002bae:	496c      	ldr	r1, [pc, #432]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bb4:	e05f      	b.n	8002c76 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d042      	beq.n	8002c44 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002bbe:	4b68      	ldr	r3, [pc, #416]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a67      	ldr	r2, [pc, #412]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bca:	f7fe fd03 	bl	80015d4 <HAL_GetTick>
 8002bce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002bd2:	f7fe fcff 	bl	80015d4 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e255      	b.n	8003090 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002be4:	4b5e      	ldr	r3, [pc, #376]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0f0      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bf0:	f7fe fd20 	bl	8001634 <HAL_GetREVID>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	f241 0203 	movw	r2, #4099	; 0x1003
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d817      	bhi.n	8002c2e <HAL_RCC_OscConfig+0x3ea>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	2b20      	cmp	r3, #32
 8002c04:	d108      	bne.n	8002c18 <HAL_RCC_OscConfig+0x3d4>
 8002c06:	4b56      	ldr	r3, [pc, #344]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c0e:	4a54      	ldr	r2, [pc, #336]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002c10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c14:	6053      	str	r3, [r2, #4]
 8002c16:	e02e      	b.n	8002c76 <HAL_RCC_OscConfig+0x432>
 8002c18:	4b51      	ldr	r3, [pc, #324]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	069b      	lsls	r3, r3, #26
 8002c26:	494e      	ldr	r1, [pc, #312]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	604b      	str	r3, [r1, #4]
 8002c2c:	e023      	b.n	8002c76 <HAL_RCC_OscConfig+0x432>
 8002c2e:	4b4c      	ldr	r3, [pc, #304]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	061b      	lsls	r3, r3, #24
 8002c3c:	4948      	ldr	r1, [pc, #288]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	60cb      	str	r3, [r1, #12]
 8002c42:	e018      	b.n	8002c76 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002c44:	4b46      	ldr	r3, [pc, #280]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a45      	ldr	r2, [pc, #276]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002c4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7fe fcc0 	bl	80015d4 <HAL_GetTick>
 8002c54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c58:	f7fe fcbc 	bl	80015d4 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e212      	b.n	8003090 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c6a:	4b3d      	ldr	r3, [pc, #244]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d036      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d019      	beq.n	8002cbe <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c8a:	4b35      	ldr	r3, [pc, #212]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c8e:	4a34      	ldr	r2, [pc, #208]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c96:	f7fe fc9d 	bl	80015d4 <HAL_GetTick>
 8002c9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c9e:	f7fe fc99 	bl	80015d4 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e1ef      	b.n	8003090 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cb0:	4b2b      	ldr	r3, [pc, #172]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0f0      	beq.n	8002c9e <HAL_RCC_OscConfig+0x45a>
 8002cbc:	e018      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cbe:	4b28      	ldr	r3, [pc, #160]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc2:	4a27      	ldr	r2, [pc, #156]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002cc4:	f023 0301 	bic.w	r3, r3, #1
 8002cc8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cca:	f7fe fc83 	bl	80015d4 <HAL_GetTick>
 8002cce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cd2:	f7fe fc7f 	bl	80015d4 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e1d5      	b.n	8003090 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ce4:	4b1e      	ldr	r3, [pc, #120]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1f0      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0320 	and.w	r3, r3, #32
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d039      	beq.n	8002d70 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d019      	beq.n	8002d38 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d04:	4b16      	ldr	r3, [pc, #88]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a15      	ldr	r2, [pc, #84]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002d0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d0e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d10:	f7fe fc60 	bl	80015d4 <HAL_GetTick>
 8002d14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d18:	f7fe fc5c 	bl	80015d4 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e1b2      	b.n	8003090 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d2a:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCC_OscConfig+0x4d4>
 8002d36:	e01b      	b.n	8002d70 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d38:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a08      	ldr	r2, [pc, #32]	; (8002d60 <HAL_RCC_OscConfig+0x51c>)
 8002d3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d44:	f7fe fc46 	bl	80015d4 <HAL_GetTick>
 8002d48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d4a:	e00b      	b.n	8002d64 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d4c:	f7fe fc42 	bl	80015d4 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d904      	bls.n	8002d64 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e198      	b.n	8003090 <HAL_RCC_OscConfig+0x84c>
 8002d5e:	bf00      	nop
 8002d60:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d64:	4ba3      	ldr	r3, [pc, #652]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1ed      	bne.n	8002d4c <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 8081 	beq.w	8002e80 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d7e:	4b9e      	ldr	r3, [pc, #632]	; (8002ff8 <HAL_RCC_OscConfig+0x7b4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a9d      	ldr	r2, [pc, #628]	; (8002ff8 <HAL_RCC_OscConfig+0x7b4>)
 8002d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d8a:	f7fe fc23 	bl	80015d4 <HAL_GetTick>
 8002d8e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d92:	f7fe fc1f 	bl	80015d4 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b64      	cmp	r3, #100	; 0x64
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e175      	b.n	8003090 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002da4:	4b94      	ldr	r3, [pc, #592]	; (8002ff8 <HAL_RCC_OscConfig+0x7b4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f0      	beq.n	8002d92 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d106      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x582>
 8002db8:	4b8e      	ldr	r3, [pc, #568]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbc:	4a8d      	ldr	r2, [pc, #564]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002dbe:	f043 0301 	orr.w	r3, r3, #1
 8002dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc4:	e02d      	b.n	8002e22 <HAL_RCC_OscConfig+0x5de>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10c      	bne.n	8002de8 <HAL_RCC_OscConfig+0x5a4>
 8002dce:	4b89      	ldr	r3, [pc, #548]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd2:	4a88      	ldr	r2, [pc, #544]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002dd4:	f023 0301 	bic.w	r3, r3, #1
 8002dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dda:	4b86      	ldr	r3, [pc, #536]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dde:	4a85      	ldr	r2, [pc, #532]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002de0:	f023 0304 	bic.w	r3, r3, #4
 8002de4:	6713      	str	r3, [r2, #112]	; 0x70
 8002de6:	e01c      	b.n	8002e22 <HAL_RCC_OscConfig+0x5de>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	2b05      	cmp	r3, #5
 8002dee:	d10c      	bne.n	8002e0a <HAL_RCC_OscConfig+0x5c6>
 8002df0:	4b80      	ldr	r3, [pc, #512]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df4:	4a7f      	ldr	r2, [pc, #508]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002df6:	f043 0304 	orr.w	r3, r3, #4
 8002dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8002dfc:	4b7d      	ldr	r3, [pc, #500]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e00:	4a7c      	ldr	r2, [pc, #496]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	6713      	str	r3, [r2, #112]	; 0x70
 8002e08:	e00b      	b.n	8002e22 <HAL_RCC_OscConfig+0x5de>
 8002e0a:	4b7a      	ldr	r3, [pc, #488]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0e:	4a79      	ldr	r2, [pc, #484]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002e10:	f023 0301 	bic.w	r3, r3, #1
 8002e14:	6713      	str	r3, [r2, #112]	; 0x70
 8002e16:	4b77      	ldr	r3, [pc, #476]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1a:	4a76      	ldr	r2, [pc, #472]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002e1c:	f023 0304 	bic.w	r3, r3, #4
 8002e20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d015      	beq.n	8002e56 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2a:	f7fe fbd3 	bl	80015d4 <HAL_GetTick>
 8002e2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e30:	e00a      	b.n	8002e48 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e32:	f7fe fbcf 	bl	80015d4 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e123      	b.n	8003090 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e48:	4b6a      	ldr	r3, [pc, #424]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0ee      	beq.n	8002e32 <HAL_RCC_OscConfig+0x5ee>
 8002e54:	e014      	b.n	8002e80 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e56:	f7fe fbbd 	bl	80015d4 <HAL_GetTick>
 8002e5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e5c:	e00a      	b.n	8002e74 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e5e:	f7fe fbb9 	bl	80015d4 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e10d      	b.n	8003090 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e74:	4b5f      	ldr	r3, [pc, #380]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1ee      	bne.n	8002e5e <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 8102 	beq.w	800308e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002e8a:	4b5a      	ldr	r3, [pc, #360]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e92:	2b18      	cmp	r3, #24
 8002e94:	f000 80bd 	beq.w	8003012 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	f040 8095 	bne.w	8002fcc <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea2:	4b54      	ldr	r3, [pc, #336]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a53      	ldr	r2, [pc, #332]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002ea8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eae:	f7fe fb91 	bl	80015d4 <HAL_GetTick>
 8002eb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb6:	f7fe fb8d 	bl	80015d4 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e0e3      	b.n	8003090 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ec8:	4b4a      	ldr	r3, [pc, #296]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1f0      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ed4:	4b47      	ldr	r3, [pc, #284]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002ed6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ed8:	4b48      	ldr	r3, [pc, #288]	; (8002ffc <HAL_RCC_OscConfig+0x7b8>)
 8002eda:	4013      	ands	r3, r2
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ee4:	0112      	lsls	r2, r2, #4
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	4942      	ldr	r1, [pc, #264]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	628b      	str	r3, [r1, #40]	; 0x28
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efc:	3b01      	subs	r3, #1
 8002efe:	025b      	lsls	r3, r3, #9
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	431a      	orrs	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	041b      	lsls	r3, r3, #16
 8002f0c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002f10:	431a      	orrs	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f16:	3b01      	subs	r3, #1
 8002f18:	061b      	lsls	r3, r3, #24
 8002f1a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002f1e:	4935      	ldr	r1, [pc, #212]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002f24:	4b33      	ldr	r3, [pc, #204]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f28:	4a32      	ldr	r2, [pc, #200]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002f2a:	f023 0301 	bic.w	r3, r3, #1
 8002f2e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f30:	4b30      	ldr	r3, [pc, #192]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002f32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f34:	4b32      	ldr	r3, [pc, #200]	; (8003000 <HAL_RCC_OscConfig+0x7bc>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f3c:	00d2      	lsls	r2, r2, #3
 8002f3e:	492d      	ldr	r1, [pc, #180]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002f44:	4b2b      	ldr	r3, [pc, #172]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f48:	f023 020c 	bic.w	r2, r3, #12
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	4928      	ldr	r1, [pc, #160]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002f56:	4b27      	ldr	r3, [pc, #156]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5a:	f023 0202 	bic.w	r2, r3, #2
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	4924      	ldr	r1, [pc, #144]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002f68:	4b22      	ldr	r3, [pc, #136]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6c:	4a21      	ldr	r2, [pc, #132]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f74:	4b1f      	ldr	r3, [pc, #124]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f78:	4a1e      	ldr	r2, [pc, #120]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002f7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f80:	4b1c      	ldr	r3, [pc, #112]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f84:	4a1b      	ldr	r2, [pc, #108]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002f86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002f8c:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f90:	4a18      	ldr	r2, [pc, #96]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002f92:	f043 0301 	orr.w	r3, r3, #1
 8002f96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f98:	4b16      	ldr	r3, [pc, #88]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a15      	ldr	r2, [pc, #84]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002f9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa4:	f7fe fb16 	bl	80015d4 <HAL_GetTick>
 8002fa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fac:	f7fe fb12 	bl	80015d4 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e068      	b.n	8003090 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fbe:	4b0d      	ldr	r3, [pc, #52]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0f0      	beq.n	8002fac <HAL_RCC_OscConfig+0x768>
 8002fca:	e060      	b.n	800308e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fcc:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a08      	ldr	r2, [pc, #32]	; (8002ff4 <HAL_RCC_OscConfig+0x7b0>)
 8002fd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd8:	f7fe fafc 	bl	80015d4 <HAL_GetTick>
 8002fdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fde:	e011      	b.n	8003004 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe0:	f7fe faf8 	bl	80015d4 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d90a      	bls.n	8003004 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e04e      	b.n	8003090 <HAL_RCC_OscConfig+0x84c>
 8002ff2:	bf00      	nop
 8002ff4:	58024400 	.word	0x58024400
 8002ff8:	58024800 	.word	0x58024800
 8002ffc:	fffffc0c 	.word	0xfffffc0c
 8003000:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003004:	4b24      	ldr	r3, [pc, #144]	; (8003098 <HAL_RCC_OscConfig+0x854>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1e7      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x79c>
 8003010:	e03d      	b.n	800308e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003012:	4b21      	ldr	r3, [pc, #132]	; (8003098 <HAL_RCC_OscConfig+0x854>)
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003018:	4b1f      	ldr	r3, [pc, #124]	; (8003098 <HAL_RCC_OscConfig+0x854>)
 800301a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	2b01      	cmp	r3, #1
 8003024:	d031      	beq.n	800308a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f003 0203 	and.w	r2, r3, #3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003030:	429a      	cmp	r2, r3
 8003032:	d12a      	bne.n	800308a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	091b      	lsrs	r3, r3, #4
 8003038:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003040:	429a      	cmp	r2, r3
 8003042:	d122      	bne.n	800308a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003050:	429a      	cmp	r2, r3
 8003052:	d11a      	bne.n	800308a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	0a5b      	lsrs	r3, r3, #9
 8003058:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003060:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003062:	429a      	cmp	r2, r3
 8003064:	d111      	bne.n	800308a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	0c1b      	lsrs	r3, r3, #16
 800306a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003072:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003074:	429a      	cmp	r2, r3
 8003076:	d108      	bne.n	800308a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	0e1b      	lsrs	r3, r3, #24
 800307c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003084:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003086:	429a      	cmp	r2, r3
 8003088:	d001      	beq.n	800308e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3730      	adds	r7, #48	; 0x30
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	58024400 	.word	0x58024400

0800309c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e19c      	b.n	80033ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030b0:	4b8a      	ldr	r3, [pc, #552]	; (80032dc <HAL_RCC_ClockConfig+0x240>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 030f 	and.w	r3, r3, #15
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d910      	bls.n	80030e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030be:	4b87      	ldr	r3, [pc, #540]	; (80032dc <HAL_RCC_ClockConfig+0x240>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 020f 	bic.w	r2, r3, #15
 80030c6:	4985      	ldr	r1, [pc, #532]	; (80032dc <HAL_RCC_ClockConfig+0x240>)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ce:	4b83      	ldr	r3, [pc, #524]	; (80032dc <HAL_RCC_ClockConfig+0x240>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e184      	b.n	80033ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d010      	beq.n	800310e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691a      	ldr	r2, [r3, #16]
 80030f0:	4b7b      	ldr	r3, [pc, #492]	; (80032e0 <HAL_RCC_ClockConfig+0x244>)
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d908      	bls.n	800310e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030fc:	4b78      	ldr	r3, [pc, #480]	; (80032e0 <HAL_RCC_ClockConfig+0x244>)
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	4975      	ldr	r1, [pc, #468]	; (80032e0 <HAL_RCC_ClockConfig+0x244>)
 800310a:	4313      	orrs	r3, r2
 800310c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	2b00      	cmp	r3, #0
 8003118:	d010      	beq.n	800313c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	695a      	ldr	r2, [r3, #20]
 800311e:	4b70      	ldr	r3, [pc, #448]	; (80032e0 <HAL_RCC_ClockConfig+0x244>)
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003126:	429a      	cmp	r2, r3
 8003128:	d908      	bls.n	800313c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800312a:	4b6d      	ldr	r3, [pc, #436]	; (80032e0 <HAL_RCC_ClockConfig+0x244>)
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	496a      	ldr	r1, [pc, #424]	; (80032e0 <HAL_RCC_ClockConfig+0x244>)
 8003138:	4313      	orrs	r3, r2
 800313a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0310 	and.w	r3, r3, #16
 8003144:	2b00      	cmp	r3, #0
 8003146:	d010      	beq.n	800316a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	699a      	ldr	r2, [r3, #24]
 800314c:	4b64      	ldr	r3, [pc, #400]	; (80032e0 <HAL_RCC_ClockConfig+0x244>)
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003154:	429a      	cmp	r2, r3
 8003156:	d908      	bls.n	800316a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003158:	4b61      	ldr	r3, [pc, #388]	; (80032e0 <HAL_RCC_ClockConfig+0x244>)
 800315a:	69db      	ldr	r3, [r3, #28]
 800315c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	495e      	ldr	r1, [pc, #376]	; (80032e0 <HAL_RCC_ClockConfig+0x244>)
 8003166:	4313      	orrs	r3, r2
 8003168:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0320 	and.w	r3, r3, #32
 8003172:	2b00      	cmp	r3, #0
 8003174:	d010      	beq.n	8003198 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69da      	ldr	r2, [r3, #28]
 800317a:	4b59      	ldr	r3, [pc, #356]	; (80032e0 <HAL_RCC_ClockConfig+0x244>)
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003182:	429a      	cmp	r2, r3
 8003184:	d908      	bls.n	8003198 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003186:	4b56      	ldr	r3, [pc, #344]	; (80032e0 <HAL_RCC_ClockConfig+0x244>)
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	4953      	ldr	r1, [pc, #332]	; (80032e0 <HAL_RCC_ClockConfig+0x244>)
 8003194:	4313      	orrs	r3, r2
 8003196:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d010      	beq.n	80031c6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	4b4d      	ldr	r3, [pc, #308]	; (80032e0 <HAL_RCC_ClockConfig+0x244>)
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	f003 030f 	and.w	r3, r3, #15
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d908      	bls.n	80031c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b4:	4b4a      	ldr	r3, [pc, #296]	; (80032e0 <HAL_RCC_ClockConfig+0x244>)
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	f023 020f 	bic.w	r2, r3, #15
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	4947      	ldr	r1, [pc, #284]	; (80032e0 <HAL_RCC_ClockConfig+0x244>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d055      	beq.n	800327e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80031d2:	4b43      	ldr	r3, [pc, #268]	; (80032e0 <HAL_RCC_ClockConfig+0x244>)
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	4940      	ldr	r1, [pc, #256]	; (80032e0 <HAL_RCC_ClockConfig+0x244>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d107      	bne.n	80031fc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031ec:	4b3c      	ldr	r3, [pc, #240]	; (80032e0 <HAL_RCC_ClockConfig+0x244>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d121      	bne.n	800323c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e0f6      	b.n	80033ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	2b03      	cmp	r3, #3
 8003202:	d107      	bne.n	8003214 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003204:	4b36      	ldr	r3, [pc, #216]	; (80032e0 <HAL_RCC_ClockConfig+0x244>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d115      	bne.n	800323c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e0ea      	b.n	80033ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d107      	bne.n	800322c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800321c:	4b30      	ldr	r3, [pc, #192]	; (80032e0 <HAL_RCC_ClockConfig+0x244>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003224:	2b00      	cmp	r3, #0
 8003226:	d109      	bne.n	800323c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0de      	b.n	80033ea <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800322c:	4b2c      	ldr	r3, [pc, #176]	; (80032e0 <HAL_RCC_ClockConfig+0x244>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e0d6      	b.n	80033ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800323c:	4b28      	ldr	r3, [pc, #160]	; (80032e0 <HAL_RCC_ClockConfig+0x244>)
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	f023 0207 	bic.w	r2, r3, #7
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	4925      	ldr	r1, [pc, #148]	; (80032e0 <HAL_RCC_ClockConfig+0x244>)
 800324a:	4313      	orrs	r3, r2
 800324c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324e:	f7fe f9c1 	bl	80015d4 <HAL_GetTick>
 8003252:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003254:	e00a      	b.n	800326c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003256:	f7fe f9bd 	bl	80015d4 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	f241 3288 	movw	r2, #5000	; 0x1388
 8003264:	4293      	cmp	r3, r2
 8003266:	d901      	bls.n	800326c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e0be      	b.n	80033ea <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326c:	4b1c      	ldr	r3, [pc, #112]	; (80032e0 <HAL_RCC_ClockConfig+0x244>)
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	429a      	cmp	r2, r3
 800327c:	d1eb      	bne.n	8003256 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d010      	beq.n	80032ac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	4b14      	ldr	r3, [pc, #80]	; (80032e0 <HAL_RCC_ClockConfig+0x244>)
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	429a      	cmp	r2, r3
 8003298:	d208      	bcs.n	80032ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800329a:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <HAL_RCC_ClockConfig+0x244>)
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	f023 020f 	bic.w	r2, r3, #15
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	490e      	ldr	r1, [pc, #56]	; (80032e0 <HAL_RCC_ClockConfig+0x244>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032ac:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <HAL_RCC_ClockConfig+0x240>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 030f 	and.w	r3, r3, #15
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d214      	bcs.n	80032e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ba:	4b08      	ldr	r3, [pc, #32]	; (80032dc <HAL_RCC_ClockConfig+0x240>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f023 020f 	bic.w	r2, r3, #15
 80032c2:	4906      	ldr	r1, [pc, #24]	; (80032dc <HAL_RCC_ClockConfig+0x240>)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ca:	4b04      	ldr	r3, [pc, #16]	; (80032dc <HAL_RCC_ClockConfig+0x240>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d005      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e086      	b.n	80033ea <HAL_RCC_ClockConfig+0x34e>
 80032dc:	52002000 	.word	0x52002000
 80032e0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d010      	beq.n	8003312 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	4b3f      	ldr	r3, [pc, #252]	; (80033f4 <HAL_RCC_ClockConfig+0x358>)
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d208      	bcs.n	8003312 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003300:	4b3c      	ldr	r3, [pc, #240]	; (80033f4 <HAL_RCC_ClockConfig+0x358>)
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	4939      	ldr	r1, [pc, #228]	; (80033f4 <HAL_RCC_ClockConfig+0x358>)
 800330e:	4313      	orrs	r3, r2
 8003310:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b00      	cmp	r3, #0
 800331c:	d010      	beq.n	8003340 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695a      	ldr	r2, [r3, #20]
 8003322:	4b34      	ldr	r3, [pc, #208]	; (80033f4 <HAL_RCC_ClockConfig+0x358>)
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800332a:	429a      	cmp	r2, r3
 800332c:	d208      	bcs.n	8003340 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800332e:	4b31      	ldr	r3, [pc, #196]	; (80033f4 <HAL_RCC_ClockConfig+0x358>)
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	492e      	ldr	r1, [pc, #184]	; (80033f4 <HAL_RCC_ClockConfig+0x358>)
 800333c:	4313      	orrs	r3, r2
 800333e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0310 	and.w	r3, r3, #16
 8003348:	2b00      	cmp	r3, #0
 800334a:	d010      	beq.n	800336e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	699a      	ldr	r2, [r3, #24]
 8003350:	4b28      	ldr	r3, [pc, #160]	; (80033f4 <HAL_RCC_ClockConfig+0x358>)
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003358:	429a      	cmp	r2, r3
 800335a:	d208      	bcs.n	800336e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800335c:	4b25      	ldr	r3, [pc, #148]	; (80033f4 <HAL_RCC_ClockConfig+0x358>)
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	4922      	ldr	r1, [pc, #136]	; (80033f4 <HAL_RCC_ClockConfig+0x358>)
 800336a:	4313      	orrs	r3, r2
 800336c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0320 	and.w	r3, r3, #32
 8003376:	2b00      	cmp	r3, #0
 8003378:	d010      	beq.n	800339c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69da      	ldr	r2, [r3, #28]
 800337e:	4b1d      	ldr	r3, [pc, #116]	; (80033f4 <HAL_RCC_ClockConfig+0x358>)
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003386:	429a      	cmp	r2, r3
 8003388:	d208      	bcs.n	800339c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800338a:	4b1a      	ldr	r3, [pc, #104]	; (80033f4 <HAL_RCC_ClockConfig+0x358>)
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	4917      	ldr	r1, [pc, #92]	; (80033f4 <HAL_RCC_ClockConfig+0x358>)
 8003398:	4313      	orrs	r3, r2
 800339a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800339c:	f000 f834 	bl	8003408 <HAL_RCC_GetSysClockFreq>
 80033a0:	4602      	mov	r2, r0
 80033a2:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <HAL_RCC_ClockConfig+0x358>)
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	0a1b      	lsrs	r3, r3, #8
 80033a8:	f003 030f 	and.w	r3, r3, #15
 80033ac:	4912      	ldr	r1, [pc, #72]	; (80033f8 <HAL_RCC_ClockConfig+0x35c>)
 80033ae:	5ccb      	ldrb	r3, [r1, r3]
 80033b0:	f003 031f 	and.w	r3, r3, #31
 80033b4:	fa22 f303 	lsr.w	r3, r2, r3
 80033b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033ba:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <HAL_RCC_ClockConfig+0x358>)
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	4a0d      	ldr	r2, [pc, #52]	; (80033f8 <HAL_RCC_ClockConfig+0x35c>)
 80033c4:	5cd3      	ldrb	r3, [r2, r3]
 80033c6:	f003 031f 	and.w	r3, r3, #31
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	fa22 f303 	lsr.w	r3, r2, r3
 80033d0:	4a0a      	ldr	r2, [pc, #40]	; (80033fc <HAL_RCC_ClockConfig+0x360>)
 80033d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033d4:	4a0a      	ldr	r2, [pc, #40]	; (8003400 <HAL_RCC_ClockConfig+0x364>)
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80033da:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <HAL_RCC_ClockConfig+0x368>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fe f8ae 	bl	8001540 <HAL_InitTick>
 80033e4:	4603      	mov	r3, r0
 80033e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	58024400 	.word	0x58024400
 80033f8:	08006fa8 	.word	0x08006fa8
 80033fc:	24000004 	.word	0x24000004
 8003400:	24000000 	.word	0x24000000
 8003404:	2400000c 	.word	0x2400000c

08003408 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003408:	b480      	push	{r7}
 800340a:	b089      	sub	sp, #36	; 0x24
 800340c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800340e:	4bb3      	ldr	r3, [pc, #716]	; (80036dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003416:	2b18      	cmp	r3, #24
 8003418:	f200 8155 	bhi.w	80036c6 <HAL_RCC_GetSysClockFreq+0x2be>
 800341c:	a201      	add	r2, pc, #4	; (adr r2, 8003424 <HAL_RCC_GetSysClockFreq+0x1c>)
 800341e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003422:	bf00      	nop
 8003424:	08003489 	.word	0x08003489
 8003428:	080036c7 	.word	0x080036c7
 800342c:	080036c7 	.word	0x080036c7
 8003430:	080036c7 	.word	0x080036c7
 8003434:	080036c7 	.word	0x080036c7
 8003438:	080036c7 	.word	0x080036c7
 800343c:	080036c7 	.word	0x080036c7
 8003440:	080036c7 	.word	0x080036c7
 8003444:	080034af 	.word	0x080034af
 8003448:	080036c7 	.word	0x080036c7
 800344c:	080036c7 	.word	0x080036c7
 8003450:	080036c7 	.word	0x080036c7
 8003454:	080036c7 	.word	0x080036c7
 8003458:	080036c7 	.word	0x080036c7
 800345c:	080036c7 	.word	0x080036c7
 8003460:	080036c7 	.word	0x080036c7
 8003464:	080034b5 	.word	0x080034b5
 8003468:	080036c7 	.word	0x080036c7
 800346c:	080036c7 	.word	0x080036c7
 8003470:	080036c7 	.word	0x080036c7
 8003474:	080036c7 	.word	0x080036c7
 8003478:	080036c7 	.word	0x080036c7
 800347c:	080036c7 	.word	0x080036c7
 8003480:	080036c7 	.word	0x080036c7
 8003484:	080034bb 	.word	0x080034bb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003488:	4b94      	ldr	r3, [pc, #592]	; (80036dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0320 	and.w	r3, r3, #32
 8003490:	2b00      	cmp	r3, #0
 8003492:	d009      	beq.n	80034a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003494:	4b91      	ldr	r3, [pc, #580]	; (80036dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	08db      	lsrs	r3, r3, #3
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	4a90      	ldr	r2, [pc, #576]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034a0:	fa22 f303 	lsr.w	r3, r2, r3
 80034a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80034a6:	e111      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80034a8:	4b8d      	ldr	r3, [pc, #564]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034aa:	61bb      	str	r3, [r7, #24]
    break;
 80034ac:	e10e      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80034ae:	4b8d      	ldr	r3, [pc, #564]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034b0:	61bb      	str	r3, [r7, #24]
    break;
 80034b2:	e10b      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80034b4:	4b8c      	ldr	r3, [pc, #560]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80034b6:	61bb      	str	r3, [r7, #24]
    break;
 80034b8:	e108      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034ba:	4b88      	ldr	r3, [pc, #544]	; (80036dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80034c4:	4b85      	ldr	r3, [pc, #532]	; (80036dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c8:	091b      	lsrs	r3, r3, #4
 80034ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034ce:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80034d0:	4b82      	ldr	r3, [pc, #520]	; (80036dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80034da:	4b80      	ldr	r3, [pc, #512]	; (80036dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034de:	08db      	lsrs	r3, r3, #3
 80034e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	fb02 f303 	mul.w	r3, r2, r3
 80034ea:	ee07 3a90 	vmov	s15, r3
 80034ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 80e1 	beq.w	80036c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	2b02      	cmp	r3, #2
 8003502:	f000 8083 	beq.w	800360c <HAL_RCC_GetSysClockFreq+0x204>
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2b02      	cmp	r3, #2
 800350a:	f200 80a1 	bhi.w	8003650 <HAL_RCC_GetSysClockFreq+0x248>
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <HAL_RCC_GetSysClockFreq+0x114>
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d056      	beq.n	80035c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800351a:	e099      	b.n	8003650 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800351c:	4b6f      	ldr	r3, [pc, #444]	; (80036dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0320 	and.w	r3, r3, #32
 8003524:	2b00      	cmp	r3, #0
 8003526:	d02d      	beq.n	8003584 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003528:	4b6c      	ldr	r3, [pc, #432]	; (80036dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	08db      	lsrs	r3, r3, #3
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	4a6b      	ldr	r2, [pc, #428]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003534:	fa22 f303 	lsr.w	r3, r2, r3
 8003538:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	ee07 3a90 	vmov	s15, r3
 8003540:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	ee07 3a90 	vmov	s15, r3
 800354a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800354e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003552:	4b62      	ldr	r3, [pc, #392]	; (80036dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800355a:	ee07 3a90 	vmov	s15, r3
 800355e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003562:	ed97 6a02 	vldr	s12, [r7, #8]
 8003566:	eddf 5a61 	vldr	s11, [pc, #388]	; 80036ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800356a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800356e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800357a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800357e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003582:	e087      	b.n	8003694 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	ee07 3a90 	vmov	s15, r3
 800358a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800358e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80036f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003596:	4b51      	ldr	r3, [pc, #324]	; (80036dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800359e:	ee07 3a90 	vmov	s15, r3
 80035a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80035aa:	eddf 5a50 	vldr	s11, [pc, #320]	; 80036ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80035ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035c6:	e065      	b.n	8003694 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	ee07 3a90 	vmov	s15, r3
 80035ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035d2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80036f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80035d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035da:	4b40      	ldr	r3, [pc, #256]	; (80036dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035e2:	ee07 3a90 	vmov	s15, r3
 80035e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80035ee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80036ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80035f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003606:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800360a:	e043      	b.n	8003694 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	ee07 3a90 	vmov	s15, r3
 8003612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003616:	eddf 6a38 	vldr	s13, [pc, #224]	; 80036f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800361a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800361e:	4b2f      	ldr	r3, [pc, #188]	; (80036dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003626:	ee07 3a90 	vmov	s15, r3
 800362a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800362e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003632:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80036ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8003636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800363a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800363e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800364a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800364e:	e021      	b.n	8003694 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	ee07 3a90 	vmov	s15, r3
 8003656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800365a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80036f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800365e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003662:	4b1e      	ldr	r3, [pc, #120]	; (80036dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800366a:	ee07 3a90 	vmov	s15, r3
 800366e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003672:	ed97 6a02 	vldr	s12, [r7, #8]
 8003676:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80036ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800367a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800367e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800368a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800368e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003692:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003694:	4b11      	ldr	r3, [pc, #68]	; (80036dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003698:	0a5b      	lsrs	r3, r3, #9
 800369a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800369e:	3301      	adds	r3, #1
 80036a0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	ee07 3a90 	vmov	s15, r3
 80036a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80036b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036b8:	ee17 3a90 	vmov	r3, s15
 80036bc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80036be:	e005      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	61bb      	str	r3, [r7, #24]
    break;
 80036c4:	e002      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80036c6:	4b07      	ldr	r3, [pc, #28]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80036c8:	61bb      	str	r3, [r7, #24]
    break;
 80036ca:	bf00      	nop
  }

  return sysclockfreq;
 80036cc:	69bb      	ldr	r3, [r7, #24]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3724      	adds	r7, #36	; 0x24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	58024400 	.word	0x58024400
 80036e0:	03d09000 	.word	0x03d09000
 80036e4:	003d0900 	.word	0x003d0900
 80036e8:	007a1200 	.word	0x007a1200
 80036ec:	46000000 	.word	0x46000000
 80036f0:	4c742400 	.word	0x4c742400
 80036f4:	4a742400 	.word	0x4a742400
 80036f8:	4af42400 	.word	0x4af42400

080036fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003702:	f7ff fe81 	bl	8003408 <HAL_RCC_GetSysClockFreq>
 8003706:	4602      	mov	r2, r0
 8003708:	4b10      	ldr	r3, [pc, #64]	; (800374c <HAL_RCC_GetHCLKFreq+0x50>)
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	0a1b      	lsrs	r3, r3, #8
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	490f      	ldr	r1, [pc, #60]	; (8003750 <HAL_RCC_GetHCLKFreq+0x54>)
 8003714:	5ccb      	ldrb	r3, [r1, r3]
 8003716:	f003 031f 	and.w	r3, r3, #31
 800371a:	fa22 f303 	lsr.w	r3, r2, r3
 800371e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003720:	4b0a      	ldr	r3, [pc, #40]	; (800374c <HAL_RCC_GetHCLKFreq+0x50>)
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	f003 030f 	and.w	r3, r3, #15
 8003728:	4a09      	ldr	r2, [pc, #36]	; (8003750 <HAL_RCC_GetHCLKFreq+0x54>)
 800372a:	5cd3      	ldrb	r3, [r2, r3]
 800372c:	f003 031f 	and.w	r3, r3, #31
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	fa22 f303 	lsr.w	r3, r2, r3
 8003736:	4a07      	ldr	r2, [pc, #28]	; (8003754 <HAL_RCC_GetHCLKFreq+0x58>)
 8003738:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800373a:	4a07      	ldr	r2, [pc, #28]	; (8003758 <HAL_RCC_GetHCLKFreq+0x5c>)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003740:	4b04      	ldr	r3, [pc, #16]	; (8003754 <HAL_RCC_GetHCLKFreq+0x58>)
 8003742:	681b      	ldr	r3, [r3, #0]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	58024400 	.word	0x58024400
 8003750:	08006fa8 	.word	0x08006fa8
 8003754:	24000004 	.word	0x24000004
 8003758:	24000000 	.word	0x24000000

0800375c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003760:	f7ff ffcc 	bl	80036fc <HAL_RCC_GetHCLKFreq>
 8003764:	4602      	mov	r2, r0
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	091b      	lsrs	r3, r3, #4
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	4904      	ldr	r1, [pc, #16]	; (8003784 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003772:	5ccb      	ldrb	r3, [r1, r3]
 8003774:	f003 031f 	and.w	r3, r3, #31
 8003778:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800377c:	4618      	mov	r0, r3
 800377e:	bd80      	pop	{r7, pc}
 8003780:	58024400 	.word	0x58024400
 8003784:	08006fa8 	.word	0x08006fa8

08003788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800378c:	f7ff ffb6 	bl	80036fc <HAL_RCC_GetHCLKFreq>
 8003790:	4602      	mov	r2, r0
 8003792:	4b06      	ldr	r3, [pc, #24]	; (80037ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	0a1b      	lsrs	r3, r3, #8
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	4904      	ldr	r1, [pc, #16]	; (80037b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800379e:	5ccb      	ldrb	r3, [r1, r3]
 80037a0:	f003 031f 	and.w	r3, r3, #31
 80037a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	58024400 	.word	0x58024400
 80037b0:	08006fa8 	.word	0x08006fa8

080037b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037bc:	2300      	movs	r3, #0
 80037be:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037c0:	2300      	movs	r3, #0
 80037c2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d03f      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037d8:	d02a      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80037da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037de:	d824      	bhi.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037e4:	d018      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80037e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037ea:	d81e      	bhi.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80037f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037f4:	d007      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80037f6:	e018      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037f8:	4bab      	ldr	r3, [pc, #684]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	4aaa      	ldr	r2, [pc, #680]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003802:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003804:	e015      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	3304      	adds	r3, #4
 800380a:	2102      	movs	r1, #2
 800380c:	4618      	mov	r0, r3
 800380e:	f001 f9cf 	bl	8004bb0 <RCCEx_PLL2_Config>
 8003812:	4603      	mov	r3, r0
 8003814:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003816:	e00c      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3324      	adds	r3, #36	; 0x24
 800381c:	2102      	movs	r1, #2
 800381e:	4618      	mov	r0, r3
 8003820:	f001 fa78 	bl	8004d14 <RCCEx_PLL3_Config>
 8003824:	4603      	mov	r3, r0
 8003826:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003828:	e003      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	75fb      	strb	r3, [r7, #23]
      break;
 800382e:	e000      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003830:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003832:	7dfb      	ldrb	r3, [r7, #23]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d109      	bne.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003838:	4b9b      	ldr	r3, [pc, #620]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800383a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003844:	4998      	ldr	r1, [pc, #608]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003846:	4313      	orrs	r3, r2
 8003848:	650b      	str	r3, [r1, #80]	; 0x50
 800384a:	e001      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384c:	7dfb      	ldrb	r3, [r7, #23]
 800384e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003858:	2b00      	cmp	r3, #0
 800385a:	d03d      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003860:	2b04      	cmp	r3, #4
 8003862:	d826      	bhi.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003864:	a201      	add	r2, pc, #4	; (adr r2, 800386c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386a:	bf00      	nop
 800386c:	08003881 	.word	0x08003881
 8003870:	0800388f 	.word	0x0800388f
 8003874:	080038a1 	.word	0x080038a1
 8003878:	080038b9 	.word	0x080038b9
 800387c:	080038b9 	.word	0x080038b9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003880:	4b89      	ldr	r3, [pc, #548]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003884:	4a88      	ldr	r2, [pc, #544]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800388a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800388c:	e015      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3304      	adds	r3, #4
 8003892:	2100      	movs	r1, #0
 8003894:	4618      	mov	r0, r3
 8003896:	f001 f98b 	bl	8004bb0 <RCCEx_PLL2_Config>
 800389a:	4603      	mov	r3, r0
 800389c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800389e:	e00c      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3324      	adds	r3, #36	; 0x24
 80038a4:	2100      	movs	r1, #0
 80038a6:	4618      	mov	r0, r3
 80038a8:	f001 fa34 	bl	8004d14 <RCCEx_PLL3_Config>
 80038ac:	4603      	mov	r3, r0
 80038ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038b0:	e003      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	75fb      	strb	r3, [r7, #23]
      break;
 80038b6:	e000      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80038b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ba:	7dfb      	ldrb	r3, [r7, #23]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d109      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038c0:	4b79      	ldr	r3, [pc, #484]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c4:	f023 0207 	bic.w	r2, r3, #7
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038cc:	4976      	ldr	r1, [pc, #472]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	650b      	str	r3, [r1, #80]	; 0x50
 80038d2:	e001      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d4:	7dfb      	ldrb	r3, [r7, #23]
 80038d6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d042      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ec:	d02b      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80038ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038f2:	d825      	bhi.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80038f4:	2bc0      	cmp	r3, #192	; 0xc0
 80038f6:	d028      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80038f8:	2bc0      	cmp	r3, #192	; 0xc0
 80038fa:	d821      	bhi.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80038fc:	2b80      	cmp	r3, #128	; 0x80
 80038fe:	d016      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003900:	2b80      	cmp	r3, #128	; 0x80
 8003902:	d81d      	bhi.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003908:	2b40      	cmp	r3, #64	; 0x40
 800390a:	d007      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800390c:	e018      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800390e:	4b66      	ldr	r3, [pc, #408]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003912:	4a65      	ldr	r2, [pc, #404]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003918:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800391a:	e017      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3304      	adds	r3, #4
 8003920:	2100      	movs	r1, #0
 8003922:	4618      	mov	r0, r3
 8003924:	f001 f944 	bl	8004bb0 <RCCEx_PLL2_Config>
 8003928:	4603      	mov	r3, r0
 800392a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800392c:	e00e      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	3324      	adds	r3, #36	; 0x24
 8003932:	2100      	movs	r1, #0
 8003934:	4618      	mov	r0, r3
 8003936:	f001 f9ed 	bl	8004d14 <RCCEx_PLL3_Config>
 800393a:	4603      	mov	r3, r0
 800393c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800393e:	e005      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	75fb      	strb	r3, [r7, #23]
      break;
 8003944:	e002      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003946:	bf00      	nop
 8003948:	e000      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800394a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800394c:	7dfb      	ldrb	r3, [r7, #23]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d109      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003952:	4b55      	ldr	r3, [pc, #340]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003956:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395e:	4952      	ldr	r1, [pc, #328]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003960:	4313      	orrs	r3, r2
 8003962:	650b      	str	r3, [r1, #80]	; 0x50
 8003964:	e001      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003966:	7dfb      	ldrb	r3, [r7, #23]
 8003968:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003972:	2b00      	cmp	r3, #0
 8003974:	d049      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800397c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003980:	d030      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003982:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003986:	d82a      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003988:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800398c:	d02c      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800398e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003992:	d824      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003994:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003998:	d018      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x218>
 800399a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800399e:	d81e      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80039a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039a8:	d007      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x206>
 80039aa:	e018      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039ac:	4b3e      	ldr	r3, [pc, #248]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	4a3d      	ldr	r2, [pc, #244]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039b8:	e017      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3304      	adds	r3, #4
 80039be:	2100      	movs	r1, #0
 80039c0:	4618      	mov	r0, r3
 80039c2:	f001 f8f5 	bl	8004bb0 <RCCEx_PLL2_Config>
 80039c6:	4603      	mov	r3, r0
 80039c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80039ca:	e00e      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3324      	adds	r3, #36	; 0x24
 80039d0:	2100      	movs	r1, #0
 80039d2:	4618      	mov	r0, r3
 80039d4:	f001 f99e 	bl	8004d14 <RCCEx_PLL3_Config>
 80039d8:	4603      	mov	r3, r0
 80039da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039dc:	e005      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	75fb      	strb	r3, [r7, #23]
      break;
 80039e2:	e002      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80039e4:	bf00      	nop
 80039e6:	e000      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80039e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ea:	7dfb      	ldrb	r3, [r7, #23]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10a      	bne.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80039f0:	4b2d      	ldr	r3, [pc, #180]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039fe:	492a      	ldr	r1, [pc, #168]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	658b      	str	r3, [r1, #88]	; 0x58
 8003a04:	e001      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a06:	7dfb      	ldrb	r3, [r7, #23]
 8003a08:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d04c      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a20:	d030      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003a22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a26:	d82a      	bhi.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003a28:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a2c:	d02c      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003a2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a32:	d824      	bhi.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003a34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a38:	d018      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003a3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a3e:	d81e      	bhi.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a48:	d007      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003a4a:	e018      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a4c:	4b16      	ldr	r3, [pc, #88]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a50:	4a15      	ldr	r2, [pc, #84]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a58:	e017      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	3304      	adds	r3, #4
 8003a5e:	2100      	movs	r1, #0
 8003a60:	4618      	mov	r0, r3
 8003a62:	f001 f8a5 	bl	8004bb0 <RCCEx_PLL2_Config>
 8003a66:	4603      	mov	r3, r0
 8003a68:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003a6a:	e00e      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3324      	adds	r3, #36	; 0x24
 8003a70:	2100      	movs	r1, #0
 8003a72:	4618      	mov	r0, r3
 8003a74:	f001 f94e 	bl	8004d14 <RCCEx_PLL3_Config>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a7c:	e005      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	75fb      	strb	r3, [r7, #23]
      break;
 8003a82:	e002      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003a84:	bf00      	nop
 8003a86:	e000      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003a88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a8a:	7dfb      	ldrb	r3, [r7, #23]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10d      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003a90:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a94:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a9e:	4902      	ldr	r1, [pc, #8]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	658b      	str	r3, [r1, #88]	; 0x58
 8003aa4:	e004      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003aa6:	bf00      	nop
 8003aa8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aac:	7dfb      	ldrb	r3, [r7, #23]
 8003aae:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d032      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac0:	2b30      	cmp	r3, #48	; 0x30
 8003ac2:	d01c      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003ac4:	2b30      	cmp	r3, #48	; 0x30
 8003ac6:	d817      	bhi.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	d00c      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	d813      	bhi.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d016      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003ad4:	2b10      	cmp	r3, #16
 8003ad6:	d10f      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad8:	4baf      	ldr	r3, [pc, #700]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	4aae      	ldr	r2, [pc, #696]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ae2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003ae4:	e00e      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	2102      	movs	r1, #2
 8003aec:	4618      	mov	r0, r3
 8003aee:	f001 f85f 	bl	8004bb0 <RCCEx_PLL2_Config>
 8003af2:	4603      	mov	r3, r0
 8003af4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003af6:	e005      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	75fb      	strb	r3, [r7, #23]
      break;
 8003afc:	e002      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003afe:	bf00      	nop
 8003b00:	e000      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003b02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b04:	7dfb      	ldrb	r3, [r7, #23]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d109      	bne.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b0a:	4ba3      	ldr	r3, [pc, #652]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b16:	49a0      	ldr	r1, [pc, #640]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b1c:	e001      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b1e:	7dfb      	ldrb	r3, [r7, #23]
 8003b20:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d047      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b36:	d030      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003b38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b3c:	d82a      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003b3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b42:	d02c      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003b44:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b48:	d824      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b4e:	d018      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003b50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b54:	d81e      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b5e:	d007      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003b60:	e018      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b62:	4b8d      	ldr	r3, [pc, #564]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b66:	4a8c      	ldr	r2, [pc, #560]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b6e:	e017      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3304      	adds	r3, #4
 8003b74:	2100      	movs	r1, #0
 8003b76:	4618      	mov	r0, r3
 8003b78:	f001 f81a 	bl	8004bb0 <RCCEx_PLL2_Config>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b80:	e00e      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	3324      	adds	r3, #36	; 0x24
 8003b86:	2100      	movs	r1, #0
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f001 f8c3 	bl	8004d14 <RCCEx_PLL3_Config>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b92:	e005      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	75fb      	strb	r3, [r7, #23]
      break;
 8003b98:	e002      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003b9a:	bf00      	nop
 8003b9c:	e000      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003b9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ba0:	7dfb      	ldrb	r3, [r7, #23]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d109      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003ba6:	4b7c      	ldr	r3, [pc, #496]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003baa:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb2:	4979      	ldr	r1, [pc, #484]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	650b      	str	r3, [r1, #80]	; 0x50
 8003bb8:	e001      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bba:	7dfb      	ldrb	r3, [r7, #23]
 8003bbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d049      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bd2:	d02e      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003bd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bd8:	d828      	bhi.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003bda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bde:	d02a      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003be0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003be4:	d822      	bhi.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003be6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bea:	d026      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003bec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bf0:	d81c      	bhi.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003bf2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bf6:	d010      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003bf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bfc:	d816      	bhi.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d01d      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c06:	d111      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 ffce 	bl	8004bb0 <RCCEx_PLL2_Config>
 8003c14:	4603      	mov	r3, r0
 8003c16:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c18:	e012      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3324      	adds	r3, #36	; 0x24
 8003c1e:	2101      	movs	r1, #1
 8003c20:	4618      	mov	r0, r3
 8003c22:	f001 f877 	bl	8004d14 <RCCEx_PLL3_Config>
 8003c26:	4603      	mov	r3, r0
 8003c28:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c2a:	e009      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c30:	e006      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003c32:	bf00      	nop
 8003c34:	e004      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003c36:	bf00      	nop
 8003c38:	e002      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003c3a:	bf00      	nop
 8003c3c:	e000      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003c3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c40:	7dfb      	ldrb	r3, [r7, #23]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d109      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003c46:	4b54      	ldr	r3, [pc, #336]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c4a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c52:	4951      	ldr	r1, [pc, #324]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	650b      	str	r3, [r1, #80]	; 0x50
 8003c58:	e001      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c5a:	7dfb      	ldrb	r3, [r7, #23]
 8003c5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d04b      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c74:	d02e      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003c76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c7a:	d828      	bhi.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c80:	d02a      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c86:	d822      	bhi.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003c88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c8c:	d026      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003c8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c92:	d81c      	bhi.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003c94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c98:	d010      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003c9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c9e:	d816      	bhi.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d01d      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003ca4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ca8:	d111      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	3304      	adds	r3, #4
 8003cae:	2101      	movs	r1, #1
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 ff7d 	bl	8004bb0 <RCCEx_PLL2_Config>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003cba:	e012      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3324      	adds	r3, #36	; 0x24
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f001 f826 	bl	8004d14 <RCCEx_PLL3_Config>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003ccc:	e009      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	75fb      	strb	r3, [r7, #23]
      break;
 8003cd2:	e006      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003cd4:	bf00      	nop
 8003cd6:	e004      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003cd8:	bf00      	nop
 8003cda:	e002      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003cdc:	bf00      	nop
 8003cde:	e000      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003ce0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ce2:	7dfb      	ldrb	r3, [r7, #23]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10a      	bne.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003ce8:	4b2b      	ldr	r3, [pc, #172]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cec:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003cf6:	4928      	ldr	r1, [pc, #160]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	658b      	str	r3, [r1, #88]	; 0x58
 8003cfc:	e001      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cfe:	7dfb      	ldrb	r3, [r7, #23]
 8003d00:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d02f      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d16:	d00e      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003d18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d1c:	d814      	bhi.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d015      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003d22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d26:	d10f      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d28:	4b1b      	ldr	r3, [pc, #108]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2c:	4a1a      	ldr	r2, [pc, #104]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d34:	e00c      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3304      	adds	r3, #4
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 ff37 	bl	8004bb0 <RCCEx_PLL2_Config>
 8003d42:	4603      	mov	r3, r0
 8003d44:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d46:	e003      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d4c:	e000      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003d4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d50:	7dfb      	ldrb	r3, [r7, #23]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d109      	bne.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d56:	4b10      	ldr	r3, [pc, #64]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d62:	490d      	ldr	r1, [pc, #52]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	650b      	str	r3, [r1, #80]	; 0x50
 8003d68:	e001      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6a:	7dfb      	ldrb	r3, [r7, #23]
 8003d6c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d033      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7e:	2b03      	cmp	r3, #3
 8003d80:	d81c      	bhi.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003d82:	a201      	add	r2, pc, #4	; (adr r2, 8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d88:	08003dc3 	.word	0x08003dc3
 8003d8c:	08003d9d 	.word	0x08003d9d
 8003d90:	08003dab 	.word	0x08003dab
 8003d94:	08003dc3 	.word	0x08003dc3
 8003d98:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d9c:	4bb8      	ldr	r3, [pc, #736]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	4ab7      	ldr	r2, [pc, #732]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003da2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003da8:	e00c      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3304      	adds	r3, #4
 8003dae:	2102      	movs	r1, #2
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 fefd 	bl	8004bb0 <RCCEx_PLL2_Config>
 8003db6:	4603      	mov	r3, r0
 8003db8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003dba:	e003      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8003dc0:	e000      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003dc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dc4:	7dfb      	ldrb	r3, [r7, #23]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d109      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003dca:	4bad      	ldr	r3, [pc, #692]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dce:	f023 0203 	bic.w	r2, r3, #3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd6:	49aa      	ldr	r1, [pc, #680]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ddc:	e001      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dde:	7dfb      	ldrb	r3, [r7, #23]
 8003de0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 8086 	beq.w	8003efc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003df0:	4ba4      	ldr	r3, [pc, #656]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4aa3      	ldr	r2, [pc, #652]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dfa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dfc:	f7fd fbea 	bl	80015d4 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e02:	e009      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e04:	f7fd fbe6 	bl	80015d4 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b64      	cmp	r3, #100	; 0x64
 8003e10:	d902      	bls.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	75fb      	strb	r3, [r7, #23]
        break;
 8003e16:	e005      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e18:	4b9a      	ldr	r3, [pc, #616]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0ef      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003e24:	7dfb      	ldrb	r3, [r7, #23]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d166      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e2a:	4b95      	ldr	r3, [pc, #596]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e34:	4053      	eors	r3, r2
 8003e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d013      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e3e:	4b90      	ldr	r3, [pc, #576]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e46:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e48:	4b8d      	ldr	r3, [pc, #564]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4c:	4a8c      	ldr	r2, [pc, #560]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e52:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e54:	4b8a      	ldr	r3, [pc, #552]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e58:	4a89      	ldr	r2, [pc, #548]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e5e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e60:	4a87      	ldr	r2, [pc, #540]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e70:	d115      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e72:	f7fd fbaf 	bl	80015d4 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e78:	e00b      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7a:	f7fd fbab 	bl	80015d4 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d902      	bls.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	75fb      	strb	r3, [r7, #23]
            break;
 8003e90:	e005      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e92:	4b7b      	ldr	r3, [pc, #492]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0ed      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003e9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d126      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eb2:	d10d      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003eb4:	4b72      	ldr	r3, [pc, #456]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ec2:	0919      	lsrs	r1, r3, #4
 8003ec4:	4b70      	ldr	r3, [pc, #448]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003ec6:	400b      	ands	r3, r1
 8003ec8:	496d      	ldr	r1, [pc, #436]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	610b      	str	r3, [r1, #16]
 8003ece:	e005      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003ed0:	4b6b      	ldr	r3, [pc, #428]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	4a6a      	ldr	r2, [pc, #424]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ed6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003eda:	6113      	str	r3, [r2, #16]
 8003edc:	4b68      	ldr	r3, [pc, #416]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ede:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eea:	4965      	ldr	r1, [pc, #404]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	670b      	str	r3, [r1, #112]	; 0x70
 8003ef0:	e004      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ef2:	7dfb      	ldrb	r3, [r7, #23]
 8003ef4:	75bb      	strb	r3, [r7, #22]
 8003ef6:	e001      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef8:	7dfb      	ldrb	r3, [r7, #23]
 8003efa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d07e      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f0c:	2b28      	cmp	r3, #40	; 0x28
 8003f0e:	d867      	bhi.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003f10:	a201      	add	r2, pc, #4	; (adr r2, 8003f18 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f16:	bf00      	nop
 8003f18:	08003fe7 	.word	0x08003fe7
 8003f1c:	08003fe1 	.word	0x08003fe1
 8003f20:	08003fe1 	.word	0x08003fe1
 8003f24:	08003fe1 	.word	0x08003fe1
 8003f28:	08003fe1 	.word	0x08003fe1
 8003f2c:	08003fe1 	.word	0x08003fe1
 8003f30:	08003fe1 	.word	0x08003fe1
 8003f34:	08003fe1 	.word	0x08003fe1
 8003f38:	08003fbd 	.word	0x08003fbd
 8003f3c:	08003fe1 	.word	0x08003fe1
 8003f40:	08003fe1 	.word	0x08003fe1
 8003f44:	08003fe1 	.word	0x08003fe1
 8003f48:	08003fe1 	.word	0x08003fe1
 8003f4c:	08003fe1 	.word	0x08003fe1
 8003f50:	08003fe1 	.word	0x08003fe1
 8003f54:	08003fe1 	.word	0x08003fe1
 8003f58:	08003fcf 	.word	0x08003fcf
 8003f5c:	08003fe1 	.word	0x08003fe1
 8003f60:	08003fe1 	.word	0x08003fe1
 8003f64:	08003fe1 	.word	0x08003fe1
 8003f68:	08003fe1 	.word	0x08003fe1
 8003f6c:	08003fe1 	.word	0x08003fe1
 8003f70:	08003fe1 	.word	0x08003fe1
 8003f74:	08003fe1 	.word	0x08003fe1
 8003f78:	08003fe7 	.word	0x08003fe7
 8003f7c:	08003fe1 	.word	0x08003fe1
 8003f80:	08003fe1 	.word	0x08003fe1
 8003f84:	08003fe1 	.word	0x08003fe1
 8003f88:	08003fe1 	.word	0x08003fe1
 8003f8c:	08003fe1 	.word	0x08003fe1
 8003f90:	08003fe1 	.word	0x08003fe1
 8003f94:	08003fe1 	.word	0x08003fe1
 8003f98:	08003fe7 	.word	0x08003fe7
 8003f9c:	08003fe1 	.word	0x08003fe1
 8003fa0:	08003fe1 	.word	0x08003fe1
 8003fa4:	08003fe1 	.word	0x08003fe1
 8003fa8:	08003fe1 	.word	0x08003fe1
 8003fac:	08003fe1 	.word	0x08003fe1
 8003fb0:	08003fe1 	.word	0x08003fe1
 8003fb4:	08003fe1 	.word	0x08003fe1
 8003fb8:	08003fe7 	.word	0x08003fe7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 fdf4 	bl	8004bb0 <RCCEx_PLL2_Config>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003fcc:	e00c      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3324      	adds	r3, #36	; 0x24
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 fe9d 	bl	8004d14 <RCCEx_PLL3_Config>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003fde:	e003      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8003fe4:	e000      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003fe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fe8:	7dfb      	ldrb	r3, [r7, #23]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d109      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003fee:	4b24      	ldr	r3, [pc, #144]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ffa:	4921      	ldr	r1, [pc, #132]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	654b      	str	r3, [r1, #84]	; 0x54
 8004000:	e001      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004002:	7dfb      	ldrb	r3, [r7, #23]
 8004004:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d03e      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004016:	2b05      	cmp	r3, #5
 8004018:	d820      	bhi.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800401a:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800401c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004020:	08004063 	.word	0x08004063
 8004024:	08004039 	.word	0x08004039
 8004028:	0800404b 	.word	0x0800404b
 800402c:	08004063 	.word	0x08004063
 8004030:	08004063 	.word	0x08004063
 8004034:	08004063 	.word	0x08004063
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3304      	adds	r3, #4
 800403c:	2101      	movs	r1, #1
 800403e:	4618      	mov	r0, r3
 8004040:	f000 fdb6 	bl	8004bb0 <RCCEx_PLL2_Config>
 8004044:	4603      	mov	r3, r0
 8004046:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004048:	e00c      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3324      	adds	r3, #36	; 0x24
 800404e:	2101      	movs	r1, #1
 8004050:	4618      	mov	r0, r3
 8004052:	f000 fe5f 	bl	8004d14 <RCCEx_PLL3_Config>
 8004056:	4603      	mov	r3, r0
 8004058:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800405a:	e003      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	75fb      	strb	r3, [r7, #23]
      break;
 8004060:	e000      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8004062:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004064:	7dfb      	ldrb	r3, [r7, #23]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d110      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800406a:	4b05      	ldr	r3, [pc, #20]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800406c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406e:	f023 0207 	bic.w	r2, r3, #7
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004076:	4902      	ldr	r1, [pc, #8]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004078:	4313      	orrs	r3, r2
 800407a:	654b      	str	r3, [r1, #84]	; 0x54
 800407c:	e008      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800407e:	bf00      	nop
 8004080:	58024400 	.word	0x58024400
 8004084:	58024800 	.word	0x58024800
 8004088:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408c:	7dfb      	ldrb	r3, [r7, #23]
 800408e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b00      	cmp	r3, #0
 800409a:	d039      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a2:	2b05      	cmp	r3, #5
 80040a4:	d820      	bhi.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80040a6:	a201      	add	r2, pc, #4	; (adr r2, 80040ac <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80040a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ac:	080040ef 	.word	0x080040ef
 80040b0:	080040c5 	.word	0x080040c5
 80040b4:	080040d7 	.word	0x080040d7
 80040b8:	080040ef 	.word	0x080040ef
 80040bc:	080040ef 	.word	0x080040ef
 80040c0:	080040ef 	.word	0x080040ef
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3304      	adds	r3, #4
 80040c8:	2101      	movs	r1, #1
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 fd70 	bl	8004bb0 <RCCEx_PLL2_Config>
 80040d0:	4603      	mov	r3, r0
 80040d2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80040d4:	e00c      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	3324      	adds	r3, #36	; 0x24
 80040da:	2101      	movs	r1, #1
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 fe19 	bl	8004d14 <RCCEx_PLL3_Config>
 80040e2:	4603      	mov	r3, r0
 80040e4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80040e6:	e003      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	75fb      	strb	r3, [r7, #23]
      break;
 80040ec:	e000      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80040ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040f0:	7dfb      	ldrb	r3, [r7, #23]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10a      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040f6:	4bb7      	ldr	r3, [pc, #732]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80040f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fa:	f023 0207 	bic.w	r2, r3, #7
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004104:	49b3      	ldr	r1, [pc, #716]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004106:	4313      	orrs	r3, r2
 8004108:	658b      	str	r3, [r1, #88]	; 0x58
 800410a:	e001      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410c:	7dfb      	ldrb	r3, [r7, #23]
 800410e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0320 	and.w	r3, r3, #32
 8004118:	2b00      	cmp	r3, #0
 800411a:	d04b      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004122:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004126:	d02e      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004128:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800412c:	d828      	bhi.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800412e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004132:	d02a      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004138:	d822      	bhi.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800413a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800413e:	d026      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004140:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004144:	d81c      	bhi.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004146:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800414a:	d010      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800414c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004150:	d816      	bhi.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004152:	2b00      	cmp	r3, #0
 8004154:	d01d      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800415a:	d111      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3304      	adds	r3, #4
 8004160:	2100      	movs	r1, #0
 8004162:	4618      	mov	r0, r3
 8004164:	f000 fd24 	bl	8004bb0 <RCCEx_PLL2_Config>
 8004168:	4603      	mov	r3, r0
 800416a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800416c:	e012      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3324      	adds	r3, #36	; 0x24
 8004172:	2102      	movs	r1, #2
 8004174:	4618      	mov	r0, r3
 8004176:	f000 fdcd 	bl	8004d14 <RCCEx_PLL3_Config>
 800417a:	4603      	mov	r3, r0
 800417c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800417e:	e009      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	75fb      	strb	r3, [r7, #23]
      break;
 8004184:	e006      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004186:	bf00      	nop
 8004188:	e004      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800418a:	bf00      	nop
 800418c:	e002      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800418e:	bf00      	nop
 8004190:	e000      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004192:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004194:	7dfb      	ldrb	r3, [r7, #23]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10a      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800419a:	4b8e      	ldr	r3, [pc, #568]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800419c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041a8:	498a      	ldr	r1, [pc, #552]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	654b      	str	r3, [r1, #84]	; 0x54
 80041ae:	e001      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b0:	7dfb      	ldrb	r3, [r7, #23]
 80041b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d04b      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80041ca:	d02e      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80041cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80041d0:	d828      	bhi.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80041d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d6:	d02a      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80041d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041dc:	d822      	bhi.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80041de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041e2:	d026      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80041e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041e8:	d81c      	bhi.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80041ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041ee:	d010      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80041f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041f4:	d816      	bhi.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d01d      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80041fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041fe:	d111      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	3304      	adds	r3, #4
 8004204:	2100      	movs	r1, #0
 8004206:	4618      	mov	r0, r3
 8004208:	f000 fcd2 	bl	8004bb0 <RCCEx_PLL2_Config>
 800420c:	4603      	mov	r3, r0
 800420e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004210:	e012      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3324      	adds	r3, #36	; 0x24
 8004216:	2102      	movs	r1, #2
 8004218:	4618      	mov	r0, r3
 800421a:	f000 fd7b 	bl	8004d14 <RCCEx_PLL3_Config>
 800421e:	4603      	mov	r3, r0
 8004220:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004222:	e009      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	75fb      	strb	r3, [r7, #23]
      break;
 8004228:	e006      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800422a:	bf00      	nop
 800422c:	e004      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800422e:	bf00      	nop
 8004230:	e002      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004232:	bf00      	nop
 8004234:	e000      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004236:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004238:	7dfb      	ldrb	r3, [r7, #23]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10a      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800423e:	4b65      	ldr	r3, [pc, #404]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004242:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800424c:	4961      	ldr	r1, [pc, #388]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800424e:	4313      	orrs	r3, r2
 8004250:	658b      	str	r3, [r1, #88]	; 0x58
 8004252:	e001      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004254:	7dfb      	ldrb	r3, [r7, #23]
 8004256:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004260:	2b00      	cmp	r3, #0
 8004262:	d04b      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800426a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800426e:	d02e      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004270:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004274:	d828      	bhi.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800427a:	d02a      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800427c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004280:	d822      	bhi.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004282:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004286:	d026      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004288:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800428c:	d81c      	bhi.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800428e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004292:	d010      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004298:	d816      	bhi.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800429a:	2b00      	cmp	r3, #0
 800429c:	d01d      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800429e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042a2:	d111      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3304      	adds	r3, #4
 80042a8:	2100      	movs	r1, #0
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 fc80 	bl	8004bb0 <RCCEx_PLL2_Config>
 80042b0:	4603      	mov	r3, r0
 80042b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80042b4:	e012      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	3324      	adds	r3, #36	; 0x24
 80042ba:	2102      	movs	r1, #2
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 fd29 	bl	8004d14 <RCCEx_PLL3_Config>
 80042c2:	4603      	mov	r3, r0
 80042c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80042c6:	e009      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	75fb      	strb	r3, [r7, #23]
      break;
 80042cc:	e006      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80042ce:	bf00      	nop
 80042d0:	e004      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80042d2:	bf00      	nop
 80042d4:	e002      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80042d6:	bf00      	nop
 80042d8:	e000      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80042da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042dc:	7dfb      	ldrb	r3, [r7, #23]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10a      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80042e2:	4b3c      	ldr	r3, [pc, #240]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80042e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042f0:	4938      	ldr	r1, [pc, #224]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	658b      	str	r3, [r1, #88]	; 0x58
 80042f6:	e001      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f8:	7dfb      	ldrb	r3, [r7, #23]
 80042fa:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0308 	and.w	r3, r3, #8
 8004304:	2b00      	cmp	r3, #0
 8004306:	d01a      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800430e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004312:	d10a      	bne.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3324      	adds	r3, #36	; 0x24
 8004318:	2102      	movs	r1, #2
 800431a:	4618      	mov	r0, r3
 800431c:	f000 fcfa 	bl	8004d14 <RCCEx_PLL3_Config>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800432a:	4b2a      	ldr	r3, [pc, #168]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800432c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004338:	4926      	ldr	r1, [pc, #152]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800433a:	4313      	orrs	r3, r2
 800433c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0310 	and.w	r3, r3, #16
 8004346:	2b00      	cmp	r3, #0
 8004348:	d01a      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004350:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004354:	d10a      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	3324      	adds	r3, #36	; 0x24
 800435a:	2102      	movs	r1, #2
 800435c:	4618      	mov	r0, r3
 800435e:	f000 fcd9 	bl	8004d14 <RCCEx_PLL3_Config>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800436c:	4b19      	ldr	r3, [pc, #100]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800436e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004370:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800437a:	4916      	ldr	r1, [pc, #88]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800437c:	4313      	orrs	r3, r2
 800437e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d036      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004392:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004396:	d01f      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004398:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800439c:	d817      	bhi.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80043a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a6:	d009      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80043a8:	e011      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3304      	adds	r3, #4
 80043ae:	2100      	movs	r1, #0
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 fbfd 	bl	8004bb0 <RCCEx_PLL2_Config>
 80043b6:	4603      	mov	r3, r0
 80043b8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80043ba:	e00e      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3324      	adds	r3, #36	; 0x24
 80043c0:	2102      	movs	r1, #2
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 fca6 	bl	8004d14 <RCCEx_PLL3_Config>
 80043c8:	4603      	mov	r3, r0
 80043ca:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80043cc:	e005      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	75fb      	strb	r3, [r7, #23]
      break;
 80043d2:	e002      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80043d4:	58024400 	.word	0x58024400
      break;
 80043d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043da:	7dfb      	ldrb	r3, [r7, #23]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10a      	bne.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043e0:	4b93      	ldr	r3, [pc, #588]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80043ee:	4990      	ldr	r1, [pc, #576]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	658b      	str	r3, [r1, #88]	; 0x58
 80043f4:	e001      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f6:	7dfb      	ldrb	r3, [r7, #23]
 80043f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d033      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800440c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004410:	d01c      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8004412:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004416:	d816      	bhi.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004418:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800441c:	d003      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800441e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004422:	d007      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004424:	e00f      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004426:	4b82      	ldr	r3, [pc, #520]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442a:	4a81      	ldr	r2, [pc, #516]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800442c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004430:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004432:	e00c      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3324      	adds	r3, #36	; 0x24
 8004438:	2101      	movs	r1, #1
 800443a:	4618      	mov	r0, r3
 800443c:	f000 fc6a 	bl	8004d14 <RCCEx_PLL3_Config>
 8004440:	4603      	mov	r3, r0
 8004442:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004444:	e003      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	75fb      	strb	r3, [r7, #23]
      break;
 800444a:	e000      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800444c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800444e:	7dfb      	ldrb	r3, [r7, #23]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10a      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004454:	4b76      	ldr	r3, [pc, #472]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004458:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004462:	4973      	ldr	r1, [pc, #460]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004464:	4313      	orrs	r3, r2
 8004466:	654b      	str	r3, [r1, #84]	; 0x54
 8004468:	e001      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800446a:	7dfb      	ldrb	r3, [r7, #23]
 800446c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d029      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8004482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004486:	d007      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004488:	e00f      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800448a:	4b69      	ldr	r3, [pc, #420]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800448c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448e:	4a68      	ldr	r2, [pc, #416]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004494:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004496:	e00b      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3304      	adds	r3, #4
 800449c:	2102      	movs	r1, #2
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fb86 	bl	8004bb0 <RCCEx_PLL2_Config>
 80044a4:	4603      	mov	r3, r0
 80044a6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80044a8:	e002      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	75fb      	strb	r3, [r7, #23]
      break;
 80044ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044b0:	7dfb      	ldrb	r3, [r7, #23]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d109      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80044b6:	4b5e      	ldr	r3, [pc, #376]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c2:	495b      	ldr	r1, [pc, #364]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80044c8:	e001      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ca:	7dfb      	ldrb	r3, [r7, #23]
 80044cc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	3324      	adds	r3, #36	; 0x24
 80044de:	2102      	movs	r1, #2
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 fc17 	bl	8004d14 <RCCEx_PLL3_Config>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d030      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004500:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004504:	d017      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8004506:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800450a:	d811      	bhi.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800450c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004510:	d013      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004512:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004516:	d80b      	bhi.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004518:	2b00      	cmp	r3, #0
 800451a:	d010      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800451c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004520:	d106      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004522:	4b43      	ldr	r3, [pc, #268]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004526:	4a42      	ldr	r2, [pc, #264]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800452c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800452e:	e007      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	75fb      	strb	r3, [r7, #23]
      break;
 8004534:	e004      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004536:	bf00      	nop
 8004538:	e002      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800453a:	bf00      	nop
 800453c:	e000      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800453e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004540:	7dfb      	ldrb	r3, [r7, #23]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d109      	bne.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004546:	4b3a      	ldr	r3, [pc, #232]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004552:	4937      	ldr	r1, [pc, #220]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004554:	4313      	orrs	r3, r2
 8004556:	654b      	str	r3, [r1, #84]	; 0x54
 8004558:	e001      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800455a:	7dfb      	ldrb	r3, [r7, #23]
 800455c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d008      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800456a:	4b31      	ldr	r3, [pc, #196]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800456c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800456e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004576:	492e      	ldr	r1, [pc, #184]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004578:	4313      	orrs	r3, r2
 800457a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d009      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004588:	4b29      	ldr	r3, [pc, #164]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004596:	4926      	ldr	r1, [pc, #152]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004598:	4313      	orrs	r3, r2
 800459a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d008      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045a8:	4b21      	ldr	r3, [pc, #132]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045b4:	491e      	ldr	r1, [pc, #120]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00d      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045c6:	4b1a      	ldr	r3, [pc, #104]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	4a19      	ldr	r2, [pc, #100]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045d0:	6113      	str	r3, [r2, #16]
 80045d2:	4b17      	ldr	r3, [pc, #92]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045d4:	691a      	ldr	r2, [r3, #16]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80045dc:	4914      	ldr	r1, [pc, #80]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	da08      	bge.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80045ea:	4b11      	ldr	r3, [pc, #68]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f6:	490e      	ldr	r1, [pc, #56]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d009      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004608:	4b09      	ldr	r3, [pc, #36]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800460a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004616:	4906      	ldr	r1, [pc, #24]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004618:	4313      	orrs	r3, r2
 800461a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800461c:	7dbb      	ldrb	r3, [r7, #22]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8004622:	2300      	movs	r3, #0
 8004624:	e000      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
}
 8004628:	4618      	mov	r0, r3
 800462a:	3718      	adds	r7, #24
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	58024400 	.word	0x58024400

08004634 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004638:	f7ff f860 	bl	80036fc <HAL_RCC_GetHCLKFreq>
 800463c:	4602      	mov	r2, r0
 800463e:	4b06      	ldr	r3, [pc, #24]	; (8004658 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	091b      	lsrs	r3, r3, #4
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	4904      	ldr	r1, [pc, #16]	; (800465c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800464a:	5ccb      	ldrb	r3, [r1, r3]
 800464c:	f003 031f 	and.w	r3, r3, #31
 8004650:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004654:	4618      	mov	r0, r3
 8004656:	bd80      	pop	{r7, pc}
 8004658:	58024400 	.word	0x58024400
 800465c:	08006fa8 	.word	0x08006fa8

08004660 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004660:	b480      	push	{r7}
 8004662:	b089      	sub	sp, #36	; 0x24
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004668:	4ba1      	ldr	r3, [pc, #644]	; (80048f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800466a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466c:	f003 0303 	and.w	r3, r3, #3
 8004670:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004672:	4b9f      	ldr	r3, [pc, #636]	; (80048f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004676:	0b1b      	lsrs	r3, r3, #12
 8004678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800467c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800467e:	4b9c      	ldr	r3, [pc, #624]	; (80048f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004682:	091b      	lsrs	r3, r3, #4
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800468a:	4b99      	ldr	r3, [pc, #612]	; (80048f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800468c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468e:	08db      	lsrs	r3, r3, #3
 8004690:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	fb02 f303 	mul.w	r3, r2, r3
 800469a:	ee07 3a90 	vmov	s15, r3
 800469e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 8111 	beq.w	80048d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	f000 8083 	beq.w	80047bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	f200 80a1 	bhi.w	8004800 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d003      	beq.n	80046cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d056      	beq.n	8004778 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80046ca:	e099      	b.n	8004800 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046cc:	4b88      	ldr	r3, [pc, #544]	; (80048f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0320 	and.w	r3, r3, #32
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d02d      	beq.n	8004734 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80046d8:	4b85      	ldr	r3, [pc, #532]	; (80048f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	08db      	lsrs	r3, r3, #3
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	4a84      	ldr	r2, [pc, #528]	; (80048f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80046e4:	fa22 f303 	lsr.w	r3, r2, r3
 80046e8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	ee07 3a90 	vmov	s15, r3
 80046f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	ee07 3a90 	vmov	s15, r3
 80046fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004702:	4b7b      	ldr	r3, [pc, #492]	; (80048f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800470a:	ee07 3a90 	vmov	s15, r3
 800470e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004712:	ed97 6a03 	vldr	s12, [r7, #12]
 8004716:	eddf 5a78 	vldr	s11, [pc, #480]	; 80048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800471a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800471e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800472a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800472e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004732:	e087      	b.n	8004844 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	ee07 3a90 	vmov	s15, r3
 800473a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800473e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80048fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004746:	4b6a      	ldr	r3, [pc, #424]	; (80048f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800474e:	ee07 3a90 	vmov	s15, r3
 8004752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004756:	ed97 6a03 	vldr	s12, [r7, #12]
 800475a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800475e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800476a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800476e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004772:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004776:	e065      	b.n	8004844 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	ee07 3a90 	vmov	s15, r3
 800477e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004782:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004900 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800478a:	4b59      	ldr	r3, [pc, #356]	; (80048f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800478c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004792:	ee07 3a90 	vmov	s15, r3
 8004796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800479a:	ed97 6a03 	vldr	s12, [r7, #12]
 800479e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047ba:	e043      	b.n	8004844 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	ee07 3a90 	vmov	s15, r3
 80047c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004904 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80047ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ce:	4b48      	ldr	r3, [pc, #288]	; (80048f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047de:	ed97 6a03 	vldr	s12, [r7, #12]
 80047e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047fe:	e021      	b.n	8004844 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004900 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800480e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004812:	4b37      	ldr	r3, [pc, #220]	; (80048f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800481a:	ee07 3a90 	vmov	s15, r3
 800481e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004822:	ed97 6a03 	vldr	s12, [r7, #12]
 8004826:	eddf 5a34 	vldr	s11, [pc, #208]	; 80048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800482a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800482e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800483a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800483e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004842:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004844:	4b2a      	ldr	r3, [pc, #168]	; (80048f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004848:	0a5b      	lsrs	r3, r3, #9
 800484a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800484e:	ee07 3a90 	vmov	s15, r3
 8004852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004856:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800485a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800485e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004862:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800486a:	ee17 2a90 	vmov	r2, s15
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004872:	4b1f      	ldr	r3, [pc, #124]	; (80048f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004876:	0c1b      	lsrs	r3, r3, #16
 8004878:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800487c:	ee07 3a90 	vmov	s15, r3
 8004880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004884:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004888:	ee37 7a87 	vadd.f32	s14, s15, s14
 800488c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004890:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004894:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004898:	ee17 2a90 	vmov	r2, s15
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80048a0:	4b13      	ldr	r3, [pc, #76]	; (80048f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a4:	0e1b      	lsrs	r3, r3, #24
 80048a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048aa:	ee07 3a90 	vmov	s15, r3
 80048ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80048be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048c6:	ee17 2a90 	vmov	r2, s15
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80048ce:	e008      	b.n	80048e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	609a      	str	r2, [r3, #8]
}
 80048e2:	bf00      	nop
 80048e4:	3724      	adds	r7, #36	; 0x24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	58024400 	.word	0x58024400
 80048f4:	03d09000 	.word	0x03d09000
 80048f8:	46000000 	.word	0x46000000
 80048fc:	4c742400 	.word	0x4c742400
 8004900:	4a742400 	.word	0x4a742400
 8004904:	4af42400 	.word	0x4af42400

08004908 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004908:	b480      	push	{r7}
 800490a:	b089      	sub	sp, #36	; 0x24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004910:	4ba1      	ldr	r3, [pc, #644]	; (8004b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004914:	f003 0303 	and.w	r3, r3, #3
 8004918:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800491a:	4b9f      	ldr	r3, [pc, #636]	; (8004b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800491c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491e:	0d1b      	lsrs	r3, r3, #20
 8004920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004924:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004926:	4b9c      	ldr	r3, [pc, #624]	; (8004b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492a:	0a1b      	lsrs	r3, r3, #8
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004932:	4b99      	ldr	r3, [pc, #612]	; (8004b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004936:	08db      	lsrs	r3, r3, #3
 8004938:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	fb02 f303 	mul.w	r3, r2, r3
 8004942:	ee07 3a90 	vmov	s15, r3
 8004946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800494a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 8111 	beq.w	8004b78 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	2b02      	cmp	r3, #2
 800495a:	f000 8083 	beq.w	8004a64 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	2b02      	cmp	r3, #2
 8004962:	f200 80a1 	bhi.w	8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d056      	beq.n	8004a20 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004972:	e099      	b.n	8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004974:	4b88      	ldr	r3, [pc, #544]	; (8004b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0320 	and.w	r3, r3, #32
 800497c:	2b00      	cmp	r3, #0
 800497e:	d02d      	beq.n	80049dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004980:	4b85      	ldr	r3, [pc, #532]	; (8004b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	08db      	lsrs	r3, r3, #3
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	4a84      	ldr	r2, [pc, #528]	; (8004b9c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800498c:	fa22 f303 	lsr.w	r3, r2, r3
 8004990:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	ee07 3a90 	vmov	s15, r3
 8004998:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	ee07 3a90 	vmov	s15, r3
 80049a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049aa:	4b7b      	ldr	r3, [pc, #492]	; (8004b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b2:	ee07 3a90 	vmov	s15, r3
 80049b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80049be:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80049da:	e087      	b.n	8004aec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	ee07 3a90 	vmov	s15, r3
 80049e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80049ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ee:	4b6a      	ldr	r3, [pc, #424]	; (8004b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049f6:	ee07 3a90 	vmov	s15, r3
 80049fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a02:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a1e:	e065      	b.n	8004aec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	ee07 3a90 	vmov	s15, r3
 8004a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a2a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a32:	4b59      	ldr	r3, [pc, #356]	; (8004b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a3a:	ee07 3a90 	vmov	s15, r3
 8004a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a42:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a46:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a62:	e043      	b.n	8004aec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	ee07 3a90 	vmov	s15, r3
 8004a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a6e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004bac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a76:	4b48      	ldr	r3, [pc, #288]	; (8004b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a7e:	ee07 3a90 	vmov	s15, r3
 8004a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a8a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aa2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004aa6:	e021      	b.n	8004aec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	ee07 3a90 	vmov	s15, r3
 8004aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aba:	4b37      	ldr	r3, [pc, #220]	; (8004b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac2:	ee07 3a90 	vmov	s15, r3
 8004ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ace:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ae6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004aea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004aec:	4b2a      	ldr	r3, [pc, #168]	; (8004b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af0:	0a5b      	lsrs	r3, r3, #9
 8004af2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004af6:	ee07 3a90 	vmov	s15, r3
 8004afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004afe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b06:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b12:	ee17 2a90 	vmov	r2, s15
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004b1a:	4b1f      	ldr	r3, [pc, #124]	; (8004b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	0c1b      	lsrs	r3, r3, #16
 8004b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b24:	ee07 3a90 	vmov	s15, r3
 8004b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b34:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b40:	ee17 2a90 	vmov	r2, s15
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004b48:	4b13      	ldr	r3, [pc, #76]	; (8004b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4c:	0e1b      	lsrs	r3, r3, #24
 8004b4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b52:	ee07 3a90 	vmov	s15, r3
 8004b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b62:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b6e:	ee17 2a90 	vmov	r2, s15
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004b76:	e008      	b.n	8004b8a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	609a      	str	r2, [r3, #8]
}
 8004b8a:	bf00      	nop
 8004b8c:	3724      	adds	r7, #36	; 0x24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	58024400 	.word	0x58024400
 8004b9c:	03d09000 	.word	0x03d09000
 8004ba0:	46000000 	.word	0x46000000
 8004ba4:	4c742400 	.word	0x4c742400
 8004ba8:	4a742400 	.word	0x4a742400
 8004bac:	4af42400 	.word	0x4af42400

08004bb0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004bbe:	4b53      	ldr	r3, [pc, #332]	; (8004d0c <RCCEx_PLL2_Config+0x15c>)
 8004bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	2b03      	cmp	r3, #3
 8004bc8:	d101      	bne.n	8004bce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e099      	b.n	8004d02 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004bce:	4b4f      	ldr	r3, [pc, #316]	; (8004d0c <RCCEx_PLL2_Config+0x15c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a4e      	ldr	r2, [pc, #312]	; (8004d0c <RCCEx_PLL2_Config+0x15c>)
 8004bd4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bda:	f7fc fcfb 	bl	80015d4 <HAL_GetTick>
 8004bde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004be0:	e008      	b.n	8004bf4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004be2:	f7fc fcf7 	bl	80015d4 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d901      	bls.n	8004bf4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e086      	b.n	8004d02 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004bf4:	4b45      	ldr	r3, [pc, #276]	; (8004d0c <RCCEx_PLL2_Config+0x15c>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1f0      	bne.n	8004be2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004c00:	4b42      	ldr	r3, [pc, #264]	; (8004d0c <RCCEx_PLL2_Config+0x15c>)
 8004c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c04:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	031b      	lsls	r3, r3, #12
 8004c0e:	493f      	ldr	r1, [pc, #252]	; (8004d0c <RCCEx_PLL2_Config+0x15c>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	628b      	str	r3, [r1, #40]	; 0x28
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	025b      	lsls	r3, r3, #9
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	041b      	lsls	r3, r3, #16
 8004c32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	061b      	lsls	r3, r3, #24
 8004c40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c44:	4931      	ldr	r1, [pc, #196]	; (8004d0c <RCCEx_PLL2_Config+0x15c>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004c4a:	4b30      	ldr	r3, [pc, #192]	; (8004d0c <RCCEx_PLL2_Config+0x15c>)
 8004c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	492d      	ldr	r1, [pc, #180]	; (8004d0c <RCCEx_PLL2_Config+0x15c>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004c5c:	4b2b      	ldr	r3, [pc, #172]	; (8004d0c <RCCEx_PLL2_Config+0x15c>)
 8004c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c60:	f023 0220 	bic.w	r2, r3, #32
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	4928      	ldr	r1, [pc, #160]	; (8004d0c <RCCEx_PLL2_Config+0x15c>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004c6e:	4b27      	ldr	r3, [pc, #156]	; (8004d0c <RCCEx_PLL2_Config+0x15c>)
 8004c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c72:	4a26      	ldr	r2, [pc, #152]	; (8004d0c <RCCEx_PLL2_Config+0x15c>)
 8004c74:	f023 0310 	bic.w	r3, r3, #16
 8004c78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004c7a:	4b24      	ldr	r3, [pc, #144]	; (8004d0c <RCCEx_PLL2_Config+0x15c>)
 8004c7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c7e:	4b24      	ldr	r3, [pc, #144]	; (8004d10 <RCCEx_PLL2_Config+0x160>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	69d2      	ldr	r2, [r2, #28]
 8004c86:	00d2      	lsls	r2, r2, #3
 8004c88:	4920      	ldr	r1, [pc, #128]	; (8004d0c <RCCEx_PLL2_Config+0x15c>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004c8e:	4b1f      	ldr	r3, [pc, #124]	; (8004d0c <RCCEx_PLL2_Config+0x15c>)
 8004c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c92:	4a1e      	ldr	r2, [pc, #120]	; (8004d0c <RCCEx_PLL2_Config+0x15c>)
 8004c94:	f043 0310 	orr.w	r3, r3, #16
 8004c98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d106      	bne.n	8004cae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004ca0:	4b1a      	ldr	r3, [pc, #104]	; (8004d0c <RCCEx_PLL2_Config+0x15c>)
 8004ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca4:	4a19      	ldr	r2, [pc, #100]	; (8004d0c <RCCEx_PLL2_Config+0x15c>)
 8004ca6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004caa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cac:	e00f      	b.n	8004cce <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d106      	bne.n	8004cc2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004cb4:	4b15      	ldr	r3, [pc, #84]	; (8004d0c <RCCEx_PLL2_Config+0x15c>)
 8004cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb8:	4a14      	ldr	r2, [pc, #80]	; (8004d0c <RCCEx_PLL2_Config+0x15c>)
 8004cba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cc0:	e005      	b.n	8004cce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004cc2:	4b12      	ldr	r3, [pc, #72]	; (8004d0c <RCCEx_PLL2_Config+0x15c>)
 8004cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc6:	4a11      	ldr	r2, [pc, #68]	; (8004d0c <RCCEx_PLL2_Config+0x15c>)
 8004cc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ccc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004cce:	4b0f      	ldr	r3, [pc, #60]	; (8004d0c <RCCEx_PLL2_Config+0x15c>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a0e      	ldr	r2, [pc, #56]	; (8004d0c <RCCEx_PLL2_Config+0x15c>)
 8004cd4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cda:	f7fc fc7b 	bl	80015d4 <HAL_GetTick>
 8004cde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ce0:	e008      	b.n	8004cf4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004ce2:	f7fc fc77 	bl	80015d4 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d901      	bls.n	8004cf4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e006      	b.n	8004d02 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004cf4:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <RCCEx_PLL2_Config+0x15c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0f0      	beq.n	8004ce2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	58024400 	.word	0x58024400
 8004d10:	ffff0007 	.word	0xffff0007

08004d14 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d22:	4b53      	ldr	r3, [pc, #332]	; (8004e70 <RCCEx_PLL3_Config+0x15c>)
 8004d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d26:	f003 0303 	and.w	r3, r3, #3
 8004d2a:	2b03      	cmp	r3, #3
 8004d2c:	d101      	bne.n	8004d32 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e099      	b.n	8004e66 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004d32:	4b4f      	ldr	r3, [pc, #316]	; (8004e70 <RCCEx_PLL3_Config+0x15c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a4e      	ldr	r2, [pc, #312]	; (8004e70 <RCCEx_PLL3_Config+0x15c>)
 8004d38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d3e:	f7fc fc49 	bl	80015d4 <HAL_GetTick>
 8004d42:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d44:	e008      	b.n	8004d58 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004d46:	f7fc fc45 	bl	80015d4 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d901      	bls.n	8004d58 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e086      	b.n	8004e66 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d58:	4b45      	ldr	r3, [pc, #276]	; (8004e70 <RCCEx_PLL3_Config+0x15c>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1f0      	bne.n	8004d46 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004d64:	4b42      	ldr	r3, [pc, #264]	; (8004e70 <RCCEx_PLL3_Config+0x15c>)
 8004d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d68:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	051b      	lsls	r3, r3, #20
 8004d72:	493f      	ldr	r1, [pc, #252]	; (8004e70 <RCCEx_PLL3_Config+0x15c>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	628b      	str	r3, [r1, #40]	; 0x28
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	025b      	lsls	r3, r3, #9
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	041b      	lsls	r3, r3, #16
 8004d96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	3b01      	subs	r3, #1
 8004da2:	061b      	lsls	r3, r3, #24
 8004da4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004da8:	4931      	ldr	r1, [pc, #196]	; (8004e70 <RCCEx_PLL3_Config+0x15c>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004dae:	4b30      	ldr	r3, [pc, #192]	; (8004e70 <RCCEx_PLL3_Config+0x15c>)
 8004db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	492d      	ldr	r1, [pc, #180]	; (8004e70 <RCCEx_PLL3_Config+0x15c>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004dc0:	4b2b      	ldr	r3, [pc, #172]	; (8004e70 <RCCEx_PLL3_Config+0x15c>)
 8004dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	4928      	ldr	r1, [pc, #160]	; (8004e70 <RCCEx_PLL3_Config+0x15c>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004dd2:	4b27      	ldr	r3, [pc, #156]	; (8004e70 <RCCEx_PLL3_Config+0x15c>)
 8004dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd6:	4a26      	ldr	r2, [pc, #152]	; (8004e70 <RCCEx_PLL3_Config+0x15c>)
 8004dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ddc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004dde:	4b24      	ldr	r3, [pc, #144]	; (8004e70 <RCCEx_PLL3_Config+0x15c>)
 8004de0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004de2:	4b24      	ldr	r3, [pc, #144]	; (8004e74 <RCCEx_PLL3_Config+0x160>)
 8004de4:	4013      	ands	r3, r2
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	69d2      	ldr	r2, [r2, #28]
 8004dea:	00d2      	lsls	r2, r2, #3
 8004dec:	4920      	ldr	r1, [pc, #128]	; (8004e70 <RCCEx_PLL3_Config+0x15c>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004df2:	4b1f      	ldr	r3, [pc, #124]	; (8004e70 <RCCEx_PLL3_Config+0x15c>)
 8004df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df6:	4a1e      	ldr	r2, [pc, #120]	; (8004e70 <RCCEx_PLL3_Config+0x15c>)
 8004df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dfc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d106      	bne.n	8004e12 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e04:	4b1a      	ldr	r3, [pc, #104]	; (8004e70 <RCCEx_PLL3_Config+0x15c>)
 8004e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e08:	4a19      	ldr	r2, [pc, #100]	; (8004e70 <RCCEx_PLL3_Config+0x15c>)
 8004e0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e10:	e00f      	b.n	8004e32 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d106      	bne.n	8004e26 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e18:	4b15      	ldr	r3, [pc, #84]	; (8004e70 <RCCEx_PLL3_Config+0x15c>)
 8004e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1c:	4a14      	ldr	r2, [pc, #80]	; (8004e70 <RCCEx_PLL3_Config+0x15c>)
 8004e1e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e24:	e005      	b.n	8004e32 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004e26:	4b12      	ldr	r3, [pc, #72]	; (8004e70 <RCCEx_PLL3_Config+0x15c>)
 8004e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2a:	4a11      	ldr	r2, [pc, #68]	; (8004e70 <RCCEx_PLL3_Config+0x15c>)
 8004e2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e30:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004e32:	4b0f      	ldr	r3, [pc, #60]	; (8004e70 <RCCEx_PLL3_Config+0x15c>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a0e      	ldr	r2, [pc, #56]	; (8004e70 <RCCEx_PLL3_Config+0x15c>)
 8004e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e3e:	f7fc fbc9 	bl	80015d4 <HAL_GetTick>
 8004e42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e44:	e008      	b.n	8004e58 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004e46:	f7fc fbc5 	bl	80015d4 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d901      	bls.n	8004e58 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e006      	b.n	8004e66 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e58:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <RCCEx_PLL3_Config+0x15c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d0f0      	beq.n	8004e46 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	58024400 	.word	0x58024400
 8004e74:	ffff0007 	.word	0xffff0007

08004e78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d101      	bne.n	8004e8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e049      	b.n	8004f1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d106      	bne.n	8004ea4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7fc f972 	bl	8001188 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	4610      	mov	r0, r2
 8004eb8:	f000 faee 	bl	8005498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
	...

08004f28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d001      	beq.n	8004f40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e054      	b.n	8004fea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0201 	orr.w	r2, r2, #1
 8004f56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a26      	ldr	r2, [pc, #152]	; (8004ff8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d022      	beq.n	8004fa8 <HAL_TIM_Base_Start_IT+0x80>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f6a:	d01d      	beq.n	8004fa8 <HAL_TIM_Base_Start_IT+0x80>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a22      	ldr	r2, [pc, #136]	; (8004ffc <HAL_TIM_Base_Start_IT+0xd4>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d018      	beq.n	8004fa8 <HAL_TIM_Base_Start_IT+0x80>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a21      	ldr	r2, [pc, #132]	; (8005000 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d013      	beq.n	8004fa8 <HAL_TIM_Base_Start_IT+0x80>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a1f      	ldr	r2, [pc, #124]	; (8005004 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00e      	beq.n	8004fa8 <HAL_TIM_Base_Start_IT+0x80>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a1e      	ldr	r2, [pc, #120]	; (8005008 <HAL_TIM_Base_Start_IT+0xe0>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d009      	beq.n	8004fa8 <HAL_TIM_Base_Start_IT+0x80>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a1c      	ldr	r2, [pc, #112]	; (800500c <HAL_TIM_Base_Start_IT+0xe4>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d004      	beq.n	8004fa8 <HAL_TIM_Base_Start_IT+0x80>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a1b      	ldr	r2, [pc, #108]	; (8005010 <HAL_TIM_Base_Start_IT+0xe8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d115      	bne.n	8004fd4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689a      	ldr	r2, [r3, #8]
 8004fae:	4b19      	ldr	r3, [pc, #100]	; (8005014 <HAL_TIM_Base_Start_IT+0xec>)
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b06      	cmp	r3, #6
 8004fb8:	d015      	beq.n	8004fe6 <HAL_TIM_Base_Start_IT+0xbe>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fc0:	d011      	beq.n	8004fe6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f042 0201 	orr.w	r2, r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd2:	e008      	b.n	8004fe6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0201 	orr.w	r2, r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	e000      	b.n	8004fe8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	40010000 	.word	0x40010000
 8004ffc:	40000400 	.word	0x40000400
 8005000:	40000800 	.word	0x40000800
 8005004:	40000c00 	.word	0x40000c00
 8005008:	40010400 	.word	0x40010400
 800500c:	40001800 	.word	0x40001800
 8005010:	40014000 	.word	0x40014000
 8005014:	00010007 	.word	0x00010007

08005018 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b02      	cmp	r3, #2
 800502c:	d122      	bne.n	8005074 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b02      	cmp	r3, #2
 800503a:	d11b      	bne.n	8005074 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f06f 0202 	mvn.w	r2, #2
 8005044:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	f003 0303 	and.w	r3, r3, #3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f9fe 	bl	800545c <HAL_TIM_IC_CaptureCallback>
 8005060:	e005      	b.n	800506e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f9f0 	bl	8005448 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 fa01 	bl	8005470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	f003 0304 	and.w	r3, r3, #4
 800507e:	2b04      	cmp	r3, #4
 8005080:	d122      	bne.n	80050c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b04      	cmp	r3, #4
 800508e:	d11b      	bne.n	80050c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f06f 0204 	mvn.w	r2, #4
 8005098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2202      	movs	r2, #2
 800509e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f9d4 	bl	800545c <HAL_TIM_IC_CaptureCallback>
 80050b4:	e005      	b.n	80050c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f9c6 	bl	8005448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f9d7 	bl	8005470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	2b08      	cmp	r3, #8
 80050d4:	d122      	bne.n	800511c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d11b      	bne.n	800511c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f06f 0208 	mvn.w	r2, #8
 80050ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2204      	movs	r2, #4
 80050f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f9aa 	bl	800545c <HAL_TIM_IC_CaptureCallback>
 8005108:	e005      	b.n	8005116 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f99c 	bl	8005448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f9ad 	bl	8005470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	f003 0310 	and.w	r3, r3, #16
 8005126:	2b10      	cmp	r3, #16
 8005128:	d122      	bne.n	8005170 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	f003 0310 	and.w	r3, r3, #16
 8005134:	2b10      	cmp	r3, #16
 8005136:	d11b      	bne.n	8005170 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f06f 0210 	mvn.w	r2, #16
 8005140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2208      	movs	r2, #8
 8005146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f980 	bl	800545c <HAL_TIM_IC_CaptureCallback>
 800515c:	e005      	b.n	800516a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f972 	bl	8005448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f983 	bl	8005470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b01      	cmp	r3, #1
 800517c:	d10e      	bne.n	800519c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b01      	cmp	r3, #1
 800518a:	d107      	bne.n	800519c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f06f 0201 	mvn.w	r2, #1
 8005194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7fb fd8c 	bl	8000cb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a6:	2b80      	cmp	r3, #128	; 0x80
 80051a8:	d10e      	bne.n	80051c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b4:	2b80      	cmp	r3, #128	; 0x80
 80051b6:	d107      	bne.n	80051c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fb38 	bl	8005838 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051d6:	d10e      	bne.n	80051f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e2:	2b80      	cmp	r3, #128	; 0x80
 80051e4:	d107      	bne.n	80051f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80051ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 fb2b 	bl	800584c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005200:	2b40      	cmp	r3, #64	; 0x40
 8005202:	d10e      	bne.n	8005222 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520e:	2b40      	cmp	r3, #64	; 0x40
 8005210:	d107      	bne.n	8005222 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800521a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f931 	bl	8005484 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	f003 0320 	and.w	r3, r3, #32
 800522c:	2b20      	cmp	r3, #32
 800522e:	d10e      	bne.n	800524e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f003 0320 	and.w	r3, r3, #32
 800523a:	2b20      	cmp	r3, #32
 800523c:	d107      	bne.n	800524e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f06f 0220 	mvn.w	r2, #32
 8005246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 faeb 	bl	8005824 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800524e:	bf00      	nop
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
	...

08005258 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005262:	2300      	movs	r3, #0
 8005264:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800526c:	2b01      	cmp	r3, #1
 800526e:	d101      	bne.n	8005274 <HAL_TIM_ConfigClockSource+0x1c>
 8005270:	2302      	movs	r3, #2
 8005272:	e0dc      	b.n	800542e <HAL_TIM_ConfigClockSource+0x1d6>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	4b6a      	ldr	r3, [pc, #424]	; (8005438 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005290:	4013      	ands	r3, r2
 8005292:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800529a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a64      	ldr	r2, [pc, #400]	; (800543c <HAL_TIM_ConfigClockSource+0x1e4>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	f000 80a9 	beq.w	8005402 <HAL_TIM_ConfigClockSource+0x1aa>
 80052b0:	4a62      	ldr	r2, [pc, #392]	; (800543c <HAL_TIM_ConfigClockSource+0x1e4>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	f200 80ae 	bhi.w	8005414 <HAL_TIM_ConfigClockSource+0x1bc>
 80052b8:	4a61      	ldr	r2, [pc, #388]	; (8005440 <HAL_TIM_ConfigClockSource+0x1e8>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	f000 80a1 	beq.w	8005402 <HAL_TIM_ConfigClockSource+0x1aa>
 80052c0:	4a5f      	ldr	r2, [pc, #380]	; (8005440 <HAL_TIM_ConfigClockSource+0x1e8>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	f200 80a6 	bhi.w	8005414 <HAL_TIM_ConfigClockSource+0x1bc>
 80052c8:	4a5e      	ldr	r2, [pc, #376]	; (8005444 <HAL_TIM_ConfigClockSource+0x1ec>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	f000 8099 	beq.w	8005402 <HAL_TIM_ConfigClockSource+0x1aa>
 80052d0:	4a5c      	ldr	r2, [pc, #368]	; (8005444 <HAL_TIM_ConfigClockSource+0x1ec>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	f200 809e 	bhi.w	8005414 <HAL_TIM_ConfigClockSource+0x1bc>
 80052d8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80052dc:	f000 8091 	beq.w	8005402 <HAL_TIM_ConfigClockSource+0x1aa>
 80052e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80052e4:	f200 8096 	bhi.w	8005414 <HAL_TIM_ConfigClockSource+0x1bc>
 80052e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052ec:	f000 8089 	beq.w	8005402 <HAL_TIM_ConfigClockSource+0x1aa>
 80052f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052f4:	f200 808e 	bhi.w	8005414 <HAL_TIM_ConfigClockSource+0x1bc>
 80052f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052fc:	d03e      	beq.n	800537c <HAL_TIM_ConfigClockSource+0x124>
 80052fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005302:	f200 8087 	bhi.w	8005414 <HAL_TIM_ConfigClockSource+0x1bc>
 8005306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800530a:	f000 8086 	beq.w	800541a <HAL_TIM_ConfigClockSource+0x1c2>
 800530e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005312:	d87f      	bhi.n	8005414 <HAL_TIM_ConfigClockSource+0x1bc>
 8005314:	2b70      	cmp	r3, #112	; 0x70
 8005316:	d01a      	beq.n	800534e <HAL_TIM_ConfigClockSource+0xf6>
 8005318:	2b70      	cmp	r3, #112	; 0x70
 800531a:	d87b      	bhi.n	8005414 <HAL_TIM_ConfigClockSource+0x1bc>
 800531c:	2b60      	cmp	r3, #96	; 0x60
 800531e:	d050      	beq.n	80053c2 <HAL_TIM_ConfigClockSource+0x16a>
 8005320:	2b60      	cmp	r3, #96	; 0x60
 8005322:	d877      	bhi.n	8005414 <HAL_TIM_ConfigClockSource+0x1bc>
 8005324:	2b50      	cmp	r3, #80	; 0x50
 8005326:	d03c      	beq.n	80053a2 <HAL_TIM_ConfigClockSource+0x14a>
 8005328:	2b50      	cmp	r3, #80	; 0x50
 800532a:	d873      	bhi.n	8005414 <HAL_TIM_ConfigClockSource+0x1bc>
 800532c:	2b40      	cmp	r3, #64	; 0x40
 800532e:	d058      	beq.n	80053e2 <HAL_TIM_ConfigClockSource+0x18a>
 8005330:	2b40      	cmp	r3, #64	; 0x40
 8005332:	d86f      	bhi.n	8005414 <HAL_TIM_ConfigClockSource+0x1bc>
 8005334:	2b30      	cmp	r3, #48	; 0x30
 8005336:	d064      	beq.n	8005402 <HAL_TIM_ConfigClockSource+0x1aa>
 8005338:	2b30      	cmp	r3, #48	; 0x30
 800533a:	d86b      	bhi.n	8005414 <HAL_TIM_ConfigClockSource+0x1bc>
 800533c:	2b20      	cmp	r3, #32
 800533e:	d060      	beq.n	8005402 <HAL_TIM_ConfigClockSource+0x1aa>
 8005340:	2b20      	cmp	r3, #32
 8005342:	d867      	bhi.n	8005414 <HAL_TIM_ConfigClockSource+0x1bc>
 8005344:	2b00      	cmp	r3, #0
 8005346:	d05c      	beq.n	8005402 <HAL_TIM_ConfigClockSource+0x1aa>
 8005348:	2b10      	cmp	r3, #16
 800534a:	d05a      	beq.n	8005402 <HAL_TIM_ConfigClockSource+0x1aa>
 800534c:	e062      	b.n	8005414 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6818      	ldr	r0, [r3, #0]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	6899      	ldr	r1, [r3, #8]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f000 f9b3 	bl	80056c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005370:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	609a      	str	r2, [r3, #8]
      break;
 800537a:	e04f      	b.n	800541c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6818      	ldr	r0, [r3, #0]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	6899      	ldr	r1, [r3, #8]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685a      	ldr	r2, [r3, #4]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f000 f99c 	bl	80056c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689a      	ldr	r2, [r3, #8]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800539e:	609a      	str	r2, [r3, #8]
      break;
 80053a0:	e03c      	b.n	800541c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6818      	ldr	r0, [r3, #0]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	6859      	ldr	r1, [r3, #4]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	461a      	mov	r2, r3
 80053b0:	f000 f90c 	bl	80055cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2150      	movs	r1, #80	; 0x50
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 f966 	bl	800568c <TIM_ITRx_SetConfig>
      break;
 80053c0:	e02c      	b.n	800541c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6818      	ldr	r0, [r3, #0]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	6859      	ldr	r1, [r3, #4]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	461a      	mov	r2, r3
 80053d0:	f000 f92b 	bl	800562a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2160      	movs	r1, #96	; 0x60
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 f956 	bl	800568c <TIM_ITRx_SetConfig>
      break;
 80053e0:	e01c      	b.n	800541c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6818      	ldr	r0, [r3, #0]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	6859      	ldr	r1, [r3, #4]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	461a      	mov	r2, r3
 80053f0:	f000 f8ec 	bl	80055cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2140      	movs	r1, #64	; 0x40
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 f946 	bl	800568c <TIM_ITRx_SetConfig>
      break;
 8005400:	e00c      	b.n	800541c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4619      	mov	r1, r3
 800540c:	4610      	mov	r0, r2
 800540e:	f000 f93d 	bl	800568c <TIM_ITRx_SetConfig>
      break;
 8005412:	e003      	b.n	800541c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	73fb      	strb	r3, [r7, #15]
      break;
 8005418:	e000      	b.n	800541c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800541a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800542c:	7bfb      	ldrb	r3, [r7, #15]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	ffceff88 	.word	0xffceff88
 800543c:	00100040 	.word	0x00100040
 8005440:	00100030 	.word	0x00100030
 8005444:	00100020 	.word	0x00100020

08005448 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a40      	ldr	r2, [pc, #256]	; (80055ac <TIM_Base_SetConfig+0x114>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d013      	beq.n	80054d8 <TIM_Base_SetConfig+0x40>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b6:	d00f      	beq.n	80054d8 <TIM_Base_SetConfig+0x40>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a3d      	ldr	r2, [pc, #244]	; (80055b0 <TIM_Base_SetConfig+0x118>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d00b      	beq.n	80054d8 <TIM_Base_SetConfig+0x40>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a3c      	ldr	r2, [pc, #240]	; (80055b4 <TIM_Base_SetConfig+0x11c>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d007      	beq.n	80054d8 <TIM_Base_SetConfig+0x40>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a3b      	ldr	r2, [pc, #236]	; (80055b8 <TIM_Base_SetConfig+0x120>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d003      	beq.n	80054d8 <TIM_Base_SetConfig+0x40>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a3a      	ldr	r2, [pc, #232]	; (80055bc <TIM_Base_SetConfig+0x124>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d108      	bne.n	80054ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a2f      	ldr	r2, [pc, #188]	; (80055ac <TIM_Base_SetConfig+0x114>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d01f      	beq.n	8005532 <TIM_Base_SetConfig+0x9a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f8:	d01b      	beq.n	8005532 <TIM_Base_SetConfig+0x9a>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a2c      	ldr	r2, [pc, #176]	; (80055b0 <TIM_Base_SetConfig+0x118>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d017      	beq.n	8005532 <TIM_Base_SetConfig+0x9a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a2b      	ldr	r2, [pc, #172]	; (80055b4 <TIM_Base_SetConfig+0x11c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d013      	beq.n	8005532 <TIM_Base_SetConfig+0x9a>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a2a      	ldr	r2, [pc, #168]	; (80055b8 <TIM_Base_SetConfig+0x120>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00f      	beq.n	8005532 <TIM_Base_SetConfig+0x9a>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a29      	ldr	r2, [pc, #164]	; (80055bc <TIM_Base_SetConfig+0x124>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d00b      	beq.n	8005532 <TIM_Base_SetConfig+0x9a>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a28      	ldr	r2, [pc, #160]	; (80055c0 <TIM_Base_SetConfig+0x128>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d007      	beq.n	8005532 <TIM_Base_SetConfig+0x9a>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a27      	ldr	r2, [pc, #156]	; (80055c4 <TIM_Base_SetConfig+0x12c>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d003      	beq.n	8005532 <TIM_Base_SetConfig+0x9a>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a26      	ldr	r2, [pc, #152]	; (80055c8 <TIM_Base_SetConfig+0x130>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d108      	bne.n	8005544 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	4313      	orrs	r3, r2
 8005542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	4313      	orrs	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	689a      	ldr	r2, [r3, #8]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a10      	ldr	r2, [pc, #64]	; (80055ac <TIM_Base_SetConfig+0x114>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00f      	beq.n	8005590 <TIM_Base_SetConfig+0xf8>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a12      	ldr	r2, [pc, #72]	; (80055bc <TIM_Base_SetConfig+0x124>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d00b      	beq.n	8005590 <TIM_Base_SetConfig+0xf8>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a11      	ldr	r2, [pc, #68]	; (80055c0 <TIM_Base_SetConfig+0x128>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d007      	beq.n	8005590 <TIM_Base_SetConfig+0xf8>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a10      	ldr	r2, [pc, #64]	; (80055c4 <TIM_Base_SetConfig+0x12c>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d003      	beq.n	8005590 <TIM_Base_SetConfig+0xf8>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a0f      	ldr	r2, [pc, #60]	; (80055c8 <TIM_Base_SetConfig+0x130>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d103      	bne.n	8005598 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	691a      	ldr	r2, [r3, #16]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	615a      	str	r2, [r3, #20]
}
 800559e:	bf00      	nop
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	40010000 	.word	0x40010000
 80055b0:	40000400 	.word	0x40000400
 80055b4:	40000800 	.word	0x40000800
 80055b8:	40000c00 	.word	0x40000c00
 80055bc:	40010400 	.word	0x40010400
 80055c0:	40014000 	.word	0x40014000
 80055c4:	40014400 	.word	0x40014400
 80055c8:	40014800 	.word	0x40014800

080055cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b087      	sub	sp, #28
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	f023 0201 	bic.w	r2, r3, #1
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	4313      	orrs	r3, r2
 8005600:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f023 030a 	bic.w	r3, r3, #10
 8005608:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	4313      	orrs	r3, r2
 8005610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	621a      	str	r2, [r3, #32]
}
 800561e:	bf00      	nop
 8005620:	371c      	adds	r7, #28
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800562a:	b480      	push	{r7}
 800562c:	b087      	sub	sp, #28
 800562e:	af00      	add	r7, sp, #0
 8005630:	60f8      	str	r0, [r7, #12]
 8005632:	60b9      	str	r1, [r7, #8]
 8005634:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	f023 0210 	bic.w	r2, r3, #16
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005654:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	031b      	lsls	r3, r3, #12
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	4313      	orrs	r3, r2
 800565e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005666:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	011b      	lsls	r3, r3, #4
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	4313      	orrs	r3, r2
 8005670:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	621a      	str	r2, [r3, #32]
}
 800567e:	bf00      	nop
 8005680:	371c      	adds	r7, #28
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
	...

0800568c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	4b09      	ldr	r3, [pc, #36]	; (80056c4 <TIM_ITRx_SetConfig+0x38>)
 80056a0:	4013      	ands	r3, r2
 80056a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	f043 0307 	orr.w	r3, r3, #7
 80056ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	609a      	str	r2, [r3, #8]
}
 80056b6:	bf00      	nop
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	ffcfff8f 	.word	0xffcfff8f

080056c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b087      	sub	sp, #28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
 80056d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	021a      	lsls	r2, r3, #8
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	431a      	orrs	r2, r3
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	609a      	str	r2, [r3, #8]
}
 80056fc:	bf00      	nop
 80056fe:	371c      	adds	r7, #28
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005718:	2b01      	cmp	r3, #1
 800571a:	d101      	bne.n	8005720 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800571c:	2302      	movs	r3, #2
 800571e:	e06d      	b.n	80057fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2202      	movs	r2, #2
 800572c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a30      	ldr	r2, [pc, #192]	; (8005808 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d004      	beq.n	8005754 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a2f      	ldr	r2, [pc, #188]	; (800580c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d108      	bne.n	8005766 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800575a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	4313      	orrs	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	4313      	orrs	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a20      	ldr	r2, [pc, #128]	; (8005808 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d022      	beq.n	80057d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005792:	d01d      	beq.n	80057d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a1d      	ldr	r2, [pc, #116]	; (8005810 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d018      	beq.n	80057d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a1c      	ldr	r2, [pc, #112]	; (8005814 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d013      	beq.n	80057d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a1a      	ldr	r2, [pc, #104]	; (8005818 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d00e      	beq.n	80057d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a15      	ldr	r2, [pc, #84]	; (800580c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d009      	beq.n	80057d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a16      	ldr	r2, [pc, #88]	; (800581c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d004      	beq.n	80057d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a15      	ldr	r2, [pc, #84]	; (8005820 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d10c      	bne.n	80057ea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	4313      	orrs	r3, r2
 80057e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	40010000 	.word	0x40010000
 800580c:	40010400 	.word	0x40010400
 8005810:	40000400 	.word	0x40000400
 8005814:	40000800 	.word	0x40000800
 8005818:	40000c00 	.word	0x40000c00
 800581c:	40001800 	.word	0x40001800
 8005820:	40014000 	.word	0x40014000

08005824 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e042      	b.n	80058f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005878:	2b00      	cmp	r3, #0
 800587a:	d106      	bne.n	800588a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7fb fcc7 	bl	8001218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2224      	movs	r2, #36	; 0x24
 800588e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 0201 	bic.w	r2, r2, #1
 80058a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f82c 	bl	8005900 <UART_SetConfig>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d101      	bne.n	80058b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e022      	b.n	80058f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d002      	beq.n	80058c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 fd80 	bl	80063c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689a      	ldr	r2, [r3, #8]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 0201 	orr.w	r2, r2, #1
 80058ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 fe07 	bl	8006504 <UART_CheckIdleState>
 80058f6:	4603      	mov	r3, r0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3708      	adds	r7, #8
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005900:	b5b0      	push	{r4, r5, r7, lr}
 8005902:	b08e      	sub	sp, #56	; 0x38
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005908:	2300      	movs	r3, #0
 800590a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	689a      	ldr	r2, [r3, #8]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	431a      	orrs	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	431a      	orrs	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	69db      	ldr	r3, [r3, #28]
 8005922:	4313      	orrs	r3, r2
 8005924:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	4bbf      	ldr	r3, [pc, #764]	; (8005c2c <UART_SetConfig+0x32c>)
 800592e:	4013      	ands	r3, r2
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	6812      	ldr	r2, [r2, #0]
 8005934:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005936:	430b      	orrs	r3, r1
 8005938:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	68da      	ldr	r2, [r3, #12]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4ab5      	ldr	r2, [pc, #724]	; (8005c30 <UART_SetConfig+0x330>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d004      	beq.n	800596a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005966:	4313      	orrs	r3, r2
 8005968:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689a      	ldr	r2, [r3, #8]
 8005970:	4bb0      	ldr	r3, [pc, #704]	; (8005c34 <UART_SetConfig+0x334>)
 8005972:	4013      	ands	r3, r2
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6812      	ldr	r2, [r2, #0]
 8005978:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800597a:	430b      	orrs	r3, r1
 800597c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005984:	f023 010f 	bic.w	r1, r3, #15
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	430a      	orrs	r2, r1
 8005992:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4aa7      	ldr	r2, [pc, #668]	; (8005c38 <UART_SetConfig+0x338>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d176      	bne.n	8005a8c <UART_SetConfig+0x18c>
 800599e:	4ba7      	ldr	r3, [pc, #668]	; (8005c3c <UART_SetConfig+0x33c>)
 80059a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059a6:	2b28      	cmp	r3, #40	; 0x28
 80059a8:	d86c      	bhi.n	8005a84 <UART_SetConfig+0x184>
 80059aa:	a201      	add	r2, pc, #4	; (adr r2, 80059b0 <UART_SetConfig+0xb0>)
 80059ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b0:	08005a55 	.word	0x08005a55
 80059b4:	08005a85 	.word	0x08005a85
 80059b8:	08005a85 	.word	0x08005a85
 80059bc:	08005a85 	.word	0x08005a85
 80059c0:	08005a85 	.word	0x08005a85
 80059c4:	08005a85 	.word	0x08005a85
 80059c8:	08005a85 	.word	0x08005a85
 80059cc:	08005a85 	.word	0x08005a85
 80059d0:	08005a5d 	.word	0x08005a5d
 80059d4:	08005a85 	.word	0x08005a85
 80059d8:	08005a85 	.word	0x08005a85
 80059dc:	08005a85 	.word	0x08005a85
 80059e0:	08005a85 	.word	0x08005a85
 80059e4:	08005a85 	.word	0x08005a85
 80059e8:	08005a85 	.word	0x08005a85
 80059ec:	08005a85 	.word	0x08005a85
 80059f0:	08005a65 	.word	0x08005a65
 80059f4:	08005a85 	.word	0x08005a85
 80059f8:	08005a85 	.word	0x08005a85
 80059fc:	08005a85 	.word	0x08005a85
 8005a00:	08005a85 	.word	0x08005a85
 8005a04:	08005a85 	.word	0x08005a85
 8005a08:	08005a85 	.word	0x08005a85
 8005a0c:	08005a85 	.word	0x08005a85
 8005a10:	08005a6d 	.word	0x08005a6d
 8005a14:	08005a85 	.word	0x08005a85
 8005a18:	08005a85 	.word	0x08005a85
 8005a1c:	08005a85 	.word	0x08005a85
 8005a20:	08005a85 	.word	0x08005a85
 8005a24:	08005a85 	.word	0x08005a85
 8005a28:	08005a85 	.word	0x08005a85
 8005a2c:	08005a85 	.word	0x08005a85
 8005a30:	08005a75 	.word	0x08005a75
 8005a34:	08005a85 	.word	0x08005a85
 8005a38:	08005a85 	.word	0x08005a85
 8005a3c:	08005a85 	.word	0x08005a85
 8005a40:	08005a85 	.word	0x08005a85
 8005a44:	08005a85 	.word	0x08005a85
 8005a48:	08005a85 	.word	0x08005a85
 8005a4c:	08005a85 	.word	0x08005a85
 8005a50:	08005a7d 	.word	0x08005a7d
 8005a54:	2301      	movs	r3, #1
 8005a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a5a:	e222      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005a5c:	2304      	movs	r3, #4
 8005a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a62:	e21e      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005a64:	2308      	movs	r3, #8
 8005a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a6a:	e21a      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005a6c:	2310      	movs	r3, #16
 8005a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a72:	e216      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005a74:	2320      	movs	r3, #32
 8005a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a7a:	e212      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005a7c:	2340      	movs	r3, #64	; 0x40
 8005a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a82:	e20e      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005a84:	2380      	movs	r3, #128	; 0x80
 8005a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a8a:	e20a      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a6b      	ldr	r2, [pc, #428]	; (8005c40 <UART_SetConfig+0x340>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d130      	bne.n	8005af8 <UART_SetConfig+0x1f8>
 8005a96:	4b69      	ldr	r3, [pc, #420]	; (8005c3c <UART_SetConfig+0x33c>)
 8005a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9a:	f003 0307 	and.w	r3, r3, #7
 8005a9e:	2b05      	cmp	r3, #5
 8005aa0:	d826      	bhi.n	8005af0 <UART_SetConfig+0x1f0>
 8005aa2:	a201      	add	r2, pc, #4	; (adr r2, 8005aa8 <UART_SetConfig+0x1a8>)
 8005aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa8:	08005ac1 	.word	0x08005ac1
 8005aac:	08005ac9 	.word	0x08005ac9
 8005ab0:	08005ad1 	.word	0x08005ad1
 8005ab4:	08005ad9 	.word	0x08005ad9
 8005ab8:	08005ae1 	.word	0x08005ae1
 8005abc:	08005ae9 	.word	0x08005ae9
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ac6:	e1ec      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005ac8:	2304      	movs	r3, #4
 8005aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ace:	e1e8      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005ad0:	2308      	movs	r3, #8
 8005ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ad6:	e1e4      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005ad8:	2310      	movs	r3, #16
 8005ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ade:	e1e0      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005ae0:	2320      	movs	r3, #32
 8005ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ae6:	e1dc      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005ae8:	2340      	movs	r3, #64	; 0x40
 8005aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aee:	e1d8      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005af0:	2380      	movs	r3, #128	; 0x80
 8005af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005af6:	e1d4      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a51      	ldr	r2, [pc, #324]	; (8005c44 <UART_SetConfig+0x344>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d130      	bne.n	8005b64 <UART_SetConfig+0x264>
 8005b02:	4b4e      	ldr	r3, [pc, #312]	; (8005c3c <UART_SetConfig+0x33c>)
 8005b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b06:	f003 0307 	and.w	r3, r3, #7
 8005b0a:	2b05      	cmp	r3, #5
 8005b0c:	d826      	bhi.n	8005b5c <UART_SetConfig+0x25c>
 8005b0e:	a201      	add	r2, pc, #4	; (adr r2, 8005b14 <UART_SetConfig+0x214>)
 8005b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b14:	08005b2d 	.word	0x08005b2d
 8005b18:	08005b35 	.word	0x08005b35
 8005b1c:	08005b3d 	.word	0x08005b3d
 8005b20:	08005b45 	.word	0x08005b45
 8005b24:	08005b4d 	.word	0x08005b4d
 8005b28:	08005b55 	.word	0x08005b55
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b32:	e1b6      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005b34:	2304      	movs	r3, #4
 8005b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b3a:	e1b2      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005b3c:	2308      	movs	r3, #8
 8005b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b42:	e1ae      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005b44:	2310      	movs	r3, #16
 8005b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b4a:	e1aa      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005b4c:	2320      	movs	r3, #32
 8005b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b52:	e1a6      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005b54:	2340      	movs	r3, #64	; 0x40
 8005b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b5a:	e1a2      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005b5c:	2380      	movs	r3, #128	; 0x80
 8005b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b62:	e19e      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a37      	ldr	r2, [pc, #220]	; (8005c48 <UART_SetConfig+0x348>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d130      	bne.n	8005bd0 <UART_SetConfig+0x2d0>
 8005b6e:	4b33      	ldr	r3, [pc, #204]	; (8005c3c <UART_SetConfig+0x33c>)
 8005b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b72:	f003 0307 	and.w	r3, r3, #7
 8005b76:	2b05      	cmp	r3, #5
 8005b78:	d826      	bhi.n	8005bc8 <UART_SetConfig+0x2c8>
 8005b7a:	a201      	add	r2, pc, #4	; (adr r2, 8005b80 <UART_SetConfig+0x280>)
 8005b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b80:	08005b99 	.word	0x08005b99
 8005b84:	08005ba1 	.word	0x08005ba1
 8005b88:	08005ba9 	.word	0x08005ba9
 8005b8c:	08005bb1 	.word	0x08005bb1
 8005b90:	08005bb9 	.word	0x08005bb9
 8005b94:	08005bc1 	.word	0x08005bc1
 8005b98:	2300      	movs	r3, #0
 8005b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b9e:	e180      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005ba0:	2304      	movs	r3, #4
 8005ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ba6:	e17c      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005ba8:	2308      	movs	r3, #8
 8005baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bae:	e178      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005bb0:	2310      	movs	r3, #16
 8005bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bb6:	e174      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005bb8:	2320      	movs	r3, #32
 8005bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bbe:	e170      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005bc0:	2340      	movs	r3, #64	; 0x40
 8005bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bc6:	e16c      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005bc8:	2380      	movs	r3, #128	; 0x80
 8005bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bce:	e168      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a1d      	ldr	r2, [pc, #116]	; (8005c4c <UART_SetConfig+0x34c>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d142      	bne.n	8005c60 <UART_SetConfig+0x360>
 8005bda:	4b18      	ldr	r3, [pc, #96]	; (8005c3c <UART_SetConfig+0x33c>)
 8005bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bde:	f003 0307 	and.w	r3, r3, #7
 8005be2:	2b05      	cmp	r3, #5
 8005be4:	d838      	bhi.n	8005c58 <UART_SetConfig+0x358>
 8005be6:	a201      	add	r2, pc, #4	; (adr r2, 8005bec <UART_SetConfig+0x2ec>)
 8005be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bec:	08005c05 	.word	0x08005c05
 8005bf0:	08005c0d 	.word	0x08005c0d
 8005bf4:	08005c15 	.word	0x08005c15
 8005bf8:	08005c1d 	.word	0x08005c1d
 8005bfc:	08005c25 	.word	0x08005c25
 8005c00:	08005c51 	.word	0x08005c51
 8005c04:	2300      	movs	r3, #0
 8005c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c0a:	e14a      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005c0c:	2304      	movs	r3, #4
 8005c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c12:	e146      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005c14:	2308      	movs	r3, #8
 8005c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c1a:	e142      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005c1c:	2310      	movs	r3, #16
 8005c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c22:	e13e      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005c24:	2320      	movs	r3, #32
 8005c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c2a:	e13a      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005c2c:	cfff69f3 	.word	0xcfff69f3
 8005c30:	58000c00 	.word	0x58000c00
 8005c34:	11fff4ff 	.word	0x11fff4ff
 8005c38:	40011000 	.word	0x40011000
 8005c3c:	58024400 	.word	0x58024400
 8005c40:	40004400 	.word	0x40004400
 8005c44:	40004800 	.word	0x40004800
 8005c48:	40004c00 	.word	0x40004c00
 8005c4c:	40005000 	.word	0x40005000
 8005c50:	2340      	movs	r3, #64	; 0x40
 8005c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c56:	e124      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005c58:	2380      	movs	r3, #128	; 0x80
 8005c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c5e:	e120      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4acc      	ldr	r2, [pc, #816]	; (8005f98 <UART_SetConfig+0x698>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d176      	bne.n	8005d58 <UART_SetConfig+0x458>
 8005c6a:	4bcc      	ldr	r3, [pc, #816]	; (8005f9c <UART_SetConfig+0x69c>)
 8005c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c72:	2b28      	cmp	r3, #40	; 0x28
 8005c74:	d86c      	bhi.n	8005d50 <UART_SetConfig+0x450>
 8005c76:	a201      	add	r2, pc, #4	; (adr r2, 8005c7c <UART_SetConfig+0x37c>)
 8005c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7c:	08005d21 	.word	0x08005d21
 8005c80:	08005d51 	.word	0x08005d51
 8005c84:	08005d51 	.word	0x08005d51
 8005c88:	08005d51 	.word	0x08005d51
 8005c8c:	08005d51 	.word	0x08005d51
 8005c90:	08005d51 	.word	0x08005d51
 8005c94:	08005d51 	.word	0x08005d51
 8005c98:	08005d51 	.word	0x08005d51
 8005c9c:	08005d29 	.word	0x08005d29
 8005ca0:	08005d51 	.word	0x08005d51
 8005ca4:	08005d51 	.word	0x08005d51
 8005ca8:	08005d51 	.word	0x08005d51
 8005cac:	08005d51 	.word	0x08005d51
 8005cb0:	08005d51 	.word	0x08005d51
 8005cb4:	08005d51 	.word	0x08005d51
 8005cb8:	08005d51 	.word	0x08005d51
 8005cbc:	08005d31 	.word	0x08005d31
 8005cc0:	08005d51 	.word	0x08005d51
 8005cc4:	08005d51 	.word	0x08005d51
 8005cc8:	08005d51 	.word	0x08005d51
 8005ccc:	08005d51 	.word	0x08005d51
 8005cd0:	08005d51 	.word	0x08005d51
 8005cd4:	08005d51 	.word	0x08005d51
 8005cd8:	08005d51 	.word	0x08005d51
 8005cdc:	08005d39 	.word	0x08005d39
 8005ce0:	08005d51 	.word	0x08005d51
 8005ce4:	08005d51 	.word	0x08005d51
 8005ce8:	08005d51 	.word	0x08005d51
 8005cec:	08005d51 	.word	0x08005d51
 8005cf0:	08005d51 	.word	0x08005d51
 8005cf4:	08005d51 	.word	0x08005d51
 8005cf8:	08005d51 	.word	0x08005d51
 8005cfc:	08005d41 	.word	0x08005d41
 8005d00:	08005d51 	.word	0x08005d51
 8005d04:	08005d51 	.word	0x08005d51
 8005d08:	08005d51 	.word	0x08005d51
 8005d0c:	08005d51 	.word	0x08005d51
 8005d10:	08005d51 	.word	0x08005d51
 8005d14:	08005d51 	.word	0x08005d51
 8005d18:	08005d51 	.word	0x08005d51
 8005d1c:	08005d49 	.word	0x08005d49
 8005d20:	2301      	movs	r3, #1
 8005d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d26:	e0bc      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005d28:	2304      	movs	r3, #4
 8005d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d2e:	e0b8      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005d30:	2308      	movs	r3, #8
 8005d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d36:	e0b4      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005d38:	2310      	movs	r3, #16
 8005d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d3e:	e0b0      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005d40:	2320      	movs	r3, #32
 8005d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d46:	e0ac      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005d48:	2340      	movs	r3, #64	; 0x40
 8005d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d4e:	e0a8      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005d50:	2380      	movs	r3, #128	; 0x80
 8005d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d56:	e0a4      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a90      	ldr	r2, [pc, #576]	; (8005fa0 <UART_SetConfig+0x6a0>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d130      	bne.n	8005dc4 <UART_SetConfig+0x4c4>
 8005d62:	4b8e      	ldr	r3, [pc, #568]	; (8005f9c <UART_SetConfig+0x69c>)
 8005d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d66:	f003 0307 	and.w	r3, r3, #7
 8005d6a:	2b05      	cmp	r3, #5
 8005d6c:	d826      	bhi.n	8005dbc <UART_SetConfig+0x4bc>
 8005d6e:	a201      	add	r2, pc, #4	; (adr r2, 8005d74 <UART_SetConfig+0x474>)
 8005d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d74:	08005d8d 	.word	0x08005d8d
 8005d78:	08005d95 	.word	0x08005d95
 8005d7c:	08005d9d 	.word	0x08005d9d
 8005d80:	08005da5 	.word	0x08005da5
 8005d84:	08005dad 	.word	0x08005dad
 8005d88:	08005db5 	.word	0x08005db5
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d92:	e086      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005d94:	2304      	movs	r3, #4
 8005d96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d9a:	e082      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005d9c:	2308      	movs	r3, #8
 8005d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005da2:	e07e      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005da4:	2310      	movs	r3, #16
 8005da6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005daa:	e07a      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005dac:	2320      	movs	r3, #32
 8005dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005db2:	e076      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005db4:	2340      	movs	r3, #64	; 0x40
 8005db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dba:	e072      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005dbc:	2380      	movs	r3, #128	; 0x80
 8005dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dc2:	e06e      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a76      	ldr	r2, [pc, #472]	; (8005fa4 <UART_SetConfig+0x6a4>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d130      	bne.n	8005e30 <UART_SetConfig+0x530>
 8005dce:	4b73      	ldr	r3, [pc, #460]	; (8005f9c <UART_SetConfig+0x69c>)
 8005dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd2:	f003 0307 	and.w	r3, r3, #7
 8005dd6:	2b05      	cmp	r3, #5
 8005dd8:	d826      	bhi.n	8005e28 <UART_SetConfig+0x528>
 8005dda:	a201      	add	r2, pc, #4	; (adr r2, 8005de0 <UART_SetConfig+0x4e0>)
 8005ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de0:	08005df9 	.word	0x08005df9
 8005de4:	08005e01 	.word	0x08005e01
 8005de8:	08005e09 	.word	0x08005e09
 8005dec:	08005e11 	.word	0x08005e11
 8005df0:	08005e19 	.word	0x08005e19
 8005df4:	08005e21 	.word	0x08005e21
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dfe:	e050      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005e00:	2304      	movs	r3, #4
 8005e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e06:	e04c      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005e08:	2308      	movs	r3, #8
 8005e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e0e:	e048      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005e10:	2310      	movs	r3, #16
 8005e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e16:	e044      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005e18:	2320      	movs	r3, #32
 8005e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e1e:	e040      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005e20:	2340      	movs	r3, #64	; 0x40
 8005e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e26:	e03c      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005e28:	2380      	movs	r3, #128	; 0x80
 8005e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e2e:	e038      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a5c      	ldr	r2, [pc, #368]	; (8005fa8 <UART_SetConfig+0x6a8>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d130      	bne.n	8005e9c <UART_SetConfig+0x59c>
 8005e3a:	4b58      	ldr	r3, [pc, #352]	; (8005f9c <UART_SetConfig+0x69c>)
 8005e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	2b05      	cmp	r3, #5
 8005e44:	d826      	bhi.n	8005e94 <UART_SetConfig+0x594>
 8005e46:	a201      	add	r2, pc, #4	; (adr r2, 8005e4c <UART_SetConfig+0x54c>)
 8005e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4c:	08005e65 	.word	0x08005e65
 8005e50:	08005e6d 	.word	0x08005e6d
 8005e54:	08005e75 	.word	0x08005e75
 8005e58:	08005e7d 	.word	0x08005e7d
 8005e5c:	08005e85 	.word	0x08005e85
 8005e60:	08005e8d 	.word	0x08005e8d
 8005e64:	2302      	movs	r3, #2
 8005e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e6a:	e01a      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005e6c:	2304      	movs	r3, #4
 8005e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e72:	e016      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005e74:	2308      	movs	r3, #8
 8005e76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e7a:	e012      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005e7c:	2310      	movs	r3, #16
 8005e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e82:	e00e      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005e84:	2320      	movs	r3, #32
 8005e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e8a:	e00a      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005e8c:	2340      	movs	r3, #64	; 0x40
 8005e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e92:	e006      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005e94:	2380      	movs	r3, #128	; 0x80
 8005e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e9a:	e002      	b.n	8005ea2 <UART_SetConfig+0x5a2>
 8005e9c:	2380      	movs	r3, #128	; 0x80
 8005e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a40      	ldr	r2, [pc, #256]	; (8005fa8 <UART_SetConfig+0x6a8>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	f040 80ef 	bne.w	800608c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005eae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005eb2:	2b20      	cmp	r3, #32
 8005eb4:	dc46      	bgt.n	8005f44 <UART_SetConfig+0x644>
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	f2c0 8081 	blt.w	8005fbe <UART_SetConfig+0x6be>
 8005ebc:	3b02      	subs	r3, #2
 8005ebe:	2b1e      	cmp	r3, #30
 8005ec0:	d87d      	bhi.n	8005fbe <UART_SetConfig+0x6be>
 8005ec2:	a201      	add	r2, pc, #4	; (adr r2, 8005ec8 <UART_SetConfig+0x5c8>)
 8005ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec8:	08005f4b 	.word	0x08005f4b
 8005ecc:	08005fbf 	.word	0x08005fbf
 8005ed0:	08005f53 	.word	0x08005f53
 8005ed4:	08005fbf 	.word	0x08005fbf
 8005ed8:	08005fbf 	.word	0x08005fbf
 8005edc:	08005fbf 	.word	0x08005fbf
 8005ee0:	08005f63 	.word	0x08005f63
 8005ee4:	08005fbf 	.word	0x08005fbf
 8005ee8:	08005fbf 	.word	0x08005fbf
 8005eec:	08005fbf 	.word	0x08005fbf
 8005ef0:	08005fbf 	.word	0x08005fbf
 8005ef4:	08005fbf 	.word	0x08005fbf
 8005ef8:	08005fbf 	.word	0x08005fbf
 8005efc:	08005fbf 	.word	0x08005fbf
 8005f00:	08005f73 	.word	0x08005f73
 8005f04:	08005fbf 	.word	0x08005fbf
 8005f08:	08005fbf 	.word	0x08005fbf
 8005f0c:	08005fbf 	.word	0x08005fbf
 8005f10:	08005fbf 	.word	0x08005fbf
 8005f14:	08005fbf 	.word	0x08005fbf
 8005f18:	08005fbf 	.word	0x08005fbf
 8005f1c:	08005fbf 	.word	0x08005fbf
 8005f20:	08005fbf 	.word	0x08005fbf
 8005f24:	08005fbf 	.word	0x08005fbf
 8005f28:	08005fbf 	.word	0x08005fbf
 8005f2c:	08005fbf 	.word	0x08005fbf
 8005f30:	08005fbf 	.word	0x08005fbf
 8005f34:	08005fbf 	.word	0x08005fbf
 8005f38:	08005fbf 	.word	0x08005fbf
 8005f3c:	08005fbf 	.word	0x08005fbf
 8005f40:	08005fb1 	.word	0x08005fb1
 8005f44:	2b40      	cmp	r3, #64	; 0x40
 8005f46:	d036      	beq.n	8005fb6 <UART_SetConfig+0x6b6>
 8005f48:	e039      	b.n	8005fbe <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005f4a:	f7fe fb73 	bl	8004634 <HAL_RCCEx_GetD3PCLK1Freq>
 8005f4e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005f50:	e03b      	b.n	8005fca <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f52:	f107 0314 	add.w	r3, r7, #20
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7fe fb82 	bl	8004660 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f60:	e033      	b.n	8005fca <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f62:	f107 0308 	add.w	r3, r7, #8
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7fe fcce 	bl	8004908 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f70:	e02b      	b.n	8005fca <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f72:	4b0a      	ldr	r3, [pc, #40]	; (8005f9c <UART_SetConfig+0x69c>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0320 	and.w	r3, r3, #32
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d009      	beq.n	8005f92 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f7e:	4b07      	ldr	r3, [pc, #28]	; (8005f9c <UART_SetConfig+0x69c>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	08db      	lsrs	r3, r3, #3
 8005f84:	f003 0303 	and.w	r3, r3, #3
 8005f88:	4a08      	ldr	r2, [pc, #32]	; (8005fac <UART_SetConfig+0x6ac>)
 8005f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f90:	e01b      	b.n	8005fca <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8005f92:	4b06      	ldr	r3, [pc, #24]	; (8005fac <UART_SetConfig+0x6ac>)
 8005f94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f96:	e018      	b.n	8005fca <UART_SetConfig+0x6ca>
 8005f98:	40011400 	.word	0x40011400
 8005f9c:	58024400 	.word	0x58024400
 8005fa0:	40007800 	.word	0x40007800
 8005fa4:	40007c00 	.word	0x40007c00
 8005fa8:	58000c00 	.word	0x58000c00
 8005fac:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005fb0:	4bc4      	ldr	r3, [pc, #784]	; (80062c4 <UART_SetConfig+0x9c4>)
 8005fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fb4:	e009      	b.n	8005fca <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fbc:	e005      	b.n	8005fca <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005fc8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f000 81da 	beq.w	8006386 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd6:	4abc      	ldr	r2, [pc, #752]	; (80062c8 <UART_SetConfig+0x9c8>)
 8005fd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fdc:	461a      	mov	r2, r3
 8005fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fe4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	4613      	mov	r3, r2
 8005fec:	005b      	lsls	r3, r3, #1
 8005fee:	4413      	add	r3, r2
 8005ff0:	6a3a      	ldr	r2, [r7, #32]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d305      	bcc.n	8006002 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ffc:	6a3a      	ldr	r2, [r7, #32]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d903      	bls.n	800600a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006008:	e1bd      	b.n	8006386 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800600a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600c:	4618      	mov	r0, r3
 800600e:	f04f 0100 	mov.w	r1, #0
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006016:	4aac      	ldr	r2, [pc, #688]	; (80062c8 <UART_SetConfig+0x9c8>)
 8006018:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800601c:	b29a      	uxth	r2, r3
 800601e:	f04f 0300 	mov.w	r3, #0
 8006022:	f7fa f959 	bl	80002d8 <__aeabi_uldivmod>
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	4610      	mov	r0, r2
 800602c:	4619      	mov	r1, r3
 800602e:	f04f 0200 	mov.w	r2, #0
 8006032:	f04f 0300 	mov.w	r3, #0
 8006036:	020b      	lsls	r3, r1, #8
 8006038:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800603c:	0202      	lsls	r2, r0, #8
 800603e:	6879      	ldr	r1, [r7, #4]
 8006040:	6849      	ldr	r1, [r1, #4]
 8006042:	0849      	lsrs	r1, r1, #1
 8006044:	4608      	mov	r0, r1
 8006046:	f04f 0100 	mov.w	r1, #0
 800604a:	1814      	adds	r4, r2, r0
 800604c:	eb43 0501 	adc.w	r5, r3, r1
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	461a      	mov	r2, r3
 8006056:	f04f 0300 	mov.w	r3, #0
 800605a:	4620      	mov	r0, r4
 800605c:	4629      	mov	r1, r5
 800605e:	f7fa f93b 	bl	80002d8 <__aeabi_uldivmod>
 8006062:	4602      	mov	r2, r0
 8006064:	460b      	mov	r3, r1
 8006066:	4613      	mov	r3, r2
 8006068:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800606a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006070:	d308      	bcc.n	8006084 <UART_SetConfig+0x784>
 8006072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006074:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006078:	d204      	bcs.n	8006084 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006080:	60da      	str	r2, [r3, #12]
 8006082:	e180      	b.n	8006386 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800608a:	e17c      	b.n	8006386 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	69db      	ldr	r3, [r3, #28]
 8006090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006094:	f040 80be 	bne.w	8006214 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8006098:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800609c:	2b20      	cmp	r3, #32
 800609e:	dc49      	bgt.n	8006134 <UART_SetConfig+0x834>
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	db7c      	blt.n	800619e <UART_SetConfig+0x89e>
 80060a4:	2b20      	cmp	r3, #32
 80060a6:	d87a      	bhi.n	800619e <UART_SetConfig+0x89e>
 80060a8:	a201      	add	r2, pc, #4	; (adr r2, 80060b0 <UART_SetConfig+0x7b0>)
 80060aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ae:	bf00      	nop
 80060b0:	0800613b 	.word	0x0800613b
 80060b4:	08006143 	.word	0x08006143
 80060b8:	0800619f 	.word	0x0800619f
 80060bc:	0800619f 	.word	0x0800619f
 80060c0:	0800614b 	.word	0x0800614b
 80060c4:	0800619f 	.word	0x0800619f
 80060c8:	0800619f 	.word	0x0800619f
 80060cc:	0800619f 	.word	0x0800619f
 80060d0:	0800615b 	.word	0x0800615b
 80060d4:	0800619f 	.word	0x0800619f
 80060d8:	0800619f 	.word	0x0800619f
 80060dc:	0800619f 	.word	0x0800619f
 80060e0:	0800619f 	.word	0x0800619f
 80060e4:	0800619f 	.word	0x0800619f
 80060e8:	0800619f 	.word	0x0800619f
 80060ec:	0800619f 	.word	0x0800619f
 80060f0:	0800616b 	.word	0x0800616b
 80060f4:	0800619f 	.word	0x0800619f
 80060f8:	0800619f 	.word	0x0800619f
 80060fc:	0800619f 	.word	0x0800619f
 8006100:	0800619f 	.word	0x0800619f
 8006104:	0800619f 	.word	0x0800619f
 8006108:	0800619f 	.word	0x0800619f
 800610c:	0800619f 	.word	0x0800619f
 8006110:	0800619f 	.word	0x0800619f
 8006114:	0800619f 	.word	0x0800619f
 8006118:	0800619f 	.word	0x0800619f
 800611c:	0800619f 	.word	0x0800619f
 8006120:	0800619f 	.word	0x0800619f
 8006124:	0800619f 	.word	0x0800619f
 8006128:	0800619f 	.word	0x0800619f
 800612c:	0800619f 	.word	0x0800619f
 8006130:	08006191 	.word	0x08006191
 8006134:	2b40      	cmp	r3, #64	; 0x40
 8006136:	d02e      	beq.n	8006196 <UART_SetConfig+0x896>
 8006138:	e031      	b.n	800619e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800613a:	f7fd fb0f 	bl	800375c <HAL_RCC_GetPCLK1Freq>
 800613e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006140:	e033      	b.n	80061aa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006142:	f7fd fb21 	bl	8003788 <HAL_RCC_GetPCLK2Freq>
 8006146:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006148:	e02f      	b.n	80061aa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800614a:	f107 0314 	add.w	r3, r7, #20
 800614e:	4618      	mov	r0, r3
 8006150:	f7fe fa86 	bl	8004660 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006158:	e027      	b.n	80061aa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800615a:	f107 0308 	add.w	r3, r7, #8
 800615e:	4618      	mov	r0, r3
 8006160:	f7fe fbd2 	bl	8004908 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006168:	e01f      	b.n	80061aa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800616a:	4b58      	ldr	r3, [pc, #352]	; (80062cc <UART_SetConfig+0x9cc>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0320 	and.w	r3, r3, #32
 8006172:	2b00      	cmp	r3, #0
 8006174:	d009      	beq.n	800618a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006176:	4b55      	ldr	r3, [pc, #340]	; (80062cc <UART_SetConfig+0x9cc>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	08db      	lsrs	r3, r3, #3
 800617c:	f003 0303 	and.w	r3, r3, #3
 8006180:	4a53      	ldr	r2, [pc, #332]	; (80062d0 <UART_SetConfig+0x9d0>)
 8006182:	fa22 f303 	lsr.w	r3, r2, r3
 8006186:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006188:	e00f      	b.n	80061aa <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800618a:	4b51      	ldr	r3, [pc, #324]	; (80062d0 <UART_SetConfig+0x9d0>)
 800618c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800618e:	e00c      	b.n	80061aa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006190:	4b4c      	ldr	r3, [pc, #304]	; (80062c4 <UART_SetConfig+0x9c4>)
 8006192:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006194:	e009      	b.n	80061aa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800619a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800619c:	e005      	b.n	80061aa <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80061a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 80ea 	beq.w	8006386 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	4a44      	ldr	r2, [pc, #272]	; (80062c8 <UART_SetConfig+0x9c8>)
 80061b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061bc:	461a      	mov	r2, r3
 80061be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80061c4:	005a      	lsls	r2, r3, #1
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	085b      	lsrs	r3, r3, #1
 80061cc:	441a      	add	r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061da:	2b0f      	cmp	r3, #15
 80061dc:	d916      	bls.n	800620c <UART_SetConfig+0x90c>
 80061de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061e4:	d212      	bcs.n	800620c <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	f023 030f 	bic.w	r3, r3, #15
 80061ee:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f2:	085b      	lsrs	r3, r3, #1
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	f003 0307 	and.w	r3, r3, #7
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061fe:	4313      	orrs	r3, r2
 8006200:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006208:	60da      	str	r2, [r3, #12]
 800620a:	e0bc      	b.n	8006386 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006212:	e0b8      	b.n	8006386 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006214:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006218:	2b20      	cmp	r3, #32
 800621a:	dc4b      	bgt.n	80062b4 <UART_SetConfig+0x9b4>
 800621c:	2b00      	cmp	r3, #0
 800621e:	f2c0 8087 	blt.w	8006330 <UART_SetConfig+0xa30>
 8006222:	2b20      	cmp	r3, #32
 8006224:	f200 8084 	bhi.w	8006330 <UART_SetConfig+0xa30>
 8006228:	a201      	add	r2, pc, #4	; (adr r2, 8006230 <UART_SetConfig+0x930>)
 800622a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622e:	bf00      	nop
 8006230:	080062bb 	.word	0x080062bb
 8006234:	080062d5 	.word	0x080062d5
 8006238:	08006331 	.word	0x08006331
 800623c:	08006331 	.word	0x08006331
 8006240:	080062dd 	.word	0x080062dd
 8006244:	08006331 	.word	0x08006331
 8006248:	08006331 	.word	0x08006331
 800624c:	08006331 	.word	0x08006331
 8006250:	080062ed 	.word	0x080062ed
 8006254:	08006331 	.word	0x08006331
 8006258:	08006331 	.word	0x08006331
 800625c:	08006331 	.word	0x08006331
 8006260:	08006331 	.word	0x08006331
 8006264:	08006331 	.word	0x08006331
 8006268:	08006331 	.word	0x08006331
 800626c:	08006331 	.word	0x08006331
 8006270:	080062fd 	.word	0x080062fd
 8006274:	08006331 	.word	0x08006331
 8006278:	08006331 	.word	0x08006331
 800627c:	08006331 	.word	0x08006331
 8006280:	08006331 	.word	0x08006331
 8006284:	08006331 	.word	0x08006331
 8006288:	08006331 	.word	0x08006331
 800628c:	08006331 	.word	0x08006331
 8006290:	08006331 	.word	0x08006331
 8006294:	08006331 	.word	0x08006331
 8006298:	08006331 	.word	0x08006331
 800629c:	08006331 	.word	0x08006331
 80062a0:	08006331 	.word	0x08006331
 80062a4:	08006331 	.word	0x08006331
 80062a8:	08006331 	.word	0x08006331
 80062ac:	08006331 	.word	0x08006331
 80062b0:	08006323 	.word	0x08006323
 80062b4:	2b40      	cmp	r3, #64	; 0x40
 80062b6:	d037      	beq.n	8006328 <UART_SetConfig+0xa28>
 80062b8:	e03a      	b.n	8006330 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062ba:	f7fd fa4f 	bl	800375c <HAL_RCC_GetPCLK1Freq>
 80062be:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80062c0:	e03c      	b.n	800633c <UART_SetConfig+0xa3c>
 80062c2:	bf00      	nop
 80062c4:	003d0900 	.word	0x003d0900
 80062c8:	08006fb8 	.word	0x08006fb8
 80062cc:	58024400 	.word	0x58024400
 80062d0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062d4:	f7fd fa58 	bl	8003788 <HAL_RCC_GetPCLK2Freq>
 80062d8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80062da:	e02f      	b.n	800633c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062dc:	f107 0314 	add.w	r3, r7, #20
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fe f9bd 	bl	8004660 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062ea:	e027      	b.n	800633c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062ec:	f107 0308 	add.w	r3, r7, #8
 80062f0:	4618      	mov	r0, r3
 80062f2:	f7fe fb09 	bl	8004908 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062fa:	e01f      	b.n	800633c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062fc:	4b2c      	ldr	r3, [pc, #176]	; (80063b0 <UART_SetConfig+0xab0>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0320 	and.w	r3, r3, #32
 8006304:	2b00      	cmp	r3, #0
 8006306:	d009      	beq.n	800631c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006308:	4b29      	ldr	r3, [pc, #164]	; (80063b0 <UART_SetConfig+0xab0>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	08db      	lsrs	r3, r3, #3
 800630e:	f003 0303 	and.w	r3, r3, #3
 8006312:	4a28      	ldr	r2, [pc, #160]	; (80063b4 <UART_SetConfig+0xab4>)
 8006314:	fa22 f303 	lsr.w	r3, r2, r3
 8006318:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800631a:	e00f      	b.n	800633c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800631c:	4b25      	ldr	r3, [pc, #148]	; (80063b4 <UART_SetConfig+0xab4>)
 800631e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006320:	e00c      	b.n	800633c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006322:	4b25      	ldr	r3, [pc, #148]	; (80063b8 <UART_SetConfig+0xab8>)
 8006324:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006326:	e009      	b.n	800633c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006328:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800632c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800632e:	e005      	b.n	800633c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8006330:	2300      	movs	r3, #0
 8006332:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800633a:	bf00      	nop
    }

    if (pclk != 0U)
 800633c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633e:	2b00      	cmp	r3, #0
 8006340:	d021      	beq.n	8006386 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006346:	4a1d      	ldr	r2, [pc, #116]	; (80063bc <UART_SetConfig+0xabc>)
 8006348:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800634c:	461a      	mov	r2, r3
 800634e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006350:	fbb3 f2f2 	udiv	r2, r3, r2
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	085b      	lsrs	r3, r3, #1
 800635a:	441a      	add	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	fbb2 f3f3 	udiv	r3, r2, r3
 8006364:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006368:	2b0f      	cmp	r3, #15
 800636a:	d909      	bls.n	8006380 <UART_SetConfig+0xa80>
 800636c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006372:	d205      	bcs.n	8006380 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006376:	b29a      	uxth	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	60da      	str	r2, [r3, #12]
 800637e:	e002      	b.n	8006386 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80063a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3738      	adds	r7, #56	; 0x38
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bdb0      	pop	{r4, r5, r7, pc}
 80063ae:	bf00      	nop
 80063b0:	58024400 	.word	0x58024400
 80063b4:	03d09000 	.word	0x03d09000
 80063b8:	003d0900 	.word	0x003d0900
 80063bc:	08006fb8 	.word	0x08006fb8

080063c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00a      	beq.n	80063ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ee:	f003 0302 	and.w	r3, r3, #2
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00a      	beq.n	800640c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006410:	f003 0304 	and.w	r3, r3, #4
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006432:	f003 0308 	and.w	r3, r3, #8
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00a      	beq.n	8006450 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006454:	f003 0310 	and.w	r3, r3, #16
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00a      	beq.n	8006472 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006476:	f003 0320 	and.w	r3, r3, #32
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00a      	beq.n	8006494 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800649c:	2b00      	cmp	r3, #0
 800649e:	d01a      	beq.n	80064d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064be:	d10a      	bne.n	80064d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	605a      	str	r2, [r3, #4]
  }
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af02      	add	r7, sp, #8
 800650a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006514:	f7fb f85e 	bl	80015d4 <HAL_GetTick>
 8006518:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0308 	and.w	r3, r3, #8
 8006524:	2b08      	cmp	r3, #8
 8006526:	d10e      	bne.n	8006546 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006528:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f82f 	bl	800659a <UART_WaitOnFlagUntilTimeout>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e025      	b.n	8006592 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0304 	and.w	r3, r3, #4
 8006550:	2b04      	cmp	r3, #4
 8006552:	d10e      	bne.n	8006572 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006554:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f819 	bl	800659a <UART_WaitOnFlagUntilTimeout>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d001      	beq.n	8006572 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e00f      	b.n	8006592 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2220      	movs	r2, #32
 8006576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2220      	movs	r2, #32
 800657e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b09c      	sub	sp, #112	; 0x70
 800659e:	af00      	add	r7, sp, #0
 80065a0:	60f8      	str	r0, [r7, #12]
 80065a2:	60b9      	str	r1, [r7, #8]
 80065a4:	603b      	str	r3, [r7, #0]
 80065a6:	4613      	mov	r3, r2
 80065a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065aa:	e0a9      	b.n	8006700 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b2:	f000 80a5 	beq.w	8006700 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065b6:	f7fb f80d 	bl	80015d4 <HAL_GetTick>
 80065ba:	4602      	mov	r2, r0
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d302      	bcc.n	80065cc <UART_WaitOnFlagUntilTimeout+0x32>
 80065c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d140      	bne.n	800664e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065d4:	e853 3f00 	ldrex	r3, [r3]
 80065d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80065da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065e0:	667b      	str	r3, [r7, #100]	; 0x64
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	461a      	mov	r2, r3
 80065e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065ec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065f2:	e841 2300 	strex	r3, r2, [r1]
 80065f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80065f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1e6      	bne.n	80065cc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	3308      	adds	r3, #8
 8006604:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006608:	e853 3f00 	ldrex	r3, [r3]
 800660c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800660e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006610:	f023 0301 	bic.w	r3, r3, #1
 8006614:	663b      	str	r3, [r7, #96]	; 0x60
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	3308      	adds	r3, #8
 800661c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800661e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006620:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006622:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006624:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006626:	e841 2300 	strex	r3, r2, [r1]
 800662a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800662c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1e5      	bne.n	80065fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2220      	movs	r2, #32
 8006636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2220      	movs	r2, #32
 800663e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e069      	b.n	8006722 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0304 	and.w	r3, r3, #4
 8006658:	2b00      	cmp	r3, #0
 800665a:	d051      	beq.n	8006700 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006666:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800666a:	d149      	bne.n	8006700 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006674:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667e:	e853 3f00 	ldrex	r3, [r3]
 8006682:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006686:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800668a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	461a      	mov	r2, r3
 8006692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006694:	637b      	str	r3, [r7, #52]	; 0x34
 8006696:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006698:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800669a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800669c:	e841 2300 	strex	r3, r2, [r1]
 80066a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80066a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1e6      	bne.n	8006676 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	3308      	adds	r3, #8
 80066ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	e853 3f00 	ldrex	r3, [r3]
 80066b6:	613b      	str	r3, [r7, #16]
   return(result);
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	f023 0301 	bic.w	r3, r3, #1
 80066be:	66bb      	str	r3, [r7, #104]	; 0x68
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3308      	adds	r3, #8
 80066c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80066c8:	623a      	str	r2, [r7, #32]
 80066ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066cc:	69f9      	ldr	r1, [r7, #28]
 80066ce:	6a3a      	ldr	r2, [r7, #32]
 80066d0:	e841 2300 	strex	r3, r2, [r1]
 80066d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1e5      	bne.n	80066a8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2220      	movs	r2, #32
 80066e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2220      	movs	r2, #32
 80066e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2220      	movs	r2, #32
 80066f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e010      	b.n	8006722 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	69da      	ldr	r2, [r3, #28]
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	4013      	ands	r3, r2
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	429a      	cmp	r2, r3
 800670e:	bf0c      	ite	eq
 8006710:	2301      	moveq	r3, #1
 8006712:	2300      	movne	r3, #0
 8006714:	b2db      	uxtb	r3, r3
 8006716:	461a      	mov	r2, r3
 8006718:	79fb      	ldrb	r3, [r7, #7]
 800671a:	429a      	cmp	r2, r3
 800671c:	f43f af46 	beq.w	80065ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3770      	adds	r7, #112	; 0x70
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800672a:	b480      	push	{r7}
 800672c:	b085      	sub	sp, #20
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006738:	2b01      	cmp	r3, #1
 800673a:	d101      	bne.n	8006740 <HAL_UARTEx_DisableFifoMode+0x16>
 800673c:	2302      	movs	r3, #2
 800673e:	e027      	b.n	8006790 <HAL_UARTEx_DisableFifoMode+0x66>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2224      	movs	r2, #36	; 0x24
 800674c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f022 0201 	bic.w	r2, r2, #1
 8006766:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800676e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2220      	movs	r2, #32
 8006782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3714      	adds	r7, #20
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d101      	bne.n	80067b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80067b0:	2302      	movs	r3, #2
 80067b2:	e02d      	b.n	8006810 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2224      	movs	r2, #36	; 0x24
 80067c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f022 0201 	bic.w	r2, r2, #1
 80067da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	430a      	orrs	r2, r1
 80067ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 f84f 	bl	8006894 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2220      	movs	r2, #32
 8006802:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006828:	2b01      	cmp	r3, #1
 800682a:	d101      	bne.n	8006830 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800682c:	2302      	movs	r3, #2
 800682e:	e02d      	b.n	800688c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2224      	movs	r2, #36	; 0x24
 800683c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f022 0201 	bic.w	r2, r2, #1
 8006856:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	430a      	orrs	r2, r1
 800686a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 f811 	bl	8006894 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2220      	movs	r2, #32
 800687e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3710      	adds	r7, #16
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d108      	bne.n	80068b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80068b4:	e031      	b.n	800691a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80068b6:	2310      	movs	r3, #16
 80068b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80068ba:	2310      	movs	r3, #16
 80068bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	0e5b      	lsrs	r3, r3, #25
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	f003 0307 	and.w	r3, r3, #7
 80068cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	0f5b      	lsrs	r3, r3, #29
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	f003 0307 	and.w	r3, r3, #7
 80068dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068de:	7bbb      	ldrb	r3, [r7, #14]
 80068e0:	7b3a      	ldrb	r2, [r7, #12]
 80068e2:	4911      	ldr	r1, [pc, #68]	; (8006928 <UARTEx_SetNbDataToProcess+0x94>)
 80068e4:	5c8a      	ldrb	r2, [r1, r2]
 80068e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80068ea:	7b3a      	ldrb	r2, [r7, #12]
 80068ec:	490f      	ldr	r1, [pc, #60]	; (800692c <UARTEx_SetNbDataToProcess+0x98>)
 80068ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068fc:	7bfb      	ldrb	r3, [r7, #15]
 80068fe:	7b7a      	ldrb	r2, [r7, #13]
 8006900:	4909      	ldr	r1, [pc, #36]	; (8006928 <UARTEx_SetNbDataToProcess+0x94>)
 8006902:	5c8a      	ldrb	r2, [r1, r2]
 8006904:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006908:	7b7a      	ldrb	r2, [r7, #13]
 800690a:	4908      	ldr	r1, [pc, #32]	; (800692c <UARTEx_SetNbDataToProcess+0x98>)
 800690c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800690e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006912:	b29a      	uxth	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800691a:	bf00      	nop
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	08006fd0 	.word	0x08006fd0
 800692c:	08006fd8 	.word	0x08006fd8

08006930 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006930:	b084      	sub	sp, #16
 8006932:	b580      	push	{r7, lr}
 8006934:	b084      	sub	sp, #16
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
 800693a:	f107 001c 	add.w	r0, r7, #28
 800693e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006944:	2b01      	cmp	r3, #1
 8006946:	d120      	bne.n	800698a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68da      	ldr	r2, [r3, #12]
 8006958:	4b2a      	ldr	r3, [pc, #168]	; (8006a04 <USB_CoreInit+0xd4>)
 800695a:	4013      	ands	r3, r2
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800696c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800696e:	2b01      	cmp	r3, #1
 8006970:	d105      	bne.n	800697e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 faa8 	bl	8006ed4 <USB_CoreReset>
 8006984:	4603      	mov	r3, r0
 8006986:	73fb      	strb	r3, [r7, #15]
 8006988:	e01a      	b.n	80069c0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fa9c 	bl	8006ed4 <USB_CoreReset>
 800699c:	4603      	mov	r3, r0
 800699e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80069a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d106      	bne.n	80069b4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	639a      	str	r2, [r3, #56]	; 0x38
 80069b2:	e005      	b.n	80069c0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80069c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d116      	bne.n	80069f4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80069d4:	4b0c      	ldr	r3, [pc, #48]	; (8006a08 <USB_CoreInit+0xd8>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f043 0206 	orr.w	r2, r3, #6
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f043 0220 	orr.w	r2, r3, #32
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80069f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a00:	b004      	add	sp, #16
 8006a02:	4770      	bx	lr
 8006a04:	ffbdffbf 	.word	0xffbdffbf
 8006a08:	03ee0000 	.word	0x03ee0000

08006a0c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f023 0201 	bic.w	r2, r3, #1
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	370c      	adds	r7, #12
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b084      	sub	sp, #16
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
 8006a36:	460b      	mov	r3, r1
 8006a38:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a4a:	78fb      	ldrb	r3, [r7, #3]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d115      	bne.n	8006a7c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a5c:	2001      	movs	r0, #1
 8006a5e:	f7fa fdc5 	bl	80015ec <HAL_Delay>
      ms++;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	3301      	adds	r3, #1
 8006a66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fa25 	bl	8006eb8 <USB_GetMode>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d01e      	beq.n	8006ab2 <USB_SetCurrentMode+0x84>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2b31      	cmp	r3, #49	; 0x31
 8006a78:	d9f0      	bls.n	8006a5c <USB_SetCurrentMode+0x2e>
 8006a7a:	e01a      	b.n	8006ab2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a7c:	78fb      	ldrb	r3, [r7, #3]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d115      	bne.n	8006aae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a8e:	2001      	movs	r0, #1
 8006a90:	f7fa fdac 	bl	80015ec <HAL_Delay>
      ms++;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	3301      	adds	r3, #1
 8006a98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 fa0c 	bl	8006eb8 <USB_GetMode>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d005      	beq.n	8006ab2 <USB_SetCurrentMode+0x84>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2b31      	cmp	r3, #49	; 0x31
 8006aaa:	d9f0      	bls.n	8006a8e <USB_SetCurrentMode+0x60>
 8006aac:	e001      	b.n	8006ab2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e005      	b.n	8006abe <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2b32      	cmp	r3, #50	; 0x32
 8006ab6:	d101      	bne.n	8006abc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e000      	b.n	8006abe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
	...

08006ac8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ac8:	b084      	sub	sp, #16
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b086      	sub	sp, #24
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
 8006ad2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006ad6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006ada:	2300      	movs	r3, #0
 8006adc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	613b      	str	r3, [r7, #16]
 8006ae6:	e009      	b.n	8006afc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	3340      	adds	r3, #64	; 0x40
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4413      	add	r3, r2
 8006af2:	2200      	movs	r2, #0
 8006af4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	3301      	adds	r3, #1
 8006afa:	613b      	str	r3, [r7, #16]
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	2b0e      	cmp	r3, #14
 8006b00:	d9f2      	bls.n	8006ae8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d11c      	bne.n	8006b42 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b16:	f043 0302 	orr.w	r3, r3, #2
 8006b1a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b20:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	601a      	str	r2, [r3, #0]
 8006b40:	e005      	b.n	8006b4e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b46:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b54:	461a      	mov	r2, r3
 8006b56:	2300      	movs	r3, #0
 8006b58:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b60:	4619      	mov	r1, r3
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b68:	461a      	mov	r2, r3
 8006b6a:	680b      	ldr	r3, [r1, #0]
 8006b6c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d10c      	bne.n	8006b8e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d104      	bne.n	8006b84 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 f961 	bl	8006e44 <USB_SetDevSpeed>
 8006b82:	e008      	b.n	8006b96 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006b84:	2101      	movs	r1, #1
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f95c 	bl	8006e44 <USB_SetDevSpeed>
 8006b8c:	e003      	b.n	8006b96 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006b8e:	2103      	movs	r1, #3
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f957 	bl	8006e44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b96:	2110      	movs	r1, #16
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f8f3 	bl	8006d84 <USB_FlushTxFifo>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d001      	beq.n	8006ba8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f91d 	bl	8006de8 <USB_FlushRxFifo>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d001      	beq.n	8006bb8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bca:	461a      	mov	r2, r3
 8006bcc:	2300      	movs	r3, #0
 8006bce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	2300      	movs	r3, #0
 8006bda:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bdc:	2300      	movs	r3, #0
 8006bde:	613b      	str	r3, [r7, #16]
 8006be0:	e043      	b.n	8006c6a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	015a      	lsls	r2, r3, #5
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	4413      	add	r3, r2
 8006bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bf8:	d118      	bne.n	8006c2c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10a      	bne.n	8006c16 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	015a      	lsls	r2, r3, #5
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	4413      	add	r3, r2
 8006c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c12:	6013      	str	r3, [r2, #0]
 8006c14:	e013      	b.n	8006c3e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	015a      	lsls	r2, r3, #5
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c22:	461a      	mov	r2, r3
 8006c24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c28:	6013      	str	r3, [r2, #0]
 8006c2a:	e008      	b.n	8006c3e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c38:	461a      	mov	r2, r3
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	3301      	adds	r3, #1
 8006c68:	613b      	str	r3, [r7, #16]
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d3b7      	bcc.n	8006be2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c72:	2300      	movs	r3, #0
 8006c74:	613b      	str	r3, [r7, #16]
 8006c76:	e043      	b.n	8006d00 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	015a      	lsls	r2, r3, #5
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	4413      	add	r3, r2
 8006c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c8e:	d118      	bne.n	8006cc2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d10a      	bne.n	8006cac <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	015a      	lsls	r2, r3, #5
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ca8:	6013      	str	r3, [r2, #0]
 8006caa:	e013      	b.n	8006cd4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	015a      	lsls	r2, r3, #5
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb8:	461a      	mov	r2, r3
 8006cba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006cbe:	6013      	str	r3, [r2, #0]
 8006cc0:	e008      	b.n	8006cd4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	015a      	lsls	r2, r3, #5
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	4413      	add	r3, r2
 8006cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cce:	461a      	mov	r2, r3
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	015a      	lsls	r2, r3, #5
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	015a      	lsls	r2, r3, #5
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	4413      	add	r3, r2
 8006cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006cf8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	613b      	str	r3, [r7, #16]
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d3b7      	bcc.n	8006c78 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d1a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006d28:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d105      	bne.n	8006d3c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	f043 0210 	orr.w	r2, r3, #16
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	699a      	ldr	r2, [r3, #24]
 8006d40:	4b0e      	ldr	r3, [pc, #56]	; (8006d7c <USB_DevInit+0x2b4>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d005      	beq.n	8006d5a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	f043 0208 	orr.w	r2, r3, #8
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d105      	bne.n	8006d6c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	699a      	ldr	r2, [r3, #24]
 8006d64:	4b06      	ldr	r3, [pc, #24]	; (8006d80 <USB_DevInit+0x2b8>)
 8006d66:	4313      	orrs	r3, r2
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3718      	adds	r7, #24
 8006d72:	46bd      	mov	sp, r7
 8006d74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d78:	b004      	add	sp, #16
 8006d7a:	4770      	bx	lr
 8006d7c:	803c3800 	.word	0x803c3800
 8006d80:	40000004 	.word	0x40000004

08006d84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	3301      	adds	r3, #1
 8006d96:	60fb      	str	r3, [r7, #12]
 8006d98:	4a12      	ldr	r2, [pc, #72]	; (8006de4 <USB_FlushTxFifo+0x60>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d901      	bls.n	8006da2 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e01a      	b.n	8006dd8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	daf3      	bge.n	8006d92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	019b      	lsls	r3, r3, #6
 8006db2:	f043 0220 	orr.w	r2, r3, #32
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	60fb      	str	r3, [r7, #12]
 8006dc0:	4a08      	ldr	r2, [pc, #32]	; (8006de4 <USB_FlushTxFifo+0x60>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d901      	bls.n	8006dca <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e006      	b.n	8006dd8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	f003 0320 	and.w	r3, r3, #32
 8006dd2:	2b20      	cmp	r3, #32
 8006dd4:	d0f1      	beq.n	8006dba <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3714      	adds	r7, #20
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr
 8006de4:	00030d40 	.word	0x00030d40

08006de8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006df0:	2300      	movs	r3, #0
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	3301      	adds	r3, #1
 8006df8:	60fb      	str	r3, [r7, #12]
 8006dfa:	4a11      	ldr	r2, [pc, #68]	; (8006e40 <USB_FlushRxFifo+0x58>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d901      	bls.n	8006e04 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e017      	b.n	8006e34 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	daf3      	bge.n	8006df4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2210      	movs	r2, #16
 8006e14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	60fb      	str	r3, [r7, #12]
 8006e1c:	4a08      	ldr	r2, [pc, #32]	; (8006e40 <USB_FlushRxFifo+0x58>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d901      	bls.n	8006e26 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e006      	b.n	8006e34 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	f003 0310 	and.w	r3, r3, #16
 8006e2e:	2b10      	cmp	r3, #16
 8006e30:	d0f1      	beq.n	8006e16 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3714      	adds	r7, #20
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr
 8006e40:	00030d40 	.word	0x00030d40

08006e44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	78fb      	ldrb	r3, [r7, #3]
 8006e5e:	68f9      	ldr	r1, [r7, #12]
 8006e60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e64:	4313      	orrs	r3, r2
 8006e66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b085      	sub	sp, #20
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e90:	f023 0303 	bic.w	r3, r3, #3
 8006e94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ea4:	f043 0302 	orr.w	r3, r3, #2
 8006ea8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3714      	adds	r7, #20
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	695b      	ldr	r3, [r3, #20]
 8006ec4:	f003 0301 	and.w	r3, r3, #1
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006edc:	2300      	movs	r3, #0
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	60fb      	str	r3, [r7, #12]
 8006ee6:	4a13      	ldr	r2, [pc, #76]	; (8006f34 <USB_CoreReset+0x60>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d901      	bls.n	8006ef0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e01a      	b.n	8006f26 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	daf3      	bge.n	8006ee0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	f043 0201 	orr.w	r2, r3, #1
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	60fb      	str	r3, [r7, #12]
 8006f0e:	4a09      	ldr	r2, [pc, #36]	; (8006f34 <USB_CoreReset+0x60>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d901      	bls.n	8006f18 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006f14:	2303      	movs	r3, #3
 8006f16:	e006      	b.n	8006f26 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	f003 0301 	and.w	r3, r3, #1
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d0f1      	beq.n	8006f08 <USB_CoreReset+0x34>

  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	00030d40 	.word	0x00030d40

08006f38 <__libc_init_array>:
 8006f38:	b570      	push	{r4, r5, r6, lr}
 8006f3a:	4d0d      	ldr	r5, [pc, #52]	; (8006f70 <__libc_init_array+0x38>)
 8006f3c:	4c0d      	ldr	r4, [pc, #52]	; (8006f74 <__libc_init_array+0x3c>)
 8006f3e:	1b64      	subs	r4, r4, r5
 8006f40:	10a4      	asrs	r4, r4, #2
 8006f42:	2600      	movs	r6, #0
 8006f44:	42a6      	cmp	r6, r4
 8006f46:	d109      	bne.n	8006f5c <__libc_init_array+0x24>
 8006f48:	4d0b      	ldr	r5, [pc, #44]	; (8006f78 <__libc_init_array+0x40>)
 8006f4a:	4c0c      	ldr	r4, [pc, #48]	; (8006f7c <__libc_init_array+0x44>)
 8006f4c:	f000 f820 	bl	8006f90 <_init>
 8006f50:	1b64      	subs	r4, r4, r5
 8006f52:	10a4      	asrs	r4, r4, #2
 8006f54:	2600      	movs	r6, #0
 8006f56:	42a6      	cmp	r6, r4
 8006f58:	d105      	bne.n	8006f66 <__libc_init_array+0x2e>
 8006f5a:	bd70      	pop	{r4, r5, r6, pc}
 8006f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f60:	4798      	blx	r3
 8006f62:	3601      	adds	r6, #1
 8006f64:	e7ee      	b.n	8006f44 <__libc_init_array+0xc>
 8006f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f6a:	4798      	blx	r3
 8006f6c:	3601      	adds	r6, #1
 8006f6e:	e7f2      	b.n	8006f56 <__libc_init_array+0x1e>
 8006f70:	08006fe8 	.word	0x08006fe8
 8006f74:	08006fe8 	.word	0x08006fe8
 8006f78:	08006fe8 	.word	0x08006fe8
 8006f7c:	08006fec 	.word	0x08006fec

08006f80 <memset>:
 8006f80:	4402      	add	r2, r0
 8006f82:	4603      	mov	r3, r0
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d100      	bne.n	8006f8a <memset+0xa>
 8006f88:	4770      	bx	lr
 8006f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f8e:	e7f9      	b.n	8006f84 <memset+0x4>

08006f90 <_init>:
 8006f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f92:	bf00      	nop
 8006f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f96:	bc08      	pop	{r3}
 8006f98:	469e      	mov	lr, r3
 8006f9a:	4770      	bx	lr

08006f9c <_fini>:
 8006f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9e:	bf00      	nop
 8006fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fa2:	bc08      	pop	{r3}
 8006fa4:	469e      	mov	lr, r3
 8006fa6:	4770      	bx	lr
