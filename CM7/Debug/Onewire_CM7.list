
Onewire_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cba4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800ce44  0800ce44  0001ce44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cebc  0800cebc  00066648  2**0
                  CONTENTS
  4 .ARM          00000008  0800cebc  0800cebc  0001cebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cec4  0800cec4  00066648  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cec4  0800cec4  0001cec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cec8  0800cec8  0001cec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00046588  24000000  0800cecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24046588  08053454  00066588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240465e8  080534b4  000665e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000c82c  24046648  08053514  00066648  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  24052e74  08053514  00072e74  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00066648  2**0
                  CONTENTS, READONLY
 14 .debug_info   00030692  00000000  00000000  00066676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000042a5  00000000  00000000  00096d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001898  00000000  00000000  0009afb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001760  00000000  00000000  0009c848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003c957  00000000  00000000  0009dfa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020c3b  00000000  00000000  000da8ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00191398  00000000  00000000  000fb53a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  0028c8d2  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006e88  00000000  00000000  0028c928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24046648 	.word	0x24046648
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ce2c 	.word	0x0800ce2c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2404664c 	.word	0x2404664c
 80002dc:	0800ce2c 	.word	0x0800ce2c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b98e 	b.w	80006b4 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f826 	bl	80003f0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_d2ulz>:
 80003b0:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80003e0 <__aeabi_d2ulz+0x30>
 80003b4:	ec41 0b17 	vmov	d7, r0, r1
 80003b8:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80003e8 <__aeabi_d2ulz+0x38>
 80003bc:	ee27 6b06 	vmul.f64	d6, d7, d6
 80003c0:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80003c4:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80003c8:	eea4 7b45 	vfms.f64	d7, d4, d5
 80003cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80003d0:	ee16 1a10 	vmov	r1, s12
 80003d4:	ee17 0a90 	vmov	r0, s15
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	f3af 8000 	nop.w
 80003e0:	00000000 	.word	0x00000000
 80003e4:	3df00000 	.word	0x3df00000
 80003e8:	00000000 	.word	0x00000000
 80003ec:	41f00000 	.word	0x41f00000

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006bc:	4b3f      	ldr	r3, [pc, #252]	; (80007bc <SystemInit+0x104>)
 80006be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006c2:	4a3e      	ldr	r2, [pc, #248]	; (80007bc <SystemInit+0x104>)
 80006c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006cc:	4b3b      	ldr	r3, [pc, #236]	; (80007bc <SystemInit+0x104>)
 80006ce:	691b      	ldr	r3, [r3, #16]
 80006d0:	4a3a      	ldr	r2, [pc, #232]	; (80007bc <SystemInit+0x104>)
 80006d2:	f043 0310 	orr.w	r3, r3, #16
 80006d6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d8:	4b39      	ldr	r3, [pc, #228]	; (80007c0 <SystemInit+0x108>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f003 030f 	and.w	r3, r3, #15
 80006e0:	2b06      	cmp	r3, #6
 80006e2:	d807      	bhi.n	80006f4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e4:	4b36      	ldr	r3, [pc, #216]	; (80007c0 <SystemInit+0x108>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f023 030f 	bic.w	r3, r3, #15
 80006ec:	4a34      	ldr	r2, [pc, #208]	; (80007c0 <SystemInit+0x108>)
 80006ee:	f043 0307 	orr.w	r3, r3, #7
 80006f2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006f4:	4b33      	ldr	r3, [pc, #204]	; (80007c4 <SystemInit+0x10c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a32      	ldr	r2, [pc, #200]	; (80007c4 <SystemInit+0x10c>)
 80006fa:	f043 0301 	orr.w	r3, r3, #1
 80006fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000700:	4b30      	ldr	r3, [pc, #192]	; (80007c4 <SystemInit+0x10c>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000706:	4b2f      	ldr	r3, [pc, #188]	; (80007c4 <SystemInit+0x10c>)
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	492e      	ldr	r1, [pc, #184]	; (80007c4 <SystemInit+0x10c>)
 800070c:	4b2e      	ldr	r3, [pc, #184]	; (80007c8 <SystemInit+0x110>)
 800070e:	4013      	ands	r3, r2
 8000710:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000712:	4b2b      	ldr	r3, [pc, #172]	; (80007c0 <SystemInit+0x108>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f003 0308 	and.w	r3, r3, #8
 800071a:	2b00      	cmp	r3, #0
 800071c:	d007      	beq.n	800072e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800071e:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <SystemInit+0x108>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f023 030f 	bic.w	r3, r3, #15
 8000726:	4a26      	ldr	r2, [pc, #152]	; (80007c0 <SystemInit+0x108>)
 8000728:	f043 0307 	orr.w	r3, r3, #7
 800072c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800072e:	4b25      	ldr	r3, [pc, #148]	; (80007c4 <SystemInit+0x10c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000734:	4b23      	ldr	r3, [pc, #140]	; (80007c4 <SystemInit+0x10c>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800073a:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <SystemInit+0x10c>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000740:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <SystemInit+0x10c>)
 8000742:	4a22      	ldr	r2, [pc, #136]	; (80007cc <SystemInit+0x114>)
 8000744:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000746:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <SystemInit+0x10c>)
 8000748:	4a21      	ldr	r2, [pc, #132]	; (80007d0 <SystemInit+0x118>)
 800074a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800074c:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <SystemInit+0x10c>)
 800074e:	4a21      	ldr	r2, [pc, #132]	; (80007d4 <SystemInit+0x11c>)
 8000750:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000752:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <SystemInit+0x10c>)
 8000754:	2200      	movs	r2, #0
 8000756:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000758:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <SystemInit+0x10c>)
 800075a:	4a1e      	ldr	r2, [pc, #120]	; (80007d4 <SystemInit+0x11c>)
 800075c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800075e:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <SystemInit+0x10c>)
 8000760:	2200      	movs	r2, #0
 8000762:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000764:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <SystemInit+0x10c>)
 8000766:	4a1b      	ldr	r2, [pc, #108]	; (80007d4 <SystemInit+0x11c>)
 8000768:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800076a:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <SystemInit+0x10c>)
 800076c:	2200      	movs	r2, #0
 800076e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <SystemInit+0x10c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a13      	ldr	r2, [pc, #76]	; (80007c4 <SystemInit+0x10c>)
 8000776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800077a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <SystemInit+0x10c>)
 800077e:	2200      	movs	r2, #0
 8000780:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <SystemInit+0x120>)
 8000784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000786:	4a14      	ldr	r2, [pc, #80]	; (80007d8 <SystemInit+0x120>)
 8000788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800078c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800078e:	4b13      	ldr	r3, [pc, #76]	; (80007dc <SystemInit+0x124>)
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <SystemInit+0x128>)
 8000794:	4013      	ands	r3, r2
 8000796:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800079a:	d202      	bcs.n	80007a2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <SystemInit+0x12c>)
 800079e:	2201      	movs	r2, #1
 80007a0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <SystemInit+0x130>)
 80007a4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80007a8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80007aa:	4b04      	ldr	r3, [pc, #16]	; (80007bc <SystemInit+0x104>)
 80007ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007b0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80007b2:	bf00      	nop
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	e000ed00 	.word	0xe000ed00
 80007c0:	52002000 	.word	0x52002000
 80007c4:	58024400 	.word	0x58024400
 80007c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80007cc:	02020200 	.word	0x02020200
 80007d0:	01ff0000 	.word	0x01ff0000
 80007d4:	01010280 	.word	0x01010280
 80007d8:	580000c0 	.word	0x580000c0
 80007dc:	5c001000 	.word	0x5c001000
 80007e0:	ffff0000 	.word	0xffff0000
 80007e4:	51008108 	.word	0x51008108
 80007e8:	52004000 	.word	0x52004000

080007ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007f6:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007f8:	bf00      	nop
 80007fa:	4b33      	ldr	r3, [pc, #204]	; (80008c8 <main+0xdc>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000802:	2b00      	cmp	r3, #0
 8000804:	d004      	beq.n	8000810 <main+0x24>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	1e5a      	subs	r2, r3, #1
 800080a:	607a      	str	r2, [r7, #4]
 800080c:	2b00      	cmp	r3, #0
 800080e:	dcf4      	bgt.n	80007fa <main+0xe>
  if ( timeout < 0 )
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	da01      	bge.n	800081a <main+0x2e>
  {
  Error_Handler();
 8000816:	f002 fab3 	bl	8002d80 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081a:	f002 fe75 	bl	8003508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081e:	f000 f85d 	bl	80008dc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000822:	4b29      	ldr	r3, [pc, #164]	; (80008c8 <main+0xdc>)
 8000824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000828:	4a27      	ldr	r2, [pc, #156]	; (80008c8 <main+0xdc>)
 800082a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800082e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000832:	4b25      	ldr	r3, [pc, #148]	; (80008c8 <main+0xdc>)
 8000834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000840:	2000      	movs	r0, #0
 8000842:	f006 f967 	bl	8006b14 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000846:	2100      	movs	r1, #0
 8000848:	2000      	movs	r0, #0
 800084a:	f006 f97d 	bl	8006b48 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800084e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000852:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000854:	bf00      	nop
 8000856:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <main+0xdc>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800085e:	2b00      	cmp	r3, #0
 8000860:	d104      	bne.n	800086c <main+0x80>
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	1e5a      	subs	r2, r3, #1
 8000866:	607a      	str	r2, [r7, #4]
 8000868:	2b00      	cmp	r3, #0
 800086a:	dcf4      	bgt.n	8000856 <main+0x6a>
if ( timeout < 0 )
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b00      	cmp	r3, #0
 8000870:	da01      	bge.n	8000876 <main+0x8a>
{
Error_Handler();
 8000872:	f002 fa85 	bl	8002d80 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000876:	f000 fae5 	bl	8000e44 <MX_GPIO_Init>
  MX_ETH_Init();
 800087a:	f000 f8b5 	bl	80009e8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800087e:	f000 fa43 	bl	8000d08 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000882:	f000 fa8d 	bl	8000da0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8000886:	f000 f953 	bl	8000b30 <MX_TIM3_Init>
  MX_TIM5_Init();
 800088a:	f000 f99f 	bl	8000bcc <MX_TIM5_Init>
  MX_DMA_Init();
 800088e:	f000 fab9 	bl	8000e04 <MX_DMA_Init>
  MX_SPI1_Init();
 8000892:	f000 f8f5 	bl	8000a80 <MX_SPI1_Init>
  MX_TIM15_Init();
 8000896:	f000 f9e7 	bl	8000c68 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */


  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 1);
 800089a:	2201      	movs	r2, #1
 800089c:	2102      	movs	r1, #2
 800089e:	480b      	ldr	r0, [pc, #44]	; (80008cc <main+0xe0>)
 80008a0:	f006 f91e 	bl	8006ae0 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim3);
 80008a4:	480a      	ldr	r0, [pc, #40]	; (80008d0 <main+0xe4>)
 80008a6:	f009 fe59 	bl	800a55c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 80008aa:	480a      	ldr	r0, [pc, #40]	; (80008d4 <main+0xe8>)
 80008ac:	f009 fe56 	bl	800a55c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim15);
 80008b0:	4809      	ldr	r0, [pc, #36]	; (80008d8 <main+0xec>)
 80008b2:	f009 fe53 	bl	800a55c <HAL_TIM_Base_Start_IT>

  LCD_init();
 80008b6:	f000 fccd 	bl	8001254 <LCD_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		requestT();
 80008ba:	f000 fbc9 	bl	8001050 <requestT>
		get_value();
 80008be:	f000 fbe9 	bl	8001094 <get_value>
		Update_check_Value();
 80008c2:	f000 fc0b 	bl	80010dc <Update_check_Value>
		requestT();
 80008c6:	e7f8      	b.n	80008ba <main+0xce>
 80008c8:	58024400 	.word	0x58024400
 80008cc:	58020c00 	.word	0x58020c00
 80008d0:	24052c58 	.word	0x24052c58
 80008d4:	24052c0c 	.word	0x24052c0c
 80008d8:	240527b8 	.word	0x240527b8

080008dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b09c      	sub	sp, #112	; 0x70
 80008e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e6:	224c      	movs	r2, #76	; 0x4c
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f00b fe68 	bl	800c5c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	2220      	movs	r2, #32
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f00b fe62 	bl	800c5c0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008fc:	2004      	movs	r0, #4
 80008fe:	f006 fa7f 	bl	8006e00 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000902:	2300      	movs	r3, #0
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	4b35      	ldr	r3, [pc, #212]	; (80009dc <SystemClock_Config+0x100>)
 8000908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800090a:	4a34      	ldr	r2, [pc, #208]	; (80009dc <SystemClock_Config+0x100>)
 800090c:	f023 0301 	bic.w	r3, r3, #1
 8000910:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000912:	4b32      	ldr	r3, [pc, #200]	; (80009dc <SystemClock_Config+0x100>)
 8000914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	4b30      	ldr	r3, [pc, #192]	; (80009e0 <SystemClock_Config+0x104>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000924:	4a2e      	ldr	r2, [pc, #184]	; (80009e0 <SystemClock_Config+0x104>)
 8000926:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800092a:	6193      	str	r3, [r2, #24]
 800092c:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <SystemClock_Config+0x104>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000938:	bf00      	nop
 800093a:	4b29      	ldr	r3, [pc, #164]	; (80009e0 <SystemClock_Config+0x104>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000946:	d1f8      	bne.n	800093a <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000948:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <SystemClock_Config+0x108>)
 800094a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800094c:	f023 0303 	bic.w	r3, r3, #3
 8000950:	4a24      	ldr	r2, [pc, #144]	; (80009e4 <SystemClock_Config+0x108>)
 8000952:	f043 0302 	orr.w	r3, r3, #2
 8000956:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000958:	2301      	movs	r3, #1
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800095c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000962:	2302      	movs	r3, #2
 8000964:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000966:	2302      	movs	r3, #2
 8000968:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800096a:	2301      	movs	r3, #1
 800096c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 800096e:	2319      	movs	r3, #25
 8000970:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000972:	2302      	movs	r3, #2
 8000974:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000976:	2302      	movs	r3, #2
 8000978:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800097a:	2302      	movs	r3, #2
 800097c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800097e:	230c      	movs	r3, #12
 8000980:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000982:	2300      	movs	r3, #0
 8000984:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098e:	4618      	mov	r0, r3
 8000990:	f006 faa0 	bl	8006ed4 <HAL_RCC_OscConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800099a:	f002 f9f1 	bl	8002d80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099e:	233f      	movs	r3, #63	; 0x3f
 80009a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a2:	2303      	movs	r3, #3
 80009a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009ae:	2340      	movs	r3, #64	; 0x40
 80009b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009b2:	2340      	movs	r3, #64	; 0x40
 80009b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009bc:	2340      	movs	r3, #64	; 0x40
 80009be:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2102      	movs	r1, #2
 80009c4:	4618      	mov	r0, r3
 80009c6:	f006 feb1 	bl	800772c <HAL_RCC_ClockConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80009d0:	f002 f9d6 	bl	8002d80 <Error_Handler>
  }
}
 80009d4:	bf00      	nop
 80009d6:	3770      	adds	r7, #112	; 0x70
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	58000400 	.word	0x58000400
 80009e0:	58024800 	.word	0x58024800
 80009e4:	58024400 	.word	0x58024400

080009e8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009ec:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <MX_ETH_Init+0x80>)
 80009ee:	4a1f      	ldr	r2, [pc, #124]	; (8000a6c <MX_ETH_Init+0x84>)
 80009f0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009f2:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <MX_ETH_Init+0x88>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009f8:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <MX_ETH_Init+0x88>)
 80009fa:	2280      	movs	r2, #128	; 0x80
 80009fc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009fe:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <MX_ETH_Init+0x88>)
 8000a00:	22e1      	movs	r2, #225	; 0xe1
 8000a02:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a04:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <MX_ETH_Init+0x88>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a0a:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <MX_ETH_Init+0x88>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a10:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <MX_ETH_Init+0x88>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_ETH_Init+0x80>)
 8000a18:	4a15      	ldr	r2, [pc, #84]	; (8000a70 <MX_ETH_Init+0x88>)
 8000a1a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <MX_ETH_Init+0x80>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_ETH_Init+0x80>)
 8000a24:	4a13      	ldr	r2, [pc, #76]	; (8000a74 <MX_ETH_Init+0x8c>)
 8000a26:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_ETH_Init+0x80>)
 8000a2a:	4a13      	ldr	r2, [pc, #76]	; (8000a78 <MX_ETH_Init+0x90>)
 8000a2c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_ETH_Init+0x80>)
 8000a30:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a34:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a36:	480c      	ldr	r0, [pc, #48]	; (8000a68 <MX_ETH_Init+0x80>)
 8000a38:	f005 fa74 	bl	8005f24 <HAL_ETH_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000a42:	f002 f99d 	bl	8002d80 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a46:	2234      	movs	r2, #52	; 0x34
 8000a48:	2100      	movs	r1, #0
 8000a4a:	480c      	ldr	r0, [pc, #48]	; (8000a7c <MX_ETH_Init+0x94>)
 8000a4c:	f00b fdb8 	bl	800c5c0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a50:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <MX_ETH_Init+0x94>)
 8000a52:	2221      	movs	r2, #33	; 0x21
 8000a54:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <MX_ETH_Init+0x94>)
 8000a58:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a5c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a5e:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <MX_ETH_Init+0x94>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	24052d2c 	.word	0x24052d2c
 8000a6c:	40028000 	.word	0x40028000
 8000a70:	24052714 	.word	0x24052714
 8000a74:	240465e8 	.word	0x240465e8
 8000a78:	24046588 	.word	0x24046588
 8000a7c:	24052db4 	.word	0x24052db4

08000a80 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a84:	4b28      	ldr	r3, [pc, #160]	; (8000b28 <MX_SPI1_Init+0xa8>)
 8000a86:	4a29      	ldr	r2, [pc, #164]	; (8000b2c <MX_SPI1_Init+0xac>)
 8000a88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a8a:	4b27      	ldr	r3, [pc, #156]	; (8000b28 <MX_SPI1_Init+0xa8>)
 8000a8c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <MX_SPI1_Init+0xa8>)
 8000a94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a98:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a9a:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <MX_SPI1_Init+0xa8>)
 8000a9c:	2207      	movs	r2, #7
 8000a9e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aa0:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <MX_SPI1_Init+0xa8>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aa6:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <MX_SPI1_Init+0xa8>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000aac:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <MX_SPI1_Init+0xa8>)
 8000aae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000ab2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <MX_SPI1_Init+0xa8>)
 8000ab6:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000aba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000abc:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <MX_SPI1_Init+0xa8>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ac2:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <MX_SPI1_Init+0xa8>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <MX_SPI1_Init+0xa8>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000ace:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <MX_SPI1_Init+0xa8>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <MX_SPI1_Init+0xa8>)
 8000ad6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ada:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <MX_SPI1_Init+0xa8>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_SPI1_Init+0xa8>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <MX_SPI1_Init+0xa8>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MX_SPI1_Init+0xa8>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <MX_SPI1_Init+0xa8>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <MX_SPI1_Init+0xa8>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <MX_SPI1_Init+0xa8>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <MX_SPI1_Init+0xa8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_SPI1_Init+0xa8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_SPI1_Init+0xa8>)
 8000b14:	f008 fcf8 	bl	8009508 <HAL_SPI_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000b1e:	f002 f92f 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	24052ca4 	.word	0x24052ca4
 8000b2c:	40013000 	.word	0x40013000

08000b30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b088      	sub	sp, #32
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b36:	f107 0310 	add.w	r3, r7, #16
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b4e:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <MX_TIM3_Init+0x94>)
 8000b50:	4a1d      	ldr	r2, [pc, #116]	; (8000bc8 <MX_TIM3_Init+0x98>)
 8000b52:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <MX_TIM3_Init+0x94>)
 8000b56:	2263      	movs	r2, #99	; 0x63
 8000b58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <MX_TIM3_Init+0x94>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000b60:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <MX_TIM3_Init+0x94>)
 8000b62:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b68:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <MX_TIM3_Init+0x94>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <MX_TIM3_Init+0x94>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b74:	4813      	ldr	r0, [pc, #76]	; (8000bc4 <MX_TIM3_Init+0x94>)
 8000b76:	f009 fc72 	bl	800a45e <HAL_TIM_Base_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000b80:	f002 f8fe 	bl	8002d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b8a:	f107 0310 	add.w	r3, r7, #16
 8000b8e:	4619      	mov	r1, r3
 8000b90:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <MX_TIM3_Init+0x94>)
 8000b92:	f009 fe7b 	bl	800a88c <HAL_TIM_ConfigClockSource>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000b9c:	f002 f8f0 	bl	8002d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	4619      	mov	r1, r3
 8000bac:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_TIM3_Init+0x94>)
 8000bae:	f00a f8c5 	bl	800ad3c <HAL_TIMEx_MasterConfigSynchronization>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000bb8:	f002 f8e2 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bbc:	bf00      	nop
 8000bbe:	3720      	adds	r7, #32
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	24052c58 	.word	0x24052c58
 8000bc8:	40000400 	.word	0x40000400

08000bcc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bd2:	f107 0310 	add.w	r3, r7, #16
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000bea:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <MX_TIM5_Init+0x94>)
 8000bec:	4a1d      	ldr	r2, [pc, #116]	; (8000c64 <MX_TIM5_Init+0x98>)
 8000bee:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <MX_TIM5_Init+0x94>)
 8000bf2:	2263      	movs	r2, #99	; 0x63
 8000bf4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <MX_TIM5_Init+0x94>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000bfc:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <MX_TIM5_Init+0x94>)
 8000bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8000c02:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c04:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <MX_TIM5_Init+0x94>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <MX_TIM5_Init+0x94>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000c10:	4813      	ldr	r0, [pc, #76]	; (8000c60 <MX_TIM5_Init+0x94>)
 8000c12:	f009 fc24 	bl	800a45e <HAL_TIM_Base_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000c1c:	f002 f8b0 	bl	8002d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000c26:	f107 0310 	add.w	r3, r7, #16
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480c      	ldr	r0, [pc, #48]	; (8000c60 <MX_TIM5_Init+0x94>)
 8000c2e:	f009 fe2d 	bl	800a88c <HAL_TIM_ConfigClockSource>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000c38:	f002 f8a2 	bl	8002d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	4619      	mov	r1, r3
 8000c48:	4805      	ldr	r0, [pc, #20]	; (8000c60 <MX_TIM5_Init+0x94>)
 8000c4a:	f00a f877 	bl	800ad3c <HAL_TIMEx_MasterConfigSynchronization>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000c54:	f002 f894 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	3720      	adds	r7, #32
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	24052c0c 	.word	0x24052c0c
 8000c64:	40000c00 	.word	0x40000c00

08000c68 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c6e:	f107 0310 	add.w	r3, r7, #16
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000c86:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <MX_TIM15_Init+0x98>)
 8000c88:	4a1e      	ldr	r2, [pc, #120]	; (8000d04 <MX_TIM15_Init+0x9c>)
 8000c8a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 99;
 8000c8c:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <MX_TIM15_Init+0x98>)
 8000c8e:	2263      	movs	r2, #99	; 0x63
 8000c90:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c92:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <MX_TIM15_Init+0x98>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 40;
 8000c98:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <MX_TIM15_Init+0x98>)
 8000c9a:	2228      	movs	r2, #40	; 0x28
 8000c9c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <MX_TIM15_Init+0x98>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000ca4:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <MX_TIM15_Init+0x98>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <MX_TIM15_Init+0x98>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000cb0:	4813      	ldr	r0, [pc, #76]	; (8000d00 <MX_TIM15_Init+0x98>)
 8000cb2:	f009 fbd4 	bl	800a45e <HAL_TIM_Base_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8000cbc:	f002 f860 	bl	8002d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000cc6:	f107 0310 	add.w	r3, r7, #16
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480c      	ldr	r0, [pc, #48]	; (8000d00 <MX_TIM15_Init+0x98>)
 8000cce:	f009 fddd 	bl	800a88c <HAL_TIM_ConfigClockSource>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8000cd8:	f002 f852 	bl	8002d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4805      	ldr	r0, [pc, #20]	; (8000d00 <MX_TIM15_Init+0x98>)
 8000cea:	f00a f827 	bl	800ad3c <HAL_TIMEx_MasterConfigSynchronization>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8000cf4:	f002 f844 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	3720      	adds	r7, #32
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	240527b8 	.word	0x240527b8
 8000d04:	40014000 	.word	0x40014000

08000d08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d0c:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d0e:	4a23      	ldr	r2, [pc, #140]	; (8000d9c <MX_USART3_UART_Init+0x94>)
 8000d10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d12:	4b21      	ldr	r3, [pc, #132]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1a:	4b1f      	ldr	r3, [pc, #124]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d20:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d26:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d2c:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d2e:	220c      	movs	r2, #12
 8000d30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d32:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d38:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d3e:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d44:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d4a:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d50:	4811      	ldr	r0, [pc, #68]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d52:	f00a f89f 	bl	800ae94 <HAL_UART_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d5c:	f002 f810 	bl	8002d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d60:	2100      	movs	r1, #0
 8000d62:	480d      	ldr	r0, [pc, #52]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d64:	f00b f834 	bl	800bdd0 <HAL_UARTEx_SetTxFifoThreshold>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d6e:	f002 f807 	bl	8002d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d72:	2100      	movs	r1, #0
 8000d74:	4808      	ldr	r0, [pc, #32]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d76:	f00b f869 	bl	800be4c <HAL_UARTEx_SetRxFifoThreshold>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d80:	f001 fffe 	bl	8002d80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d84:	4804      	ldr	r0, [pc, #16]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d86:	f00a ffea 	bl	800bd5e <HAL_UARTEx_DisableFifoMode>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d90:	f001 fff6 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	24052728 	.word	0x24052728
 8000d9c:	40004800 	.word	0x40004800

08000da0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000da4:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000da6:	4a16      	ldr	r2, [pc, #88]	; (8000e00 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000da8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dac:	2209      	movs	r2, #9
 8000dae:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000db2:	2202      	movs	r2, #2
 8000db4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000de8:	f005 fec2 	bl	8006b70 <HAL_PCD_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000df2:	f001 ffc5 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	24052804 	.word	0x24052804
 8000e00:	40080000 	.word	0x40080000

08000e04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <MX_DMA_Init+0x3c>)
 8000e0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e10:	4a0b      	ldr	r2, [pc, #44]	; (8000e40 <MX_DMA_Init+0x3c>)
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <MX_DMA_Init+0x3c>)
 8000e1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	200b      	movs	r0, #11
 8000e2e:	f002 fd1c 	bl	800386a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e32:	200b      	movs	r0, #11
 8000e34:	f002 fd33 	bl	800389e <HAL_NVIC_EnableIRQ>

}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	58024400 	.word	0x58024400

08000e44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08c      	sub	sp, #48	; 0x30
 8000e48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5a:	4b4d      	ldr	r3, [pc, #308]	; (8000f90 <MX_GPIO_Init+0x14c>)
 8000e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e60:	4a4b      	ldr	r2, [pc, #300]	; (8000f90 <MX_GPIO_Init+0x14c>)
 8000e62:	f043 0304 	orr.w	r3, r3, #4
 8000e66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e6a:	4b49      	ldr	r3, [pc, #292]	; (8000f90 <MX_GPIO_Init+0x14c>)
 8000e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e70:	f003 0304 	and.w	r3, r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
 8000e76:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e78:	4b45      	ldr	r3, [pc, #276]	; (8000f90 <MX_GPIO_Init+0x14c>)
 8000e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7e:	4a44      	ldr	r2, [pc, #272]	; (8000f90 <MX_GPIO_Init+0x14c>)
 8000e80:	f043 0320 	orr.w	r3, r3, #32
 8000e84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e88:	4b41      	ldr	r3, [pc, #260]	; (8000f90 <MX_GPIO_Init+0x14c>)
 8000e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8e:	f003 0320 	and.w	r3, r3, #32
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e96:	4b3e      	ldr	r3, [pc, #248]	; (8000f90 <MX_GPIO_Init+0x14c>)
 8000e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9c:	4a3c      	ldr	r2, [pc, #240]	; (8000f90 <MX_GPIO_Init+0x14c>)
 8000e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ea2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea6:	4b3a      	ldr	r3, [pc, #232]	; (8000f90 <MX_GPIO_Init+0x14c>)
 8000ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb4:	4b36      	ldr	r3, [pc, #216]	; (8000f90 <MX_GPIO_Init+0x14c>)
 8000eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eba:	4a35      	ldr	r2, [pc, #212]	; (8000f90 <MX_GPIO_Init+0x14c>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ec4:	4b32      	ldr	r3, [pc, #200]	; (8000f90 <MX_GPIO_Init+0x14c>)
 8000ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed2:	4b2f      	ldr	r3, [pc, #188]	; (8000f90 <MX_GPIO_Init+0x14c>)
 8000ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed8:	4a2d      	ldr	r2, [pc, #180]	; (8000f90 <MX_GPIO_Init+0x14c>)
 8000eda:	f043 0302 	orr.w	r3, r3, #2
 8000ede:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee2:	4b2b      	ldr	r3, [pc, #172]	; (8000f90 <MX_GPIO_Init+0x14c>)
 8000ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee8:	f003 0302 	and.w	r3, r3, #2
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef0:	4b27      	ldr	r3, [pc, #156]	; (8000f90 <MX_GPIO_Init+0x14c>)
 8000ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef6:	4a26      	ldr	r2, [pc, #152]	; (8000f90 <MX_GPIO_Init+0x14c>)
 8000ef8:	f043 0308 	orr.w	r3, r3, #8
 8000efc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f00:	4b23      	ldr	r3, [pc, #140]	; (8000f90 <MX_GPIO_Init+0x14c>)
 8000f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f06:	f003 0308 	and.w	r3, r3, #8
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f0e:	4b20      	ldr	r3, [pc, #128]	; (8000f90 <MX_GPIO_Init+0x14c>)
 8000f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f14:	4a1e      	ldr	r2, [pc, #120]	; (8000f90 <MX_GPIO_Init+0x14c>)
 8000f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f1e:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <MX_GPIO_Init+0x14c>)
 8000f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f28:	603b      	str	r3, [r7, #0]
 8000f2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2180      	movs	r1, #128	; 0x80
 8000f30:	4818      	ldr	r0, [pc, #96]	; (8000f94 <MX_GPIO_Init+0x150>)
 8000f32:	f005 fdd5 	bl	8006ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_SET);
 8000f36:	2201      	movs	r2, #1
 8000f38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f3c:	4815      	ldr	r0, [pc, #84]	; (8000f94 <MX_GPIO_Init+0x150>)
 8000f3e:	f005 fdcf 	bl	8006ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8000f42:	2201      	movs	r2, #1
 8000f44:	2102      	movs	r1, #2
 8000f46:	4814      	ldr	r0, [pc, #80]	; (8000f98 <MX_GPIO_Init+0x154>)
 8000f48:	f005 fdca 	bl	8006ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF7 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000f4c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	4619      	mov	r1, r3
 8000f64:	480b      	ldr	r0, [pc, #44]	; (8000f94 <MX_GPIO_Init+0x150>)
 8000f66:	f005 fbf3 	bl	8006750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000f6e:	2311      	movs	r3, #17
 8000f70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f76:	2303      	movs	r3, #3
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f7a:	f107 031c 	add.w	r3, r7, #28
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_GPIO_Init+0x154>)
 8000f82:	f005 fbe5 	bl	8006750 <HAL_GPIO_Init>

}
 8000f86:	bf00      	nop
 8000f88:	3730      	adds	r7, #48	; 0x30
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	58024400 	.word	0x58024400
 8000f94:	58021400 	.word	0x58021400
 8000f98:	58020c00 	.word	0x58020c00

08000f9c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a23      	ldr	r2, [pc, #140]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d10c      	bne.n	8000fc8 <HAL_TIM_PeriodElapsedCallback+0x2c>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 1);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	4822      	ldr	r0, [pc, #136]	; (800103c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000fb4:	f005 fd94 	bl	8006ae0 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop(&htim3);
 8000fb8:	481f      	ldr	r0, [pc, #124]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000fba:	f009 faa7 	bl	800a50c <HAL_TIM_Base_Stop>
		htim3.Instance->CNT=0;
 8000fbe:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	625a      	str	r2, [r3, #36]	; 0x24
		value=(value<<1)|HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
		HAL_TIM_Base_Stop(&htim15);
		htim15.Instance->CNT=0;
	}

}
 8000fc6:	e031      	b.n	800102c <HAL_TIM_PeriodElapsedCallback+0x90>
	}else if(htim== &htim5){
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a1d      	ldr	r2, [pc, #116]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d10a      	bne.n	8000fe6 <HAL_TIM_PeriodElapsedCallback+0x4a>
		_micross=_micross+4294967295;
 8000fd0:	4b1c      	ldr	r3, [pc, #112]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd6:	f112 38ff 	adds.w	r8, r2, #4294967295
 8000fda:	f143 0900 	adc.w	r9, r3, #0
 8000fde:	4b19      	ldr	r3, [pc, #100]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000fe0:	e9c3 8900 	strd	r8, r9, [r3]
}
 8000fe4:	e022      	b.n	800102c <HAL_TIM_PeriodElapsedCallback+0x90>
	}else if(htim==&htim15){
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a17      	ldr	r2, [pc, #92]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d11e      	bne.n	800102c <HAL_TIM_PeriodElapsedCallback+0x90>
		value=(value<<1)|HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
 8000fee:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff4:	eb12 0a02 	adds.w	sl, r2, r2
 8000ff8:	eb43 0b03 	adc.w	fp, r3, r3
 8000ffc:	46d0      	mov	r8, sl
 8000ffe:	46d9      	mov	r9, fp
 8001000:	2102      	movs	r1, #2
 8001002:	480e      	ldr	r0, [pc, #56]	; (800103c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001004:	f005 fd54 	bl	8006ab0 <HAL_GPIO_ReadPin>
 8001008:	4603      	mov	r3, r0
 800100a:	b2da      	uxtb	r2, r3
 800100c:	f04f 0300 	mov.w	r3, #0
 8001010:	ea48 0402 	orr.w	r4, r8, r2
 8001014:	ea49 0503 	orr.w	r5, r9, r3
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800101a:	e9c3 4500 	strd	r4, r5, [r3]
		HAL_TIM_Base_Stop(&htim15);
 800101e:	480a      	ldr	r0, [pc, #40]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001020:	f009 fa74 	bl	800a50c <HAL_TIM_Base_Stop>
		htim15.Instance->CNT=0;
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2200      	movs	r2, #0
 800102a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001036:	bf00      	nop
 8001038:	24052c58 	.word	0x24052c58
 800103c:	58020c00 	.word	0x58020c00
 8001040:	24052c0c 	.word	0x24052c0c
 8001044:	24046678 	.word	0x24046678
 8001048:	240527b8 	.word	0x240527b8
 800104c:	24046668 	.word	0x24046668

08001050 <requestT>:





void requestT(){
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	if(flag){
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <requestT+0x34>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d011      	beq.n	8001080 <requestT+0x30>
		value=0;
 800105c:	490a      	ldr	r1, [pc, #40]	; (8001088 <requestT+0x38>)
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2102      	movs	r1, #2
 800106e:	4807      	ldr	r0, [pc, #28]	; (800108c <requestT+0x3c>)
 8001070:	f005 fd36 	bl	8006ae0 <HAL_GPIO_WritePin>
//		htim3.Instance->CNT=0;
		HAL_TIM_Base_Start_IT(&htim3);
 8001074:	4806      	ldr	r0, [pc, #24]	; (8001090 <requestT+0x40>)
 8001076:	f009 fa71 	bl	800a55c <HAL_TIM_Base_Start_IT>
		flag=0;
 800107a:	4b02      	ldr	r3, [pc, #8]	; (8001084 <requestT+0x34>)
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
	}
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	24046664 	.word	0x24046664
 8001088:	24046668 	.word	0x24046668
 800108c:	58020c00 	.word	0x58020c00
 8001090:	24052c58 	.word	0x24052c58

08001094 <get_value>:

void get_value(){
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	now=HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
 8001098:	2102      	movs	r1, #2
 800109a:	480c      	ldr	r0, [pc, #48]	; (80010cc <get_value+0x38>)
 800109c:	f005 fd08 	bl	8006ab0 <HAL_GPIO_ReadPin>
 80010a0:	4603      	mov	r3, r0
 80010a2:	461a      	mov	r2, r3
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <get_value+0x3c>)
 80010a6:	701a      	strb	r2, [r3, #0]
	if(pre==0 && now==1){
 80010a8:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <get_value+0x40>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d106      	bne.n	80010be <get_value+0x2a>
 80010b0:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <get_value+0x3c>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d102      	bne.n	80010be <get_value+0x2a>
//	  startT=micross();
//	  htim15.Instance->CNT=0;
	  HAL_TIM_Base_Start_IT(&htim15);
 80010b8:	4807      	ldr	r0, [pc, #28]	; (80010d8 <get_value+0x44>)
 80010ba:	f009 fa4f 	bl	800a55c <HAL_TIM_Base_Start_IT>
//	  flagT=1;
	}
	pre=now;
 80010be:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <get_value+0x3c>)
 80010c0:	781a      	ldrb	r2, [r3, #0]
 80010c2:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <get_value+0x40>)
 80010c4:	701a      	strb	r2, [r3, #0]
//	if(micross()-startT >=35 && flagT==1){
//	  value=(value<<1)|HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
//	  flagT=0;
//	}
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	58020c00 	.word	0x58020c00
 80010d0:	24000008 	.word	0x24000008
 80010d4:	24046670 	.word	0x24046670
 80010d8:	240527b8 	.word	0x240527b8

080010dc <Update_check_Value>:
uint16_t temp=0;
uint8_t sum=0;
uint8_t realsum=0;
float realtemp=0;
float realhumidity=0;
void Update_check_Value(){
 80010dc:	b5b0      	push	{r4, r5, r7, lr}
 80010de:	af00      	add	r7, sp, #0
	if(value>=0b100000000000000000000000000000000000000000){
 80010e0:	4954      	ldr	r1, [pc, #336]	; (8001234 <Update_check_Value+0x158>)
 80010e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010e6:	f04f 34ff 	mov.w	r4, #4294967295
 80010ea:	f240 15ff 	movw	r5, #511	; 0x1ff
 80010ee:	428d      	cmp	r5, r1
 80010f0:	bf08      	it	eq
 80010f2:	4284      	cmpeq	r4, r0
 80010f4:	f080 809c 	bcs.w	8001230 <Update_check_Value+0x154>
		value=value&0b01111111111111111111111111111111111111110;
 80010f8:	494e      	ldr	r1, [pc, #312]	; (8001234 <Update_check_Value+0x158>)
 80010fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010fe:	f06f 0401 	mvn.w	r4, #1
 8001102:	f04f 05ff 	mov.w	r5, #255	; 0xff
 8001106:	ea00 0204 	and.w	r2, r0, r4
 800110a:	ea01 0305 	and.w	r3, r1, r5
 800110e:	4949      	ldr	r1, [pc, #292]	; (8001234 <Update_check_Value+0x158>)
 8001110:	e9c1 2300 	strd	r2, r3, [r1]
		value=value>>1;
 8001114:	4b47      	ldr	r3, [pc, #284]	; (8001234 <Update_check_Value+0x158>)
 8001116:	e9d3 0100 	ldrd	r0, r1, [r3]
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	f04f 0300 	mov.w	r3, #0
 8001122:	0842      	lsrs	r2, r0, #1
 8001124:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8001128:	084b      	lsrs	r3, r1, #1
 800112a:	4942      	ldr	r1, [pc, #264]	; (8001234 <Update_check_Value+0x158>)
 800112c:	e9c1 2300 	strd	r2, r3, [r1]
		sum=value&0b11111111;
 8001130:	4b40      	ldr	r3, [pc, #256]	; (8001234 <Update_check_Value+0x158>)
 8001132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	4b3f      	ldr	r3, [pc, #252]	; (8001238 <Update_check_Value+0x15c>)
 800113a:	701a      	strb	r2, [r3, #0]
		temp=(value>>8)&0b1111111111111111;
 800113c:	4b3d      	ldr	r3, [pc, #244]	; (8001234 <Update_check_Value+0x158>)
 800113e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001142:	f04f 0200 	mov.w	r2, #0
 8001146:	f04f 0300 	mov.w	r3, #0
 800114a:	0a02      	lsrs	r2, r0, #8
 800114c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001150:	0a0b      	lsrs	r3, r1, #8
 8001152:	b292      	uxth	r2, r2
 8001154:	4b39      	ldr	r3, [pc, #228]	; (800123c <Update_check_Value+0x160>)
 8001156:	801a      	strh	r2, [r3, #0]
		humidity=(value>>24)&0b1111111111111111;
 8001158:	4b36      	ldr	r3, [pc, #216]	; (8001234 <Update_check_Value+0x158>)
 800115a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	f04f 0300 	mov.w	r3, #0
 8001166:	0e02      	lsrs	r2, r0, #24
 8001168:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800116c:	0e0b      	lsrs	r3, r1, #24
 800116e:	b292      	uxth	r2, r2
 8001170:	4b33      	ldr	r3, [pc, #204]	; (8001240 <Update_check_Value+0x164>)
 8001172:	801a      	strh	r2, [r3, #0]
		value=0;
 8001174:	492f      	ldr	r1, [pc, #188]	; (8001234 <Update_check_Value+0x158>)
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	f04f 0300 	mov.w	r3, #0
 800117e:	e9c1 2300 	strd	r2, r3, [r1]
		//check sum
		realsum=((humidity>>8)&0b11111111) + (humidity&0b11111111) +((temp>>8)&0b11111111) + (temp&0b11111111);
 8001182:	4b2f      	ldr	r3, [pc, #188]	; (8001240 <Update_check_Value+0x164>)
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	0a1b      	lsrs	r3, r3, #8
 8001188:	b29b      	uxth	r3, r3
 800118a:	b2da      	uxtb	r2, r3
 800118c:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <Update_check_Value+0x164>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	b2db      	uxtb	r3, r3
 8001192:	4413      	add	r3, r2
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4b29      	ldr	r3, [pc, #164]	; (800123c <Update_check_Value+0x160>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	0a1b      	lsrs	r3, r3, #8
 800119c:	b29b      	uxth	r3, r3
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	4413      	add	r3, r2
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	4b25      	ldr	r3, [pc, #148]	; (800123c <Update_check_Value+0x160>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	4413      	add	r3, r2
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4b25      	ldr	r3, [pc, #148]	; (8001244 <Update_check_Value+0x168>)
 80011b0:	701a      	strb	r2, [r3, #0]
		if(sum!=realsum){
 80011b2:	4b21      	ldr	r3, [pc, #132]	; (8001238 <Update_check_Value+0x15c>)
 80011b4:	781a      	ldrb	r2, [r3, #0]
 80011b6:	4b23      	ldr	r3, [pc, #140]	; (8001244 <Update_check_Value+0x168>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d003      	beq.n	80011c6 <Update_check_Value+0xea>
			flag=1;  //request again
 80011be:	4b22      	ldr	r3, [pc, #136]	; (8001248 <Update_check_Value+0x16c>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	701a      	strb	r2, [r3, #0]
				realtemp=temp/(10.00);//update value
			}
			Updatescreen();
		}
	}
}
 80011c4:	e034      	b.n	8001230 <Update_check_Value+0x154>
			realhumidity=humidity/10.0;//update value
 80011c6:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <Update_check_Value+0x164>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	ee07 3a90 	vmov	s15, r3
 80011ce:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80011d2:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80011d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011da:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011de:	4b1b      	ldr	r3, [pc, #108]	; (800124c <Update_check_Value+0x170>)
 80011e0:	edc3 7a00 	vstr	s15, [r3]
			if(temp>0b1000000000000000){
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <Update_check_Value+0x160>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011ec:	d90f      	bls.n	800120e <Update_check_Value+0x132>
				realtemp=temp/(-10.00); //update value
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <Update_check_Value+0x160>)
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	ee07 3a90 	vmov	s15, r3
 80011f6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80011fa:	eeba 5b04 	vmov.f64	d5, #164	; 0xc1200000 -10.0
 80011fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001202:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001206:	4b12      	ldr	r3, [pc, #72]	; (8001250 <Update_check_Value+0x174>)
 8001208:	edc3 7a00 	vstr	s15, [r3]
 800120c:	e00e      	b.n	800122c <Update_check_Value+0x150>
				realtemp=temp/(10.00);//update value
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <Update_check_Value+0x160>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	ee07 3a90 	vmov	s15, r3
 8001216:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800121a:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800121e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001222:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001226:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <Update_check_Value+0x174>)
 8001228:	edc3 7a00 	vstr	s15, [r3]
			Updatescreen();
 800122c:	f001 fd88 	bl	8002d40 <Updatescreen>
}
 8001230:	bf00      	nop
 8001232:	bdb0      	pop	{r4, r5, r7, pc}
 8001234:	24046668 	.word	0x24046668
 8001238:	24052704 	.word	0x24052704
 800123c:	24052702 	.word	0x24052702
 8001240:	24052700 	.word	0x24052700
 8001244:	24052705 	.word	0x24052705
 8001248:	24046664 	.word	0x24046664
 800124c:	2405270c 	.word	0x2405270c
 8001250:	24052708 	.word	0x24052708

08001254 <LCD_init>:





void LCD_init(){
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0


	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,0);	//ss pin
 8001258:	2200      	movs	r2, #0
 800125a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800125e:	482f      	ldr	r0, [pc, #188]	; (800131c <LCD_init+0xc8>)
 8001260:	f005 fc3e 	bl	8006ae0 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,0);
 8001264:	2200      	movs	r2, #0
 8001266:	2180      	movs	r1, #128	; 0x80
 8001268:	482c      	ldr	r0, [pc, #176]	; (800131c <LCD_init+0xc8>)
 800126a:	f005 fc39 	bl	8006ae0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, LCDsetup, 4, 1000);
 800126e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001272:	2204      	movs	r2, #4
 8001274:	492a      	ldr	r1, [pc, #168]	; (8001320 <LCD_init+0xcc>)
 8001276:	482b      	ldr	r0, [pc, #172]	; (8001324 <LCD_init+0xd0>)
 8001278:	f008 fa4c 	bl	8009714 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,1);
 800127c:	2201      	movs	r2, #1
 800127e:	2180      	movs	r1, #128	; 0x80
 8001280:	4826      	ldr	r0, [pc, #152]	; (800131c <LCD_init+0xc8>)
 8001282:	f005 fc2d 	bl	8006ae0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &LCDsetup[4], 1, 1000);
 8001286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128a:	2201      	movs	r2, #1
 800128c:	4926      	ldr	r1, [pc, #152]	; (8001328 <LCD_init+0xd4>)
 800128e:	4825      	ldr	r0, [pc, #148]	; (8001324 <LCD_init+0xd0>)
 8001290:	f008 fa40 	bl	8009714 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,0);
 8001294:	2200      	movs	r2, #0
 8001296:	2180      	movs	r1, #128	; 0x80
 8001298:	4820      	ldr	r0, [pc, #128]	; (800131c <LCD_init+0xc8>)
 800129a:	f005 fc21 	bl	8006ae0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &LCDsetup[5], 1, 1000);
 800129e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a2:	2201      	movs	r2, #1
 80012a4:	4921      	ldr	r1, [pc, #132]	; (800132c <LCD_init+0xd8>)
 80012a6:	481f      	ldr	r0, [pc, #124]	; (8001324 <LCD_init+0xd0>)
 80012a8:	f008 fa34 	bl	8009714 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,1);
 80012ac:	2201      	movs	r2, #1
 80012ae:	2180      	movs	r1, #128	; 0x80
 80012b0:	481a      	ldr	r0, [pc, #104]	; (800131c <LCD_init+0xc8>)
 80012b2:	f005 fc15 	bl	8006ae0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &LCDsetup[6], 4, 1000);
 80012b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ba:	2204      	movs	r2, #4
 80012bc:	491c      	ldr	r1, [pc, #112]	; (8001330 <LCD_init+0xdc>)
 80012be:	4819      	ldr	r0, [pc, #100]	; (8001324 <LCD_init+0xd0>)
 80012c0:	f008 fa28 	bl	8009714 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,0);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2180      	movs	r1, #128	; 0x80
 80012c8:	4814      	ldr	r0, [pc, #80]	; (800131c <LCD_init+0xc8>)
 80012ca:	f005 fc09 	bl	8006ae0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &LCDsetup[10], 1, 1000);
 80012ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d2:	2201      	movs	r2, #1
 80012d4:	4917      	ldr	r1, [pc, #92]	; (8001334 <LCD_init+0xe0>)
 80012d6:	4813      	ldr	r0, [pc, #76]	; (8001324 <LCD_init+0xd0>)
 80012d8:	f008 fa1c 	bl	8009714 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,1);
 80012dc:	2201      	movs	r2, #1
 80012de:	2180      	movs	r1, #128	; 0x80
 80012e0:	480e      	ldr	r0, [pc, #56]	; (800131c <LCD_init+0xc8>)
 80012e2:	f005 fbfd 	bl	8006ae0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &LCDsetup[11], 4, 1000);
 80012e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ea:	2204      	movs	r2, #4
 80012ec:	4912      	ldr	r1, [pc, #72]	; (8001338 <LCD_init+0xe4>)
 80012ee:	480d      	ldr	r0, [pc, #52]	; (8001324 <LCD_init+0xd0>)
 80012f0:	f008 fa10 	bl	8009714 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,0);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2180      	movs	r1, #128	; 0x80
 80012f8:	4808      	ldr	r0, [pc, #32]	; (800131c <LCD_init+0xc8>)
 80012fa:	f005 fbf1 	bl	8006ae0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &LCDsetup[15], 1, 1000);
 80012fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001302:	2201      	movs	r2, #1
 8001304:	490d      	ldr	r1, [pc, #52]	; (800133c <LCD_init+0xe8>)
 8001306:	4807      	ldr	r0, [pc, #28]	; (8001324 <LCD_init+0xd0>)
 8001308:	f008 fa04 	bl	8009714 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,1);
 800130c:	2201      	movs	r2, #1
 800130e:	2180      	movs	r1, #128	; 0x80
 8001310:	4802      	ldr	r0, [pc, #8]	; (800131c <LCD_init+0xc8>)
 8001312:	f005 fbe5 	bl	8006ae0 <HAL_GPIO_WritePin>


}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	58021400 	.word	0x58021400
 8001320:	2400000c 	.word	0x2400000c
 8001324:	24052ca4 	.word	0x24052ca4
 8001328:	24000010 	.word	0x24000010
 800132c:	24000011 	.word	0x24000011
 8001330:	24000012 	.word	0x24000012
 8001334:	24000016 	.word	0x24000016
 8001338:	24000017 	.word	0x24000017
 800133c:	2400001b 	.word	0x2400001b

08001340 <abss>:
//	 htim4.Instance->CNT=0;
//	 HAL_TIM_Base_Start_IT(&htim4);
// }
//}

uint64_t abss(double q){
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	ed87 0b00 	vstr	d0, [r7]
	if(q<0){
 800134a:	ed97 7b00 	vldr	d7, [r7]
 800134e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001356:	d505      	bpl.n	8001364 <abss+0x24>
		q=-1*q;
 8001358:	ed97 7b00 	vldr	d7, [r7]
 800135c:	eeb1 7b47 	vneg.f64	d7, d7
 8001360:	ed87 7b00 	vstr	d7, [r7]
	}else{
		q=q;
	}
	return q;
 8001364:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001368:	f7ff f822 	bl	80003b0 <__aeabi_d2ulz>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
}
 8001370:	4610      	mov	r0, r2
 8001372:	4619      	mov	r1, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	0000      	movs	r0, r0
 800137c:	0000      	movs	r0, r0
	...

08001380 <sortt>:
//uint16_t Tt=0;
//uint16_t RH=0;
uint8_t flagMinus=0;

void sortt(double T,double RH){
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	ed87 0b02 	vstr	d0, [r7, #8]
 800138a:	ed87 1b00 	vstr	d1, [r7]
	uint16_t Tt=0;
 800138e:	2300      	movs	r3, #0
 8001390:	82fb      	strh	r3, [r7, #22]
	uint16_t RHH=0;
 8001392:	2300      	movs	r3, #0
 8001394:	82bb      	strh	r3, [r7, #20]
	if(T<0){
 8001396:	ed97 7b02 	vldr	d7, [r7, #8]
 800139a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800139e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a2:	d503      	bpl.n	80013ac <sortt+0x2c>
		flagMinus=1;
 80013a4:	4b1e      	ldr	r3, [pc, #120]	; (8001420 <sortt+0xa0>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	701a      	strb	r2, [r3, #0]
 80013aa:	e002      	b.n	80013b2 <sortt+0x32>
	}else{
		flagMinus=0;
 80013ac:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <sortt+0xa0>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	701a      	strb	r2, [r3, #0]
	}
	T=T*100;
 80013b2:	ed97 7b02 	vldr	d7, [r7, #8]
 80013b6:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8001418 <sortt+0x98>
 80013ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80013be:	ed87 7b02 	vstr	d7, [r7, #8]
	Tt=(int)abss(T)/1;
 80013c2:	ed97 0b02 	vldr	d0, [r7, #8]
 80013c6:	f7ff ffbb 	bl	8001340 <abss>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4613      	mov	r3, r2
 80013d0:	82fb      	strh	r3, [r7, #22]
	RH=RH*100;
 80013d2:	ed97 7b00 	vldr	d7, [r7]
 80013d6:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001418 <sortt+0x98>
 80013da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80013de:	ed87 7b00 	vstr	d7, [r7]
	RHH=(int)abss(RH)/1;
 80013e2:	ed97 0b00 	vldr	d0, [r7]
 80013e6:	f7ff ffab 	bl	8001340 <abss>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4613      	mov	r3, r2
 80013f0:	82bb      	strh	r3, [r7, #20]
	sprintf(bufferT,"%d",Tt);
 80013f2:	8afb      	ldrh	r3, [r7, #22]
 80013f4:	461a      	mov	r2, r3
 80013f6:	490b      	ldr	r1, [pc, #44]	; (8001424 <sortt+0xa4>)
 80013f8:	480b      	ldr	r0, [pc, #44]	; (8001428 <sortt+0xa8>)
 80013fa:	f00b f8e9 	bl	800c5d0 <siprintf>
	sprintf(bufferRH,"%d",RHH);
 80013fe:	8abb      	ldrh	r3, [r7, #20]
 8001400:	461a      	mov	r2, r3
 8001402:	4908      	ldr	r1, [pc, #32]	; (8001424 <sortt+0xa4>)
 8001404:	4809      	ldr	r0, [pc, #36]	; (800142c <sortt+0xac>)
 8001406:	f00b f8e3 	bl	800c5d0 <siprintf>
}
 800140a:	bf00      	nop
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	f3af 8000 	nop.w
 8001418:	00000000 	.word	0x00000000
 800141c:	40590000 	.word	0x40590000
 8001420:	24052710 	.word	0x24052710
 8001424:	0800ce44 	.word	0x0800ce44
 8001428:	24052680 	.word	0x24052680
 800142c:	240526c0 	.word	0x240526c0

08001430 <makeImg>:

uint8_t Cno=0;

void makeImg(){
 8001430:	b480      	push	{r7}
 8001432:	b0d1      	sub	sp, #324	; 0x144
 8001434:	af00      	add	r7, sp, #0

	Cno=bufferRH[3];
 8001436:	4bab      	ldr	r3, [pc, #684]	; (80016e4 <makeImg+0x2b4>)
 8001438:	78da      	ldrb	r2, [r3, #3]
 800143a:	4bab      	ldr	r3, [pc, #684]	; (80016e8 <makeImg+0x2b8>)
 800143c:	701a      	strb	r2, [r3, #0]
	switch (Cno) {
 800143e:	4baa      	ldr	r3, [pc, #680]	; (80016e8 <makeImg+0x2b8>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	3b30      	subs	r3, #48	; 0x30
 8001444:	2b09      	cmp	r3, #9
 8001446:	f200 8183 	bhi.w	8001750 <makeImg+0x320>
 800144a:	a201      	add	r2, pc, #4	; (adr r2, 8001450 <makeImg+0x20>)
 800144c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001450:	08001479 	.word	0x08001479
 8001454:	080014bd 	.word	0x080014bd
 8001458:	08001501 	.word	0x08001501
 800145c:	08001545 	.word	0x08001545
 8001460:	08001589 	.word	0x08001589
 8001464:	080015cd 	.word	0x080015cd
 8001468:	08001611 	.word	0x08001611
 800146c:	08001655 	.word	0x08001655
 8001470:	08001699 	.word	0x08001699
 8001474:	080016dd 	.word	0x080016dd
		case 48:
			for(int j=0;j<=5760;j++){
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800147e:	e017      	b.n	80014b0 <makeImg+0x80>
				if(RH_Zero[j]!=0x3f){
 8001480:	4a9a      	ldr	r2, [pc, #616]	; (80016ec <makeImg+0x2bc>)
 8001482:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001486:	4413      	add	r3, r2
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b3f      	cmp	r3, #63	; 0x3f
 800148c:	d00b      	beq.n	80014a6 <makeImg+0x76>
					 Frame[37020+j]=RH_Zero[j];
 800148e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001492:	f249 039c 	movw	r3, #37020	; 0x909c
 8001496:	4413      	add	r3, r2
 8001498:	4994      	ldr	r1, [pc, #592]	; (80016ec <makeImg+0x2bc>)
 800149a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800149e:	440a      	add	r2, r1
 80014a0:	7811      	ldrb	r1, [r2, #0]
 80014a2:	4a93      	ldr	r2, [pc, #588]	; (80016f0 <makeImg+0x2c0>)
 80014a4:	54d1      	strb	r1, [r2, r3]
			for(int j=0;j<=5760;j++){
 80014a6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80014aa:	3301      	adds	r3, #1
 80014ac:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80014b0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80014b4:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80014b8:	dde2      	ble.n	8001480 <makeImg+0x50>
				}

			}
		break;
 80014ba:	e149      	b.n	8001750 <makeImg+0x320>
		case 49:
			for(int j=0;j<=5760;j++){
 80014bc:	2300      	movs	r3, #0
 80014be:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80014c2:	e017      	b.n	80014f4 <makeImg+0xc4>
				if(RH_One[j]!=0x3f){
 80014c4:	4a8b      	ldr	r2, [pc, #556]	; (80016f4 <makeImg+0x2c4>)
 80014c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80014ca:	4413      	add	r3, r2
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b3f      	cmp	r3, #63	; 0x3f
 80014d0:	d00b      	beq.n	80014ea <makeImg+0xba>
				  Frame[37020+j]=RH_One[j];
 80014d2:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80014d6:	f249 039c 	movw	r3, #37020	; 0x909c
 80014da:	4413      	add	r3, r2
 80014dc:	4985      	ldr	r1, [pc, #532]	; (80016f4 <makeImg+0x2c4>)
 80014de:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80014e2:	440a      	add	r2, r1
 80014e4:	7811      	ldrb	r1, [r2, #0]
 80014e6:	4a82      	ldr	r2, [pc, #520]	; (80016f0 <makeImg+0x2c0>)
 80014e8:	54d1      	strb	r1, [r2, r3]
			for(int j=0;j<=5760;j++){
 80014ea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80014ee:	3301      	adds	r3, #1
 80014f0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80014f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80014f8:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80014fc:	dde2      	ble.n	80014c4 <makeImg+0x94>
				}
			}
		break;
 80014fe:	e127      	b.n	8001750 <makeImg+0x320>
		case 50:
			for(int j=0;j<=5760;j++){
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001506:	e017      	b.n	8001538 <makeImg+0x108>
				if(RH_Two[j]!=0x3f){
 8001508:	4a7b      	ldr	r2, [pc, #492]	; (80016f8 <makeImg+0x2c8>)
 800150a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800150e:	4413      	add	r3, r2
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b3f      	cmp	r3, #63	; 0x3f
 8001514:	d00b      	beq.n	800152e <makeImg+0xfe>
				  Frame[37020+j]=RH_Two[j];
 8001516:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800151a:	f249 039c 	movw	r3, #37020	; 0x909c
 800151e:	4413      	add	r3, r2
 8001520:	4975      	ldr	r1, [pc, #468]	; (80016f8 <makeImg+0x2c8>)
 8001522:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001526:	440a      	add	r2, r1
 8001528:	7811      	ldrb	r1, [r2, #0]
 800152a:	4a71      	ldr	r2, [pc, #452]	; (80016f0 <makeImg+0x2c0>)
 800152c:	54d1      	strb	r1, [r2, r3]
			for(int j=0;j<=5760;j++){
 800152e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001532:	3301      	adds	r3, #1
 8001534:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001538:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800153c:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001540:	dde2      	ble.n	8001508 <makeImg+0xd8>
				}
			}
		break;
 8001542:	e105      	b.n	8001750 <makeImg+0x320>
		case 51:
			for(int j=0;j<=5760;j++){
 8001544:	2300      	movs	r3, #0
 8001546:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800154a:	e017      	b.n	800157c <makeImg+0x14c>
				if(RH_Three[j]!=0x3f){
 800154c:	4a6b      	ldr	r2, [pc, #428]	; (80016fc <makeImg+0x2cc>)
 800154e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001552:	4413      	add	r3, r2
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b3f      	cmp	r3, #63	; 0x3f
 8001558:	d00b      	beq.n	8001572 <makeImg+0x142>
				  Frame[37020+j]=RH_Three[j];
 800155a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800155e:	f249 039c 	movw	r3, #37020	; 0x909c
 8001562:	4413      	add	r3, r2
 8001564:	4965      	ldr	r1, [pc, #404]	; (80016fc <makeImg+0x2cc>)
 8001566:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800156a:	440a      	add	r2, r1
 800156c:	7811      	ldrb	r1, [r2, #0]
 800156e:	4a60      	ldr	r2, [pc, #384]	; (80016f0 <makeImg+0x2c0>)
 8001570:	54d1      	strb	r1, [r2, r3]
			for(int j=0;j<=5760;j++){
 8001572:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001576:	3301      	adds	r3, #1
 8001578:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800157c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001580:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001584:	dde2      	ble.n	800154c <makeImg+0x11c>
				}
			}
		break;
 8001586:	e0e3      	b.n	8001750 <makeImg+0x320>
		case 52:
			for(int j=0;j<=5760;j++){
 8001588:	2300      	movs	r3, #0
 800158a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800158e:	e017      	b.n	80015c0 <makeImg+0x190>
				if(RH_Four[j]!=0x3f){
 8001590:	4a5b      	ldr	r2, [pc, #364]	; (8001700 <makeImg+0x2d0>)
 8001592:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001596:	4413      	add	r3, r2
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b3f      	cmp	r3, #63	; 0x3f
 800159c:	d00b      	beq.n	80015b6 <makeImg+0x186>
				  Frame[37020+j]=RH_Four[j];
 800159e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80015a2:	f249 039c 	movw	r3, #37020	; 0x909c
 80015a6:	4413      	add	r3, r2
 80015a8:	4955      	ldr	r1, [pc, #340]	; (8001700 <makeImg+0x2d0>)
 80015aa:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80015ae:	440a      	add	r2, r1
 80015b0:	7811      	ldrb	r1, [r2, #0]
 80015b2:	4a4f      	ldr	r2, [pc, #316]	; (80016f0 <makeImg+0x2c0>)
 80015b4:	54d1      	strb	r1, [r2, r3]
			for(int j=0;j<=5760;j++){
 80015b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80015ba:	3301      	adds	r3, #1
 80015bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80015c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80015c4:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80015c8:	dde2      	ble.n	8001590 <makeImg+0x160>
				}
			}
		break;
 80015ca:	e0c1      	b.n	8001750 <makeImg+0x320>
		case 53:
			for(int j=0;j<=5760;j++){
 80015cc:	2300      	movs	r3, #0
 80015ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80015d2:	e017      	b.n	8001604 <makeImg+0x1d4>
				if(RH_Five[j]!=0x3f){
 80015d4:	4a4b      	ldr	r2, [pc, #300]	; (8001704 <makeImg+0x2d4>)
 80015d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015da:	4413      	add	r3, r2
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b3f      	cmp	r3, #63	; 0x3f
 80015e0:	d00b      	beq.n	80015fa <makeImg+0x1ca>
				  Frame[37020+j]=RH_Five[j];
 80015e2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80015e6:	f249 039c 	movw	r3, #37020	; 0x909c
 80015ea:	4413      	add	r3, r2
 80015ec:	4945      	ldr	r1, [pc, #276]	; (8001704 <makeImg+0x2d4>)
 80015ee:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80015f2:	440a      	add	r2, r1
 80015f4:	7811      	ldrb	r1, [r2, #0]
 80015f6:	4a3e      	ldr	r2, [pc, #248]	; (80016f0 <makeImg+0x2c0>)
 80015f8:	54d1      	strb	r1, [r2, r3]
			for(int j=0;j<=5760;j++){
 80015fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015fe:	3301      	adds	r3, #1
 8001600:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001604:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001608:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 800160c:	dde2      	ble.n	80015d4 <makeImg+0x1a4>
				}
			}
		break;
 800160e:	e09f      	b.n	8001750 <makeImg+0x320>
		case 54:
			for(int j=0;j<=5760;j++){
 8001610:	2300      	movs	r3, #0
 8001612:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001616:	e017      	b.n	8001648 <makeImg+0x218>
				if(RH_Six[j]!=0x3f){
 8001618:	4a3b      	ldr	r2, [pc, #236]	; (8001708 <makeImg+0x2d8>)
 800161a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800161e:	4413      	add	r3, r2
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b3f      	cmp	r3, #63	; 0x3f
 8001624:	d00b      	beq.n	800163e <makeImg+0x20e>
				  Frame[37020+j]=RH_Six[j];
 8001626:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800162a:	f249 039c 	movw	r3, #37020	; 0x909c
 800162e:	4413      	add	r3, r2
 8001630:	4935      	ldr	r1, [pc, #212]	; (8001708 <makeImg+0x2d8>)
 8001632:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001636:	440a      	add	r2, r1
 8001638:	7811      	ldrb	r1, [r2, #0]
 800163a:	4a2d      	ldr	r2, [pc, #180]	; (80016f0 <makeImg+0x2c0>)
 800163c:	54d1      	strb	r1, [r2, r3]
			for(int j=0;j<=5760;j++){
 800163e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001642:	3301      	adds	r3, #1
 8001644:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001648:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800164c:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001650:	dde2      	ble.n	8001618 <makeImg+0x1e8>
				}
			}
		break;
 8001652:	e07d      	b.n	8001750 <makeImg+0x320>
		case 55:
			for(int j=0;j<=5760;j++){
 8001654:	2300      	movs	r3, #0
 8001656:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800165a:	e017      	b.n	800168c <makeImg+0x25c>
				if(RH_Seven[j]!=0x3f){
 800165c:	4a2b      	ldr	r2, [pc, #172]	; (800170c <makeImg+0x2dc>)
 800165e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001662:	4413      	add	r3, r2
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b3f      	cmp	r3, #63	; 0x3f
 8001668:	d00b      	beq.n	8001682 <makeImg+0x252>
				  Frame[37020+j]=RH_Seven[j];
 800166a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800166e:	f249 039c 	movw	r3, #37020	; 0x909c
 8001672:	4413      	add	r3, r2
 8001674:	4925      	ldr	r1, [pc, #148]	; (800170c <makeImg+0x2dc>)
 8001676:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800167a:	440a      	add	r2, r1
 800167c:	7811      	ldrb	r1, [r2, #0]
 800167e:	4a1c      	ldr	r2, [pc, #112]	; (80016f0 <makeImg+0x2c0>)
 8001680:	54d1      	strb	r1, [r2, r3]
			for(int j=0;j<=5760;j++){
 8001682:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001686:	3301      	adds	r3, #1
 8001688:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800168c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001690:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001694:	dde2      	ble.n	800165c <makeImg+0x22c>
				}
			}
		break;
 8001696:	e05b      	b.n	8001750 <makeImg+0x320>
		case 56:
			for(int j=0;j<=5760;j++){
 8001698:	2300      	movs	r3, #0
 800169a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800169e:	e017      	b.n	80016d0 <makeImg+0x2a0>
				if(RH_Egg[j]!=0x3f){
 80016a0:	4a1b      	ldr	r2, [pc, #108]	; (8001710 <makeImg+0x2e0>)
 80016a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80016a6:	4413      	add	r3, r2
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b3f      	cmp	r3, #63	; 0x3f
 80016ac:	d00b      	beq.n	80016c6 <makeImg+0x296>
				  Frame[37020+j]=RH_Egg[j];
 80016ae:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80016b2:	f249 039c 	movw	r3, #37020	; 0x909c
 80016b6:	4413      	add	r3, r2
 80016b8:	4915      	ldr	r1, [pc, #84]	; (8001710 <makeImg+0x2e0>)
 80016ba:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80016be:	440a      	add	r2, r1
 80016c0:	7811      	ldrb	r1, [r2, #0]
 80016c2:	4a0b      	ldr	r2, [pc, #44]	; (80016f0 <makeImg+0x2c0>)
 80016c4:	54d1      	strb	r1, [r2, r3]
			for(int j=0;j<=5760;j++){
 80016c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80016ca:	3301      	adds	r3, #1
 80016cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80016d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80016d4:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80016d8:	dde2      	ble.n	80016a0 <makeImg+0x270>
				}
			}
		break;
 80016da:	e039      	b.n	8001750 <makeImg+0x320>
		case 57:
			for(int j=0;j<=5760;j++){
 80016dc:	2300      	movs	r3, #0
 80016de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80016e2:	e02f      	b.n	8001744 <makeImg+0x314>
 80016e4:	240526c0 	.word	0x240526c0
 80016e8:	24052711 	.word	0x24052711
 80016ec:	2403841c 	.word	0x2403841c
 80016f0:	24046680 	.word	0x24046680
 80016f4:	24039a9c 	.word	0x24039a9c
 80016f8:	2403b11c 	.word	0x2403b11c
 80016fc:	2403c79c 	.word	0x2403c79c
 8001700:	2403de1c 	.word	0x2403de1c
 8001704:	2403f49c 	.word	0x2403f49c
 8001708:	24040b1c 	.word	0x24040b1c
 800170c:	2404219c 	.word	0x2404219c
 8001710:	2404381c 	.word	0x2404381c
				if(RH_Nine[j]!=0x3f){
 8001714:	4aba      	ldr	r2, [pc, #744]	; (8001a00 <makeImg+0x5d0>)
 8001716:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800171a:	4413      	add	r3, r2
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b3f      	cmp	r3, #63	; 0x3f
 8001720:	d00b      	beq.n	800173a <makeImg+0x30a>
				  Frame[37020+j]=RH_Nine[j];
 8001722:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001726:	f249 039c 	movw	r3, #37020	; 0x909c
 800172a:	4413      	add	r3, r2
 800172c:	49b4      	ldr	r1, [pc, #720]	; (8001a00 <makeImg+0x5d0>)
 800172e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001732:	440a      	add	r2, r1
 8001734:	7811      	ldrb	r1, [r2, #0]
 8001736:	4ab3      	ldr	r2, [pc, #716]	; (8001a04 <makeImg+0x5d4>)
 8001738:	54d1      	strb	r1, [r2, r3]
			for(int j=0;j<=5760;j++){
 800173a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800173e:	3301      	adds	r3, #1
 8001740:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001744:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001748:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 800174c:	dde2      	ble.n	8001714 <makeImg+0x2e4>
				}
			}
		break;
 800174e:	bf00      	nop
	 }
	Cno=bufferRH[2];
 8001750:	4bad      	ldr	r3, [pc, #692]	; (8001a08 <makeImg+0x5d8>)
 8001752:	789a      	ldrb	r2, [r3, #2]
 8001754:	4bad      	ldr	r3, [pc, #692]	; (8001a0c <makeImg+0x5dc>)
 8001756:	701a      	strb	r2, [r3, #0]
		switch (Cno) {
 8001758:	4bac      	ldr	r3, [pc, #688]	; (8001a0c <makeImg+0x5dc>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	3b30      	subs	r3, #48	; 0x30
 800175e:	2b09      	cmp	r3, #9
 8001760:	f200 8186 	bhi.w	8001a70 <makeImg+0x640>
 8001764:	a201      	add	r2, pc, #4	; (adr r2, 800176c <makeImg+0x33c>)
 8001766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176a:	bf00      	nop
 800176c:	08001795 	.word	0x08001795
 8001770:	080017d9 	.word	0x080017d9
 8001774:	0800181d 	.word	0x0800181d
 8001778:	08001861 	.word	0x08001861
 800177c:	080018a5 	.word	0x080018a5
 8001780:	080018e9 	.word	0x080018e9
 8001784:	0800192d 	.word	0x0800192d
 8001788:	08001971 	.word	0x08001971
 800178c:	080019b5 	.word	0x080019b5
 8001790:	080019f9 	.word	0x080019f9
			case 48:
				for(int j=0;j<=5760;j++){
 8001794:	2300      	movs	r3, #0
 8001796:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800179a:	e017      	b.n	80017cc <makeImg+0x39c>
					if(dot_Zero[j]!=0x3f){
 800179c:	4a9c      	ldr	r2, [pc, #624]	; (8001a10 <makeImg+0x5e0>)
 800179e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017a2:	4413      	add	r3, r2
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b3f      	cmp	r3, #63	; 0x3f
 80017a8:	d00b      	beq.n	80017c2 <makeImg+0x392>
						 Frame[37020+j]=dot_Zero[j];
 80017aa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80017ae:	f249 039c 	movw	r3, #37020	; 0x909c
 80017b2:	4413      	add	r3, r2
 80017b4:	4996      	ldr	r1, [pc, #600]	; (8001a10 <makeImg+0x5e0>)
 80017b6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80017ba:	440a      	add	r2, r1
 80017bc:	7811      	ldrb	r1, [r2, #0]
 80017be:	4a91      	ldr	r2, [pc, #580]	; (8001a04 <makeImg+0x5d4>)
 80017c0:	54d1      	strb	r1, [r2, r3]
				for(int j=0;j<=5760;j++){
 80017c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017c6:	3301      	adds	r3, #1
 80017c8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80017cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017d0:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80017d4:	dde2      	ble.n	800179c <makeImg+0x36c>
					}

				}
			break;
 80017d6:	e14b      	b.n	8001a70 <makeImg+0x640>
			case 49:
				for(int j=0;j<=5760;j++){
 80017d8:	2300      	movs	r3, #0
 80017da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80017de:	e017      	b.n	8001810 <makeImg+0x3e0>
					if(dot_One[j]!=0x3f){
 80017e0:	4a8c      	ldr	r2, [pc, #560]	; (8001a14 <makeImg+0x5e4>)
 80017e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80017e6:	4413      	add	r3, r2
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b3f      	cmp	r3, #63	; 0x3f
 80017ec:	d00b      	beq.n	8001806 <makeImg+0x3d6>
					  Frame[37020+j]=dot_One[j];
 80017ee:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80017f2:	f249 039c 	movw	r3, #37020	; 0x909c
 80017f6:	4413      	add	r3, r2
 80017f8:	4986      	ldr	r1, [pc, #536]	; (8001a14 <makeImg+0x5e4>)
 80017fa:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80017fe:	440a      	add	r2, r1
 8001800:	7811      	ldrb	r1, [r2, #0]
 8001802:	4a80      	ldr	r2, [pc, #512]	; (8001a04 <makeImg+0x5d4>)
 8001804:	54d1      	strb	r1, [r2, r3]
				for(int j=0;j<=5760;j++){
 8001806:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800180a:	3301      	adds	r3, #1
 800180c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001810:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001814:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001818:	dde2      	ble.n	80017e0 <makeImg+0x3b0>
					}
				}
			break;
 800181a:	e129      	b.n	8001a70 <makeImg+0x640>
			case 50:
				for(int j=0;j<=5760;j++){
 800181c:	2300      	movs	r3, #0
 800181e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001822:	e017      	b.n	8001854 <makeImg+0x424>
					if(dot_Two[j]!=0x3f){
 8001824:	4a7c      	ldr	r2, [pc, #496]	; (8001a18 <makeImg+0x5e8>)
 8001826:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800182a:	4413      	add	r3, r2
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b3f      	cmp	r3, #63	; 0x3f
 8001830:	d00b      	beq.n	800184a <makeImg+0x41a>
					  Frame[37020+j]=dot_Two[j];
 8001832:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001836:	f249 039c 	movw	r3, #37020	; 0x909c
 800183a:	4413      	add	r3, r2
 800183c:	4976      	ldr	r1, [pc, #472]	; (8001a18 <makeImg+0x5e8>)
 800183e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001842:	440a      	add	r2, r1
 8001844:	7811      	ldrb	r1, [r2, #0]
 8001846:	4a6f      	ldr	r2, [pc, #444]	; (8001a04 <makeImg+0x5d4>)
 8001848:	54d1      	strb	r1, [r2, r3]
				for(int j=0;j<=5760;j++){
 800184a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800184e:	3301      	adds	r3, #1
 8001850:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001854:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001858:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 800185c:	dde2      	ble.n	8001824 <makeImg+0x3f4>
					}
				}
			break;
 800185e:	e107      	b.n	8001a70 <makeImg+0x640>
			case 51:
				for(int j=0;j<=5760;j++){
 8001860:	2300      	movs	r3, #0
 8001862:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001866:	e017      	b.n	8001898 <makeImg+0x468>
					if(dot_Three[j]!=0x3f){
 8001868:	4a6c      	ldr	r2, [pc, #432]	; (8001a1c <makeImg+0x5ec>)
 800186a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800186e:	4413      	add	r3, r2
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b3f      	cmp	r3, #63	; 0x3f
 8001874:	d00b      	beq.n	800188e <makeImg+0x45e>
					  Frame[37020+j]=dot_Three[j];
 8001876:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800187a:	f249 039c 	movw	r3, #37020	; 0x909c
 800187e:	4413      	add	r3, r2
 8001880:	4966      	ldr	r1, [pc, #408]	; (8001a1c <makeImg+0x5ec>)
 8001882:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001886:	440a      	add	r2, r1
 8001888:	7811      	ldrb	r1, [r2, #0]
 800188a:	4a5e      	ldr	r2, [pc, #376]	; (8001a04 <makeImg+0x5d4>)
 800188c:	54d1      	strb	r1, [r2, r3]
				for(int j=0;j<=5760;j++){
 800188e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001892:	3301      	adds	r3, #1
 8001894:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001898:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800189c:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80018a0:	dde2      	ble.n	8001868 <makeImg+0x438>
					}
				}
			break;
 80018a2:	e0e5      	b.n	8001a70 <makeImg+0x640>
			case 52:
				for(int j=0;j<=5760;j++){
 80018a4:	2300      	movs	r3, #0
 80018a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80018aa:	e017      	b.n	80018dc <makeImg+0x4ac>
					if(dot_Four[j]!=0x3f){
 80018ac:	4a5c      	ldr	r2, [pc, #368]	; (8001a20 <makeImg+0x5f0>)
 80018ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80018b2:	4413      	add	r3, r2
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b3f      	cmp	r3, #63	; 0x3f
 80018b8:	d00b      	beq.n	80018d2 <makeImg+0x4a2>
					  Frame[37020+j]=dot_Four[j];
 80018ba:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80018be:	f249 039c 	movw	r3, #37020	; 0x909c
 80018c2:	4413      	add	r3, r2
 80018c4:	4956      	ldr	r1, [pc, #344]	; (8001a20 <makeImg+0x5f0>)
 80018c6:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80018ca:	440a      	add	r2, r1
 80018cc:	7811      	ldrb	r1, [r2, #0]
 80018ce:	4a4d      	ldr	r2, [pc, #308]	; (8001a04 <makeImg+0x5d4>)
 80018d0:	54d1      	strb	r1, [r2, r3]
				for(int j=0;j<=5760;j++){
 80018d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80018d6:	3301      	adds	r3, #1
 80018d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80018dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80018e0:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80018e4:	dde2      	ble.n	80018ac <makeImg+0x47c>
					}
				}
			break;
 80018e6:	e0c3      	b.n	8001a70 <makeImg+0x640>
			case 53:
				for(int j=0;j<=5760;j++){
 80018e8:	2300      	movs	r3, #0
 80018ea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80018ee:	e017      	b.n	8001920 <makeImg+0x4f0>
					if(dot_Five[j]!=0x3f){
 80018f0:	4a4c      	ldr	r2, [pc, #304]	; (8001a24 <makeImg+0x5f4>)
 80018f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80018f6:	4413      	add	r3, r2
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b3f      	cmp	r3, #63	; 0x3f
 80018fc:	d00b      	beq.n	8001916 <makeImg+0x4e6>
					  Frame[37020+j]=dot_Five[j];
 80018fe:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001902:	f249 039c 	movw	r3, #37020	; 0x909c
 8001906:	4413      	add	r3, r2
 8001908:	4946      	ldr	r1, [pc, #280]	; (8001a24 <makeImg+0x5f4>)
 800190a:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800190e:	440a      	add	r2, r1
 8001910:	7811      	ldrb	r1, [r2, #0]
 8001912:	4a3c      	ldr	r2, [pc, #240]	; (8001a04 <makeImg+0x5d4>)
 8001914:	54d1      	strb	r1, [r2, r3]
				for(int j=0;j<=5760;j++){
 8001916:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800191a:	3301      	adds	r3, #1
 800191c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001920:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001924:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001928:	dde2      	ble.n	80018f0 <makeImg+0x4c0>
					}
				}
			break;
 800192a:	e0a1      	b.n	8001a70 <makeImg+0x640>
			case 54:
				for(int j=0;j<=5760;j++){
 800192c:	2300      	movs	r3, #0
 800192e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001932:	e017      	b.n	8001964 <makeImg+0x534>
					if(dot_Six[j]!=0x3f){
 8001934:	4a3c      	ldr	r2, [pc, #240]	; (8001a28 <makeImg+0x5f8>)
 8001936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800193a:	4413      	add	r3, r2
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b3f      	cmp	r3, #63	; 0x3f
 8001940:	d00b      	beq.n	800195a <makeImg+0x52a>
					  Frame[37020+j]=dot_Six[j];
 8001942:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001946:	f249 039c 	movw	r3, #37020	; 0x909c
 800194a:	4413      	add	r3, r2
 800194c:	4936      	ldr	r1, [pc, #216]	; (8001a28 <makeImg+0x5f8>)
 800194e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001952:	440a      	add	r2, r1
 8001954:	7811      	ldrb	r1, [r2, #0]
 8001956:	4a2b      	ldr	r2, [pc, #172]	; (8001a04 <makeImg+0x5d4>)
 8001958:	54d1      	strb	r1, [r2, r3]
				for(int j=0;j<=5760;j++){
 800195a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800195e:	3301      	adds	r3, #1
 8001960:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001964:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001968:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 800196c:	dde2      	ble.n	8001934 <makeImg+0x504>
					}
				}
			break;
 800196e:	e07f      	b.n	8001a70 <makeImg+0x640>
			case 55:
				for(int j=0;j<=5760;j++){
 8001970:	2300      	movs	r3, #0
 8001972:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001976:	e017      	b.n	80019a8 <makeImg+0x578>
					if(dot_Seven[j]!=0x3f){
 8001978:	4a2c      	ldr	r2, [pc, #176]	; (8001a2c <makeImg+0x5fc>)
 800197a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800197e:	4413      	add	r3, r2
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b3f      	cmp	r3, #63	; 0x3f
 8001984:	d00b      	beq.n	800199e <makeImg+0x56e>
					  Frame[37020+j]=dot_Seven[j];
 8001986:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800198a:	f249 039c 	movw	r3, #37020	; 0x909c
 800198e:	4413      	add	r3, r2
 8001990:	4926      	ldr	r1, [pc, #152]	; (8001a2c <makeImg+0x5fc>)
 8001992:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8001996:	440a      	add	r2, r1
 8001998:	7811      	ldrb	r1, [r2, #0]
 800199a:	4a1a      	ldr	r2, [pc, #104]	; (8001a04 <makeImg+0x5d4>)
 800199c:	54d1      	strb	r1, [r2, r3]
				for(int j=0;j<=5760;j++){
 800199e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80019a2:	3301      	adds	r3, #1
 80019a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80019a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80019ac:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80019b0:	dde2      	ble.n	8001978 <makeImg+0x548>
					}
				}
			break;
 80019b2:	e05d      	b.n	8001a70 <makeImg+0x640>
			case 56:
				for(int j=0;j<=5760;j++){
 80019b4:	2300      	movs	r3, #0
 80019b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80019ba:	e017      	b.n	80019ec <makeImg+0x5bc>
					if(dot_Egg[j]!=0x3f){
 80019bc:	4a1c      	ldr	r2, [pc, #112]	; (8001a30 <makeImg+0x600>)
 80019be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019c2:	4413      	add	r3, r2
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b3f      	cmp	r3, #63	; 0x3f
 80019c8:	d00b      	beq.n	80019e2 <makeImg+0x5b2>
					  Frame[37020+j]=dot_Egg[j];
 80019ca:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80019ce:	f249 039c 	movw	r3, #37020	; 0x909c
 80019d2:	4413      	add	r3, r2
 80019d4:	4916      	ldr	r1, [pc, #88]	; (8001a30 <makeImg+0x600>)
 80019d6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80019da:	440a      	add	r2, r1
 80019dc:	7811      	ldrb	r1, [r2, #0]
 80019de:	4a09      	ldr	r2, [pc, #36]	; (8001a04 <makeImg+0x5d4>)
 80019e0:	54d1      	strb	r1, [r2, r3]
				for(int j=0;j<=5760;j++){
 80019e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019e6:	3301      	adds	r3, #1
 80019e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80019ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019f0:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80019f4:	dde2      	ble.n	80019bc <makeImg+0x58c>
					}
				}
			break;
 80019f6:	e03b      	b.n	8001a70 <makeImg+0x640>
			case 57:
				for(int j=0;j<=5760;j++){
 80019f8:	2300      	movs	r3, #0
 80019fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80019fe:	e031      	b.n	8001a64 <makeImg+0x634>
 8001a00:	24044e9c 	.word	0x24044e9c
 8001a04:	24046680 	.word	0x24046680
 8001a08:	240526c0 	.word	0x240526c0
 8001a0c:	24052711 	.word	0x24052711
 8001a10:	2401c21c 	.word	0x2401c21c
 8001a14:	2401d89c 	.word	0x2401d89c
 8001a18:	2401ef1c 	.word	0x2401ef1c
 8001a1c:	2402059c 	.word	0x2402059c
 8001a20:	24021c1c 	.word	0x24021c1c
 8001a24:	2402329c 	.word	0x2402329c
 8001a28:	2402491c 	.word	0x2402491c
 8001a2c:	24025f9c 	.word	0x24025f9c
 8001a30:	2402761c 	.word	0x2402761c
					if(dot_Nine[j]!=0x3f){
 8001a34:	4abc      	ldr	r2, [pc, #752]	; (8001d28 <makeImg+0x8f8>)
 8001a36:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001a3a:	4413      	add	r3, r2
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b3f      	cmp	r3, #63	; 0x3f
 8001a40:	d00b      	beq.n	8001a5a <makeImg+0x62a>
					  Frame[37020+j]=dot_Nine[j];
 8001a42:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001a46:	f249 039c 	movw	r3, #37020	; 0x909c
 8001a4a:	4413      	add	r3, r2
 8001a4c:	49b6      	ldr	r1, [pc, #728]	; (8001d28 <makeImg+0x8f8>)
 8001a4e:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001a52:	440a      	add	r2, r1
 8001a54:	7811      	ldrb	r1, [r2, #0]
 8001a56:	4ab5      	ldr	r2, [pc, #724]	; (8001d2c <makeImg+0x8fc>)
 8001a58:	54d1      	strb	r1, [r2, r3]
				for(int j=0;j<=5760;j++){
 8001a5a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001a5e:	3301      	adds	r3, #1
 8001a60:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001a64:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001a68:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001a6c:	dde2      	ble.n	8001a34 <makeImg+0x604>
					}
				}
			break;
 8001a6e:	bf00      	nop
		 }
		Cno=bufferRH[1];
 8001a70:	4baf      	ldr	r3, [pc, #700]	; (8001d30 <makeImg+0x900>)
 8001a72:	785a      	ldrb	r2, [r3, #1]
 8001a74:	4baf      	ldr	r3, [pc, #700]	; (8001d34 <makeImg+0x904>)
 8001a76:	701a      	strb	r2, [r3, #0]
				switch (Cno) {
 8001a78:	4bae      	ldr	r3, [pc, #696]	; (8001d34 <makeImg+0x904>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	3b30      	subs	r3, #48	; 0x30
 8001a7e:	2b09      	cmp	r3, #9
 8001a80:	f200 818a 	bhi.w	8001d98 <makeImg+0x968>
 8001a84:	a201      	add	r2, pc, #4	; (adr r2, 8001a8c <makeImg+0x65c>)
 8001a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a8a:	bf00      	nop
 8001a8c:	08001ab5 	.word	0x08001ab5
 8001a90:	08001aff 	.word	0x08001aff
 8001a94:	08001b43 	.word	0x08001b43
 8001a98:	08001b87 	.word	0x08001b87
 8001a9c:	08001bcb 	.word	0x08001bcb
 8001aa0:	08001c0f 	.word	0x08001c0f
 8001aa4:	08001c53 	.word	0x08001c53
 8001aa8:	08001c97 	.word	0x08001c97
 8001aac:	08001cdb 	.word	0x08001cdb
 8001ab0:	08001d1f 	.word	0x08001d1f
					case 48:
						for(int j=0;j<=5760;j++){
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001aba:	e01a      	b.n	8001af2 <makeImg+0x6c2>
							if(Zero_sf[j]!=0x3f){
 8001abc:	4a9e      	ldr	r2, [pc, #632]	; (8001d38 <makeImg+0x908>)
 8001abe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001ac2:	4413      	add	r3, r2
 8001ac4:	f993 3000 	ldrsb.w	r3, [r3]
 8001ac8:	2b3f      	cmp	r3, #63	; 0x3f
 8001aca:	d00d      	beq.n	8001ae8 <makeImg+0x6b8>
								 Frame[37020+j]=Zero_sf[j];
 8001acc:	4a9a      	ldr	r2, [pc, #616]	; (8001d38 <makeImg+0x908>)
 8001ace:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001ad2:	4413      	add	r3, r2
 8001ad4:	f993 1000 	ldrsb.w	r1, [r3]
 8001ad8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001adc:	f249 039c 	movw	r3, #37020	; 0x909c
 8001ae0:	4413      	add	r3, r2
 8001ae2:	b2c9      	uxtb	r1, r1
 8001ae4:	4a91      	ldr	r2, [pc, #580]	; (8001d2c <makeImg+0x8fc>)
 8001ae6:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8001ae8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001aec:	3301      	adds	r3, #1
 8001aee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001af2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001af6:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001afa:	dddf      	ble.n	8001abc <makeImg+0x68c>
							}

						}
					break;
 8001afc:	e14c      	b.n	8001d98 <makeImg+0x968>
					case 49:
						for(int j=0;j<=5760;j++){
 8001afe:	2300      	movs	r3, #0
 8001b00:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001b04:	e017      	b.n	8001b36 <makeImg+0x706>
							if(One_sf[j]!=0x3f){
 8001b06:	4a8d      	ldr	r2, [pc, #564]	; (8001d3c <makeImg+0x90c>)
 8001b08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001b0c:	4413      	add	r3, r2
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b3f      	cmp	r3, #63	; 0x3f
 8001b12:	d00b      	beq.n	8001b2c <makeImg+0x6fc>
							  Frame[37020+j]=One_sf[j];
 8001b14:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8001b18:	f249 039c 	movw	r3, #37020	; 0x909c
 8001b1c:	4413      	add	r3, r2
 8001b1e:	4987      	ldr	r1, [pc, #540]	; (8001d3c <makeImg+0x90c>)
 8001b20:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8001b24:	440a      	add	r2, r1
 8001b26:	7811      	ldrb	r1, [r2, #0]
 8001b28:	4a80      	ldr	r2, [pc, #512]	; (8001d2c <makeImg+0x8fc>)
 8001b2a:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8001b2c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001b30:	3301      	adds	r3, #1
 8001b32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001b36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001b3a:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001b3e:	dde2      	ble.n	8001b06 <makeImg+0x6d6>
							}
						}
					break;
 8001b40:	e12a      	b.n	8001d98 <makeImg+0x968>
					case 50:
						for(int j=0;j<=5760;j++){
 8001b42:	2300      	movs	r3, #0
 8001b44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001b48:	e017      	b.n	8001b7a <makeImg+0x74a>
							if(Two_sf[j]!=0x3f){
 8001b4a:	4a7d      	ldr	r2, [pc, #500]	; (8001d40 <makeImg+0x910>)
 8001b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b50:	4413      	add	r3, r2
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b3f      	cmp	r3, #63	; 0x3f
 8001b56:	d00b      	beq.n	8001b70 <makeImg+0x740>
							  Frame[37020+j]=Two_sf[j];
 8001b58:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001b5c:	f249 039c 	movw	r3, #37020	; 0x909c
 8001b60:	4413      	add	r3, r2
 8001b62:	4977      	ldr	r1, [pc, #476]	; (8001d40 <makeImg+0x910>)
 8001b64:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001b68:	440a      	add	r2, r1
 8001b6a:	7811      	ldrb	r1, [r2, #0]
 8001b6c:	4a6f      	ldr	r2, [pc, #444]	; (8001d2c <makeImg+0x8fc>)
 8001b6e:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8001b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b74:	3301      	adds	r3, #1
 8001b76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b7e:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001b82:	dde2      	ble.n	8001b4a <makeImg+0x71a>
							}
						}
					break;
 8001b84:	e108      	b.n	8001d98 <makeImg+0x968>
					case 51:
						for(int j=0;j<=5760;j++){
 8001b86:	2300      	movs	r3, #0
 8001b88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001b8c:	e017      	b.n	8001bbe <makeImg+0x78e>
							if(Three_sf[j]!=0x3f){
 8001b8e:	4a6d      	ldr	r2, [pc, #436]	; (8001d44 <makeImg+0x914>)
 8001b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001b94:	4413      	add	r3, r2
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b3f      	cmp	r3, #63	; 0x3f
 8001b9a:	d00b      	beq.n	8001bb4 <makeImg+0x784>
							  Frame[37020+j]=Three_sf[j];
 8001b9c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001ba0:	f249 039c 	movw	r3, #37020	; 0x909c
 8001ba4:	4413      	add	r3, r2
 8001ba6:	4967      	ldr	r1, [pc, #412]	; (8001d44 <makeImg+0x914>)
 8001ba8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001bac:	440a      	add	r2, r1
 8001bae:	7811      	ldrb	r1, [r2, #0]
 8001bb0:	4a5e      	ldr	r2, [pc, #376]	; (8001d2c <makeImg+0x8fc>)
 8001bb2:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8001bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001bb8:	3301      	adds	r3, #1
 8001bba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001bbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001bc2:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001bc6:	dde2      	ble.n	8001b8e <makeImg+0x75e>
							}
						}
					break;
 8001bc8:	e0e6      	b.n	8001d98 <makeImg+0x968>
					case 52:
						for(int j=0;j<=5760;j++){
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001bd0:	e017      	b.n	8001c02 <makeImg+0x7d2>
							if(Four_sf[j]!=0x3f){
 8001bd2:	4a5d      	ldr	r2, [pc, #372]	; (8001d48 <makeImg+0x918>)
 8001bd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001bd8:	4413      	add	r3, r2
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b3f      	cmp	r3, #63	; 0x3f
 8001bde:	d00b      	beq.n	8001bf8 <makeImg+0x7c8>
							  Frame[37020+j]=Four_sf[j];
 8001be0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001be4:	f249 039c 	movw	r3, #37020	; 0x909c
 8001be8:	4413      	add	r3, r2
 8001bea:	4957      	ldr	r1, [pc, #348]	; (8001d48 <makeImg+0x918>)
 8001bec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001bf0:	440a      	add	r2, r1
 8001bf2:	7811      	ldrb	r1, [r2, #0]
 8001bf4:	4a4d      	ldr	r2, [pc, #308]	; (8001d2c <makeImg+0x8fc>)
 8001bf6:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8001bf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c06:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001c0a:	dde2      	ble.n	8001bd2 <makeImg+0x7a2>
							}
						}
					break;
 8001c0c:	e0c4      	b.n	8001d98 <makeImg+0x968>
					case 53:
						for(int j=0;j<=5760;j++){
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001c14:	e017      	b.n	8001c46 <makeImg+0x816>
							if(Five_sf[j]!=0x3f){
 8001c16:	4a4d      	ldr	r2, [pc, #308]	; (8001d4c <makeImg+0x91c>)
 8001c18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001c1c:	4413      	add	r3, r2
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b3f      	cmp	r3, #63	; 0x3f
 8001c22:	d00b      	beq.n	8001c3c <makeImg+0x80c>
							  Frame[37020+j]=Five_sf[j];
 8001c24:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001c28:	f249 039c 	movw	r3, #37020	; 0x909c
 8001c2c:	4413      	add	r3, r2
 8001c2e:	4947      	ldr	r1, [pc, #284]	; (8001d4c <makeImg+0x91c>)
 8001c30:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001c34:	440a      	add	r2, r1
 8001c36:	7811      	ldrb	r1, [r2, #0]
 8001c38:	4a3c      	ldr	r2, [pc, #240]	; (8001d2c <makeImg+0x8fc>)
 8001c3a:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8001c3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001c40:	3301      	adds	r3, #1
 8001c42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001c46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001c4a:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001c4e:	dde2      	ble.n	8001c16 <makeImg+0x7e6>
							}
						}
					break;
 8001c50:	e0a2      	b.n	8001d98 <makeImg+0x968>
					case 54:
						for(int j=0;j<=5760;j++){
 8001c52:	2300      	movs	r3, #0
 8001c54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001c58:	e017      	b.n	8001c8a <makeImg+0x85a>
							if(six_sf[j]!=0x3f){
 8001c5a:	4a3d      	ldr	r2, [pc, #244]	; (8001d50 <makeImg+0x920>)
 8001c5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001c60:	4413      	add	r3, r2
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b3f      	cmp	r3, #63	; 0x3f
 8001c66:	d00b      	beq.n	8001c80 <makeImg+0x850>
							  Frame[37020+j]=six_sf[j];
 8001c68:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001c6c:	f249 039c 	movw	r3, #37020	; 0x909c
 8001c70:	4413      	add	r3, r2
 8001c72:	4937      	ldr	r1, [pc, #220]	; (8001d50 <makeImg+0x920>)
 8001c74:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001c78:	440a      	add	r2, r1
 8001c7a:	7811      	ldrb	r1, [r2, #0]
 8001c7c:	4a2b      	ldr	r2, [pc, #172]	; (8001d2c <makeImg+0x8fc>)
 8001c7e:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8001c80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001c84:	3301      	adds	r3, #1
 8001c86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001c8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001c8e:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001c92:	dde2      	ble.n	8001c5a <makeImg+0x82a>
							}
						}
					break;
 8001c94:	e080      	b.n	8001d98 <makeImg+0x968>
					case 55:
						for(int j=0;j<=5760;j++){
 8001c96:	2300      	movs	r3, #0
 8001c98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001c9c:	e017      	b.n	8001cce <makeImg+0x89e>
							if(seven_sf[j]!=0x3f){
 8001c9e:	4a2d      	ldr	r2, [pc, #180]	; (8001d54 <makeImg+0x924>)
 8001ca0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ca4:	4413      	add	r3, r2
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b3f      	cmp	r3, #63	; 0x3f
 8001caa:	d00b      	beq.n	8001cc4 <makeImg+0x894>
							  Frame[37020+j]=seven_sf[j];
 8001cac:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001cb0:	f249 039c 	movw	r3, #37020	; 0x909c
 8001cb4:	4413      	add	r3, r2
 8001cb6:	4927      	ldr	r1, [pc, #156]	; (8001d54 <makeImg+0x924>)
 8001cb8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001cbc:	440a      	add	r2, r1
 8001cbe:	7811      	ldrb	r1, [r2, #0]
 8001cc0:	4a1a      	ldr	r2, [pc, #104]	; (8001d2c <makeImg+0x8fc>)
 8001cc2:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8001cc4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001cc8:	3301      	adds	r3, #1
 8001cca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001cce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001cd2:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001cd6:	dde2      	ble.n	8001c9e <makeImg+0x86e>
							}
						}
					break;
 8001cd8:	e05e      	b.n	8001d98 <makeImg+0x968>
					case 56:
						for(int j=0;j<=5760;j++){
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001ce0:	e017      	b.n	8001d12 <makeImg+0x8e2>
							if(egg_sf[j]!=0x3f){
 8001ce2:	4a1d      	ldr	r2, [pc, #116]	; (8001d58 <makeImg+0x928>)
 8001ce4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ce8:	4413      	add	r3, r2
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b3f      	cmp	r3, #63	; 0x3f
 8001cee:	d00b      	beq.n	8001d08 <makeImg+0x8d8>
							  Frame[37020+j]=egg_sf[j];
 8001cf0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001cf4:	f249 039c 	movw	r3, #37020	; 0x909c
 8001cf8:	4413      	add	r3, r2
 8001cfa:	4917      	ldr	r1, [pc, #92]	; (8001d58 <makeImg+0x928>)
 8001cfc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001d00:	440a      	add	r2, r1
 8001d02:	7811      	ldrb	r1, [r2, #0]
 8001d04:	4a09      	ldr	r2, [pc, #36]	; (8001d2c <makeImg+0x8fc>)
 8001d06:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8001d08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001d12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d16:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001d1a:	dde2      	ble.n	8001ce2 <makeImg+0x8b2>
							}
						}
					break;
 8001d1c:	e03c      	b.n	8001d98 <makeImg+0x968>
					case 57:
						for(int j=0;j<=5760;j++){
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001d24:	e032      	b.n	8001d8c <makeImg+0x95c>
 8001d26:	bf00      	nop
 8001d28:	24028c9c 	.word	0x24028c9c
 8001d2c:	24046680 	.word	0x24046680
 8001d30:	240526c0 	.word	0x240526c0
 8001d34:	24052711 	.word	0x24052711
 8001d38:	2400e11c 	.word	0x2400e11c
 8001d3c:	2400f79c 	.word	0x2400f79c
 8001d40:	24010e1c 	.word	0x24010e1c
 8001d44:	2401249c 	.word	0x2401249c
 8001d48:	24013b1c 	.word	0x24013b1c
 8001d4c:	2401519c 	.word	0x2401519c
 8001d50:	2401681c 	.word	0x2401681c
 8001d54:	24017e9c 	.word	0x24017e9c
 8001d58:	2401951c 	.word	0x2401951c
							if(nine_sf[j]!=0x3f){
 8001d5c:	4aba      	ldr	r2, [pc, #744]	; (8002048 <makeImg+0xc18>)
 8001d5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d62:	4413      	add	r3, r2
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b3f      	cmp	r3, #63	; 0x3f
 8001d68:	d00b      	beq.n	8001d82 <makeImg+0x952>
							  Frame[37020+j]=nine_sf[j];
 8001d6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001d6e:	f249 039c 	movw	r3, #37020	; 0x909c
 8001d72:	4413      	add	r3, r2
 8001d74:	49b4      	ldr	r1, [pc, #720]	; (8002048 <makeImg+0xc18>)
 8001d76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001d7a:	440a      	add	r2, r1
 8001d7c:	7811      	ldrb	r1, [r2, #0]
 8001d7e:	4ab3      	ldr	r2, [pc, #716]	; (800204c <makeImg+0xc1c>)
 8001d80:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8001d82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d86:	3301      	adds	r3, #1
 8001d88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001d8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d90:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001d94:	dde2      	ble.n	8001d5c <makeImg+0x92c>
							}
						}
					break;
 8001d96:	bf00      	nop
				 }

				Cno=bufferRH[0];
 8001d98:	4bad      	ldr	r3, [pc, #692]	; (8002050 <makeImg+0xc20>)
 8001d9a:	781a      	ldrb	r2, [r3, #0]
 8001d9c:	4bad      	ldr	r3, [pc, #692]	; (8002054 <makeImg+0xc24>)
 8001d9e:	701a      	strb	r2, [r3, #0]
				switch (Cno) {
 8001da0:	4bac      	ldr	r3, [pc, #688]	; (8002054 <makeImg+0xc24>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	3b30      	subs	r3, #48	; 0x30
 8001da6:	2b09      	cmp	r3, #9
 8001da8:	f200 8186 	bhi.w	80020b8 <makeImg+0xc88>
 8001dac:	a201      	add	r2, pc, #4	; (adr r2, 8001db4 <makeImg+0x984>)
 8001dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db2:	bf00      	nop
 8001db4:	08001ddd 	.word	0x08001ddd
 8001db8:	08001e21 	.word	0x08001e21
 8001dbc:	08001e65 	.word	0x08001e65
 8001dc0:	08001ea9 	.word	0x08001ea9
 8001dc4:	08001eed 	.word	0x08001eed
 8001dc8:	08001f31 	.word	0x08001f31
 8001dcc:	08001f75 	.word	0x08001f75
 8001dd0:	08001fb9 	.word	0x08001fb9
 8001dd4:	08001ffd 	.word	0x08001ffd
 8001dd8:	08002041 	.word	0x08002041
					case 48:
						for(int j=0;j<=5760;j++){
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001de2:	e017      	b.n	8001e14 <makeImg+0x9e4>
							if(Zero_mf[j]!=0x3f){
 8001de4:	4a9c      	ldr	r2, [pc, #624]	; (8002058 <makeImg+0xc28>)
 8001de6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dea:	4413      	add	r3, r2
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b3f      	cmp	r3, #63	; 0x3f
 8001df0:	d00b      	beq.n	8001e0a <makeImg+0x9da>
								 Frame[37020+j]=Zero_mf[j];
 8001df2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001df6:	f249 039c 	movw	r3, #37020	; 0x909c
 8001dfa:	4413      	add	r3, r2
 8001dfc:	4996      	ldr	r1, [pc, #600]	; (8002058 <makeImg+0xc28>)
 8001dfe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001e02:	440a      	add	r2, r1
 8001e04:	7811      	ldrb	r1, [r2, #0]
 8001e06:	4a91      	ldr	r2, [pc, #580]	; (800204c <makeImg+0xc1c>)
 8001e08:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8001e0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e0e:	3301      	adds	r3, #1
 8001e10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001e14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e18:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001e1c:	dde2      	ble.n	8001de4 <makeImg+0x9b4>
							}

						}
					break;
 8001e1e:	e14b      	b.n	80020b8 <makeImg+0xc88>
					case 49:
						for(int j=0;j<=5760;j++){
 8001e20:	2300      	movs	r3, #0
 8001e22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001e26:	e017      	b.n	8001e58 <makeImg+0xa28>
							if(One_mf[j]!=0x3f){
 8001e28:	4a8c      	ldr	r2, [pc, #560]	; (800205c <makeImg+0xc2c>)
 8001e2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e2e:	4413      	add	r3, r2
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b3f      	cmp	r3, #63	; 0x3f
 8001e34:	d00b      	beq.n	8001e4e <makeImg+0xa1e>
							  Frame[37020+j]=One_mf[j];
 8001e36:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001e3a:	f249 039c 	movw	r3, #37020	; 0x909c
 8001e3e:	4413      	add	r3, r2
 8001e40:	4986      	ldr	r1, [pc, #536]	; (800205c <makeImg+0xc2c>)
 8001e42:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001e46:	440a      	add	r2, r1
 8001e48:	7811      	ldrb	r1, [r2, #0]
 8001e4a:	4a80      	ldr	r2, [pc, #512]	; (800204c <makeImg+0xc1c>)
 8001e4c:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8001e4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e52:	3301      	adds	r3, #1
 8001e54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001e58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e5c:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001e60:	dde2      	ble.n	8001e28 <makeImg+0x9f8>
							}
						}
					break;
 8001e62:	e129      	b.n	80020b8 <makeImg+0xc88>
					case 50:
						for(int j=0;j<=5760;j++){
 8001e64:	2300      	movs	r3, #0
 8001e66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001e6a:	e017      	b.n	8001e9c <makeImg+0xa6c>
							if(Two_mf[j]!=0x3f){
 8001e6c:	4a7c      	ldr	r2, [pc, #496]	; (8002060 <makeImg+0xc30>)
 8001e6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e72:	4413      	add	r3, r2
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b3f      	cmp	r3, #63	; 0x3f
 8001e78:	d00b      	beq.n	8001e92 <makeImg+0xa62>
							  Frame[37020+j]=Two_mf[j];
 8001e7a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e7e:	f249 039c 	movw	r3, #37020	; 0x909c
 8001e82:	4413      	add	r3, r2
 8001e84:	4976      	ldr	r1, [pc, #472]	; (8002060 <makeImg+0xc30>)
 8001e86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e8a:	440a      	add	r2, r1
 8001e8c:	7811      	ldrb	r1, [r2, #0]
 8001e8e:	4a6f      	ldr	r2, [pc, #444]	; (800204c <makeImg+0xc1c>)
 8001e90:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8001e92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e96:	3301      	adds	r3, #1
 8001e98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001e9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ea0:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001ea4:	dde2      	ble.n	8001e6c <makeImg+0xa3c>
							}
						}
					break;
 8001ea6:	e107      	b.n	80020b8 <makeImg+0xc88>
					case 51:
						for(int j=0;j<=5760;j++){
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001eae:	e017      	b.n	8001ee0 <makeImg+0xab0>
							if(Three_mf[j]!=0x3f){
 8001eb0:	4a6c      	ldr	r2, [pc, #432]	; (8002064 <makeImg+0xc34>)
 8001eb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001eb6:	4413      	add	r3, r2
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b3f      	cmp	r3, #63	; 0x3f
 8001ebc:	d00b      	beq.n	8001ed6 <makeImg+0xaa6>
							  Frame[37020+j]=Three_mf[j];
 8001ebe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001ec2:	f249 039c 	movw	r3, #37020	; 0x909c
 8001ec6:	4413      	add	r3, r2
 8001ec8:	4966      	ldr	r1, [pc, #408]	; (8002064 <makeImg+0xc34>)
 8001eca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001ece:	440a      	add	r2, r1
 8001ed0:	7811      	ldrb	r1, [r2, #0]
 8001ed2:	4a5e      	ldr	r2, [pc, #376]	; (800204c <makeImg+0xc1c>)
 8001ed4:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8001ed6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001eda:	3301      	adds	r3, #1
 8001edc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001ee0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ee4:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001ee8:	dde2      	ble.n	8001eb0 <makeImg+0xa80>
							}
						}
					break;
 8001eea:	e0e5      	b.n	80020b8 <makeImg+0xc88>
					case 52:
						for(int j=0;j<=5760;j++){
 8001eec:	2300      	movs	r3, #0
 8001eee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001ef2:	e017      	b.n	8001f24 <makeImg+0xaf4>
							if(Four_mf[j]!=0x3f){
 8001ef4:	4a5c      	ldr	r2, [pc, #368]	; (8002068 <makeImg+0xc38>)
 8001ef6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001efa:	4413      	add	r3, r2
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b3f      	cmp	r3, #63	; 0x3f
 8001f00:	d00b      	beq.n	8001f1a <makeImg+0xaea>
							  Frame[37020+j]=Four_mf[j];
 8001f02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001f06:	f249 039c 	movw	r3, #37020	; 0x909c
 8001f0a:	4413      	add	r3, r2
 8001f0c:	4956      	ldr	r1, [pc, #344]	; (8002068 <makeImg+0xc38>)
 8001f0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001f12:	440a      	add	r2, r1
 8001f14:	7811      	ldrb	r1, [r2, #0]
 8001f16:	4a4d      	ldr	r2, [pc, #308]	; (800204c <makeImg+0xc1c>)
 8001f18:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8001f1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f1e:	3301      	adds	r3, #1
 8001f20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f28:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001f2c:	dde2      	ble.n	8001ef4 <makeImg+0xac4>
							}
						}
					break;
 8001f2e:	e0c3      	b.n	80020b8 <makeImg+0xc88>
					case 53:
						for(int j=0;j<=5760;j++){
 8001f30:	2300      	movs	r3, #0
 8001f32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001f36:	e017      	b.n	8001f68 <makeImg+0xb38>
							if(Five_mf[j]!=0x3f){
 8001f38:	4a4c      	ldr	r2, [pc, #304]	; (800206c <makeImg+0xc3c>)
 8001f3a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f3e:	4413      	add	r3, r2
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b3f      	cmp	r3, #63	; 0x3f
 8001f44:	d00b      	beq.n	8001f5e <makeImg+0xb2e>
							  Frame[37020+j]=Five_mf[j];
 8001f46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001f4a:	f249 039c 	movw	r3, #37020	; 0x909c
 8001f4e:	4413      	add	r3, r2
 8001f50:	4946      	ldr	r1, [pc, #280]	; (800206c <makeImg+0xc3c>)
 8001f52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001f56:	440a      	add	r2, r1
 8001f58:	7811      	ldrb	r1, [r2, #0]
 8001f5a:	4a3c      	ldr	r2, [pc, #240]	; (800204c <makeImg+0xc1c>)
 8001f5c:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8001f5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f62:	3301      	adds	r3, #1
 8001f64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001f68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f6c:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001f70:	dde2      	ble.n	8001f38 <makeImg+0xb08>
							}
						}
					break;
 8001f72:	e0a1      	b.n	80020b8 <makeImg+0xc88>
					case 54:
						for(int j=0;j<=5760;j++){
 8001f74:	2300      	movs	r3, #0
 8001f76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001f7a:	e017      	b.n	8001fac <makeImg+0xb7c>
							if(six_mf[j]!=0x3f){
 8001f7c:	4a3c      	ldr	r2, [pc, #240]	; (8002070 <makeImg+0xc40>)
 8001f7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f82:	4413      	add	r3, r2
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b3f      	cmp	r3, #63	; 0x3f
 8001f88:	d00b      	beq.n	8001fa2 <makeImg+0xb72>
							  Frame[37020+j]=six_mf[j];
 8001f8a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001f8e:	f249 039c 	movw	r3, #37020	; 0x909c
 8001f92:	4413      	add	r3, r2
 8001f94:	4936      	ldr	r1, [pc, #216]	; (8002070 <makeImg+0xc40>)
 8001f96:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001f9a:	440a      	add	r2, r1
 8001f9c:	7811      	ldrb	r1, [r2, #0]
 8001f9e:	4a2b      	ldr	r2, [pc, #172]	; (800204c <makeImg+0xc1c>)
 8001fa0:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8001fa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001fac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fb0:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001fb4:	dde2      	ble.n	8001f7c <makeImg+0xb4c>
							}
						}
					break;
 8001fb6:	e07f      	b.n	80020b8 <makeImg+0xc88>
					case 55:
						for(int j=0;j<=5760;j++){
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001fbe:	e017      	b.n	8001ff0 <makeImg+0xbc0>
							if(seven_mf[j]!=0x3f){
 8001fc0:	4a2c      	ldr	r2, [pc, #176]	; (8002074 <makeImg+0xc44>)
 8001fc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fc6:	4413      	add	r3, r2
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b3f      	cmp	r3, #63	; 0x3f
 8001fcc:	d00b      	beq.n	8001fe6 <makeImg+0xbb6>
							  Frame[37020+j]=seven_mf[j];
 8001fce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001fd2:	f249 039c 	movw	r3, #37020	; 0x909c
 8001fd6:	4413      	add	r3, r2
 8001fd8:	4926      	ldr	r1, [pc, #152]	; (8002074 <makeImg+0xc44>)
 8001fda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001fde:	440a      	add	r2, r1
 8001fe0:	7811      	ldrb	r1, [r2, #0]
 8001fe2:	4a1a      	ldr	r2, [pc, #104]	; (800204c <makeImg+0xc1c>)
 8001fe4:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8001fe6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fea:	3301      	adds	r3, #1
 8001fec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001ff0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ff4:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001ff8:	dde2      	ble.n	8001fc0 <makeImg+0xb90>
							}
						}
					break;
 8001ffa:	e05d      	b.n	80020b8 <makeImg+0xc88>
					case 56:
						for(int j=0;j<=5760;j++){
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002002:	e017      	b.n	8002034 <makeImg+0xc04>
							if(egg_mf[j]!=0x3f){
 8002004:	4a1c      	ldr	r2, [pc, #112]	; (8002078 <makeImg+0xc48>)
 8002006:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800200a:	4413      	add	r3, r2
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b3f      	cmp	r3, #63	; 0x3f
 8002010:	d00b      	beq.n	800202a <makeImg+0xbfa>
							  Frame[37020+j]=egg_mf[j];
 8002012:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002016:	f249 039c 	movw	r3, #37020	; 0x909c
 800201a:	4413      	add	r3, r2
 800201c:	4916      	ldr	r1, [pc, #88]	; (8002078 <makeImg+0xc48>)
 800201e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002022:	440a      	add	r2, r1
 8002024:	7811      	ldrb	r1, [r2, #0]
 8002026:	4a09      	ldr	r2, [pc, #36]	; (800204c <makeImg+0xc1c>)
 8002028:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 800202a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800202e:	3301      	adds	r3, #1
 8002030:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002034:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002038:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 800203c:	dde2      	ble.n	8002004 <makeImg+0xbd4>
							}
						}
					break;
 800203e:	e03b      	b.n	80020b8 <makeImg+0xc88>
					case 57:
						for(int j=0;j<=5760;j++){
 8002040:	2300      	movs	r3, #0
 8002042:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002046:	e031      	b.n	80020ac <makeImg+0xc7c>
 8002048:	2401ab9c 	.word	0x2401ab9c
 800204c:	24046680 	.word	0x24046680
 8002050:	240526c0 	.word	0x240526c0
 8002054:	24052711 	.word	0x24052711
 8002058:	2400001c 	.word	0x2400001c
 800205c:	2400169c 	.word	0x2400169c
 8002060:	24002d1c 	.word	0x24002d1c
 8002064:	2400439c 	.word	0x2400439c
 8002068:	24005a1c 	.word	0x24005a1c
 800206c:	2400709c 	.word	0x2400709c
 8002070:	2400871c 	.word	0x2400871c
 8002074:	24009d9c 	.word	0x24009d9c
 8002078:	2400b41c 	.word	0x2400b41c
							if(nine_mf[j]!=0x3f){
 800207c:	4ab2      	ldr	r2, [pc, #712]	; (8002348 <makeImg+0xf18>)
 800207e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002082:	4413      	add	r3, r2
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b3f      	cmp	r3, #63	; 0x3f
 8002088:	d00b      	beq.n	80020a2 <makeImg+0xc72>
							  Frame[37020+j]=nine_mf[j];
 800208a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800208e:	f249 039c 	movw	r3, #37020	; 0x909c
 8002092:	4413      	add	r3, r2
 8002094:	49ac      	ldr	r1, [pc, #688]	; (8002348 <makeImg+0xf18>)
 8002096:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800209a:	440a      	add	r2, r1
 800209c:	7811      	ldrb	r1, [r2, #0]
 800209e:	4aab      	ldr	r2, [pc, #684]	; (800234c <makeImg+0xf1c>)
 80020a0:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 80020a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80020a6:	3301      	adds	r3, #1
 80020a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80020ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80020b0:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80020b4:	dde2      	ble.n	800207c <makeImg+0xc4c>
							}
						}
					break;
 80020b6:	bf00      	nop





				Cno=bufferT[3];
 80020b8:	4ba5      	ldr	r3, [pc, #660]	; (8002350 <makeImg+0xf20>)
 80020ba:	78da      	ldrb	r2, [r3, #3]
 80020bc:	4ba5      	ldr	r3, [pc, #660]	; (8002354 <makeImg+0xf24>)
 80020be:	701a      	strb	r2, [r3, #0]
					switch (Cno) {
 80020c0:	4ba4      	ldr	r3, [pc, #656]	; (8002354 <makeImg+0xf24>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	3b30      	subs	r3, #48	; 0x30
 80020c6:	2b09      	cmp	r3, #9
 80020c8:	f200 816f 	bhi.w	80023aa <makeImg+0xf7a>
 80020cc:	a201      	add	r2, pc, #4	; (adr r2, 80020d4 <makeImg+0xca4>)
 80020ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d2:	bf00      	nop
 80020d4:	080020fd 	.word	0x080020fd
 80020d8:	0800213f 	.word	0x0800213f
 80020dc:	08002181 	.word	0x08002181
 80020e0:	080021c3 	.word	0x080021c3
 80020e4:	08002205 	.word	0x08002205
 80020e8:	08002247 	.word	0x08002247
 80020ec:	08002289 	.word	0x08002289
 80020f0:	080022cb 	.word	0x080022cb
 80020f4:	0800230d 	.word	0x0800230d
 80020f8:	08002341 	.word	0x08002341
						case 48:
							for(int j=0;j<=5760;j++){
 80020fc:	2300      	movs	r3, #0
 80020fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002102:	e016      	b.n	8002132 <makeImg+0xd02>
								if(C_Zero[j]!=0x3f){
 8002104:	4a94      	ldr	r2, [pc, #592]	; (8002358 <makeImg+0xf28>)
 8002106:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800210a:	4413      	add	r3, r2
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b3f      	cmp	r3, #63	; 0x3f
 8002110:	d00a      	beq.n	8002128 <makeImg+0xcf8>
									 Frame[7680+j]=C_Zero[j];
 8002112:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002116:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800211a:	498f      	ldr	r1, [pc, #572]	; (8002358 <makeImg+0xf28>)
 800211c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002120:	440a      	add	r2, r1
 8002122:	7811      	ldrb	r1, [r2, #0]
 8002124:	4a89      	ldr	r2, [pc, #548]	; (800234c <makeImg+0xf1c>)
 8002126:	54d1      	strb	r1, [r2, r3]
							for(int j=0;j<=5760;j++){
 8002128:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800212c:	3301      	adds	r3, #1
 800212e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002132:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002136:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 800213a:	dde3      	ble.n	8002104 <makeImg+0xcd4>
								}

							}
						break;
 800213c:	e135      	b.n	80023aa <makeImg+0xf7a>
						case 49:
							for(int j=0;j<=5760;j++){
 800213e:	2300      	movs	r3, #0
 8002140:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002144:	e016      	b.n	8002174 <makeImg+0xd44>
								if(C_One[j]!=0x3f){
 8002146:	4a85      	ldr	r2, [pc, #532]	; (800235c <makeImg+0xf2c>)
 8002148:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800214c:	4413      	add	r3, r2
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b3f      	cmp	r3, #63	; 0x3f
 8002152:	d00a      	beq.n	800216a <makeImg+0xd3a>
								  Frame[7680+j]=C_One[j];
 8002154:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002158:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800215c:	497f      	ldr	r1, [pc, #508]	; (800235c <makeImg+0xf2c>)
 800215e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002162:	440a      	add	r2, r1
 8002164:	7811      	ldrb	r1, [r2, #0]
 8002166:	4a79      	ldr	r2, [pc, #484]	; (800234c <makeImg+0xf1c>)
 8002168:	54d1      	strb	r1, [r2, r3]
							for(int j=0;j<=5760;j++){
 800216a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800216e:	3301      	adds	r3, #1
 8002170:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002174:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002178:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 800217c:	dde3      	ble.n	8002146 <makeImg+0xd16>
								}
							}
						break;
 800217e:	e114      	b.n	80023aa <makeImg+0xf7a>
						case 50:
							for(int j=0;j<=5760;j++){
 8002180:	2300      	movs	r3, #0
 8002182:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002186:	e016      	b.n	80021b6 <makeImg+0xd86>
								if(C_Two[j]!=0x3f){
 8002188:	4a75      	ldr	r2, [pc, #468]	; (8002360 <makeImg+0xf30>)
 800218a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800218e:	4413      	add	r3, r2
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b3f      	cmp	r3, #63	; 0x3f
 8002194:	d00a      	beq.n	80021ac <makeImg+0xd7c>
								  Frame[7680+j]=C_Two[j];
 8002196:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800219a:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800219e:	4970      	ldr	r1, [pc, #448]	; (8002360 <makeImg+0xf30>)
 80021a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80021a4:	440a      	add	r2, r1
 80021a6:	7811      	ldrb	r1, [r2, #0]
 80021a8:	4a68      	ldr	r2, [pc, #416]	; (800234c <makeImg+0xf1c>)
 80021aa:	54d1      	strb	r1, [r2, r3]
							for(int j=0;j<=5760;j++){
 80021ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80021b0:	3301      	adds	r3, #1
 80021b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80021b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80021ba:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80021be:	dde3      	ble.n	8002188 <makeImg+0xd58>
								}
							}
						break;
 80021c0:	e0f3      	b.n	80023aa <makeImg+0xf7a>
						case 51:
							for(int j=0;j<=5760;j++){
 80021c2:	2300      	movs	r3, #0
 80021c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80021c8:	e016      	b.n	80021f8 <makeImg+0xdc8>
								if(C_Three[j]!=0x3f){
 80021ca:	4a66      	ldr	r2, [pc, #408]	; (8002364 <makeImg+0xf34>)
 80021cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021d0:	4413      	add	r3, r2
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b3f      	cmp	r3, #63	; 0x3f
 80021d6:	d00a      	beq.n	80021ee <makeImg+0xdbe>
								  Frame[7680+j]=C_Three[j];
 80021d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021dc:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80021e0:	4960      	ldr	r1, [pc, #384]	; (8002364 <makeImg+0xf34>)
 80021e2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80021e6:	440a      	add	r2, r1
 80021e8:	7811      	ldrb	r1, [r2, #0]
 80021ea:	4a58      	ldr	r2, [pc, #352]	; (800234c <makeImg+0xf1c>)
 80021ec:	54d1      	strb	r1, [r2, r3]
							for(int j=0;j<=5760;j++){
 80021ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021f2:	3301      	adds	r3, #1
 80021f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80021f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021fc:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002200:	dde3      	ble.n	80021ca <makeImg+0xd9a>
								}
							}
						break;
 8002202:	e0d2      	b.n	80023aa <makeImg+0xf7a>
						case 52:
							for(int j=0;j<=5760;j++){
 8002204:	2300      	movs	r3, #0
 8002206:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800220a:	e016      	b.n	800223a <makeImg+0xe0a>
								if(C_Four[j]!=0x3f){
 800220c:	4a56      	ldr	r2, [pc, #344]	; (8002368 <makeImg+0xf38>)
 800220e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002212:	4413      	add	r3, r2
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b3f      	cmp	r3, #63	; 0x3f
 8002218:	d00a      	beq.n	8002230 <makeImg+0xe00>
								  Frame[7680+j]=C_Four[j];
 800221a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800221e:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002222:	4951      	ldr	r1, [pc, #324]	; (8002368 <makeImg+0xf38>)
 8002224:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002228:	440a      	add	r2, r1
 800222a:	7811      	ldrb	r1, [r2, #0]
 800222c:	4a47      	ldr	r2, [pc, #284]	; (800234c <makeImg+0xf1c>)
 800222e:	54d1      	strb	r1, [r2, r3]
							for(int j=0;j<=5760;j++){
 8002230:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002234:	3301      	adds	r3, #1
 8002236:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800223a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800223e:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002242:	dde3      	ble.n	800220c <makeImg+0xddc>
								}
							}
						break;
 8002244:	e0b1      	b.n	80023aa <makeImg+0xf7a>
						case 53:
							for(int j=0;j<=5760;j++){
 8002246:	2300      	movs	r3, #0
 8002248:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800224c:	e016      	b.n	800227c <makeImg+0xe4c>
								if(C_Five[j]!=0x3f){
 800224e:	4a47      	ldr	r2, [pc, #284]	; (800236c <makeImg+0xf3c>)
 8002250:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002254:	4413      	add	r3, r2
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b3f      	cmp	r3, #63	; 0x3f
 800225a:	d00a      	beq.n	8002272 <makeImg+0xe42>
								  Frame[7680+j]=C_Five[j];
 800225c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002260:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002264:	4941      	ldr	r1, [pc, #260]	; (800236c <makeImg+0xf3c>)
 8002266:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800226a:	440a      	add	r2, r1
 800226c:	7811      	ldrb	r1, [r2, #0]
 800226e:	4a37      	ldr	r2, [pc, #220]	; (800234c <makeImg+0xf1c>)
 8002270:	54d1      	strb	r1, [r2, r3]
							for(int j=0;j<=5760;j++){
 8002272:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002276:	3301      	adds	r3, #1
 8002278:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800227c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002280:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002284:	dde3      	ble.n	800224e <makeImg+0xe1e>
								}
							}
						break;
 8002286:	e090      	b.n	80023aa <makeImg+0xf7a>
						case 54:
							for(int j=0;j<=5760;j++){
 8002288:	2300      	movs	r3, #0
 800228a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800228e:	e016      	b.n	80022be <makeImg+0xe8e>
								if(C_Six[j]!=0x3f){
 8002290:	4a37      	ldr	r2, [pc, #220]	; (8002370 <makeImg+0xf40>)
 8002292:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002296:	4413      	add	r3, r2
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b3f      	cmp	r3, #63	; 0x3f
 800229c:	d00a      	beq.n	80022b4 <makeImg+0xe84>
								  Frame[7680+j]=C_Six[j];
 800229e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022a2:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80022a6:	4932      	ldr	r1, [pc, #200]	; (8002370 <makeImg+0xf40>)
 80022a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80022ac:	440a      	add	r2, r1
 80022ae:	7811      	ldrb	r1, [r2, #0]
 80022b0:	4a26      	ldr	r2, [pc, #152]	; (800234c <makeImg+0xf1c>)
 80022b2:	54d1      	strb	r1, [r2, r3]
							for(int j=0;j<=5760;j++){
 80022b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022b8:	3301      	adds	r3, #1
 80022ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80022be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022c2:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80022c6:	dde3      	ble.n	8002290 <makeImg+0xe60>
								}
							}
						break;
 80022c8:	e06f      	b.n	80023aa <makeImg+0xf7a>
						case 55:
							for(int j=0;j<=5760;j++){
 80022ca:	2300      	movs	r3, #0
 80022cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80022d0:	e016      	b.n	8002300 <makeImg+0xed0>
								if(C_Seven[j]!=0x3f){
 80022d2:	4a28      	ldr	r2, [pc, #160]	; (8002374 <makeImg+0xf44>)
 80022d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022d8:	4413      	add	r3, r2
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b3f      	cmp	r3, #63	; 0x3f
 80022de:	d00a      	beq.n	80022f6 <makeImg+0xec6>
								  Frame[7680+j]=C_Seven[j];
 80022e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022e4:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80022e8:	4922      	ldr	r1, [pc, #136]	; (8002374 <makeImg+0xf44>)
 80022ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80022ee:	440a      	add	r2, r1
 80022f0:	7811      	ldrb	r1, [r2, #0]
 80022f2:	4a16      	ldr	r2, [pc, #88]	; (800234c <makeImg+0xf1c>)
 80022f4:	54d1      	strb	r1, [r2, r3]
							for(int j=0;j<=5760;j++){
 80022f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022fa:	3301      	adds	r3, #1
 80022fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002300:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002304:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002308:	dde3      	ble.n	80022d2 <makeImg+0xea2>
								}
							}
						break;
 800230a:	e04e      	b.n	80023aa <makeImg+0xf7a>
						case 56:
							for(int j=0;j<=5760;j++){
 800230c:	2300      	movs	r3, #0
 800230e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002310:	e011      	b.n	8002336 <makeImg+0xf06>
								if(C_Egg[j]!=0x3f){
 8002312:	4a19      	ldr	r2, [pc, #100]	; (8002378 <makeImg+0xf48>)
 8002314:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002316:	4413      	add	r3, r2
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b3f      	cmp	r3, #63	; 0x3f
 800231c:	d008      	beq.n	8002330 <makeImg+0xf00>
								  Frame[7680+j]=C_Egg[j];
 800231e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002320:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002324:	4914      	ldr	r1, [pc, #80]	; (8002378 <makeImg+0xf48>)
 8002326:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002328:	440a      	add	r2, r1
 800232a:	7811      	ldrb	r1, [r2, #0]
 800232c:	4a07      	ldr	r2, [pc, #28]	; (800234c <makeImg+0xf1c>)
 800232e:	54d1      	strb	r1, [r2, r3]
							for(int j=0;j<=5760;j++){
 8002330:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002332:	3301      	adds	r3, #1
 8002334:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002336:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002338:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 800233c:	dde9      	ble.n	8002312 <makeImg+0xee2>
								}
							}
						break;
 800233e:	e034      	b.n	80023aa <makeImg+0xf7a>
						case 57:
							for(int j=0;j<=5760;j++){
 8002340:	2300      	movs	r3, #0
 8002342:	67bb      	str	r3, [r7, #120]	; 0x78
 8002344:	e02c      	b.n	80023a0 <makeImg+0xf70>
 8002346:	bf00      	nop
 8002348:	2400ca9c 	.word	0x2400ca9c
 800234c:	24046680 	.word	0x24046680
 8002350:	24052680 	.word	0x24052680
 8002354:	24052711 	.word	0x24052711
 8002358:	2402a31c 	.word	0x2402a31c
 800235c:	2402b99c 	.word	0x2402b99c
 8002360:	2402d01c 	.word	0x2402d01c
 8002364:	2402e69c 	.word	0x2402e69c
 8002368:	2402fd1c 	.word	0x2402fd1c
 800236c:	2403139c 	.word	0x2403139c
 8002370:	24032a1c 	.word	0x24032a1c
 8002374:	2403409c 	.word	0x2403409c
 8002378:	2403571c 	.word	0x2403571c
								if(C_Nine[j]!=0x3f){
 800237c:	4a92      	ldr	r2, [pc, #584]	; (80025c8 <makeImg+0x1198>)
 800237e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002380:	4413      	add	r3, r2
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b3f      	cmp	r3, #63	; 0x3f
 8002386:	d008      	beq.n	800239a <makeImg+0xf6a>
								  Frame[7680+j]=C_Nine[j];
 8002388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800238a:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800238e:	498e      	ldr	r1, [pc, #568]	; (80025c8 <makeImg+0x1198>)
 8002390:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002392:	440a      	add	r2, r1
 8002394:	7811      	ldrb	r1, [r2, #0]
 8002396:	4a8d      	ldr	r2, [pc, #564]	; (80025cc <makeImg+0x119c>)
 8002398:	54d1      	strb	r1, [r2, r3]
							for(int j=0;j<=5760;j++){
 800239a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800239c:	3301      	adds	r3, #1
 800239e:	67bb      	str	r3, [r7, #120]	; 0x78
 80023a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023a2:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80023a6:	dde9      	ble.n	800237c <makeImg+0xf4c>
								}
							}
						break;
 80023a8:	bf00      	nop
					 }
					Cno=bufferT[2];
 80023aa:	4b89      	ldr	r3, [pc, #548]	; (80025d0 <makeImg+0x11a0>)
 80023ac:	789a      	ldrb	r2, [r3, #2]
 80023ae:	4b89      	ldr	r3, [pc, #548]	; (80025d4 <makeImg+0x11a4>)
 80023b0:	701a      	strb	r2, [r3, #0]
						switch (Cno) {
 80023b2:	4b88      	ldr	r3, [pc, #544]	; (80025d4 <makeImg+0x11a4>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	3b30      	subs	r3, #48	; 0x30
 80023b8:	2b09      	cmp	r3, #9
 80023ba:	f200 8136 	bhi.w	800262a <makeImg+0x11fa>
 80023be:	a201      	add	r2, pc, #4	; (adr r2, 80023c4 <makeImg+0xf94>)
 80023c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c4:	080023ed 	.word	0x080023ed
 80023c8:	08002421 	.word	0x08002421
 80023cc:	08002455 	.word	0x08002455
 80023d0:	08002489 	.word	0x08002489
 80023d4:	080024bd 	.word	0x080024bd
 80023d8:	080024f1 	.word	0x080024f1
 80023dc:	08002525 	.word	0x08002525
 80023e0:	08002559 	.word	0x08002559
 80023e4:	0800258d 	.word	0x0800258d
 80023e8:	080025c1 	.word	0x080025c1
							case 48:
								for(int j=0;j<=5760;j++){
 80023ec:	2300      	movs	r3, #0
 80023ee:	677b      	str	r3, [r7, #116]	; 0x74
 80023f0:	e011      	b.n	8002416 <makeImg+0xfe6>
									if(dot_Zero[j]!=0x3f){
 80023f2:	4a79      	ldr	r2, [pc, #484]	; (80025d8 <makeImg+0x11a8>)
 80023f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023f6:	4413      	add	r3, r2
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b3f      	cmp	r3, #63	; 0x3f
 80023fc:	d008      	beq.n	8002410 <makeImg+0xfe0>
										 Frame[7680+j]=dot_Zero[j];
 80023fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002400:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002404:	4974      	ldr	r1, [pc, #464]	; (80025d8 <makeImg+0x11a8>)
 8002406:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002408:	440a      	add	r2, r1
 800240a:	7811      	ldrb	r1, [r2, #0]
 800240c:	4a6f      	ldr	r2, [pc, #444]	; (80025cc <makeImg+0x119c>)
 800240e:	54d1      	strb	r1, [r2, r3]
								for(int j=0;j<=5760;j++){
 8002410:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002412:	3301      	adds	r3, #1
 8002414:	677b      	str	r3, [r7, #116]	; 0x74
 8002416:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002418:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 800241c:	dde9      	ble.n	80023f2 <makeImg+0xfc2>
									}

								}
							break;
 800241e:	e104      	b.n	800262a <makeImg+0x11fa>
							case 49:
								for(int j=0;j<=5760;j++){
 8002420:	2300      	movs	r3, #0
 8002422:	673b      	str	r3, [r7, #112]	; 0x70
 8002424:	e011      	b.n	800244a <makeImg+0x101a>
									if(dot_One[j]!=0x3f){
 8002426:	4a6d      	ldr	r2, [pc, #436]	; (80025dc <makeImg+0x11ac>)
 8002428:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800242a:	4413      	add	r3, r2
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b3f      	cmp	r3, #63	; 0x3f
 8002430:	d008      	beq.n	8002444 <makeImg+0x1014>
									  Frame[7680+j]=dot_One[j];
 8002432:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002434:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002438:	4968      	ldr	r1, [pc, #416]	; (80025dc <makeImg+0x11ac>)
 800243a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800243c:	440a      	add	r2, r1
 800243e:	7811      	ldrb	r1, [r2, #0]
 8002440:	4a62      	ldr	r2, [pc, #392]	; (80025cc <makeImg+0x119c>)
 8002442:	54d1      	strb	r1, [r2, r3]
								for(int j=0;j<=5760;j++){
 8002444:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002446:	3301      	adds	r3, #1
 8002448:	673b      	str	r3, [r7, #112]	; 0x70
 800244a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800244c:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002450:	dde9      	ble.n	8002426 <makeImg+0xff6>
									}
								}
							break;
 8002452:	e0ea      	b.n	800262a <makeImg+0x11fa>
							case 50:
								for(int j=0;j<=5760;j++){
 8002454:	2300      	movs	r3, #0
 8002456:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002458:	e011      	b.n	800247e <makeImg+0x104e>
									if(dot_Two[j]!=0x3f){
 800245a:	4a61      	ldr	r2, [pc, #388]	; (80025e0 <makeImg+0x11b0>)
 800245c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800245e:	4413      	add	r3, r2
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b3f      	cmp	r3, #63	; 0x3f
 8002464:	d008      	beq.n	8002478 <makeImg+0x1048>
									  Frame[7680+j]=dot_Two[j];
 8002466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002468:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800246c:	495c      	ldr	r1, [pc, #368]	; (80025e0 <makeImg+0x11b0>)
 800246e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002470:	440a      	add	r2, r1
 8002472:	7811      	ldrb	r1, [r2, #0]
 8002474:	4a55      	ldr	r2, [pc, #340]	; (80025cc <makeImg+0x119c>)
 8002476:	54d1      	strb	r1, [r2, r3]
								for(int j=0;j<=5760;j++){
 8002478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800247a:	3301      	adds	r3, #1
 800247c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800247e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002480:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002484:	dde9      	ble.n	800245a <makeImg+0x102a>
									}
								}
							break;
 8002486:	e0d0      	b.n	800262a <makeImg+0x11fa>
							case 51:
								for(int j=0;j<=5760;j++){
 8002488:	2300      	movs	r3, #0
 800248a:	66bb      	str	r3, [r7, #104]	; 0x68
 800248c:	e011      	b.n	80024b2 <makeImg+0x1082>
									if(dot_Three[j]!=0x3f){
 800248e:	4a55      	ldr	r2, [pc, #340]	; (80025e4 <makeImg+0x11b4>)
 8002490:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002492:	4413      	add	r3, r2
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b3f      	cmp	r3, #63	; 0x3f
 8002498:	d008      	beq.n	80024ac <makeImg+0x107c>
									  Frame[7680+j]=dot_Three[j];
 800249a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800249c:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80024a0:	4950      	ldr	r1, [pc, #320]	; (80025e4 <makeImg+0x11b4>)
 80024a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80024a4:	440a      	add	r2, r1
 80024a6:	7811      	ldrb	r1, [r2, #0]
 80024a8:	4a48      	ldr	r2, [pc, #288]	; (80025cc <makeImg+0x119c>)
 80024aa:	54d1      	strb	r1, [r2, r3]
								for(int j=0;j<=5760;j++){
 80024ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024ae:	3301      	adds	r3, #1
 80024b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80024b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024b4:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80024b8:	dde9      	ble.n	800248e <makeImg+0x105e>
									}
								}
							break;
 80024ba:	e0b6      	b.n	800262a <makeImg+0x11fa>
							case 52:
								for(int j=0;j<=5760;j++){
 80024bc:	2300      	movs	r3, #0
 80024be:	667b      	str	r3, [r7, #100]	; 0x64
 80024c0:	e011      	b.n	80024e6 <makeImg+0x10b6>
									if(dot_Four[j]!=0x3f){
 80024c2:	4a49      	ldr	r2, [pc, #292]	; (80025e8 <makeImg+0x11b8>)
 80024c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024c6:	4413      	add	r3, r2
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b3f      	cmp	r3, #63	; 0x3f
 80024cc:	d008      	beq.n	80024e0 <makeImg+0x10b0>
									  Frame[7680+j]=dot_Four[j];
 80024ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024d0:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80024d4:	4944      	ldr	r1, [pc, #272]	; (80025e8 <makeImg+0x11b8>)
 80024d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80024d8:	440a      	add	r2, r1
 80024da:	7811      	ldrb	r1, [r2, #0]
 80024dc:	4a3b      	ldr	r2, [pc, #236]	; (80025cc <makeImg+0x119c>)
 80024de:	54d1      	strb	r1, [r2, r3]
								for(int j=0;j<=5760;j++){
 80024e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024e2:	3301      	adds	r3, #1
 80024e4:	667b      	str	r3, [r7, #100]	; 0x64
 80024e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024e8:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80024ec:	dde9      	ble.n	80024c2 <makeImg+0x1092>
									}
								}
							break;
 80024ee:	e09c      	b.n	800262a <makeImg+0x11fa>
							case 53:
								for(int j=0;j<=5760;j++){
 80024f0:	2300      	movs	r3, #0
 80024f2:	663b      	str	r3, [r7, #96]	; 0x60
 80024f4:	e011      	b.n	800251a <makeImg+0x10ea>
									if(dot_Five[j]!=0x3f){
 80024f6:	4a3d      	ldr	r2, [pc, #244]	; (80025ec <makeImg+0x11bc>)
 80024f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024fa:	4413      	add	r3, r2
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b3f      	cmp	r3, #63	; 0x3f
 8002500:	d008      	beq.n	8002514 <makeImg+0x10e4>
									  Frame[7680+j]=dot_Five[j];
 8002502:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002504:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002508:	4938      	ldr	r1, [pc, #224]	; (80025ec <makeImg+0x11bc>)
 800250a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800250c:	440a      	add	r2, r1
 800250e:	7811      	ldrb	r1, [r2, #0]
 8002510:	4a2e      	ldr	r2, [pc, #184]	; (80025cc <makeImg+0x119c>)
 8002512:	54d1      	strb	r1, [r2, r3]
								for(int j=0;j<=5760;j++){
 8002514:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002516:	3301      	adds	r3, #1
 8002518:	663b      	str	r3, [r7, #96]	; 0x60
 800251a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800251c:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002520:	dde9      	ble.n	80024f6 <makeImg+0x10c6>
									}
								}
							break;
 8002522:	e082      	b.n	800262a <makeImg+0x11fa>
							case 54:
								for(int j=0;j<=5760;j++){
 8002524:	2300      	movs	r3, #0
 8002526:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002528:	e011      	b.n	800254e <makeImg+0x111e>
									if(dot_Six[j]!=0x3f){
 800252a:	4a31      	ldr	r2, [pc, #196]	; (80025f0 <makeImg+0x11c0>)
 800252c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800252e:	4413      	add	r3, r2
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b3f      	cmp	r3, #63	; 0x3f
 8002534:	d008      	beq.n	8002548 <makeImg+0x1118>
									  Frame[7680+j]=dot_Six[j];
 8002536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002538:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800253c:	492c      	ldr	r1, [pc, #176]	; (80025f0 <makeImg+0x11c0>)
 800253e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002540:	440a      	add	r2, r1
 8002542:	7811      	ldrb	r1, [r2, #0]
 8002544:	4a21      	ldr	r2, [pc, #132]	; (80025cc <makeImg+0x119c>)
 8002546:	54d1      	strb	r1, [r2, r3]
								for(int j=0;j<=5760;j++){
 8002548:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800254a:	3301      	adds	r3, #1
 800254c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800254e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002550:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002554:	dde9      	ble.n	800252a <makeImg+0x10fa>
									}
								}
							break;
 8002556:	e068      	b.n	800262a <makeImg+0x11fa>
							case 55:
								for(int j=0;j<=5760;j++){
 8002558:	2300      	movs	r3, #0
 800255a:	65bb      	str	r3, [r7, #88]	; 0x58
 800255c:	e011      	b.n	8002582 <makeImg+0x1152>
									if(dot_Seven[j]!=0x3f){
 800255e:	4a25      	ldr	r2, [pc, #148]	; (80025f4 <makeImg+0x11c4>)
 8002560:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002562:	4413      	add	r3, r2
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b3f      	cmp	r3, #63	; 0x3f
 8002568:	d008      	beq.n	800257c <makeImg+0x114c>
									  Frame[7680+j]=dot_Seven[j];
 800256a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800256c:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002570:	4920      	ldr	r1, [pc, #128]	; (80025f4 <makeImg+0x11c4>)
 8002572:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002574:	440a      	add	r2, r1
 8002576:	7811      	ldrb	r1, [r2, #0]
 8002578:	4a14      	ldr	r2, [pc, #80]	; (80025cc <makeImg+0x119c>)
 800257a:	54d1      	strb	r1, [r2, r3]
								for(int j=0;j<=5760;j++){
 800257c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800257e:	3301      	adds	r3, #1
 8002580:	65bb      	str	r3, [r7, #88]	; 0x58
 8002582:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002584:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002588:	dde9      	ble.n	800255e <makeImg+0x112e>
									}
								}
							break;
 800258a:	e04e      	b.n	800262a <makeImg+0x11fa>
							case 56:
								for(int j=0;j<=5760;j++){
 800258c:	2300      	movs	r3, #0
 800258e:	657b      	str	r3, [r7, #84]	; 0x54
 8002590:	e011      	b.n	80025b6 <makeImg+0x1186>
									if(dot_Egg[j]!=0x3f){
 8002592:	4a19      	ldr	r2, [pc, #100]	; (80025f8 <makeImg+0x11c8>)
 8002594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002596:	4413      	add	r3, r2
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b3f      	cmp	r3, #63	; 0x3f
 800259c:	d008      	beq.n	80025b0 <makeImg+0x1180>
									  Frame[7680+j]=dot_Egg[j];
 800259e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025a0:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80025a4:	4914      	ldr	r1, [pc, #80]	; (80025f8 <makeImg+0x11c8>)
 80025a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80025a8:	440a      	add	r2, r1
 80025aa:	7811      	ldrb	r1, [r2, #0]
 80025ac:	4a07      	ldr	r2, [pc, #28]	; (80025cc <makeImg+0x119c>)
 80025ae:	54d1      	strb	r1, [r2, r3]
								for(int j=0;j<=5760;j++){
 80025b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025b2:	3301      	adds	r3, #1
 80025b4:	657b      	str	r3, [r7, #84]	; 0x54
 80025b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025b8:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80025bc:	dde9      	ble.n	8002592 <makeImg+0x1162>
									}
								}
							break;
 80025be:	e034      	b.n	800262a <makeImg+0x11fa>
							case 57:
								for(int j=0;j<=5760;j++){
 80025c0:	2300      	movs	r3, #0
 80025c2:	653b      	str	r3, [r7, #80]	; 0x50
 80025c4:	e02c      	b.n	8002620 <makeImg+0x11f0>
 80025c6:	bf00      	nop
 80025c8:	24036d9c 	.word	0x24036d9c
 80025cc:	24046680 	.word	0x24046680
 80025d0:	24052680 	.word	0x24052680
 80025d4:	24052711 	.word	0x24052711
 80025d8:	2401c21c 	.word	0x2401c21c
 80025dc:	2401d89c 	.word	0x2401d89c
 80025e0:	2401ef1c 	.word	0x2401ef1c
 80025e4:	2402059c 	.word	0x2402059c
 80025e8:	24021c1c 	.word	0x24021c1c
 80025ec:	2402329c 	.word	0x2402329c
 80025f0:	2402491c 	.word	0x2402491c
 80025f4:	24025f9c 	.word	0x24025f9c
 80025f8:	2402761c 	.word	0x2402761c
									if(dot_Nine[j]!=0x3f){
 80025fc:	4aaa      	ldr	r2, [pc, #680]	; (80028a8 <makeImg+0x1478>)
 80025fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002600:	4413      	add	r3, r2
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b3f      	cmp	r3, #63	; 0x3f
 8002606:	d008      	beq.n	800261a <makeImg+0x11ea>
									  Frame[7680+j]=dot_Nine[j];
 8002608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800260a:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800260e:	49a6      	ldr	r1, [pc, #664]	; (80028a8 <makeImg+0x1478>)
 8002610:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002612:	440a      	add	r2, r1
 8002614:	7811      	ldrb	r1, [r2, #0]
 8002616:	4aa5      	ldr	r2, [pc, #660]	; (80028ac <makeImg+0x147c>)
 8002618:	54d1      	strb	r1, [r2, r3]
								for(int j=0;j<=5760;j++){
 800261a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800261c:	3301      	adds	r3, #1
 800261e:	653b      	str	r3, [r7, #80]	; 0x50
 8002620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002622:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002626:	dde9      	ble.n	80025fc <makeImg+0x11cc>
									}
								}
							break;
 8002628:	bf00      	nop
						 }
						Cno=bufferT[1];
 800262a:	4ba1      	ldr	r3, [pc, #644]	; (80028b0 <makeImg+0x1480>)
 800262c:	785a      	ldrb	r2, [r3, #1]
 800262e:	4ba1      	ldr	r3, [pc, #644]	; (80028b4 <makeImg+0x1484>)
 8002630:	701a      	strb	r2, [r3, #0]
								switch (Cno) {
 8002632:	4ba0      	ldr	r3, [pc, #640]	; (80028b4 <makeImg+0x1484>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	3b30      	subs	r3, #48	; 0x30
 8002638:	2b09      	cmp	r3, #9
 800263a:	f200 8198 	bhi.w	800296e <makeImg+0x153e>
 800263e:	a201      	add	r2, pc, #4	; (adr r2, 8002644 <makeImg+0x1214>)
 8002640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002644:	0800266d 	.word	0x0800266d
 8002648:	080026a7 	.word	0x080026a7
 800264c:	080026db 	.word	0x080026db
 8002650:	0800270f 	.word	0x0800270f
 8002654:	0800275f 	.word	0x0800275f
 8002658:	080027af 	.word	0x080027af
 800265c:	080027ff 	.word	0x080027ff
 8002660:	0800284f 	.word	0x0800284f
 8002664:	0800289f 	.word	0x0800289f
 8002668:	0800291f 	.word	0x0800291f
									case 48:
										for(int j=0;j<=5760;j++){
 800266c:	2300      	movs	r3, #0
 800266e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002670:	e014      	b.n	800269c <makeImg+0x126c>
											if(Zero_sf[j]!=0x3f){
 8002672:	4a91      	ldr	r2, [pc, #580]	; (80028b8 <makeImg+0x1488>)
 8002674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002676:	4413      	add	r3, r2
 8002678:	f993 3000 	ldrsb.w	r3, [r3]
 800267c:	2b3f      	cmp	r3, #63	; 0x3f
 800267e:	d00a      	beq.n	8002696 <makeImg+0x1266>
												 Frame[7680+j]=Zero_sf[j];
 8002680:	4a8d      	ldr	r2, [pc, #564]	; (80028b8 <makeImg+0x1488>)
 8002682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002684:	4413      	add	r3, r2
 8002686:	f993 2000 	ldrsb.w	r2, [r3]
 800268a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800268c:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002690:	b2d1      	uxtb	r1, r2
 8002692:	4a86      	ldr	r2, [pc, #536]	; (80028ac <makeImg+0x147c>)
 8002694:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 8002696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002698:	3301      	adds	r3, #1
 800269a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800269c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800269e:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80026a2:	dde6      	ble.n	8002672 <makeImg+0x1242>
											}

										}
									break;
 80026a4:	e163      	b.n	800296e <makeImg+0x153e>
									case 49:
										for(int j=0;j<=5760;j++){
 80026a6:	2300      	movs	r3, #0
 80026a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80026aa:	e011      	b.n	80026d0 <makeImg+0x12a0>
											if(One_sf[j]!=0x3f){
 80026ac:	4a83      	ldr	r2, [pc, #524]	; (80028bc <makeImg+0x148c>)
 80026ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026b0:	4413      	add	r3, r2
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b3f      	cmp	r3, #63	; 0x3f
 80026b6:	d008      	beq.n	80026ca <makeImg+0x129a>
											  Frame[7680+j]=One_sf[j];
 80026b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ba:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80026be:	497f      	ldr	r1, [pc, #508]	; (80028bc <makeImg+0x148c>)
 80026c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026c2:	440a      	add	r2, r1
 80026c4:	7811      	ldrb	r1, [r2, #0]
 80026c6:	4a79      	ldr	r2, [pc, #484]	; (80028ac <makeImg+0x147c>)
 80026c8:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 80026ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026cc:	3301      	adds	r3, #1
 80026ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80026d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026d2:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80026d6:	dde9      	ble.n	80026ac <makeImg+0x127c>
											}
										}
									break;
 80026d8:	e149      	b.n	800296e <makeImg+0x153e>
									case 50:
										for(int j=0;j<=5760;j++){
 80026da:	2300      	movs	r3, #0
 80026dc:	647b      	str	r3, [r7, #68]	; 0x44
 80026de:	e011      	b.n	8002704 <makeImg+0x12d4>
											if(Two_sf[j]!=0x3f){
 80026e0:	4a77      	ldr	r2, [pc, #476]	; (80028c0 <makeImg+0x1490>)
 80026e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026e4:	4413      	add	r3, r2
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b3f      	cmp	r3, #63	; 0x3f
 80026ea:	d008      	beq.n	80026fe <makeImg+0x12ce>
											  Frame[7680+j]=Two_sf[j];
 80026ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ee:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80026f2:	4973      	ldr	r1, [pc, #460]	; (80028c0 <makeImg+0x1490>)
 80026f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026f6:	440a      	add	r2, r1
 80026f8:	7811      	ldrb	r1, [r2, #0]
 80026fa:	4a6c      	ldr	r2, [pc, #432]	; (80028ac <makeImg+0x147c>)
 80026fc:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 80026fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002700:	3301      	adds	r3, #1
 8002702:	647b      	str	r3, [r7, #68]	; 0x44
 8002704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002706:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 800270a:	dde9      	ble.n	80026e0 <makeImg+0x12b0>
											}
										}
									break;
 800270c:	e12f      	b.n	800296e <makeImg+0x153e>
									case 51:
										for(int j=0;j<=5760;j++){
 800270e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	e01b      	b.n	8002750 <makeImg+0x1320>
											if(Three_sf[j]!=0x3f){
 8002718:	4a6a      	ldr	r2, [pc, #424]	; (80028c4 <makeImg+0x1494>)
 800271a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4413      	add	r3, r2
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b3f      	cmp	r3, #63	; 0x3f
 8002726:	d00c      	beq.n	8002742 <makeImg+0x1312>
											  Frame[7680+j]=Three_sf[j];
 8002728:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002732:	4964      	ldr	r1, [pc, #400]	; (80028c4 <makeImg+0x1494>)
 8002734:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002738:	6812      	ldr	r2, [r2, #0]
 800273a:	440a      	add	r2, r1
 800273c:	7811      	ldrb	r1, [r2, #0]
 800273e:	4a5b      	ldr	r2, [pc, #364]	; (80028ac <makeImg+0x147c>)
 8002740:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 8002742:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002746:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	3201      	adds	r2, #1
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 800275a:	dddd      	ble.n	8002718 <makeImg+0x12e8>
											}
										}
									break;
 800275c:	e107      	b.n	800296e <makeImg+0x153e>
									case 52:
										for(int j=0;j<=5760;j++){
 800275e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	e01b      	b.n	80027a0 <makeImg+0x1370>
											if(Four_sf[j]!=0x3f){
 8002768:	4a57      	ldr	r2, [pc, #348]	; (80028c8 <makeImg+0x1498>)
 800276a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4413      	add	r3, r2
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b3f      	cmp	r3, #63	; 0x3f
 8002776:	d00c      	beq.n	8002792 <makeImg+0x1362>
											  Frame[7680+j]=Four_sf[j];
 8002778:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002782:	4951      	ldr	r1, [pc, #324]	; (80028c8 <makeImg+0x1498>)
 8002784:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	440a      	add	r2, r1
 800278c:	7811      	ldrb	r1, [r2, #0]
 800278e:	4a47      	ldr	r2, [pc, #284]	; (80028ac <makeImg+0x147c>)
 8002790:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 8002792:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002796:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	3201      	adds	r2, #1
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80027aa:	dddd      	ble.n	8002768 <makeImg+0x1338>
											}
										}
									break;
 80027ac:	e0df      	b.n	800296e <makeImg+0x153e>
									case 53:
										for(int j=0;j<=5760;j++){
 80027ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	e01b      	b.n	80027f0 <makeImg+0x13c0>
											if(Five_sf[j]!=0x3f){
 80027b8:	4a44      	ldr	r2, [pc, #272]	; (80028cc <makeImg+0x149c>)
 80027ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4413      	add	r3, r2
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b3f      	cmp	r3, #63	; 0x3f
 80027c6:	d00c      	beq.n	80027e2 <makeImg+0x13b2>
											  Frame[7680+j]=Five_sf[j];
 80027c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80027d2:	493e      	ldr	r1, [pc, #248]	; (80028cc <makeImg+0x149c>)
 80027d4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80027d8:	6812      	ldr	r2, [r2, #0]
 80027da:	440a      	add	r2, r1
 80027dc:	7811      	ldrb	r1, [r2, #0]
 80027de:	4a33      	ldr	r2, [pc, #204]	; (80028ac <makeImg+0x147c>)
 80027e0:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 80027e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80027e6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80027ea:	6812      	ldr	r2, [r2, #0]
 80027ec:	3201      	adds	r2, #1
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80027fa:	dddd      	ble.n	80027b8 <makeImg+0x1388>
											}
										}
									break;
 80027fc:	e0b7      	b.n	800296e <makeImg+0x153e>
									case 54:
										for(int j=0;j<=5760;j++){
 80027fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	e01b      	b.n	8002840 <makeImg+0x1410>
											if(six_sf[j]!=0x3f){
 8002808:	4a31      	ldr	r2, [pc, #196]	; (80028d0 <makeImg+0x14a0>)
 800280a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4413      	add	r3, r2
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b3f      	cmp	r3, #63	; 0x3f
 8002816:	d00c      	beq.n	8002832 <makeImg+0x1402>
											  Frame[7680+j]=six_sf[j];
 8002818:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002822:	492b      	ldr	r1, [pc, #172]	; (80028d0 <makeImg+0x14a0>)
 8002824:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002828:	6812      	ldr	r2, [r2, #0]
 800282a:	440a      	add	r2, r1
 800282c:	7811      	ldrb	r1, [r2, #0]
 800282e:	4a1f      	ldr	r2, [pc, #124]	; (80028ac <makeImg+0x147c>)
 8002830:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 8002832:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002836:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	3201      	adds	r2, #1
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 800284a:	dddd      	ble.n	8002808 <makeImg+0x13d8>
											}
										}
									break;
 800284c:	e08f      	b.n	800296e <makeImg+0x153e>
									case 55:
										for(int j=0;j<=5760;j++){
 800284e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	e01b      	b.n	8002890 <makeImg+0x1460>
											if(seven_sf[j]!=0x3f){
 8002858:	4a1e      	ldr	r2, [pc, #120]	; (80028d4 <makeImg+0x14a4>)
 800285a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4413      	add	r3, r2
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b3f      	cmp	r3, #63	; 0x3f
 8002866:	d00c      	beq.n	8002882 <makeImg+0x1452>
											  Frame[7680+j]=seven_sf[j];
 8002868:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002872:	4918      	ldr	r1, [pc, #96]	; (80028d4 <makeImg+0x14a4>)
 8002874:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002878:	6812      	ldr	r2, [r2, #0]
 800287a:	440a      	add	r2, r1
 800287c:	7811      	ldrb	r1, [r2, #0]
 800287e:	4a0b      	ldr	r2, [pc, #44]	; (80028ac <makeImg+0x147c>)
 8002880:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 8002882:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002886:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800288a:	6812      	ldr	r2, [r2, #0]
 800288c:	3201      	adds	r2, #1
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 800289a:	dddd      	ble.n	8002858 <makeImg+0x1428>
											}
										}
									break;
 800289c:	e067      	b.n	800296e <makeImg+0x153e>
									case 56:
										for(int j=0;j<=5760;j++){
 800289e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	e033      	b.n	8002910 <makeImg+0x14e0>
 80028a8:	24028c9c 	.word	0x24028c9c
 80028ac:	24046680 	.word	0x24046680
 80028b0:	24052680 	.word	0x24052680
 80028b4:	24052711 	.word	0x24052711
 80028b8:	2400e11c 	.word	0x2400e11c
 80028bc:	2400f79c 	.word	0x2400f79c
 80028c0:	24010e1c 	.word	0x24010e1c
 80028c4:	2401249c 	.word	0x2401249c
 80028c8:	24013b1c 	.word	0x24013b1c
 80028cc:	2401519c 	.word	0x2401519c
 80028d0:	2401681c 	.word	0x2401681c
 80028d4:	24017e9c 	.word	0x24017e9c
											if(egg_sf[j]!=0x3f){
 80028d8:	4ab0      	ldr	r2, [pc, #704]	; (8002b9c <makeImg+0x176c>)
 80028da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4413      	add	r3, r2
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b3f      	cmp	r3, #63	; 0x3f
 80028e6:	d00c      	beq.n	8002902 <makeImg+0x14d2>
											  Frame[7680+j]=egg_sf[j];
 80028e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80028f2:	49aa      	ldr	r1, [pc, #680]	; (8002b9c <makeImg+0x176c>)
 80028f4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80028f8:	6812      	ldr	r2, [r2, #0]
 80028fa:	440a      	add	r2, r1
 80028fc:	7811      	ldrb	r1, [r2, #0]
 80028fe:	4aa8      	ldr	r2, [pc, #672]	; (8002ba0 <makeImg+0x1770>)
 8002900:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 8002902:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002906:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800290a:	6812      	ldr	r2, [r2, #0]
 800290c:	3201      	adds	r2, #1
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 800291a:	dddd      	ble.n	80028d8 <makeImg+0x14a8>
											}
										}
									break;
 800291c:	e027      	b.n	800296e <makeImg+0x153e>
									case 57:
										for(int j=0;j<=5760;j++){
 800291e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	e01b      	b.n	8002960 <makeImg+0x1530>
											if(nine_sf[j]!=0x3f){
 8002928:	4a9e      	ldr	r2, [pc, #632]	; (8002ba4 <makeImg+0x1774>)
 800292a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4413      	add	r3, r2
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b3f      	cmp	r3, #63	; 0x3f
 8002936:	d00c      	beq.n	8002952 <makeImg+0x1522>
											  Frame[7680+j]=nine_sf[j];
 8002938:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002942:	4998      	ldr	r1, [pc, #608]	; (8002ba4 <makeImg+0x1774>)
 8002944:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	440a      	add	r2, r1
 800294c:	7811      	ldrb	r1, [r2, #0]
 800294e:	4a94      	ldr	r2, [pc, #592]	; (8002ba0 <makeImg+0x1770>)
 8002950:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 8002952:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002956:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	3201      	adds	r2, #1
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 800296a:	dddd      	ble.n	8002928 <makeImg+0x14f8>
											}
										}
									break;
 800296c:	bf00      	nop
								 }

								Cno=bufferT[0];
 800296e:	4b8e      	ldr	r3, [pc, #568]	; (8002ba8 <makeImg+0x1778>)
 8002970:	781a      	ldrb	r2, [r3, #0]
 8002972:	4b8e      	ldr	r3, [pc, #568]	; (8002bac <makeImg+0x177c>)
 8002974:	701a      	strb	r2, [r3, #0]
								switch (Cno) {
 8002976:	4b8d      	ldr	r3, [pc, #564]	; (8002bac <makeImg+0x177c>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	3b30      	subs	r3, #48	; 0x30
 800297c:	2b09      	cmp	r3, #9
 800297e:	f200 81b0 	bhi.w	8002ce2 <makeImg+0x18b2>
 8002982:	a201      	add	r2, pc, #4	; (adr r2, 8002988 <makeImg+0x1558>)
 8002984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002988:	080029b1 	.word	0x080029b1
 800298c:	08002a01 	.word	0x08002a01
 8002990:	08002a51 	.word	0x08002a51
 8002994:	08002aa1 	.word	0x08002aa1
 8002998:	08002af1 	.word	0x08002af1
 800299c:	08002b41 	.word	0x08002b41
 80029a0:	08002b91 	.word	0x08002b91
 80029a4:	08002c0f 	.word	0x08002c0f
 80029a8:	08002c5f 	.word	0x08002c5f
 80029ac:	08002ca1 	.word	0x08002ca1
									case 48:
										for(int j=0;j<=5760;j++){
 80029b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	e01b      	b.n	80029f2 <makeImg+0x15c2>
											if(Zero_mf[j]!=0x3f){
 80029ba:	4a7d      	ldr	r2, [pc, #500]	; (8002bb0 <makeImg+0x1780>)
 80029bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4413      	add	r3, r2
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b3f      	cmp	r3, #63	; 0x3f
 80029c8:	d00c      	beq.n	80029e4 <makeImg+0x15b4>
												 Frame[7680+j]=Zero_mf[j];
 80029ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80029d4:	4976      	ldr	r1, [pc, #472]	; (8002bb0 <makeImg+0x1780>)
 80029d6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	440a      	add	r2, r1
 80029de:	7811      	ldrb	r1, [r2, #0]
 80029e0:	4a6f      	ldr	r2, [pc, #444]	; (8002ba0 <makeImg+0x1770>)
 80029e2:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 80029e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029e8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	3201      	adds	r2, #1
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80029fc:	dddd      	ble.n	80029ba <makeImg+0x158a>
											}

										}
									break;
 80029fe:	e170      	b.n	8002ce2 <makeImg+0x18b2>
									case 49:
										for(int j=0;j<=5760;j++){
 8002a00:	f107 0320 	add.w	r3, r7, #32
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	e01b      	b.n	8002a42 <makeImg+0x1612>
											if(One_mf[j]!=0x3f){
 8002a0a:	4a6a      	ldr	r2, [pc, #424]	; (8002bb4 <makeImg+0x1784>)
 8002a0c:	f107 0320 	add.w	r3, r7, #32
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4413      	add	r3, r2
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b3f      	cmp	r3, #63	; 0x3f
 8002a18:	d00c      	beq.n	8002a34 <makeImg+0x1604>
											  Frame[7680+j]=One_mf[j];
 8002a1a:	f107 0320 	add.w	r3, r7, #32
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002a24:	4963      	ldr	r1, [pc, #396]	; (8002bb4 <makeImg+0x1784>)
 8002a26:	f107 0220 	add.w	r2, r7, #32
 8002a2a:	6812      	ldr	r2, [r2, #0]
 8002a2c:	440a      	add	r2, r1
 8002a2e:	7811      	ldrb	r1, [r2, #0]
 8002a30:	4a5b      	ldr	r2, [pc, #364]	; (8002ba0 <makeImg+0x1770>)
 8002a32:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 8002a34:	f107 0320 	add.w	r3, r7, #32
 8002a38:	f107 0220 	add.w	r2, r7, #32
 8002a3c:	6812      	ldr	r2, [r2, #0]
 8002a3e:	3201      	adds	r2, #1
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	f107 0320 	add.w	r3, r7, #32
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002a4c:	dddd      	ble.n	8002a0a <makeImg+0x15da>
											}
										}
									break;
 8002a4e:	e148      	b.n	8002ce2 <makeImg+0x18b2>
									case 50:
										for(int j=0;j<=5760;j++){
 8002a50:	f107 031c 	add.w	r3, r7, #28
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	e01b      	b.n	8002a92 <makeImg+0x1662>
											if(Two_mf[j]!=0x3f){
 8002a5a:	4a57      	ldr	r2, [pc, #348]	; (8002bb8 <makeImg+0x1788>)
 8002a5c:	f107 031c 	add.w	r3, r7, #28
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4413      	add	r3, r2
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b3f      	cmp	r3, #63	; 0x3f
 8002a68:	d00c      	beq.n	8002a84 <makeImg+0x1654>
											  Frame[7680+j]=Two_mf[j];
 8002a6a:	f107 031c 	add.w	r3, r7, #28
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002a74:	4950      	ldr	r1, [pc, #320]	; (8002bb8 <makeImg+0x1788>)
 8002a76:	f107 021c 	add.w	r2, r7, #28
 8002a7a:	6812      	ldr	r2, [r2, #0]
 8002a7c:	440a      	add	r2, r1
 8002a7e:	7811      	ldrb	r1, [r2, #0]
 8002a80:	4a47      	ldr	r2, [pc, #284]	; (8002ba0 <makeImg+0x1770>)
 8002a82:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 8002a84:	f107 031c 	add.w	r3, r7, #28
 8002a88:	f107 021c 	add.w	r2, r7, #28
 8002a8c:	6812      	ldr	r2, [r2, #0]
 8002a8e:	3201      	adds	r2, #1
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	f107 031c 	add.w	r3, r7, #28
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002a9c:	dddd      	ble.n	8002a5a <makeImg+0x162a>
											}
										}
									break;
 8002a9e:	e120      	b.n	8002ce2 <makeImg+0x18b2>
									case 51:
										for(int j=0;j<=5760;j++){
 8002aa0:	f107 0318 	add.w	r3, r7, #24
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	e01b      	b.n	8002ae2 <makeImg+0x16b2>
											if(Three_mf[j]!=0x3f){
 8002aaa:	4a44      	ldr	r2, [pc, #272]	; (8002bbc <makeImg+0x178c>)
 8002aac:	f107 0318 	add.w	r3, r7, #24
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2b3f      	cmp	r3, #63	; 0x3f
 8002ab8:	d00c      	beq.n	8002ad4 <makeImg+0x16a4>
											  Frame[7680+j]=Three_mf[j];
 8002aba:	f107 0318 	add.w	r3, r7, #24
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002ac4:	493d      	ldr	r1, [pc, #244]	; (8002bbc <makeImg+0x178c>)
 8002ac6:	f107 0218 	add.w	r2, r7, #24
 8002aca:	6812      	ldr	r2, [r2, #0]
 8002acc:	440a      	add	r2, r1
 8002ace:	7811      	ldrb	r1, [r2, #0]
 8002ad0:	4a33      	ldr	r2, [pc, #204]	; (8002ba0 <makeImg+0x1770>)
 8002ad2:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 8002ad4:	f107 0318 	add.w	r3, r7, #24
 8002ad8:	f107 0218 	add.w	r2, r7, #24
 8002adc:	6812      	ldr	r2, [r2, #0]
 8002ade:	3201      	adds	r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	f107 0318 	add.w	r3, r7, #24
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002aec:	dddd      	ble.n	8002aaa <makeImg+0x167a>
											}
										}
									break;
 8002aee:	e0f8      	b.n	8002ce2 <makeImg+0x18b2>
									case 52:
										for(int j=0;j<=5760;j++){
 8002af0:	f107 0314 	add.w	r3, r7, #20
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	e01b      	b.n	8002b32 <makeImg+0x1702>
											if(Four_mf[j]!=0x3f){
 8002afa:	4a31      	ldr	r2, [pc, #196]	; (8002bc0 <makeImg+0x1790>)
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4413      	add	r3, r2
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b3f      	cmp	r3, #63	; 0x3f
 8002b08:	d00c      	beq.n	8002b24 <makeImg+0x16f4>
											  Frame[7680+j]=Four_mf[j];
 8002b0a:	f107 0314 	add.w	r3, r7, #20
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002b14:	492a      	ldr	r1, [pc, #168]	; (8002bc0 <makeImg+0x1790>)
 8002b16:	f107 0214 	add.w	r2, r7, #20
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	440a      	add	r2, r1
 8002b1e:	7811      	ldrb	r1, [r2, #0]
 8002b20:	4a1f      	ldr	r2, [pc, #124]	; (8002ba0 <makeImg+0x1770>)
 8002b22:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 8002b24:	f107 0314 	add.w	r3, r7, #20
 8002b28:	f107 0214 	add.w	r2, r7, #20
 8002b2c:	6812      	ldr	r2, [r2, #0]
 8002b2e:	3201      	adds	r2, #1
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	f107 0314 	add.w	r3, r7, #20
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002b3c:	dddd      	ble.n	8002afa <makeImg+0x16ca>
											}
										}
									break;
 8002b3e:	e0d0      	b.n	8002ce2 <makeImg+0x18b2>
									case 53:
										for(int j=0;j<=5760;j++){
 8002b40:	f107 0310 	add.w	r3, r7, #16
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	e01b      	b.n	8002b82 <makeImg+0x1752>
											if(Five_mf[j]!=0x3f){
 8002b4a:	4a1e      	ldr	r2, [pc, #120]	; (8002bc4 <makeImg+0x1794>)
 8002b4c:	f107 0310 	add.w	r3, r7, #16
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4413      	add	r3, r2
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b3f      	cmp	r3, #63	; 0x3f
 8002b58:	d00c      	beq.n	8002b74 <makeImg+0x1744>
											  Frame[7680+j]=Five_mf[j];
 8002b5a:	f107 0310 	add.w	r3, r7, #16
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002b64:	4917      	ldr	r1, [pc, #92]	; (8002bc4 <makeImg+0x1794>)
 8002b66:	f107 0210 	add.w	r2, r7, #16
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	440a      	add	r2, r1
 8002b6e:	7811      	ldrb	r1, [r2, #0]
 8002b70:	4a0b      	ldr	r2, [pc, #44]	; (8002ba0 <makeImg+0x1770>)
 8002b72:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 8002b74:	f107 0310 	add.w	r3, r7, #16
 8002b78:	f107 0210 	add.w	r2, r7, #16
 8002b7c:	6812      	ldr	r2, [r2, #0]
 8002b7e:	3201      	adds	r2, #1
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	f107 0310 	add.w	r3, r7, #16
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002b8c:	dddd      	ble.n	8002b4a <makeImg+0x171a>
											}
										}
									break;
 8002b8e:	e0a8      	b.n	8002ce2 <makeImg+0x18b2>
									case 54:
										for(int j=0;j<=5760;j++){
 8002b90:	f107 030c 	add.w	r3, r7, #12
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	e032      	b.n	8002c00 <makeImg+0x17d0>
 8002b9a:	bf00      	nop
 8002b9c:	2401951c 	.word	0x2401951c
 8002ba0:	24046680 	.word	0x24046680
 8002ba4:	2401ab9c 	.word	0x2401ab9c
 8002ba8:	24052680 	.word	0x24052680
 8002bac:	24052711 	.word	0x24052711
 8002bb0:	2400001c 	.word	0x2400001c
 8002bb4:	2400169c 	.word	0x2400169c
 8002bb8:	24002d1c 	.word	0x24002d1c
 8002bbc:	2400439c 	.word	0x2400439c
 8002bc0:	24005a1c 	.word	0x24005a1c
 8002bc4:	2400709c 	.word	0x2400709c
											if(six_mf[j]!=0x3f){
 8002bc8:	4a49      	ldr	r2, [pc, #292]	; (8002cf0 <makeImg+0x18c0>)
 8002bca:	f107 030c 	add.w	r3, r7, #12
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b3f      	cmp	r3, #63	; 0x3f
 8002bd6:	d00c      	beq.n	8002bf2 <makeImg+0x17c2>
											  Frame[7680+j]=six_mf[j];
 8002bd8:	f107 030c 	add.w	r3, r7, #12
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002be2:	4943      	ldr	r1, [pc, #268]	; (8002cf0 <makeImg+0x18c0>)
 8002be4:	f107 020c 	add.w	r2, r7, #12
 8002be8:	6812      	ldr	r2, [r2, #0]
 8002bea:	440a      	add	r2, r1
 8002bec:	7811      	ldrb	r1, [r2, #0]
 8002bee:	4a41      	ldr	r2, [pc, #260]	; (8002cf4 <makeImg+0x18c4>)
 8002bf0:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 8002bf2:	f107 030c 	add.w	r3, r7, #12
 8002bf6:	f107 020c 	add.w	r2, r7, #12
 8002bfa:	6812      	ldr	r2, [r2, #0]
 8002bfc:	3201      	adds	r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	f107 030c 	add.w	r3, r7, #12
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002c0a:	dddd      	ble.n	8002bc8 <makeImg+0x1798>
											}
										}
									break;
 8002c0c:	e069      	b.n	8002ce2 <makeImg+0x18b2>
									case 55:
										for(int j=0;j<=5760;j++){
 8002c0e:	f107 0308 	add.w	r3, r7, #8
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	e01b      	b.n	8002c50 <makeImg+0x1820>
											if(seven_mf[j]!=0x3f){
 8002c18:	4a37      	ldr	r2, [pc, #220]	; (8002cf8 <makeImg+0x18c8>)
 8002c1a:	f107 0308 	add.w	r3, r7, #8
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4413      	add	r3, r2
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b3f      	cmp	r3, #63	; 0x3f
 8002c26:	d00c      	beq.n	8002c42 <makeImg+0x1812>
											  Frame[7680+j]=seven_mf[j];
 8002c28:	f107 0308 	add.w	r3, r7, #8
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002c32:	4931      	ldr	r1, [pc, #196]	; (8002cf8 <makeImg+0x18c8>)
 8002c34:	f107 0208 	add.w	r2, r7, #8
 8002c38:	6812      	ldr	r2, [r2, #0]
 8002c3a:	440a      	add	r2, r1
 8002c3c:	7811      	ldrb	r1, [r2, #0]
 8002c3e:	4a2d      	ldr	r2, [pc, #180]	; (8002cf4 <makeImg+0x18c4>)
 8002c40:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 8002c42:	f107 0308 	add.w	r3, r7, #8
 8002c46:	f107 0208 	add.w	r2, r7, #8
 8002c4a:	6812      	ldr	r2, [r2, #0]
 8002c4c:	3201      	adds	r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	f107 0308 	add.w	r3, r7, #8
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002c5a:	dddd      	ble.n	8002c18 <makeImg+0x17e8>
											}
										}
									break;
 8002c5c:	e041      	b.n	8002ce2 <makeImg+0x18b2>
									case 56:
										for(int j=0;j<=5760;j++){
 8002c5e:	1d3b      	adds	r3, r7, #4
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	e016      	b.n	8002c94 <makeImg+0x1864>
											if(egg_mf[j]!=0x3f){
 8002c66:	4a25      	ldr	r2, [pc, #148]	; (8002cfc <makeImg+0x18cc>)
 8002c68:	1d3b      	adds	r3, r7, #4
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b3f      	cmp	r3, #63	; 0x3f
 8002c72:	d00a      	beq.n	8002c8a <makeImg+0x185a>
											  Frame[7680+j]=egg_mf[j];
 8002c74:	1d3b      	adds	r3, r7, #4
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002c7c:	491f      	ldr	r1, [pc, #124]	; (8002cfc <makeImg+0x18cc>)
 8002c7e:	1d3a      	adds	r2, r7, #4
 8002c80:	6812      	ldr	r2, [r2, #0]
 8002c82:	440a      	add	r2, r1
 8002c84:	7811      	ldrb	r1, [r2, #0]
 8002c86:	4a1b      	ldr	r2, [pc, #108]	; (8002cf4 <makeImg+0x18c4>)
 8002c88:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 8002c8a:	1d3b      	adds	r3, r7, #4
 8002c8c:	1d3a      	adds	r2, r7, #4
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	3201      	adds	r2, #1
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	1d3b      	adds	r3, r7, #4
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002c9c:	dde3      	ble.n	8002c66 <makeImg+0x1836>
											}
										}
									break;
 8002c9e:	e020      	b.n	8002ce2 <makeImg+0x18b2>
									case 57:
										for(int j=0;j<=5760;j++){
 8002ca0:	463b      	mov	r3, r7
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	e016      	b.n	8002cd6 <makeImg+0x18a6>
											if(nine_mf[j]!=0x3f){
 8002ca8:	4a15      	ldr	r2, [pc, #84]	; (8002d00 <makeImg+0x18d0>)
 8002caa:	463b      	mov	r3, r7
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4413      	add	r3, r2
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b3f      	cmp	r3, #63	; 0x3f
 8002cb4:	d00a      	beq.n	8002ccc <makeImg+0x189c>
											  Frame[7680+j]=nine_mf[j];
 8002cb6:	463b      	mov	r3, r7
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002cbe:	4910      	ldr	r1, [pc, #64]	; (8002d00 <makeImg+0x18d0>)
 8002cc0:	463a      	mov	r2, r7
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	440a      	add	r2, r1
 8002cc6:	7811      	ldrb	r1, [r2, #0]
 8002cc8:	4a0a      	ldr	r2, [pc, #40]	; (8002cf4 <makeImg+0x18c4>)
 8002cca:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 8002ccc:	463b      	mov	r3, r7
 8002cce:	463a      	mov	r2, r7
 8002cd0:	6812      	ldr	r2, [r2, #0]
 8002cd2:	3201      	adds	r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	463b      	mov	r3, r7
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002cde:	dde3      	ble.n	8002ca8 <makeImg+0x1878>
											}
										}
									break;
 8002ce0:	bf00      	nop





}
 8002ce2:	bf00      	nop
 8002ce4:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	2400871c 	.word	0x2400871c
 8002cf4:	24046680 	.word	0x24046680
 8002cf8:	24009d9c 	.word	0x24009d9c
 8002cfc:	2400b41c 	.word	0x2400b41c
 8002d00:	2400ca9c 	.word	0x2400ca9c

08002d04 <fillFrame>:





void fillFrame(){
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
	for(int i=0;i<49152;i++){
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	607b      	str	r3, [r7, #4]
 8002d0e:	e007      	b.n	8002d20 <fillFrame+0x1c>
		Frame[i]=0x3f;
 8002d10:	4a09      	ldr	r2, [pc, #36]	; (8002d38 <fillFrame+0x34>)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4413      	add	r3, r2
 8002d16:	223f      	movs	r2, #63	; 0x3f
 8002d18:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<49152;i++){
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	607b      	str	r3, [r7, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002d26:	dbf3      	blt.n	8002d10 <fillFrame+0xc>
	}
}
 8002d28:	bf00      	nop
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	24046680 	.word	0x24046680
 8002d3c:	00000000 	.word	0x00000000

08002d40 <Updatescreen>:





void Updatescreen(){
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
	fillFrame();
 8002d44:	f7ff ffde 	bl	8002d04 <fillFrame>
	sortt(26.42,42.26);
 8002d48:	ed9f 1b07 	vldr	d1, [pc, #28]	; 8002d68 <Updatescreen+0x28>
 8002d4c:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8002d70 <Updatescreen+0x30>
 8002d50:	f7fe fb16 	bl	8001380 <sortt>
//	sortt(realtemp,realhumidity);
	makeImg();
 8002d54:	f7fe fb6c 	bl	8001430 <makeImg>
	HAL_SPI_Transmit_DMA(&hspi1, Frame, 49152);
 8002d58:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002d5c:	4906      	ldr	r1, [pc, #24]	; (8002d78 <Updatescreen+0x38>)
 8002d5e:	4807      	ldr	r0, [pc, #28]	; (8002d7c <Updatescreen+0x3c>)
 8002d60:	f006 feca 	bl	8009af8 <HAL_SPI_Transmit_DMA>
}
 8002d64:	bf00      	nop
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	ae147ae1 	.word	0xae147ae1
 8002d6c:	40452147 	.word	0x40452147
 8002d70:	1eb851ec 	.word	0x1eb851ec
 8002d74:	403a6b85 	.word	0x403a6b85
 8002d78:	24046680 	.word	0x24046680
 8002d7c:	24052ca4 	.word	0x24052ca4

08002d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d84:	b672      	cpsid	i
}
 8002d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d88:	e7fe      	b.n	8002d88 <Error_Handler+0x8>
	...

08002d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d92:	4b0a      	ldr	r3, [pc, #40]	; (8002dbc <HAL_MspInit+0x30>)
 8002d94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d98:	4a08      	ldr	r2, [pc, #32]	; (8002dbc <HAL_MspInit+0x30>)
 8002d9a:	f043 0302 	orr.w	r3, r3, #2
 8002d9e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002da2:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <HAL_MspInit+0x30>)
 8002da4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	607b      	str	r3, [r7, #4]
 8002dae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	58024400 	.word	0x58024400

08002dc0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08e      	sub	sp, #56	; 0x38
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	605a      	str	r2, [r3, #4]
 8002dd2:	609a      	str	r2, [r3, #8]
 8002dd4:	60da      	str	r2, [r3, #12]
 8002dd6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a59      	ldr	r2, [pc, #356]	; (8002f44 <HAL_ETH_MspInit+0x184>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	f040 80ab 	bne.w	8002f3a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8002de4:	4b58      	ldr	r3, [pc, #352]	; (8002f48 <HAL_ETH_MspInit+0x188>)
 8002de6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002dea:	4a57      	ldr	r2, [pc, #348]	; (8002f48 <HAL_ETH_MspInit+0x188>)
 8002dec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002df0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002df4:	4b54      	ldr	r3, [pc, #336]	; (8002f48 <HAL_ETH_MspInit+0x188>)
 8002df6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002dfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dfe:	623b      	str	r3, [r7, #32]
 8002e00:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8002e02:	4b51      	ldr	r3, [pc, #324]	; (8002f48 <HAL_ETH_MspInit+0x188>)
 8002e04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002e08:	4a4f      	ldr	r2, [pc, #316]	; (8002f48 <HAL_ETH_MspInit+0x188>)
 8002e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e0e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002e12:	4b4d      	ldr	r3, [pc, #308]	; (8002f48 <HAL_ETH_MspInit+0x188>)
 8002e14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1c:	61fb      	str	r3, [r7, #28]
 8002e1e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002e20:	4b49      	ldr	r3, [pc, #292]	; (8002f48 <HAL_ETH_MspInit+0x188>)
 8002e22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002e26:	4a48      	ldr	r2, [pc, #288]	; (8002f48 <HAL_ETH_MspInit+0x188>)
 8002e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e2c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002e30:	4b45      	ldr	r3, [pc, #276]	; (8002f48 <HAL_ETH_MspInit+0x188>)
 8002e32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3a:	61bb      	str	r3, [r7, #24]
 8002e3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e3e:	4b42      	ldr	r3, [pc, #264]	; (8002f48 <HAL_ETH_MspInit+0x188>)
 8002e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e44:	4a40      	ldr	r2, [pc, #256]	; (8002f48 <HAL_ETH_MspInit+0x188>)
 8002e46:	f043 0304 	orr.w	r3, r3, #4
 8002e4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e4e:	4b3e      	ldr	r3, [pc, #248]	; (8002f48 <HAL_ETH_MspInit+0x188>)
 8002e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	617b      	str	r3, [r7, #20]
 8002e5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e5c:	4b3a      	ldr	r3, [pc, #232]	; (8002f48 <HAL_ETH_MspInit+0x188>)
 8002e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e62:	4a39      	ldr	r2, [pc, #228]	; (8002f48 <HAL_ETH_MspInit+0x188>)
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e6c:	4b36      	ldr	r3, [pc, #216]	; (8002f48 <HAL_ETH_MspInit+0x188>)
 8002e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	613b      	str	r3, [r7, #16]
 8002e78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e7a:	4b33      	ldr	r3, [pc, #204]	; (8002f48 <HAL_ETH_MspInit+0x188>)
 8002e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e80:	4a31      	ldr	r2, [pc, #196]	; (8002f48 <HAL_ETH_MspInit+0x188>)
 8002e82:	f043 0302 	orr.w	r3, r3, #2
 8002e86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e8a:	4b2f      	ldr	r3, [pc, #188]	; (8002f48 <HAL_ETH_MspInit+0x188>)
 8002e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e98:	4b2b      	ldr	r3, [pc, #172]	; (8002f48 <HAL_ETH_MspInit+0x188>)
 8002e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e9e:	4a2a      	ldr	r2, [pc, #168]	; (8002f48 <HAL_ETH_MspInit+0x188>)
 8002ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ea4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ea8:	4b27      	ldr	r3, [pc, #156]	; (8002f48 <HAL_ETH_MspInit+0x188>)
 8002eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002eb6:	2332      	movs	r3, #50	; 0x32
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002ec6:	230b      	movs	r3, #11
 8002ec8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ece:	4619      	mov	r1, r3
 8002ed0:	481e      	ldr	r0, [pc, #120]	; (8002f4c <HAL_ETH_MspInit+0x18c>)
 8002ed2:	f003 fc3d 	bl	8006750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002ed6:	2386      	movs	r3, #134	; 0x86
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eda:	2302      	movs	r3, #2
 8002edc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002ee6:	230b      	movs	r3, #11
 8002ee8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4817      	ldr	r0, [pc, #92]	; (8002f50 <HAL_ETH_MspInit+0x190>)
 8002ef2:	f003 fc2d 	bl	8006750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002ef6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002efa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efc:	2302      	movs	r3, #2
 8002efe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f04:	2300      	movs	r3, #0
 8002f06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002f08:	230b      	movs	r3, #11
 8002f0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f10:	4619      	mov	r1, r3
 8002f12:	4810      	ldr	r0, [pc, #64]	; (8002f54 <HAL_ETH_MspInit+0x194>)
 8002f14:	f003 fc1c 	bl	8006750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8002f18:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1e:	2302      	movs	r3, #2
 8002f20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f26:	2300      	movs	r3, #0
 8002f28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002f2a:	230b      	movs	r3, #11
 8002f2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f32:	4619      	mov	r1, r3
 8002f34:	4808      	ldr	r0, [pc, #32]	; (8002f58 <HAL_ETH_MspInit+0x198>)
 8002f36:	f003 fc0b 	bl	8006750 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002f3a:	bf00      	nop
 8002f3c:	3738      	adds	r7, #56	; 0x38
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40028000 	.word	0x40028000
 8002f48:	58024400 	.word	0x58024400
 8002f4c:	58020800 	.word	0x58020800
 8002f50:	58020000 	.word	0x58020000
 8002f54:	58020400 	.word	0x58020400
 8002f58:	58021800 	.word	0x58021800

08002f5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b0ba      	sub	sp, #232	; 0xe8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f64:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	605a      	str	r2, [r3, #4]
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	60da      	str	r2, [r3, #12]
 8002f72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f74:	f107 0318 	add.w	r3, r7, #24
 8002f78:	22bc      	movs	r2, #188	; 0xbc
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f009 fb1f 	bl	800c5c0 <memset>
  if(hspi->Instance==SPI1)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a51      	ldr	r2, [pc, #324]	; (80030cc <HAL_SPI_MspInit+0x170>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	f040 809b 	bne.w	80030c4 <HAL_SPI_MspInit+0x168>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f92:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f98:	f107 0318 	add.w	r3, r7, #24
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f004 ff51 	bl	8007e44 <HAL_RCCEx_PeriphCLKConfig>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8002fa8:	f7ff feea 	bl	8002d80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fac:	4b48      	ldr	r3, [pc, #288]	; (80030d0 <HAL_SPI_MspInit+0x174>)
 8002fae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fb2:	4a47      	ldr	r2, [pc, #284]	; (80030d0 <HAL_SPI_MspInit+0x174>)
 8002fb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fb8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002fbc:	4b44      	ldr	r3, [pc, #272]	; (80030d0 <HAL_SPI_MspInit+0x174>)
 8002fbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fca:	4b41      	ldr	r3, [pc, #260]	; (80030d0 <HAL_SPI_MspInit+0x174>)
 8002fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fd0:	4a3f      	ldr	r2, [pc, #252]	; (80030d0 <HAL_SPI_MspInit+0x174>)
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fda:	4b3d      	ldr	r3, [pc, #244]	; (80030d0 <HAL_SPI_MspInit+0x174>)
 8002fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fe8:	4b39      	ldr	r3, [pc, #228]	; (80030d0 <HAL_SPI_MspInit+0x174>)
 8002fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fee:	4a38      	ldr	r2, [pc, #224]	; (80030d0 <HAL_SPI_MspInit+0x174>)
 8002ff0:	f043 0308 	orr.w	r3, r3, #8
 8002ff4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ff8:	4b35      	ldr	r3, [pc, #212]	; (80030d0 <HAL_SPI_MspInit+0x174>)
 8002ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003006:	2320      	movs	r3, #32
 8003008:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300c:	2302      	movs	r3, #2
 800300e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003012:	2300      	movs	r3, #0
 8003014:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003018:	2300      	movs	r3, #0
 800301a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800301e:	2305      	movs	r3, #5
 8003020:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003024:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003028:	4619      	mov	r1, r3
 800302a:	482a      	ldr	r0, [pc, #168]	; (80030d4 <HAL_SPI_MspInit+0x178>)
 800302c:	f003 fb90 	bl	8006750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003030:	2380      	movs	r3, #128	; 0x80
 8003032:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003036:	2302      	movs	r3, #2
 8003038:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303c:	2300      	movs	r3, #0
 800303e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003042:	2300      	movs	r3, #0
 8003044:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003048:	2305      	movs	r3, #5
 800304a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800304e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003052:	4619      	mov	r1, r3
 8003054:	4820      	ldr	r0, [pc, #128]	; (80030d8 <HAL_SPI_MspInit+0x17c>)
 8003056:	f003 fb7b 	bl	8006750 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 800305a:	4b20      	ldr	r3, [pc, #128]	; (80030dc <HAL_SPI_MspInit+0x180>)
 800305c:	4a20      	ldr	r2, [pc, #128]	; (80030e0 <HAL_SPI_MspInit+0x184>)
 800305e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8003060:	4b1e      	ldr	r3, [pc, #120]	; (80030dc <HAL_SPI_MspInit+0x180>)
 8003062:	2226      	movs	r2, #38	; 0x26
 8003064:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003066:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <HAL_SPI_MspInit+0x180>)
 8003068:	2240      	movs	r2, #64	; 0x40
 800306a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800306c:	4b1b      	ldr	r3, [pc, #108]	; (80030dc <HAL_SPI_MspInit+0x180>)
 800306e:	2200      	movs	r2, #0
 8003070:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003072:	4b1a      	ldr	r3, [pc, #104]	; (80030dc <HAL_SPI_MspInit+0x180>)
 8003074:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003078:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800307a:	4b18      	ldr	r3, [pc, #96]	; (80030dc <HAL_SPI_MspInit+0x180>)
 800307c:	2200      	movs	r2, #0
 800307e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003080:	4b16      	ldr	r3, [pc, #88]	; (80030dc <HAL_SPI_MspInit+0x180>)
 8003082:	2200      	movs	r2, #0
 8003084:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003086:	4b15      	ldr	r3, [pc, #84]	; (80030dc <HAL_SPI_MspInit+0x180>)
 8003088:	2200      	movs	r2, #0
 800308a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800308c:	4b13      	ldr	r3, [pc, #76]	; (80030dc <HAL_SPI_MspInit+0x180>)
 800308e:	2200      	movs	r2, #0
 8003090:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003092:	4b12      	ldr	r3, [pc, #72]	; (80030dc <HAL_SPI_MspInit+0x180>)
 8003094:	2200      	movs	r2, #0
 8003096:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003098:	4810      	ldr	r0, [pc, #64]	; (80030dc <HAL_SPI_MspInit+0x180>)
 800309a:	f000 fc1b 	bl	80038d4 <HAL_DMA_Init>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <HAL_SPI_MspInit+0x14c>
    {
      Error_Handler();
 80030a4:	f7ff fe6c 	bl	8002d80 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a0c      	ldr	r2, [pc, #48]	; (80030dc <HAL_SPI_MspInit+0x180>)
 80030ac:	679a      	str	r2, [r3, #120]	; 0x78
 80030ae:	4a0b      	ldr	r2, [pc, #44]	; (80030dc <HAL_SPI_MspInit+0x180>)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80030b4:	2200      	movs	r2, #0
 80030b6:	2100      	movs	r1, #0
 80030b8:	2023      	movs	r0, #35	; 0x23
 80030ba:	f000 fbd6 	bl	800386a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80030be:	2023      	movs	r0, #35	; 0x23
 80030c0:	f000 fbed 	bl	800389e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80030c4:	bf00      	nop
 80030c6:	37e8      	adds	r7, #232	; 0xe8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40013000 	.word	0x40013000
 80030d0:	58024400 	.word	0x58024400
 80030d4:	58020000 	.word	0x58020000
 80030d8:	58020c00 	.word	0x58020c00
 80030dc:	24052de8 	.word	0x24052de8
 80030e0:	40020010 	.word	0x40020010

080030e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a2b      	ldr	r2, [pc, #172]	; (80031a0 <HAL_TIM_Base_MspInit+0xbc>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d117      	bne.n	8003126 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030f6:	4b2b      	ldr	r3, [pc, #172]	; (80031a4 <HAL_TIM_Base_MspInit+0xc0>)
 80030f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030fc:	4a29      	ldr	r2, [pc, #164]	; (80031a4 <HAL_TIM_Base_MspInit+0xc0>)
 80030fe:	f043 0302 	orr.w	r3, r3, #2
 8003102:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003106:	4b27      	ldr	r3, [pc, #156]	; (80031a4 <HAL_TIM_Base_MspInit+0xc0>)
 8003108:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003114:	2200      	movs	r2, #0
 8003116:	2100      	movs	r1, #0
 8003118:	201d      	movs	r0, #29
 800311a:	f000 fba6 	bl	800386a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800311e:	201d      	movs	r0, #29
 8003120:	f000 fbbd 	bl	800389e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003124:	e038      	b.n	8003198 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM5)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a1f      	ldr	r2, [pc, #124]	; (80031a8 <HAL_TIM_Base_MspInit+0xc4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d117      	bne.n	8003160 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003130:	4b1c      	ldr	r3, [pc, #112]	; (80031a4 <HAL_TIM_Base_MspInit+0xc0>)
 8003132:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003136:	4a1b      	ldr	r2, [pc, #108]	; (80031a4 <HAL_TIM_Base_MspInit+0xc0>)
 8003138:	f043 0308 	orr.w	r3, r3, #8
 800313c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003140:	4b18      	ldr	r3, [pc, #96]	; (80031a4 <HAL_TIM_Base_MspInit+0xc0>)
 8003142:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003146:	f003 0308 	and.w	r3, r3, #8
 800314a:	613b      	str	r3, [r7, #16]
 800314c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800314e:	2200      	movs	r2, #0
 8003150:	2100      	movs	r1, #0
 8003152:	2032      	movs	r0, #50	; 0x32
 8003154:	f000 fb89 	bl	800386a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003158:	2032      	movs	r0, #50	; 0x32
 800315a:	f000 fba0 	bl	800389e <HAL_NVIC_EnableIRQ>
}
 800315e:	e01b      	b.n	8003198 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM15)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a11      	ldr	r2, [pc, #68]	; (80031ac <HAL_TIM_Base_MspInit+0xc8>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d116      	bne.n	8003198 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800316a:	4b0e      	ldr	r3, [pc, #56]	; (80031a4 <HAL_TIM_Base_MspInit+0xc0>)
 800316c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003170:	4a0c      	ldr	r2, [pc, #48]	; (80031a4 <HAL_TIM_Base_MspInit+0xc0>)
 8003172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003176:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800317a:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <HAL_TIM_Base_MspInit+0xc0>)
 800317c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8003188:	2200      	movs	r2, #0
 800318a:	2100      	movs	r1, #0
 800318c:	2074      	movs	r0, #116	; 0x74
 800318e:	f000 fb6c 	bl	800386a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8003192:	2074      	movs	r0, #116	; 0x74
 8003194:	f000 fb83 	bl	800389e <HAL_NVIC_EnableIRQ>
}
 8003198:	bf00      	nop
 800319a:	3718      	adds	r7, #24
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40000400 	.word	0x40000400
 80031a4:	58024400 	.word	0x58024400
 80031a8:	40000c00 	.word	0x40000c00
 80031ac:	40014000 	.word	0x40014000

080031b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b0b8      	sub	sp, #224	; 0xe0
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	605a      	str	r2, [r3, #4]
 80031c2:	609a      	str	r2, [r3, #8]
 80031c4:	60da      	str	r2, [r3, #12]
 80031c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031c8:	f107 0310 	add.w	r3, r7, #16
 80031cc:	22bc      	movs	r2, #188	; 0xbc
 80031ce:	2100      	movs	r1, #0
 80031d0:	4618      	mov	r0, r3
 80031d2:	f009 f9f5 	bl	800c5c0 <memset>
  if(huart->Instance==USART3)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a25      	ldr	r2, [pc, #148]	; (8003270 <HAL_UART_MspInit+0xc0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d142      	bne.n	8003266 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80031e0:	2302      	movs	r3, #2
 80031e2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80031e4:	2300      	movs	r3, #0
 80031e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031ea:	f107 0310 	add.w	r3, r7, #16
 80031ee:	4618      	mov	r0, r3
 80031f0:	f004 fe28 	bl	8007e44 <HAL_RCCEx_PeriphCLKConfig>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80031fa:	f7ff fdc1 	bl	8002d80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80031fe:	4b1d      	ldr	r3, [pc, #116]	; (8003274 <HAL_UART_MspInit+0xc4>)
 8003200:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003204:	4a1b      	ldr	r2, [pc, #108]	; (8003274 <HAL_UART_MspInit+0xc4>)
 8003206:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800320a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800320e:	4b19      	ldr	r3, [pc, #100]	; (8003274 <HAL_UART_MspInit+0xc4>)
 8003210:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003214:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800321c:	4b15      	ldr	r3, [pc, #84]	; (8003274 <HAL_UART_MspInit+0xc4>)
 800321e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003222:	4a14      	ldr	r2, [pc, #80]	; (8003274 <HAL_UART_MspInit+0xc4>)
 8003224:	f043 0308 	orr.w	r3, r3, #8
 8003228:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800322c:	4b11      	ldr	r3, [pc, #68]	; (8003274 <HAL_UART_MspInit+0xc4>)
 800322e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	60bb      	str	r3, [r7, #8]
 8003238:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800323a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800323e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003242:	2302      	movs	r3, #2
 8003244:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003248:	2300      	movs	r3, #0
 800324a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800324e:	2300      	movs	r3, #0
 8003250:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003254:	2307      	movs	r3, #7
 8003256:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800325a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800325e:	4619      	mov	r1, r3
 8003260:	4805      	ldr	r0, [pc, #20]	; (8003278 <HAL_UART_MspInit+0xc8>)
 8003262:	f003 fa75 	bl	8006750 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003266:	bf00      	nop
 8003268:	37e0      	adds	r7, #224	; 0xe0
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40004800 	.word	0x40004800
 8003274:	58024400 	.word	0x58024400
 8003278:	58020c00 	.word	0x58020c00

0800327c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b0b8      	sub	sp, #224	; 0xe0
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003284:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	605a      	str	r2, [r3, #4]
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	60da      	str	r2, [r3, #12]
 8003292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003294:	f107 0310 	add.w	r3, r7, #16
 8003298:	22bc      	movs	r2, #188	; 0xbc
 800329a:	2100      	movs	r1, #0
 800329c:	4618      	mov	r0, r3
 800329e:	f009 f98f 	bl	800c5c0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a37      	ldr	r2, [pc, #220]	; (8003384 <HAL_PCD_MspInit+0x108>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d166      	bne.n	800337a <HAL_PCD_MspInit+0xfe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80032ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80032b0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80032b2:	2301      	movs	r3, #1
 80032b4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80032b6:	2312      	movs	r3, #18
 80032b8:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80032ba:	2302      	movs	r3, #2
 80032bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80032be:	2303      	movs	r3, #3
 80032c0:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80032c2:	2302      	movs	r3, #2
 80032c4:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80032c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80032ca:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 80032cc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80032d0:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80032d2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032da:	f107 0310 	add.w	r3, r7, #16
 80032de:	4618      	mov	r0, r3
 80032e0:	f004 fdb0 	bl	8007e44 <HAL_RCCEx_PeriphCLKConfig>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 80032ea:	f7ff fd49 	bl	8002d80 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80032ee:	f003 fde1 	bl	8006eb4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f2:	4b25      	ldr	r3, [pc, #148]	; (8003388 <HAL_PCD_MspInit+0x10c>)
 80032f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032f8:	4a23      	ldr	r2, [pc, #140]	; (8003388 <HAL_PCD_MspInit+0x10c>)
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003302:	4b21      	ldr	r3, [pc, #132]	; (8003388 <HAL_PCD_MspInit+0x10c>)
 8003304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8003310:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003314:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003318:	2302      	movs	r3, #2
 800331a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331e:	2300      	movs	r3, #0
 8003320:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003324:	2300      	movs	r3, #0
 8003326:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800332a:	230a      	movs	r3, #10
 800332c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003330:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003334:	4619      	mov	r1, r3
 8003336:	4815      	ldr	r0, [pc, #84]	; (800338c <HAL_PCD_MspInit+0x110>)
 8003338:	f003 fa0a 	bl	8006750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800333c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003340:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003344:	2300      	movs	r3, #0
 8003346:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334a:	2300      	movs	r3, #0
 800334c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003350:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003354:	4619      	mov	r1, r3
 8003356:	480d      	ldr	r0, [pc, #52]	; (800338c <HAL_PCD_MspInit+0x110>)
 8003358:	f003 f9fa 	bl	8006750 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800335c:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <HAL_PCD_MspInit+0x10c>)
 800335e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003362:	4a09      	ldr	r2, [pc, #36]	; (8003388 <HAL_PCD_MspInit+0x10c>)
 8003364:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003368:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800336c:	4b06      	ldr	r3, [pc, #24]	; (8003388 <HAL_PCD_MspInit+0x10c>)
 800336e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003372:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003376:	60bb      	str	r3, [r7, #8]
 8003378:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800337a:	bf00      	nop
 800337c:	37e0      	adds	r7, #224	; 0xe0
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40080000 	.word	0x40080000
 8003388:	58024400 	.word	0x58024400
 800338c:	58020000 	.word	0x58020000

08003390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003394:	e7fe      	b.n	8003394 <NMI_Handler+0x4>

08003396 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003396:	b480      	push	{r7}
 8003398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800339a:	e7fe      	b.n	800339a <HardFault_Handler+0x4>

0800339c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033a0:	e7fe      	b.n	80033a0 <MemManage_Handler+0x4>

080033a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033a2:	b480      	push	{r7}
 80033a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033a6:	e7fe      	b.n	80033a6 <BusFault_Handler+0x4>

080033a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033ac:	e7fe      	b.n	80033ac <UsageFault_Handler+0x4>

080033ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033ae:	b480      	push	{r7}
 80033b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033b2:	bf00      	nop
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033c0:	bf00      	nop
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033ca:	b480      	push	{r7}
 80033cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033ce:	bf00      	nop
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033dc:	f000 f906 	bl	80035ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033e0:	bf00      	nop
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80033e8:	4802      	ldr	r0, [pc, #8]	; (80033f4 <DMA1_Stream0_IRQHandler+0x10>)
 80033ea:	f001 fa7d 	bl	80048e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	24052de8 	.word	0x24052de8

080033f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80033fc:	4802      	ldr	r0, [pc, #8]	; (8003408 <TIM3_IRQHandler+0x10>)
 80033fe:	f007 f925 	bl	800a64c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	24052c58 	.word	0x24052c58

0800340c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003410:	4802      	ldr	r0, [pc, #8]	; (800341c <SPI1_IRQHandler+0x10>)
 8003412:	f006 fcbb 	bl	8009d8c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003416:	bf00      	nop
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	24052ca4 	.word	0x24052ca4

08003420 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003424:	4802      	ldr	r0, [pc, #8]	; (8003430 <TIM5_IRQHandler+0x10>)
 8003426:	f007 f911 	bl	800a64c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800342a:	bf00      	nop
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	24052c0c 	.word	0x24052c0c

08003434 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8003438:	4802      	ldr	r0, [pc, #8]	; (8003444 <TIM15_IRQHandler+0x10>)
 800343a:	f007 f907 	bl	800a64c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 800343e:	bf00      	nop
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	240527b8 	.word	0x240527b8

08003448 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003450:	4a14      	ldr	r2, [pc, #80]	; (80034a4 <_sbrk+0x5c>)
 8003452:	4b15      	ldr	r3, [pc, #84]	; (80034a8 <_sbrk+0x60>)
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800345c:	4b13      	ldr	r3, [pc, #76]	; (80034ac <_sbrk+0x64>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d102      	bne.n	800346a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003464:	4b11      	ldr	r3, [pc, #68]	; (80034ac <_sbrk+0x64>)
 8003466:	4a12      	ldr	r2, [pc, #72]	; (80034b0 <_sbrk+0x68>)
 8003468:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800346a:	4b10      	ldr	r3, [pc, #64]	; (80034ac <_sbrk+0x64>)
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4413      	add	r3, r2
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	429a      	cmp	r2, r3
 8003476:	d207      	bcs.n	8003488 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003478:	f009 f878 	bl	800c56c <__errno>
 800347c:	4603      	mov	r3, r0
 800347e:	220c      	movs	r2, #12
 8003480:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003482:	f04f 33ff 	mov.w	r3, #4294967295
 8003486:	e009      	b.n	800349c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003488:	4b08      	ldr	r3, [pc, #32]	; (80034ac <_sbrk+0x64>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800348e:	4b07      	ldr	r3, [pc, #28]	; (80034ac <_sbrk+0x64>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4413      	add	r3, r2
 8003496:	4a05      	ldr	r2, [pc, #20]	; (80034ac <_sbrk+0x64>)
 8003498:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800349a:	68fb      	ldr	r3, [r7, #12]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	24080000 	.word	0x24080000
 80034a8:	00000400 	.word	0x00000400
 80034ac:	2405271c 	.word	0x2405271c
 80034b0:	24052e78 	.word	0x24052e78

080034b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80034b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80034b8:	f7fd f8fe 	bl	80006b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034bc:	480c      	ldr	r0, [pc, #48]	; (80034f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80034be:	490d      	ldr	r1, [pc, #52]	; (80034f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80034c0:	4a0d      	ldr	r2, [pc, #52]	; (80034f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80034c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034c4:	e002      	b.n	80034cc <LoopCopyDataInit>

080034c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034ca:	3304      	adds	r3, #4

080034cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034d0:	d3f9      	bcc.n	80034c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034d2:	4a0a      	ldr	r2, [pc, #40]	; (80034fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80034d4:	4c0a      	ldr	r4, [pc, #40]	; (8003500 <LoopFillZerobss+0x22>)
  movs r3, #0
 80034d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034d8:	e001      	b.n	80034de <LoopFillZerobss>

080034da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034dc:	3204      	adds	r2, #4

080034de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034e0:	d3fb      	bcc.n	80034da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034e2:	f009 f849 	bl	800c578 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034e6:	f7fd f981 	bl	80007ec <main>
  bx  lr
 80034ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80034ec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80034f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80034f4:	24046588 	.word	0x24046588
  ldr r2, =_sidata
 80034f8:	0800cecc 	.word	0x0800cecc
  ldr r2, =_sbss
 80034fc:	24046648 	.word	0x24046648
  ldr r4, =_ebss
 8003500:	24052e74 	.word	0x24052e74

08003504 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003504:	e7fe      	b.n	8003504 <ADC3_IRQHandler>
	...

08003508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800350e:	2003      	movs	r0, #3
 8003510:	f000 f9a0 	bl	8003854 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003514:	f004 fac0 	bl	8007a98 <HAL_RCC_GetSysClockFreq>
 8003518:	4602      	mov	r2, r0
 800351a:	4b15      	ldr	r3, [pc, #84]	; (8003570 <HAL_Init+0x68>)
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	0a1b      	lsrs	r3, r3, #8
 8003520:	f003 030f 	and.w	r3, r3, #15
 8003524:	4913      	ldr	r1, [pc, #76]	; (8003574 <HAL_Init+0x6c>)
 8003526:	5ccb      	ldrb	r3, [r1, r3]
 8003528:	f003 031f 	and.w	r3, r3, #31
 800352c:	fa22 f303 	lsr.w	r3, r2, r3
 8003530:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003532:	4b0f      	ldr	r3, [pc, #60]	; (8003570 <HAL_Init+0x68>)
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	4a0e      	ldr	r2, [pc, #56]	; (8003574 <HAL_Init+0x6c>)
 800353c:	5cd3      	ldrb	r3, [r2, r3]
 800353e:	f003 031f 	and.w	r3, r3, #31
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	fa22 f303 	lsr.w	r3, r2, r3
 8003548:	4a0b      	ldr	r2, [pc, #44]	; (8003578 <HAL_Init+0x70>)
 800354a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800354c:	4a0b      	ldr	r2, [pc, #44]	; (800357c <HAL_Init+0x74>)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003552:	2000      	movs	r0, #0
 8003554:	f000 f814 	bl	8003580 <HAL_InitTick>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e002      	b.n	8003568 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003562:	f7ff fc13 	bl	8002d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	58024400 	.word	0x58024400
 8003574:	0800ce48 	.word	0x0800ce48
 8003578:	24000004 	.word	0x24000004
 800357c:	24000000 	.word	0x24000000

08003580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003588:	4b15      	ldr	r3, [pc, #84]	; (80035e0 <HAL_InitTick+0x60>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e021      	b.n	80035d8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003594:	4b13      	ldr	r3, [pc, #76]	; (80035e4 <HAL_InitTick+0x64>)
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	4b11      	ldr	r3, [pc, #68]	; (80035e0 <HAL_InitTick+0x60>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	4619      	mov	r1, r3
 800359e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80035a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 f985 	bl	80038ba <HAL_SYSTICK_Config>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e00e      	b.n	80035d8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b0f      	cmp	r3, #15
 80035be:	d80a      	bhi.n	80035d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035c0:	2200      	movs	r2, #0
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	f04f 30ff 	mov.w	r0, #4294967295
 80035c8:	f000 f94f 	bl	800386a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035cc:	4a06      	ldr	r2, [pc, #24]	; (80035e8 <HAL_InitTick+0x68>)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	e000      	b.n	80035d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	24046520 	.word	0x24046520
 80035e4:	24000000 	.word	0x24000000
 80035e8:	2404651c 	.word	0x2404651c

080035ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80035f0:	4b06      	ldr	r3, [pc, #24]	; (800360c <HAL_IncTick+0x20>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	461a      	mov	r2, r3
 80035f6:	4b06      	ldr	r3, [pc, #24]	; (8003610 <HAL_IncTick+0x24>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4413      	add	r3, r2
 80035fc:	4a04      	ldr	r2, [pc, #16]	; (8003610 <HAL_IncTick+0x24>)
 80035fe:	6013      	str	r3, [r2, #0]
}
 8003600:	bf00      	nop
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	24046520 	.word	0x24046520
 8003610:	24052e60 	.word	0x24052e60

08003614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  return uwTick;
 8003618:	4b03      	ldr	r3, [pc, #12]	; (8003628 <HAL_GetTick+0x14>)
 800361a:	681b      	ldr	r3, [r3, #0]
}
 800361c:	4618      	mov	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	24052e60 	.word	0x24052e60

0800362c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003634:	f7ff ffee 	bl	8003614 <HAL_GetTick>
 8003638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003644:	d005      	beq.n	8003652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003646:	4b0a      	ldr	r3, [pc, #40]	; (8003670 <HAL_Delay+0x44>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	461a      	mov	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4413      	add	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003652:	bf00      	nop
 8003654:	f7ff ffde 	bl	8003614 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	429a      	cmp	r2, r3
 8003662:	d8f7      	bhi.n	8003654 <HAL_Delay+0x28>
  {
  }
}
 8003664:	bf00      	nop
 8003666:	bf00      	nop
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	24046520 	.word	0x24046520

08003674 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003678:	4b03      	ldr	r3, [pc, #12]	; (8003688 <HAL_GetREVID+0x14>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	0c1b      	lsrs	r3, r3, #16
}
 800367e:	4618      	mov	r0, r3
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	5c001000 	.word	0x5c001000

0800368c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003694:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800369c:	4904      	ldr	r1, [pc, #16]	; (80036b0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	604b      	str	r3, [r1, #4]
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	58000400 	.word	0x58000400

080036b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036c4:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <__NVIC_SetPriorityGrouping+0x40>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036d0:	4013      	ands	r3, r2
 80036d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80036dc:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <__NVIC_SetPriorityGrouping+0x44>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036e2:	4a04      	ldr	r2, [pc, #16]	; (80036f4 <__NVIC_SetPriorityGrouping+0x40>)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	60d3      	str	r3, [r2, #12]
}
 80036e8:	bf00      	nop
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	e000ed00 	.word	0xe000ed00
 80036f8:	05fa0000 	.word	0x05fa0000

080036fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003700:	4b04      	ldr	r3, [pc, #16]	; (8003714 <__NVIC_GetPriorityGrouping+0x18>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	0a1b      	lsrs	r3, r3, #8
 8003706:	f003 0307 	and.w	r3, r3, #7
}
 800370a:	4618      	mov	r0, r3
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	e000ed00 	.word	0xe000ed00

08003718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	4603      	mov	r3, r0
 8003720:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003726:	2b00      	cmp	r3, #0
 8003728:	db0b      	blt.n	8003742 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800372a:	88fb      	ldrh	r3, [r7, #6]
 800372c:	f003 021f 	and.w	r2, r3, #31
 8003730:	4907      	ldr	r1, [pc, #28]	; (8003750 <__NVIC_EnableIRQ+0x38>)
 8003732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	2001      	movs	r0, #1
 800373a:	fa00 f202 	lsl.w	r2, r0, r2
 800373e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	e000e100 	.word	0xe000e100

08003754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	6039      	str	r1, [r7, #0]
 800375e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003760:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003764:	2b00      	cmp	r3, #0
 8003766:	db0a      	blt.n	800377e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	b2da      	uxtb	r2, r3
 800376c:	490c      	ldr	r1, [pc, #48]	; (80037a0 <__NVIC_SetPriority+0x4c>)
 800376e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003772:	0112      	lsls	r2, r2, #4
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	440b      	add	r3, r1
 8003778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800377c:	e00a      	b.n	8003794 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	b2da      	uxtb	r2, r3
 8003782:	4908      	ldr	r1, [pc, #32]	; (80037a4 <__NVIC_SetPriority+0x50>)
 8003784:	88fb      	ldrh	r3, [r7, #6]
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	3b04      	subs	r3, #4
 800378c:	0112      	lsls	r2, r2, #4
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	440b      	add	r3, r1
 8003792:	761a      	strb	r2, [r3, #24]
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	e000e100 	.word	0xe000e100
 80037a4:	e000ed00 	.word	0xe000ed00

080037a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b089      	sub	sp, #36	; 0x24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f1c3 0307 	rsb	r3, r3, #7
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	bf28      	it	cs
 80037c6:	2304      	movcs	r3, #4
 80037c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	3304      	adds	r3, #4
 80037ce:	2b06      	cmp	r3, #6
 80037d0:	d902      	bls.n	80037d8 <NVIC_EncodePriority+0x30>
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	3b03      	subs	r3, #3
 80037d6:	e000      	b.n	80037da <NVIC_EncodePriority+0x32>
 80037d8:	2300      	movs	r3, #0
 80037da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037dc:	f04f 32ff 	mov.w	r2, #4294967295
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	43da      	mvns	r2, r3
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	401a      	ands	r2, r3
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037f0:	f04f 31ff 	mov.w	r1, #4294967295
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	fa01 f303 	lsl.w	r3, r1, r3
 80037fa:	43d9      	mvns	r1, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003800:	4313      	orrs	r3, r2
         );
}
 8003802:	4618      	mov	r0, r3
 8003804:	3724      	adds	r7, #36	; 0x24
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
	...

08003810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3b01      	subs	r3, #1
 800381c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003820:	d301      	bcc.n	8003826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003822:	2301      	movs	r3, #1
 8003824:	e00f      	b.n	8003846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003826:	4a0a      	ldr	r2, [pc, #40]	; (8003850 <SysTick_Config+0x40>)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3b01      	subs	r3, #1
 800382c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800382e:	210f      	movs	r1, #15
 8003830:	f04f 30ff 	mov.w	r0, #4294967295
 8003834:	f7ff ff8e 	bl	8003754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003838:	4b05      	ldr	r3, [pc, #20]	; (8003850 <SysTick_Config+0x40>)
 800383a:	2200      	movs	r2, #0
 800383c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800383e:	4b04      	ldr	r3, [pc, #16]	; (8003850 <SysTick_Config+0x40>)
 8003840:	2207      	movs	r2, #7
 8003842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	e000e010 	.word	0xe000e010

08003854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7ff ff29 	bl	80036b4 <__NVIC_SetPriorityGrouping>
}
 8003862:	bf00      	nop
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b086      	sub	sp, #24
 800386e:	af00      	add	r7, sp, #0
 8003870:	4603      	mov	r3, r0
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	607a      	str	r2, [r7, #4]
 8003876:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003878:	f7ff ff40 	bl	80036fc <__NVIC_GetPriorityGrouping>
 800387c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	68b9      	ldr	r1, [r7, #8]
 8003882:	6978      	ldr	r0, [r7, #20]
 8003884:	f7ff ff90 	bl	80037a8 <NVIC_EncodePriority>
 8003888:	4602      	mov	r2, r0
 800388a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800388e:	4611      	mov	r1, r2
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff ff5f 	bl	8003754 <__NVIC_SetPriority>
}
 8003896:	bf00      	nop
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b082      	sub	sp, #8
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	4603      	mov	r3, r0
 80038a6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff ff33 	bl	8003718 <__NVIC_EnableIRQ>
}
 80038b2:	bf00      	nop
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b082      	sub	sp, #8
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7ff ffa4 	bl	8003810 <SysTick_Config>
 80038c8:	4603      	mov	r3, r0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80038dc:	f7ff fe9a 	bl	8003614 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e316      	b.n	8003f1a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a66      	ldr	r2, [pc, #408]	; (8003a8c <HAL_DMA_Init+0x1b8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d04a      	beq.n	800398c <HAL_DMA_Init+0xb8>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a65      	ldr	r2, [pc, #404]	; (8003a90 <HAL_DMA_Init+0x1bc>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d045      	beq.n	800398c <HAL_DMA_Init+0xb8>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a63      	ldr	r2, [pc, #396]	; (8003a94 <HAL_DMA_Init+0x1c0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d040      	beq.n	800398c <HAL_DMA_Init+0xb8>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a62      	ldr	r2, [pc, #392]	; (8003a98 <HAL_DMA_Init+0x1c4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d03b      	beq.n	800398c <HAL_DMA_Init+0xb8>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a60      	ldr	r2, [pc, #384]	; (8003a9c <HAL_DMA_Init+0x1c8>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d036      	beq.n	800398c <HAL_DMA_Init+0xb8>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a5f      	ldr	r2, [pc, #380]	; (8003aa0 <HAL_DMA_Init+0x1cc>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d031      	beq.n	800398c <HAL_DMA_Init+0xb8>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a5d      	ldr	r2, [pc, #372]	; (8003aa4 <HAL_DMA_Init+0x1d0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d02c      	beq.n	800398c <HAL_DMA_Init+0xb8>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a5c      	ldr	r2, [pc, #368]	; (8003aa8 <HAL_DMA_Init+0x1d4>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d027      	beq.n	800398c <HAL_DMA_Init+0xb8>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a5a      	ldr	r2, [pc, #360]	; (8003aac <HAL_DMA_Init+0x1d8>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d022      	beq.n	800398c <HAL_DMA_Init+0xb8>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a59      	ldr	r2, [pc, #356]	; (8003ab0 <HAL_DMA_Init+0x1dc>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d01d      	beq.n	800398c <HAL_DMA_Init+0xb8>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a57      	ldr	r2, [pc, #348]	; (8003ab4 <HAL_DMA_Init+0x1e0>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d018      	beq.n	800398c <HAL_DMA_Init+0xb8>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a56      	ldr	r2, [pc, #344]	; (8003ab8 <HAL_DMA_Init+0x1e4>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d013      	beq.n	800398c <HAL_DMA_Init+0xb8>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a54      	ldr	r2, [pc, #336]	; (8003abc <HAL_DMA_Init+0x1e8>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00e      	beq.n	800398c <HAL_DMA_Init+0xb8>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a53      	ldr	r2, [pc, #332]	; (8003ac0 <HAL_DMA_Init+0x1ec>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d009      	beq.n	800398c <HAL_DMA_Init+0xb8>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a51      	ldr	r2, [pc, #324]	; (8003ac4 <HAL_DMA_Init+0x1f0>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d004      	beq.n	800398c <HAL_DMA_Init+0xb8>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a50      	ldr	r2, [pc, #320]	; (8003ac8 <HAL_DMA_Init+0x1f4>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d101      	bne.n	8003990 <HAL_DMA_Init+0xbc>
 800398c:	2301      	movs	r3, #1
 800398e:	e000      	b.n	8003992 <HAL_DMA_Init+0xbe>
 8003990:	2300      	movs	r3, #0
 8003992:	2b00      	cmp	r3, #0
 8003994:	f000 813b 	beq.w	8003c0e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a37      	ldr	r2, [pc, #220]	; (8003a8c <HAL_DMA_Init+0x1b8>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d04a      	beq.n	8003a48 <HAL_DMA_Init+0x174>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a36      	ldr	r2, [pc, #216]	; (8003a90 <HAL_DMA_Init+0x1bc>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d045      	beq.n	8003a48 <HAL_DMA_Init+0x174>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a34      	ldr	r2, [pc, #208]	; (8003a94 <HAL_DMA_Init+0x1c0>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d040      	beq.n	8003a48 <HAL_DMA_Init+0x174>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a33      	ldr	r2, [pc, #204]	; (8003a98 <HAL_DMA_Init+0x1c4>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d03b      	beq.n	8003a48 <HAL_DMA_Init+0x174>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a31      	ldr	r2, [pc, #196]	; (8003a9c <HAL_DMA_Init+0x1c8>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d036      	beq.n	8003a48 <HAL_DMA_Init+0x174>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a30      	ldr	r2, [pc, #192]	; (8003aa0 <HAL_DMA_Init+0x1cc>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d031      	beq.n	8003a48 <HAL_DMA_Init+0x174>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a2e      	ldr	r2, [pc, #184]	; (8003aa4 <HAL_DMA_Init+0x1d0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d02c      	beq.n	8003a48 <HAL_DMA_Init+0x174>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a2d      	ldr	r2, [pc, #180]	; (8003aa8 <HAL_DMA_Init+0x1d4>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d027      	beq.n	8003a48 <HAL_DMA_Init+0x174>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a2b      	ldr	r2, [pc, #172]	; (8003aac <HAL_DMA_Init+0x1d8>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d022      	beq.n	8003a48 <HAL_DMA_Init+0x174>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a2a      	ldr	r2, [pc, #168]	; (8003ab0 <HAL_DMA_Init+0x1dc>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d01d      	beq.n	8003a48 <HAL_DMA_Init+0x174>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a28      	ldr	r2, [pc, #160]	; (8003ab4 <HAL_DMA_Init+0x1e0>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d018      	beq.n	8003a48 <HAL_DMA_Init+0x174>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a27      	ldr	r2, [pc, #156]	; (8003ab8 <HAL_DMA_Init+0x1e4>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d013      	beq.n	8003a48 <HAL_DMA_Init+0x174>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a25      	ldr	r2, [pc, #148]	; (8003abc <HAL_DMA_Init+0x1e8>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d00e      	beq.n	8003a48 <HAL_DMA_Init+0x174>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a24      	ldr	r2, [pc, #144]	; (8003ac0 <HAL_DMA_Init+0x1ec>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d009      	beq.n	8003a48 <HAL_DMA_Init+0x174>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a22      	ldr	r2, [pc, #136]	; (8003ac4 <HAL_DMA_Init+0x1f0>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d004      	beq.n	8003a48 <HAL_DMA_Init+0x174>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a21      	ldr	r2, [pc, #132]	; (8003ac8 <HAL_DMA_Init+0x1f4>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d108      	bne.n	8003a5a <HAL_DMA_Init+0x186>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0201 	bic.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	e007      	b.n	8003a6a <HAL_DMA_Init+0x196>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0201 	bic.w	r2, r2, #1
 8003a68:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a6a:	e02f      	b.n	8003acc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a6c:	f7ff fdd2 	bl	8003614 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b05      	cmp	r3, #5
 8003a78:	d928      	bls.n	8003acc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2203      	movs	r2, #3
 8003a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e246      	b.n	8003f1a <HAL_DMA_Init+0x646>
 8003a8c:	40020010 	.word	0x40020010
 8003a90:	40020028 	.word	0x40020028
 8003a94:	40020040 	.word	0x40020040
 8003a98:	40020058 	.word	0x40020058
 8003a9c:	40020070 	.word	0x40020070
 8003aa0:	40020088 	.word	0x40020088
 8003aa4:	400200a0 	.word	0x400200a0
 8003aa8:	400200b8 	.word	0x400200b8
 8003aac:	40020410 	.word	0x40020410
 8003ab0:	40020428 	.word	0x40020428
 8003ab4:	40020440 	.word	0x40020440
 8003ab8:	40020458 	.word	0x40020458
 8003abc:	40020470 	.word	0x40020470
 8003ac0:	40020488 	.word	0x40020488
 8003ac4:	400204a0 	.word	0x400204a0
 8003ac8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1c8      	bne.n	8003a6c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	4b83      	ldr	r3, [pc, #524]	; (8003cf4 <HAL_DMA_Init+0x420>)
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003af2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003afe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b0a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d107      	bne.n	8003b30 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003b30:	4b71      	ldr	r3, [pc, #452]	; (8003cf8 <HAL_DMA_Init+0x424>)
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	4b71      	ldr	r3, [pc, #452]	; (8003cfc <HAL_DMA_Init+0x428>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b3c:	d328      	bcc.n	8003b90 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2b28      	cmp	r3, #40	; 0x28
 8003b44:	d903      	bls.n	8003b4e <HAL_DMA_Init+0x27a>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b2e      	cmp	r3, #46	; 0x2e
 8003b4c:	d917      	bls.n	8003b7e <HAL_DMA_Init+0x2aa>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b3e      	cmp	r3, #62	; 0x3e
 8003b54:	d903      	bls.n	8003b5e <HAL_DMA_Init+0x28a>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b42      	cmp	r3, #66	; 0x42
 8003b5c:	d90f      	bls.n	8003b7e <HAL_DMA_Init+0x2aa>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b46      	cmp	r3, #70	; 0x46
 8003b64:	d903      	bls.n	8003b6e <HAL_DMA_Init+0x29a>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b48      	cmp	r3, #72	; 0x48
 8003b6c:	d907      	bls.n	8003b7e <HAL_DMA_Init+0x2aa>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b4e      	cmp	r3, #78	; 0x4e
 8003b74:	d905      	bls.n	8003b82 <HAL_DMA_Init+0x2ae>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b52      	cmp	r3, #82	; 0x52
 8003b7c:	d801      	bhi.n	8003b82 <HAL_DMA_Init+0x2ae>
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e000      	b.n	8003b84 <HAL_DMA_Init+0x2b0>
 8003b82:	2300      	movs	r3, #0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b8e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f023 0307 	bic.w	r3, r3, #7
 8003ba6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d117      	bne.n	8003bea <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00e      	beq.n	8003bea <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f002 f81f 	bl	8005c10 <DMA_CheckFifoParam>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d008      	beq.n	8003bea <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2240      	movs	r2, #64	; 0x40
 8003bdc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e197      	b.n	8003f1a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f001 ff5a 	bl	8005aac <DMA_CalcBaseAndBitshift>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c00:	f003 031f 	and.w	r3, r3, #31
 8003c04:	223f      	movs	r2, #63	; 0x3f
 8003c06:	409a      	lsls	r2, r3
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	609a      	str	r2, [r3, #8]
 8003c0c:	e0cd      	b.n	8003daa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a3b      	ldr	r2, [pc, #236]	; (8003d00 <HAL_DMA_Init+0x42c>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d022      	beq.n	8003c5e <HAL_DMA_Init+0x38a>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a39      	ldr	r2, [pc, #228]	; (8003d04 <HAL_DMA_Init+0x430>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d01d      	beq.n	8003c5e <HAL_DMA_Init+0x38a>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a38      	ldr	r2, [pc, #224]	; (8003d08 <HAL_DMA_Init+0x434>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d018      	beq.n	8003c5e <HAL_DMA_Init+0x38a>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a36      	ldr	r2, [pc, #216]	; (8003d0c <HAL_DMA_Init+0x438>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d013      	beq.n	8003c5e <HAL_DMA_Init+0x38a>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a35      	ldr	r2, [pc, #212]	; (8003d10 <HAL_DMA_Init+0x43c>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d00e      	beq.n	8003c5e <HAL_DMA_Init+0x38a>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a33      	ldr	r2, [pc, #204]	; (8003d14 <HAL_DMA_Init+0x440>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d009      	beq.n	8003c5e <HAL_DMA_Init+0x38a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a32      	ldr	r2, [pc, #200]	; (8003d18 <HAL_DMA_Init+0x444>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d004      	beq.n	8003c5e <HAL_DMA_Init+0x38a>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a30      	ldr	r2, [pc, #192]	; (8003d1c <HAL_DMA_Init+0x448>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d101      	bne.n	8003c62 <HAL_DMA_Init+0x38e>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e000      	b.n	8003c64 <HAL_DMA_Init+0x390>
 8003c62:	2300      	movs	r3, #0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 8097 	beq.w	8003d98 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a24      	ldr	r2, [pc, #144]	; (8003d00 <HAL_DMA_Init+0x42c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d021      	beq.n	8003cb8 <HAL_DMA_Init+0x3e4>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a22      	ldr	r2, [pc, #136]	; (8003d04 <HAL_DMA_Init+0x430>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d01c      	beq.n	8003cb8 <HAL_DMA_Init+0x3e4>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a21      	ldr	r2, [pc, #132]	; (8003d08 <HAL_DMA_Init+0x434>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d017      	beq.n	8003cb8 <HAL_DMA_Init+0x3e4>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a1f      	ldr	r2, [pc, #124]	; (8003d0c <HAL_DMA_Init+0x438>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d012      	beq.n	8003cb8 <HAL_DMA_Init+0x3e4>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a1e      	ldr	r2, [pc, #120]	; (8003d10 <HAL_DMA_Init+0x43c>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d00d      	beq.n	8003cb8 <HAL_DMA_Init+0x3e4>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a1c      	ldr	r2, [pc, #112]	; (8003d14 <HAL_DMA_Init+0x440>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d008      	beq.n	8003cb8 <HAL_DMA_Init+0x3e4>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a1b      	ldr	r2, [pc, #108]	; (8003d18 <HAL_DMA_Init+0x444>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d003      	beq.n	8003cb8 <HAL_DMA_Init+0x3e4>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a19      	ldr	r2, [pc, #100]	; (8003d1c <HAL_DMA_Init+0x448>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <HAL_DMA_Init+0x44c>)
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	2b40      	cmp	r3, #64	; 0x40
 8003ce0:	d020      	beq.n	8003d24 <HAL_DMA_Init+0x450>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	2b80      	cmp	r3, #128	; 0x80
 8003ce8:	d102      	bne.n	8003cf0 <HAL_DMA_Init+0x41c>
 8003cea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003cee:	e01a      	b.n	8003d26 <HAL_DMA_Init+0x452>
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	e018      	b.n	8003d26 <HAL_DMA_Init+0x452>
 8003cf4:	fe10803f 	.word	0xfe10803f
 8003cf8:	5c001000 	.word	0x5c001000
 8003cfc:	ffff0000 	.word	0xffff0000
 8003d00:	58025408 	.word	0x58025408
 8003d04:	5802541c 	.word	0x5802541c
 8003d08:	58025430 	.word	0x58025430
 8003d0c:	58025444 	.word	0x58025444
 8003d10:	58025458 	.word	0x58025458
 8003d14:	5802546c 	.word	0x5802546c
 8003d18:	58025480 	.word	0x58025480
 8003d1c:	58025494 	.word	0x58025494
 8003d20:	fffe000f 	.word	0xfffe000f
 8003d24:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	68d2      	ldr	r2, [r2, #12]
 8003d2a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003d2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003d34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003d3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003d44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003d4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003d54:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4b6e      	ldr	r3, [pc, #440]	; (8003f24 <HAL_DMA_Init+0x650>)
 8003d6c:	4413      	add	r3, r2
 8003d6e:	4a6e      	ldr	r2, [pc, #440]	; (8003f28 <HAL_DMA_Init+0x654>)
 8003d70:	fba2 2303 	umull	r2, r3, r2, r3
 8003d74:	091b      	lsrs	r3, r3, #4
 8003d76:	009a      	lsls	r2, r3, #2
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f001 fe95 	bl	8005aac <DMA_CalcBaseAndBitshift>
 8003d82:	4603      	mov	r3, r0
 8003d84:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d8a:	f003 031f 	and.w	r3, r3, #31
 8003d8e:	2201      	movs	r2, #1
 8003d90:	409a      	lsls	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	605a      	str	r2, [r3, #4]
 8003d96:	e008      	b.n	8003daa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2240      	movs	r2, #64	; 0x40
 8003d9c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2203      	movs	r2, #3
 8003da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e0b7      	b.n	8003f1a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a5f      	ldr	r2, [pc, #380]	; (8003f2c <HAL_DMA_Init+0x658>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d072      	beq.n	8003e9a <HAL_DMA_Init+0x5c6>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a5d      	ldr	r2, [pc, #372]	; (8003f30 <HAL_DMA_Init+0x65c>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d06d      	beq.n	8003e9a <HAL_DMA_Init+0x5c6>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a5c      	ldr	r2, [pc, #368]	; (8003f34 <HAL_DMA_Init+0x660>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d068      	beq.n	8003e9a <HAL_DMA_Init+0x5c6>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a5a      	ldr	r2, [pc, #360]	; (8003f38 <HAL_DMA_Init+0x664>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d063      	beq.n	8003e9a <HAL_DMA_Init+0x5c6>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a59      	ldr	r2, [pc, #356]	; (8003f3c <HAL_DMA_Init+0x668>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d05e      	beq.n	8003e9a <HAL_DMA_Init+0x5c6>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a57      	ldr	r2, [pc, #348]	; (8003f40 <HAL_DMA_Init+0x66c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d059      	beq.n	8003e9a <HAL_DMA_Init+0x5c6>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a56      	ldr	r2, [pc, #344]	; (8003f44 <HAL_DMA_Init+0x670>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d054      	beq.n	8003e9a <HAL_DMA_Init+0x5c6>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a54      	ldr	r2, [pc, #336]	; (8003f48 <HAL_DMA_Init+0x674>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d04f      	beq.n	8003e9a <HAL_DMA_Init+0x5c6>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a53      	ldr	r2, [pc, #332]	; (8003f4c <HAL_DMA_Init+0x678>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d04a      	beq.n	8003e9a <HAL_DMA_Init+0x5c6>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a51      	ldr	r2, [pc, #324]	; (8003f50 <HAL_DMA_Init+0x67c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d045      	beq.n	8003e9a <HAL_DMA_Init+0x5c6>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a50      	ldr	r2, [pc, #320]	; (8003f54 <HAL_DMA_Init+0x680>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d040      	beq.n	8003e9a <HAL_DMA_Init+0x5c6>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a4e      	ldr	r2, [pc, #312]	; (8003f58 <HAL_DMA_Init+0x684>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d03b      	beq.n	8003e9a <HAL_DMA_Init+0x5c6>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a4d      	ldr	r2, [pc, #308]	; (8003f5c <HAL_DMA_Init+0x688>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d036      	beq.n	8003e9a <HAL_DMA_Init+0x5c6>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a4b      	ldr	r2, [pc, #300]	; (8003f60 <HAL_DMA_Init+0x68c>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d031      	beq.n	8003e9a <HAL_DMA_Init+0x5c6>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a4a      	ldr	r2, [pc, #296]	; (8003f64 <HAL_DMA_Init+0x690>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d02c      	beq.n	8003e9a <HAL_DMA_Init+0x5c6>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a48      	ldr	r2, [pc, #288]	; (8003f68 <HAL_DMA_Init+0x694>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d027      	beq.n	8003e9a <HAL_DMA_Init+0x5c6>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a47      	ldr	r2, [pc, #284]	; (8003f6c <HAL_DMA_Init+0x698>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d022      	beq.n	8003e9a <HAL_DMA_Init+0x5c6>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a45      	ldr	r2, [pc, #276]	; (8003f70 <HAL_DMA_Init+0x69c>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d01d      	beq.n	8003e9a <HAL_DMA_Init+0x5c6>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a44      	ldr	r2, [pc, #272]	; (8003f74 <HAL_DMA_Init+0x6a0>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d018      	beq.n	8003e9a <HAL_DMA_Init+0x5c6>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a42      	ldr	r2, [pc, #264]	; (8003f78 <HAL_DMA_Init+0x6a4>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d013      	beq.n	8003e9a <HAL_DMA_Init+0x5c6>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a41      	ldr	r2, [pc, #260]	; (8003f7c <HAL_DMA_Init+0x6a8>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d00e      	beq.n	8003e9a <HAL_DMA_Init+0x5c6>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a3f      	ldr	r2, [pc, #252]	; (8003f80 <HAL_DMA_Init+0x6ac>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d009      	beq.n	8003e9a <HAL_DMA_Init+0x5c6>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a3e      	ldr	r2, [pc, #248]	; (8003f84 <HAL_DMA_Init+0x6b0>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d004      	beq.n	8003e9a <HAL_DMA_Init+0x5c6>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a3c      	ldr	r2, [pc, #240]	; (8003f88 <HAL_DMA_Init+0x6b4>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d101      	bne.n	8003e9e <HAL_DMA_Init+0x5ca>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e000      	b.n	8003ea0 <HAL_DMA_Init+0x5cc>
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d032      	beq.n	8003f0a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f001 ff2f 	bl	8005d08 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	2b80      	cmp	r3, #128	; 0x80
 8003eb0:	d102      	bne.n	8003eb8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003ecc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d010      	beq.n	8003ef8 <HAL_DMA_Init+0x624>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b08      	cmp	r3, #8
 8003edc:	d80c      	bhi.n	8003ef8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f001 ffac 	bl	8005e3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003ef4:	605a      	str	r2, [r3, #4]
 8003ef6:	e008      	b.n	8003f0a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3718      	adds	r7, #24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	a7fdabf8 	.word	0xa7fdabf8
 8003f28:	cccccccd 	.word	0xcccccccd
 8003f2c:	40020010 	.word	0x40020010
 8003f30:	40020028 	.word	0x40020028
 8003f34:	40020040 	.word	0x40020040
 8003f38:	40020058 	.word	0x40020058
 8003f3c:	40020070 	.word	0x40020070
 8003f40:	40020088 	.word	0x40020088
 8003f44:	400200a0 	.word	0x400200a0
 8003f48:	400200b8 	.word	0x400200b8
 8003f4c:	40020410 	.word	0x40020410
 8003f50:	40020428 	.word	0x40020428
 8003f54:	40020440 	.word	0x40020440
 8003f58:	40020458 	.word	0x40020458
 8003f5c:	40020470 	.word	0x40020470
 8003f60:	40020488 	.word	0x40020488
 8003f64:	400204a0 	.word	0x400204a0
 8003f68:	400204b8 	.word	0x400204b8
 8003f6c:	58025408 	.word	0x58025408
 8003f70:	5802541c 	.word	0x5802541c
 8003f74:	58025430 	.word	0x58025430
 8003f78:	58025444 	.word	0x58025444
 8003f7c:	58025458 	.word	0x58025458
 8003f80:	5802546c 	.word	0x5802546c
 8003f84:	58025480 	.word	0x58025480
 8003f88:	58025494 	.word	0x58025494

08003f8c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e226      	b.n	80043f6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d101      	bne.n	8003fb6 <HAL_DMA_Start_IT+0x2a>
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	e21f      	b.n	80043f6 <HAL_DMA_Start_IT+0x46a>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	f040 820a 	bne.w	80043e0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a68      	ldr	r2, [pc, #416]	; (8004180 <HAL_DMA_Start_IT+0x1f4>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d04a      	beq.n	800407a <HAL_DMA_Start_IT+0xee>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a66      	ldr	r2, [pc, #408]	; (8004184 <HAL_DMA_Start_IT+0x1f8>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d045      	beq.n	800407a <HAL_DMA_Start_IT+0xee>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a65      	ldr	r2, [pc, #404]	; (8004188 <HAL_DMA_Start_IT+0x1fc>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d040      	beq.n	800407a <HAL_DMA_Start_IT+0xee>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a63      	ldr	r2, [pc, #396]	; (800418c <HAL_DMA_Start_IT+0x200>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d03b      	beq.n	800407a <HAL_DMA_Start_IT+0xee>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a62      	ldr	r2, [pc, #392]	; (8004190 <HAL_DMA_Start_IT+0x204>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d036      	beq.n	800407a <HAL_DMA_Start_IT+0xee>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a60      	ldr	r2, [pc, #384]	; (8004194 <HAL_DMA_Start_IT+0x208>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d031      	beq.n	800407a <HAL_DMA_Start_IT+0xee>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a5f      	ldr	r2, [pc, #380]	; (8004198 <HAL_DMA_Start_IT+0x20c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d02c      	beq.n	800407a <HAL_DMA_Start_IT+0xee>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a5d      	ldr	r2, [pc, #372]	; (800419c <HAL_DMA_Start_IT+0x210>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d027      	beq.n	800407a <HAL_DMA_Start_IT+0xee>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a5c      	ldr	r2, [pc, #368]	; (80041a0 <HAL_DMA_Start_IT+0x214>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d022      	beq.n	800407a <HAL_DMA_Start_IT+0xee>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a5a      	ldr	r2, [pc, #360]	; (80041a4 <HAL_DMA_Start_IT+0x218>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d01d      	beq.n	800407a <HAL_DMA_Start_IT+0xee>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a59      	ldr	r2, [pc, #356]	; (80041a8 <HAL_DMA_Start_IT+0x21c>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d018      	beq.n	800407a <HAL_DMA_Start_IT+0xee>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a57      	ldr	r2, [pc, #348]	; (80041ac <HAL_DMA_Start_IT+0x220>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d013      	beq.n	800407a <HAL_DMA_Start_IT+0xee>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a56      	ldr	r2, [pc, #344]	; (80041b0 <HAL_DMA_Start_IT+0x224>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d00e      	beq.n	800407a <HAL_DMA_Start_IT+0xee>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a54      	ldr	r2, [pc, #336]	; (80041b4 <HAL_DMA_Start_IT+0x228>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d009      	beq.n	800407a <HAL_DMA_Start_IT+0xee>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a53      	ldr	r2, [pc, #332]	; (80041b8 <HAL_DMA_Start_IT+0x22c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d004      	beq.n	800407a <HAL_DMA_Start_IT+0xee>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a51      	ldr	r2, [pc, #324]	; (80041bc <HAL_DMA_Start_IT+0x230>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d108      	bne.n	800408c <HAL_DMA_Start_IT+0x100>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0201 	bic.w	r2, r2, #1
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	e007      	b.n	800409c <HAL_DMA_Start_IT+0x110>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0201 	bic.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	68b9      	ldr	r1, [r7, #8]
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f001 fb56 	bl	8005754 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a34      	ldr	r2, [pc, #208]	; (8004180 <HAL_DMA_Start_IT+0x1f4>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d04a      	beq.n	8004148 <HAL_DMA_Start_IT+0x1bc>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a33      	ldr	r2, [pc, #204]	; (8004184 <HAL_DMA_Start_IT+0x1f8>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d045      	beq.n	8004148 <HAL_DMA_Start_IT+0x1bc>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a31      	ldr	r2, [pc, #196]	; (8004188 <HAL_DMA_Start_IT+0x1fc>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d040      	beq.n	8004148 <HAL_DMA_Start_IT+0x1bc>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a30      	ldr	r2, [pc, #192]	; (800418c <HAL_DMA_Start_IT+0x200>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d03b      	beq.n	8004148 <HAL_DMA_Start_IT+0x1bc>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a2e      	ldr	r2, [pc, #184]	; (8004190 <HAL_DMA_Start_IT+0x204>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d036      	beq.n	8004148 <HAL_DMA_Start_IT+0x1bc>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a2d      	ldr	r2, [pc, #180]	; (8004194 <HAL_DMA_Start_IT+0x208>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d031      	beq.n	8004148 <HAL_DMA_Start_IT+0x1bc>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a2b      	ldr	r2, [pc, #172]	; (8004198 <HAL_DMA_Start_IT+0x20c>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d02c      	beq.n	8004148 <HAL_DMA_Start_IT+0x1bc>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a2a      	ldr	r2, [pc, #168]	; (800419c <HAL_DMA_Start_IT+0x210>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d027      	beq.n	8004148 <HAL_DMA_Start_IT+0x1bc>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a28      	ldr	r2, [pc, #160]	; (80041a0 <HAL_DMA_Start_IT+0x214>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d022      	beq.n	8004148 <HAL_DMA_Start_IT+0x1bc>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a27      	ldr	r2, [pc, #156]	; (80041a4 <HAL_DMA_Start_IT+0x218>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d01d      	beq.n	8004148 <HAL_DMA_Start_IT+0x1bc>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a25      	ldr	r2, [pc, #148]	; (80041a8 <HAL_DMA_Start_IT+0x21c>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d018      	beq.n	8004148 <HAL_DMA_Start_IT+0x1bc>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a24      	ldr	r2, [pc, #144]	; (80041ac <HAL_DMA_Start_IT+0x220>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d013      	beq.n	8004148 <HAL_DMA_Start_IT+0x1bc>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a22      	ldr	r2, [pc, #136]	; (80041b0 <HAL_DMA_Start_IT+0x224>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d00e      	beq.n	8004148 <HAL_DMA_Start_IT+0x1bc>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a21      	ldr	r2, [pc, #132]	; (80041b4 <HAL_DMA_Start_IT+0x228>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d009      	beq.n	8004148 <HAL_DMA_Start_IT+0x1bc>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a1f      	ldr	r2, [pc, #124]	; (80041b8 <HAL_DMA_Start_IT+0x22c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d004      	beq.n	8004148 <HAL_DMA_Start_IT+0x1bc>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a1e      	ldr	r2, [pc, #120]	; (80041bc <HAL_DMA_Start_IT+0x230>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d101      	bne.n	800414c <HAL_DMA_Start_IT+0x1c0>
 8004148:	2301      	movs	r3, #1
 800414a:	e000      	b.n	800414e <HAL_DMA_Start_IT+0x1c2>
 800414c:	2300      	movs	r3, #0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d036      	beq.n	80041c0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f023 021e 	bic.w	r2, r3, #30
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f042 0216 	orr.w	r2, r2, #22
 8004164:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	2b00      	cmp	r3, #0
 800416c:	d03e      	beq.n	80041ec <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f042 0208 	orr.w	r2, r2, #8
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	e035      	b.n	80041ec <HAL_DMA_Start_IT+0x260>
 8004180:	40020010 	.word	0x40020010
 8004184:	40020028 	.word	0x40020028
 8004188:	40020040 	.word	0x40020040
 800418c:	40020058 	.word	0x40020058
 8004190:	40020070 	.word	0x40020070
 8004194:	40020088 	.word	0x40020088
 8004198:	400200a0 	.word	0x400200a0
 800419c:	400200b8 	.word	0x400200b8
 80041a0:	40020410 	.word	0x40020410
 80041a4:	40020428 	.word	0x40020428
 80041a8:	40020440 	.word	0x40020440
 80041ac:	40020458 	.word	0x40020458
 80041b0:	40020470 	.word	0x40020470
 80041b4:	40020488 	.word	0x40020488
 80041b8:	400204a0 	.word	0x400204a0
 80041bc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f023 020e 	bic.w	r2, r3, #14
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 020a 	orr.w	r2, r2, #10
 80041d2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d007      	beq.n	80041ec <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0204 	orr.w	r2, r2, #4
 80041ea:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a83      	ldr	r2, [pc, #524]	; (8004400 <HAL_DMA_Start_IT+0x474>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d072      	beq.n	80042dc <HAL_DMA_Start_IT+0x350>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a82      	ldr	r2, [pc, #520]	; (8004404 <HAL_DMA_Start_IT+0x478>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d06d      	beq.n	80042dc <HAL_DMA_Start_IT+0x350>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a80      	ldr	r2, [pc, #512]	; (8004408 <HAL_DMA_Start_IT+0x47c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d068      	beq.n	80042dc <HAL_DMA_Start_IT+0x350>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a7f      	ldr	r2, [pc, #508]	; (800440c <HAL_DMA_Start_IT+0x480>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d063      	beq.n	80042dc <HAL_DMA_Start_IT+0x350>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a7d      	ldr	r2, [pc, #500]	; (8004410 <HAL_DMA_Start_IT+0x484>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d05e      	beq.n	80042dc <HAL_DMA_Start_IT+0x350>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a7c      	ldr	r2, [pc, #496]	; (8004414 <HAL_DMA_Start_IT+0x488>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d059      	beq.n	80042dc <HAL_DMA_Start_IT+0x350>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a7a      	ldr	r2, [pc, #488]	; (8004418 <HAL_DMA_Start_IT+0x48c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d054      	beq.n	80042dc <HAL_DMA_Start_IT+0x350>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a79      	ldr	r2, [pc, #484]	; (800441c <HAL_DMA_Start_IT+0x490>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d04f      	beq.n	80042dc <HAL_DMA_Start_IT+0x350>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a77      	ldr	r2, [pc, #476]	; (8004420 <HAL_DMA_Start_IT+0x494>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d04a      	beq.n	80042dc <HAL_DMA_Start_IT+0x350>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a76      	ldr	r2, [pc, #472]	; (8004424 <HAL_DMA_Start_IT+0x498>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d045      	beq.n	80042dc <HAL_DMA_Start_IT+0x350>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a74      	ldr	r2, [pc, #464]	; (8004428 <HAL_DMA_Start_IT+0x49c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d040      	beq.n	80042dc <HAL_DMA_Start_IT+0x350>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a73      	ldr	r2, [pc, #460]	; (800442c <HAL_DMA_Start_IT+0x4a0>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d03b      	beq.n	80042dc <HAL_DMA_Start_IT+0x350>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a71      	ldr	r2, [pc, #452]	; (8004430 <HAL_DMA_Start_IT+0x4a4>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d036      	beq.n	80042dc <HAL_DMA_Start_IT+0x350>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a70      	ldr	r2, [pc, #448]	; (8004434 <HAL_DMA_Start_IT+0x4a8>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d031      	beq.n	80042dc <HAL_DMA_Start_IT+0x350>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a6e      	ldr	r2, [pc, #440]	; (8004438 <HAL_DMA_Start_IT+0x4ac>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d02c      	beq.n	80042dc <HAL_DMA_Start_IT+0x350>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a6d      	ldr	r2, [pc, #436]	; (800443c <HAL_DMA_Start_IT+0x4b0>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d027      	beq.n	80042dc <HAL_DMA_Start_IT+0x350>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a6b      	ldr	r2, [pc, #428]	; (8004440 <HAL_DMA_Start_IT+0x4b4>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d022      	beq.n	80042dc <HAL_DMA_Start_IT+0x350>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a6a      	ldr	r2, [pc, #424]	; (8004444 <HAL_DMA_Start_IT+0x4b8>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d01d      	beq.n	80042dc <HAL_DMA_Start_IT+0x350>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a68      	ldr	r2, [pc, #416]	; (8004448 <HAL_DMA_Start_IT+0x4bc>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d018      	beq.n	80042dc <HAL_DMA_Start_IT+0x350>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a67      	ldr	r2, [pc, #412]	; (800444c <HAL_DMA_Start_IT+0x4c0>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d013      	beq.n	80042dc <HAL_DMA_Start_IT+0x350>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a65      	ldr	r2, [pc, #404]	; (8004450 <HAL_DMA_Start_IT+0x4c4>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d00e      	beq.n	80042dc <HAL_DMA_Start_IT+0x350>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a64      	ldr	r2, [pc, #400]	; (8004454 <HAL_DMA_Start_IT+0x4c8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d009      	beq.n	80042dc <HAL_DMA_Start_IT+0x350>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a62      	ldr	r2, [pc, #392]	; (8004458 <HAL_DMA_Start_IT+0x4cc>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d004      	beq.n	80042dc <HAL_DMA_Start_IT+0x350>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a61      	ldr	r2, [pc, #388]	; (800445c <HAL_DMA_Start_IT+0x4d0>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d101      	bne.n	80042e0 <HAL_DMA_Start_IT+0x354>
 80042dc:	2301      	movs	r3, #1
 80042de:	e000      	b.n	80042e2 <HAL_DMA_Start_IT+0x356>
 80042e0:	2300      	movs	r3, #0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d01a      	beq.n	800431c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d007      	beq.n	8004304 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004302:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004308:	2b00      	cmp	r3, #0
 800430a:	d007      	beq.n	800431c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004316:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800431a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a37      	ldr	r2, [pc, #220]	; (8004400 <HAL_DMA_Start_IT+0x474>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d04a      	beq.n	80043bc <HAL_DMA_Start_IT+0x430>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a36      	ldr	r2, [pc, #216]	; (8004404 <HAL_DMA_Start_IT+0x478>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d045      	beq.n	80043bc <HAL_DMA_Start_IT+0x430>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a34      	ldr	r2, [pc, #208]	; (8004408 <HAL_DMA_Start_IT+0x47c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d040      	beq.n	80043bc <HAL_DMA_Start_IT+0x430>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a33      	ldr	r2, [pc, #204]	; (800440c <HAL_DMA_Start_IT+0x480>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d03b      	beq.n	80043bc <HAL_DMA_Start_IT+0x430>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a31      	ldr	r2, [pc, #196]	; (8004410 <HAL_DMA_Start_IT+0x484>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d036      	beq.n	80043bc <HAL_DMA_Start_IT+0x430>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a30      	ldr	r2, [pc, #192]	; (8004414 <HAL_DMA_Start_IT+0x488>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d031      	beq.n	80043bc <HAL_DMA_Start_IT+0x430>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a2e      	ldr	r2, [pc, #184]	; (8004418 <HAL_DMA_Start_IT+0x48c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d02c      	beq.n	80043bc <HAL_DMA_Start_IT+0x430>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a2d      	ldr	r2, [pc, #180]	; (800441c <HAL_DMA_Start_IT+0x490>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d027      	beq.n	80043bc <HAL_DMA_Start_IT+0x430>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a2b      	ldr	r2, [pc, #172]	; (8004420 <HAL_DMA_Start_IT+0x494>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d022      	beq.n	80043bc <HAL_DMA_Start_IT+0x430>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a2a      	ldr	r2, [pc, #168]	; (8004424 <HAL_DMA_Start_IT+0x498>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d01d      	beq.n	80043bc <HAL_DMA_Start_IT+0x430>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a28      	ldr	r2, [pc, #160]	; (8004428 <HAL_DMA_Start_IT+0x49c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d018      	beq.n	80043bc <HAL_DMA_Start_IT+0x430>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a27      	ldr	r2, [pc, #156]	; (800442c <HAL_DMA_Start_IT+0x4a0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d013      	beq.n	80043bc <HAL_DMA_Start_IT+0x430>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a25      	ldr	r2, [pc, #148]	; (8004430 <HAL_DMA_Start_IT+0x4a4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00e      	beq.n	80043bc <HAL_DMA_Start_IT+0x430>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a24      	ldr	r2, [pc, #144]	; (8004434 <HAL_DMA_Start_IT+0x4a8>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d009      	beq.n	80043bc <HAL_DMA_Start_IT+0x430>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a22      	ldr	r2, [pc, #136]	; (8004438 <HAL_DMA_Start_IT+0x4ac>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d004      	beq.n	80043bc <HAL_DMA_Start_IT+0x430>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a21      	ldr	r2, [pc, #132]	; (800443c <HAL_DMA_Start_IT+0x4b0>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d108      	bne.n	80043ce <HAL_DMA_Start_IT+0x442>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0201 	orr.w	r2, r2, #1
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	e012      	b.n	80043f4 <HAL_DMA_Start_IT+0x468>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f042 0201 	orr.w	r2, r2, #1
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	e009      	b.n	80043f4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80043f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40020010 	.word	0x40020010
 8004404:	40020028 	.word	0x40020028
 8004408:	40020040 	.word	0x40020040
 800440c:	40020058 	.word	0x40020058
 8004410:	40020070 	.word	0x40020070
 8004414:	40020088 	.word	0x40020088
 8004418:	400200a0 	.word	0x400200a0
 800441c:	400200b8 	.word	0x400200b8
 8004420:	40020410 	.word	0x40020410
 8004424:	40020428 	.word	0x40020428
 8004428:	40020440 	.word	0x40020440
 800442c:	40020458 	.word	0x40020458
 8004430:	40020470 	.word	0x40020470
 8004434:	40020488 	.word	0x40020488
 8004438:	400204a0 	.word	0x400204a0
 800443c:	400204b8 	.word	0x400204b8
 8004440:	58025408 	.word	0x58025408
 8004444:	5802541c 	.word	0x5802541c
 8004448:	58025430 	.word	0x58025430
 800444c:	58025444 	.word	0x58025444
 8004450:	58025458 	.word	0x58025458
 8004454:	5802546c 	.word	0x5802546c
 8004458:	58025480 	.word	0x58025480
 800445c:	58025494 	.word	0x58025494

08004460 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e205      	b.n	800487e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d004      	beq.n	8004488 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2280      	movs	r2, #128	; 0x80
 8004482:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e1fa      	b.n	800487e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a8c      	ldr	r2, [pc, #560]	; (80046c0 <HAL_DMA_Abort_IT+0x260>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d04a      	beq.n	8004528 <HAL_DMA_Abort_IT+0xc8>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a8b      	ldr	r2, [pc, #556]	; (80046c4 <HAL_DMA_Abort_IT+0x264>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d045      	beq.n	8004528 <HAL_DMA_Abort_IT+0xc8>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a89      	ldr	r2, [pc, #548]	; (80046c8 <HAL_DMA_Abort_IT+0x268>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d040      	beq.n	8004528 <HAL_DMA_Abort_IT+0xc8>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a88      	ldr	r2, [pc, #544]	; (80046cc <HAL_DMA_Abort_IT+0x26c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d03b      	beq.n	8004528 <HAL_DMA_Abort_IT+0xc8>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a86      	ldr	r2, [pc, #536]	; (80046d0 <HAL_DMA_Abort_IT+0x270>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d036      	beq.n	8004528 <HAL_DMA_Abort_IT+0xc8>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a85      	ldr	r2, [pc, #532]	; (80046d4 <HAL_DMA_Abort_IT+0x274>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d031      	beq.n	8004528 <HAL_DMA_Abort_IT+0xc8>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a83      	ldr	r2, [pc, #524]	; (80046d8 <HAL_DMA_Abort_IT+0x278>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d02c      	beq.n	8004528 <HAL_DMA_Abort_IT+0xc8>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a82      	ldr	r2, [pc, #520]	; (80046dc <HAL_DMA_Abort_IT+0x27c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d027      	beq.n	8004528 <HAL_DMA_Abort_IT+0xc8>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a80      	ldr	r2, [pc, #512]	; (80046e0 <HAL_DMA_Abort_IT+0x280>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d022      	beq.n	8004528 <HAL_DMA_Abort_IT+0xc8>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a7f      	ldr	r2, [pc, #508]	; (80046e4 <HAL_DMA_Abort_IT+0x284>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d01d      	beq.n	8004528 <HAL_DMA_Abort_IT+0xc8>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a7d      	ldr	r2, [pc, #500]	; (80046e8 <HAL_DMA_Abort_IT+0x288>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d018      	beq.n	8004528 <HAL_DMA_Abort_IT+0xc8>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a7c      	ldr	r2, [pc, #496]	; (80046ec <HAL_DMA_Abort_IT+0x28c>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d013      	beq.n	8004528 <HAL_DMA_Abort_IT+0xc8>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a7a      	ldr	r2, [pc, #488]	; (80046f0 <HAL_DMA_Abort_IT+0x290>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d00e      	beq.n	8004528 <HAL_DMA_Abort_IT+0xc8>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a79      	ldr	r2, [pc, #484]	; (80046f4 <HAL_DMA_Abort_IT+0x294>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d009      	beq.n	8004528 <HAL_DMA_Abort_IT+0xc8>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a77      	ldr	r2, [pc, #476]	; (80046f8 <HAL_DMA_Abort_IT+0x298>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d004      	beq.n	8004528 <HAL_DMA_Abort_IT+0xc8>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a76      	ldr	r2, [pc, #472]	; (80046fc <HAL_DMA_Abort_IT+0x29c>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d101      	bne.n	800452c <HAL_DMA_Abort_IT+0xcc>
 8004528:	2301      	movs	r3, #1
 800452a:	e000      	b.n	800452e <HAL_DMA_Abort_IT+0xce>
 800452c:	2300      	movs	r3, #0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d065      	beq.n	80045fe <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2204      	movs	r2, #4
 8004536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a60      	ldr	r2, [pc, #384]	; (80046c0 <HAL_DMA_Abort_IT+0x260>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d04a      	beq.n	80045da <HAL_DMA_Abort_IT+0x17a>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a5e      	ldr	r2, [pc, #376]	; (80046c4 <HAL_DMA_Abort_IT+0x264>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d045      	beq.n	80045da <HAL_DMA_Abort_IT+0x17a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a5d      	ldr	r2, [pc, #372]	; (80046c8 <HAL_DMA_Abort_IT+0x268>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d040      	beq.n	80045da <HAL_DMA_Abort_IT+0x17a>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a5b      	ldr	r2, [pc, #364]	; (80046cc <HAL_DMA_Abort_IT+0x26c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d03b      	beq.n	80045da <HAL_DMA_Abort_IT+0x17a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a5a      	ldr	r2, [pc, #360]	; (80046d0 <HAL_DMA_Abort_IT+0x270>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d036      	beq.n	80045da <HAL_DMA_Abort_IT+0x17a>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a58      	ldr	r2, [pc, #352]	; (80046d4 <HAL_DMA_Abort_IT+0x274>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d031      	beq.n	80045da <HAL_DMA_Abort_IT+0x17a>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a57      	ldr	r2, [pc, #348]	; (80046d8 <HAL_DMA_Abort_IT+0x278>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d02c      	beq.n	80045da <HAL_DMA_Abort_IT+0x17a>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a55      	ldr	r2, [pc, #340]	; (80046dc <HAL_DMA_Abort_IT+0x27c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d027      	beq.n	80045da <HAL_DMA_Abort_IT+0x17a>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a54      	ldr	r2, [pc, #336]	; (80046e0 <HAL_DMA_Abort_IT+0x280>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d022      	beq.n	80045da <HAL_DMA_Abort_IT+0x17a>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a52      	ldr	r2, [pc, #328]	; (80046e4 <HAL_DMA_Abort_IT+0x284>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d01d      	beq.n	80045da <HAL_DMA_Abort_IT+0x17a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a51      	ldr	r2, [pc, #324]	; (80046e8 <HAL_DMA_Abort_IT+0x288>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d018      	beq.n	80045da <HAL_DMA_Abort_IT+0x17a>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a4f      	ldr	r2, [pc, #316]	; (80046ec <HAL_DMA_Abort_IT+0x28c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d013      	beq.n	80045da <HAL_DMA_Abort_IT+0x17a>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a4e      	ldr	r2, [pc, #312]	; (80046f0 <HAL_DMA_Abort_IT+0x290>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00e      	beq.n	80045da <HAL_DMA_Abort_IT+0x17a>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a4c      	ldr	r2, [pc, #304]	; (80046f4 <HAL_DMA_Abort_IT+0x294>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d009      	beq.n	80045da <HAL_DMA_Abort_IT+0x17a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a4b      	ldr	r2, [pc, #300]	; (80046f8 <HAL_DMA_Abort_IT+0x298>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d004      	beq.n	80045da <HAL_DMA_Abort_IT+0x17a>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a49      	ldr	r2, [pc, #292]	; (80046fc <HAL_DMA_Abort_IT+0x29c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d108      	bne.n	80045ec <HAL_DMA_Abort_IT+0x18c>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0201 	bic.w	r2, r2, #1
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	e147      	b.n	800487c <HAL_DMA_Abort_IT+0x41c>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 0201 	bic.w	r2, r2, #1
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	e13e      	b.n	800487c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 020e 	bic.w	r2, r2, #14
 800460c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a2b      	ldr	r2, [pc, #172]	; (80046c0 <HAL_DMA_Abort_IT+0x260>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d04a      	beq.n	80046ae <HAL_DMA_Abort_IT+0x24e>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a29      	ldr	r2, [pc, #164]	; (80046c4 <HAL_DMA_Abort_IT+0x264>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d045      	beq.n	80046ae <HAL_DMA_Abort_IT+0x24e>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a28      	ldr	r2, [pc, #160]	; (80046c8 <HAL_DMA_Abort_IT+0x268>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d040      	beq.n	80046ae <HAL_DMA_Abort_IT+0x24e>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a26      	ldr	r2, [pc, #152]	; (80046cc <HAL_DMA_Abort_IT+0x26c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d03b      	beq.n	80046ae <HAL_DMA_Abort_IT+0x24e>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a25      	ldr	r2, [pc, #148]	; (80046d0 <HAL_DMA_Abort_IT+0x270>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d036      	beq.n	80046ae <HAL_DMA_Abort_IT+0x24e>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a23      	ldr	r2, [pc, #140]	; (80046d4 <HAL_DMA_Abort_IT+0x274>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d031      	beq.n	80046ae <HAL_DMA_Abort_IT+0x24e>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a22      	ldr	r2, [pc, #136]	; (80046d8 <HAL_DMA_Abort_IT+0x278>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d02c      	beq.n	80046ae <HAL_DMA_Abort_IT+0x24e>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a20      	ldr	r2, [pc, #128]	; (80046dc <HAL_DMA_Abort_IT+0x27c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d027      	beq.n	80046ae <HAL_DMA_Abort_IT+0x24e>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a1f      	ldr	r2, [pc, #124]	; (80046e0 <HAL_DMA_Abort_IT+0x280>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d022      	beq.n	80046ae <HAL_DMA_Abort_IT+0x24e>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a1d      	ldr	r2, [pc, #116]	; (80046e4 <HAL_DMA_Abort_IT+0x284>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d01d      	beq.n	80046ae <HAL_DMA_Abort_IT+0x24e>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a1c      	ldr	r2, [pc, #112]	; (80046e8 <HAL_DMA_Abort_IT+0x288>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d018      	beq.n	80046ae <HAL_DMA_Abort_IT+0x24e>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a1a      	ldr	r2, [pc, #104]	; (80046ec <HAL_DMA_Abort_IT+0x28c>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d013      	beq.n	80046ae <HAL_DMA_Abort_IT+0x24e>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a19      	ldr	r2, [pc, #100]	; (80046f0 <HAL_DMA_Abort_IT+0x290>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d00e      	beq.n	80046ae <HAL_DMA_Abort_IT+0x24e>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a17      	ldr	r2, [pc, #92]	; (80046f4 <HAL_DMA_Abort_IT+0x294>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d009      	beq.n	80046ae <HAL_DMA_Abort_IT+0x24e>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a16      	ldr	r2, [pc, #88]	; (80046f8 <HAL_DMA_Abort_IT+0x298>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d004      	beq.n	80046ae <HAL_DMA_Abort_IT+0x24e>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a14      	ldr	r2, [pc, #80]	; (80046fc <HAL_DMA_Abort_IT+0x29c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d128      	bne.n	8004700 <HAL_DMA_Abort_IT+0x2a0>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0201 	bic.w	r2, r2, #1
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	e027      	b.n	8004710 <HAL_DMA_Abort_IT+0x2b0>
 80046c0:	40020010 	.word	0x40020010
 80046c4:	40020028 	.word	0x40020028
 80046c8:	40020040 	.word	0x40020040
 80046cc:	40020058 	.word	0x40020058
 80046d0:	40020070 	.word	0x40020070
 80046d4:	40020088 	.word	0x40020088
 80046d8:	400200a0 	.word	0x400200a0
 80046dc:	400200b8 	.word	0x400200b8
 80046e0:	40020410 	.word	0x40020410
 80046e4:	40020428 	.word	0x40020428
 80046e8:	40020440 	.word	0x40020440
 80046ec:	40020458 	.word	0x40020458
 80046f0:	40020470 	.word	0x40020470
 80046f4:	40020488 	.word	0x40020488
 80046f8:	400204a0 	.word	0x400204a0
 80046fc:	400204b8 	.word	0x400204b8
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0201 	bic.w	r2, r2, #1
 800470e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a5c      	ldr	r2, [pc, #368]	; (8004888 <HAL_DMA_Abort_IT+0x428>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d072      	beq.n	8004800 <HAL_DMA_Abort_IT+0x3a0>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a5b      	ldr	r2, [pc, #364]	; (800488c <HAL_DMA_Abort_IT+0x42c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d06d      	beq.n	8004800 <HAL_DMA_Abort_IT+0x3a0>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a59      	ldr	r2, [pc, #356]	; (8004890 <HAL_DMA_Abort_IT+0x430>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d068      	beq.n	8004800 <HAL_DMA_Abort_IT+0x3a0>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a58      	ldr	r2, [pc, #352]	; (8004894 <HAL_DMA_Abort_IT+0x434>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d063      	beq.n	8004800 <HAL_DMA_Abort_IT+0x3a0>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a56      	ldr	r2, [pc, #344]	; (8004898 <HAL_DMA_Abort_IT+0x438>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d05e      	beq.n	8004800 <HAL_DMA_Abort_IT+0x3a0>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a55      	ldr	r2, [pc, #340]	; (800489c <HAL_DMA_Abort_IT+0x43c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d059      	beq.n	8004800 <HAL_DMA_Abort_IT+0x3a0>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a53      	ldr	r2, [pc, #332]	; (80048a0 <HAL_DMA_Abort_IT+0x440>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d054      	beq.n	8004800 <HAL_DMA_Abort_IT+0x3a0>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a52      	ldr	r2, [pc, #328]	; (80048a4 <HAL_DMA_Abort_IT+0x444>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d04f      	beq.n	8004800 <HAL_DMA_Abort_IT+0x3a0>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a50      	ldr	r2, [pc, #320]	; (80048a8 <HAL_DMA_Abort_IT+0x448>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d04a      	beq.n	8004800 <HAL_DMA_Abort_IT+0x3a0>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a4f      	ldr	r2, [pc, #316]	; (80048ac <HAL_DMA_Abort_IT+0x44c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d045      	beq.n	8004800 <HAL_DMA_Abort_IT+0x3a0>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a4d      	ldr	r2, [pc, #308]	; (80048b0 <HAL_DMA_Abort_IT+0x450>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d040      	beq.n	8004800 <HAL_DMA_Abort_IT+0x3a0>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a4c      	ldr	r2, [pc, #304]	; (80048b4 <HAL_DMA_Abort_IT+0x454>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d03b      	beq.n	8004800 <HAL_DMA_Abort_IT+0x3a0>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a4a      	ldr	r2, [pc, #296]	; (80048b8 <HAL_DMA_Abort_IT+0x458>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d036      	beq.n	8004800 <HAL_DMA_Abort_IT+0x3a0>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a49      	ldr	r2, [pc, #292]	; (80048bc <HAL_DMA_Abort_IT+0x45c>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d031      	beq.n	8004800 <HAL_DMA_Abort_IT+0x3a0>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a47      	ldr	r2, [pc, #284]	; (80048c0 <HAL_DMA_Abort_IT+0x460>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d02c      	beq.n	8004800 <HAL_DMA_Abort_IT+0x3a0>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a46      	ldr	r2, [pc, #280]	; (80048c4 <HAL_DMA_Abort_IT+0x464>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d027      	beq.n	8004800 <HAL_DMA_Abort_IT+0x3a0>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a44      	ldr	r2, [pc, #272]	; (80048c8 <HAL_DMA_Abort_IT+0x468>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d022      	beq.n	8004800 <HAL_DMA_Abort_IT+0x3a0>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a43      	ldr	r2, [pc, #268]	; (80048cc <HAL_DMA_Abort_IT+0x46c>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d01d      	beq.n	8004800 <HAL_DMA_Abort_IT+0x3a0>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a41      	ldr	r2, [pc, #260]	; (80048d0 <HAL_DMA_Abort_IT+0x470>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d018      	beq.n	8004800 <HAL_DMA_Abort_IT+0x3a0>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a40      	ldr	r2, [pc, #256]	; (80048d4 <HAL_DMA_Abort_IT+0x474>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d013      	beq.n	8004800 <HAL_DMA_Abort_IT+0x3a0>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a3e      	ldr	r2, [pc, #248]	; (80048d8 <HAL_DMA_Abort_IT+0x478>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d00e      	beq.n	8004800 <HAL_DMA_Abort_IT+0x3a0>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a3d      	ldr	r2, [pc, #244]	; (80048dc <HAL_DMA_Abort_IT+0x47c>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d009      	beq.n	8004800 <HAL_DMA_Abort_IT+0x3a0>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a3b      	ldr	r2, [pc, #236]	; (80048e0 <HAL_DMA_Abort_IT+0x480>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d004      	beq.n	8004800 <HAL_DMA_Abort_IT+0x3a0>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a3a      	ldr	r2, [pc, #232]	; (80048e4 <HAL_DMA_Abort_IT+0x484>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d101      	bne.n	8004804 <HAL_DMA_Abort_IT+0x3a4>
 8004800:	2301      	movs	r3, #1
 8004802:	e000      	b.n	8004806 <HAL_DMA_Abort_IT+0x3a6>
 8004804:	2300      	movs	r3, #0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d028      	beq.n	800485c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004814:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004818:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004824:	f003 031f 	and.w	r3, r3, #31
 8004828:	2201      	movs	r2, #1
 800482a:	409a      	lsls	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004838:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00c      	beq.n	800485c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800484c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004850:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800485a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	40020010 	.word	0x40020010
 800488c:	40020028 	.word	0x40020028
 8004890:	40020040 	.word	0x40020040
 8004894:	40020058 	.word	0x40020058
 8004898:	40020070 	.word	0x40020070
 800489c:	40020088 	.word	0x40020088
 80048a0:	400200a0 	.word	0x400200a0
 80048a4:	400200b8 	.word	0x400200b8
 80048a8:	40020410 	.word	0x40020410
 80048ac:	40020428 	.word	0x40020428
 80048b0:	40020440 	.word	0x40020440
 80048b4:	40020458 	.word	0x40020458
 80048b8:	40020470 	.word	0x40020470
 80048bc:	40020488 	.word	0x40020488
 80048c0:	400204a0 	.word	0x400204a0
 80048c4:	400204b8 	.word	0x400204b8
 80048c8:	58025408 	.word	0x58025408
 80048cc:	5802541c 	.word	0x5802541c
 80048d0:	58025430 	.word	0x58025430
 80048d4:	58025444 	.word	0x58025444
 80048d8:	58025458 	.word	0x58025458
 80048dc:	5802546c 	.word	0x5802546c
 80048e0:	58025480 	.word	0x58025480
 80048e4:	58025494 	.word	0x58025494

080048e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b08a      	sub	sp, #40	; 0x28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80048f4:	4b67      	ldr	r3, [pc, #412]	; (8004a94 <HAL_DMA_IRQHandler+0x1ac>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a67      	ldr	r2, [pc, #412]	; (8004a98 <HAL_DMA_IRQHandler+0x1b0>)
 80048fa:	fba2 2303 	umull	r2, r3, r2, r3
 80048fe:	0a9b      	lsrs	r3, r3, #10
 8004900:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004906:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a5f      	ldr	r2, [pc, #380]	; (8004a9c <HAL_DMA_IRQHandler+0x1b4>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d04a      	beq.n	80049ba <HAL_DMA_IRQHandler+0xd2>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a5d      	ldr	r2, [pc, #372]	; (8004aa0 <HAL_DMA_IRQHandler+0x1b8>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d045      	beq.n	80049ba <HAL_DMA_IRQHandler+0xd2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a5c      	ldr	r2, [pc, #368]	; (8004aa4 <HAL_DMA_IRQHandler+0x1bc>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d040      	beq.n	80049ba <HAL_DMA_IRQHandler+0xd2>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a5a      	ldr	r2, [pc, #360]	; (8004aa8 <HAL_DMA_IRQHandler+0x1c0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d03b      	beq.n	80049ba <HAL_DMA_IRQHandler+0xd2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a59      	ldr	r2, [pc, #356]	; (8004aac <HAL_DMA_IRQHandler+0x1c4>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d036      	beq.n	80049ba <HAL_DMA_IRQHandler+0xd2>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a57      	ldr	r2, [pc, #348]	; (8004ab0 <HAL_DMA_IRQHandler+0x1c8>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d031      	beq.n	80049ba <HAL_DMA_IRQHandler+0xd2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a56      	ldr	r2, [pc, #344]	; (8004ab4 <HAL_DMA_IRQHandler+0x1cc>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d02c      	beq.n	80049ba <HAL_DMA_IRQHandler+0xd2>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a54      	ldr	r2, [pc, #336]	; (8004ab8 <HAL_DMA_IRQHandler+0x1d0>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d027      	beq.n	80049ba <HAL_DMA_IRQHandler+0xd2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a53      	ldr	r2, [pc, #332]	; (8004abc <HAL_DMA_IRQHandler+0x1d4>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d022      	beq.n	80049ba <HAL_DMA_IRQHandler+0xd2>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a51      	ldr	r2, [pc, #324]	; (8004ac0 <HAL_DMA_IRQHandler+0x1d8>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d01d      	beq.n	80049ba <HAL_DMA_IRQHandler+0xd2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a50      	ldr	r2, [pc, #320]	; (8004ac4 <HAL_DMA_IRQHandler+0x1dc>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d018      	beq.n	80049ba <HAL_DMA_IRQHandler+0xd2>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a4e      	ldr	r2, [pc, #312]	; (8004ac8 <HAL_DMA_IRQHandler+0x1e0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d013      	beq.n	80049ba <HAL_DMA_IRQHandler+0xd2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a4d      	ldr	r2, [pc, #308]	; (8004acc <HAL_DMA_IRQHandler+0x1e4>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d00e      	beq.n	80049ba <HAL_DMA_IRQHandler+0xd2>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a4b      	ldr	r2, [pc, #300]	; (8004ad0 <HAL_DMA_IRQHandler+0x1e8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d009      	beq.n	80049ba <HAL_DMA_IRQHandler+0xd2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a4a      	ldr	r2, [pc, #296]	; (8004ad4 <HAL_DMA_IRQHandler+0x1ec>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d004      	beq.n	80049ba <HAL_DMA_IRQHandler+0xd2>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a48      	ldr	r2, [pc, #288]	; (8004ad8 <HAL_DMA_IRQHandler+0x1f0>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d101      	bne.n	80049be <HAL_DMA_IRQHandler+0xd6>
 80049ba:	2301      	movs	r3, #1
 80049bc:	e000      	b.n	80049c0 <HAL_DMA_IRQHandler+0xd8>
 80049be:	2300      	movs	r3, #0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 842b 	beq.w	800521c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ca:	f003 031f 	and.w	r3, r3, #31
 80049ce:	2208      	movs	r2, #8
 80049d0:	409a      	lsls	r2, r3
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	4013      	ands	r3, r2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 80a2 	beq.w	8004b20 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a2e      	ldr	r2, [pc, #184]	; (8004a9c <HAL_DMA_IRQHandler+0x1b4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d04a      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x194>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a2d      	ldr	r2, [pc, #180]	; (8004aa0 <HAL_DMA_IRQHandler+0x1b8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d045      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x194>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a2b      	ldr	r2, [pc, #172]	; (8004aa4 <HAL_DMA_IRQHandler+0x1bc>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d040      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x194>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a2a      	ldr	r2, [pc, #168]	; (8004aa8 <HAL_DMA_IRQHandler+0x1c0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d03b      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x194>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a28      	ldr	r2, [pc, #160]	; (8004aac <HAL_DMA_IRQHandler+0x1c4>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d036      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x194>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a27      	ldr	r2, [pc, #156]	; (8004ab0 <HAL_DMA_IRQHandler+0x1c8>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d031      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x194>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a25      	ldr	r2, [pc, #148]	; (8004ab4 <HAL_DMA_IRQHandler+0x1cc>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d02c      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x194>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a24      	ldr	r2, [pc, #144]	; (8004ab8 <HAL_DMA_IRQHandler+0x1d0>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d027      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x194>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a22      	ldr	r2, [pc, #136]	; (8004abc <HAL_DMA_IRQHandler+0x1d4>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d022      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x194>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a21      	ldr	r2, [pc, #132]	; (8004ac0 <HAL_DMA_IRQHandler+0x1d8>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d01d      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x194>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a1f      	ldr	r2, [pc, #124]	; (8004ac4 <HAL_DMA_IRQHandler+0x1dc>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d018      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x194>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a1e      	ldr	r2, [pc, #120]	; (8004ac8 <HAL_DMA_IRQHandler+0x1e0>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d013      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x194>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a1c      	ldr	r2, [pc, #112]	; (8004acc <HAL_DMA_IRQHandler+0x1e4>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d00e      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x194>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a1b      	ldr	r2, [pc, #108]	; (8004ad0 <HAL_DMA_IRQHandler+0x1e8>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d009      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x194>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a19      	ldr	r2, [pc, #100]	; (8004ad4 <HAL_DMA_IRQHandler+0x1ec>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d004      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x194>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a18      	ldr	r2, [pc, #96]	; (8004ad8 <HAL_DMA_IRQHandler+0x1f0>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d12f      	bne.n	8004adc <HAL_DMA_IRQHandler+0x1f4>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0304 	and.w	r3, r3, #4
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	bf14      	ite	ne
 8004a8a:	2301      	movne	r3, #1
 8004a8c:	2300      	moveq	r3, #0
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	e02e      	b.n	8004af0 <HAL_DMA_IRQHandler+0x208>
 8004a92:	bf00      	nop
 8004a94:	24000000 	.word	0x24000000
 8004a98:	1b4e81b5 	.word	0x1b4e81b5
 8004a9c:	40020010 	.word	0x40020010
 8004aa0:	40020028 	.word	0x40020028
 8004aa4:	40020040 	.word	0x40020040
 8004aa8:	40020058 	.word	0x40020058
 8004aac:	40020070 	.word	0x40020070
 8004ab0:	40020088 	.word	0x40020088
 8004ab4:	400200a0 	.word	0x400200a0
 8004ab8:	400200b8 	.word	0x400200b8
 8004abc:	40020410 	.word	0x40020410
 8004ac0:	40020428 	.word	0x40020428
 8004ac4:	40020440 	.word	0x40020440
 8004ac8:	40020458 	.word	0x40020458
 8004acc:	40020470 	.word	0x40020470
 8004ad0:	40020488 	.word	0x40020488
 8004ad4:	400204a0 	.word	0x400204a0
 8004ad8:	400204b8 	.word	0x400204b8
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	bf14      	ite	ne
 8004aea:	2301      	movne	r3, #1
 8004aec:	2300      	moveq	r3, #0
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d015      	beq.n	8004b20 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0204 	bic.w	r2, r2, #4
 8004b02:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b08:	f003 031f 	and.w	r3, r3, #31
 8004b0c:	2208      	movs	r2, #8
 8004b0e:	409a      	lsls	r2, r3
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b18:	f043 0201 	orr.w	r2, r3, #1
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b24:	f003 031f 	and.w	r3, r3, #31
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d06e      	beq.n	8004c14 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a69      	ldr	r2, [pc, #420]	; (8004ce0 <HAL_DMA_IRQHandler+0x3f8>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d04a      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0x2ee>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a67      	ldr	r2, [pc, #412]	; (8004ce4 <HAL_DMA_IRQHandler+0x3fc>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d045      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0x2ee>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a66      	ldr	r2, [pc, #408]	; (8004ce8 <HAL_DMA_IRQHandler+0x400>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d040      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0x2ee>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a64      	ldr	r2, [pc, #400]	; (8004cec <HAL_DMA_IRQHandler+0x404>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d03b      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0x2ee>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a63      	ldr	r2, [pc, #396]	; (8004cf0 <HAL_DMA_IRQHandler+0x408>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d036      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0x2ee>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a61      	ldr	r2, [pc, #388]	; (8004cf4 <HAL_DMA_IRQHandler+0x40c>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d031      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0x2ee>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a60      	ldr	r2, [pc, #384]	; (8004cf8 <HAL_DMA_IRQHandler+0x410>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d02c      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0x2ee>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a5e      	ldr	r2, [pc, #376]	; (8004cfc <HAL_DMA_IRQHandler+0x414>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d027      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0x2ee>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a5d      	ldr	r2, [pc, #372]	; (8004d00 <HAL_DMA_IRQHandler+0x418>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d022      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0x2ee>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a5b      	ldr	r2, [pc, #364]	; (8004d04 <HAL_DMA_IRQHandler+0x41c>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d01d      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0x2ee>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a5a      	ldr	r2, [pc, #360]	; (8004d08 <HAL_DMA_IRQHandler+0x420>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d018      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0x2ee>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a58      	ldr	r2, [pc, #352]	; (8004d0c <HAL_DMA_IRQHandler+0x424>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d013      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0x2ee>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a57      	ldr	r2, [pc, #348]	; (8004d10 <HAL_DMA_IRQHandler+0x428>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d00e      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0x2ee>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a55      	ldr	r2, [pc, #340]	; (8004d14 <HAL_DMA_IRQHandler+0x42c>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d009      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0x2ee>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a54      	ldr	r2, [pc, #336]	; (8004d18 <HAL_DMA_IRQHandler+0x430>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d004      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0x2ee>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a52      	ldr	r2, [pc, #328]	; (8004d1c <HAL_DMA_IRQHandler+0x434>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d10a      	bne.n	8004bec <HAL_DMA_IRQHandler+0x304>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	bf14      	ite	ne
 8004be4:	2301      	movne	r3, #1
 8004be6:	2300      	moveq	r3, #0
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	e003      	b.n	8004bf4 <HAL_DMA_IRQHandler+0x30c>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00d      	beq.n	8004c14 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bfc:	f003 031f 	and.w	r3, r3, #31
 8004c00:	2201      	movs	r2, #1
 8004c02:	409a      	lsls	r2, r3
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c0c:	f043 0202 	orr.w	r2, r3, #2
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c18:	f003 031f 	and.w	r3, r3, #31
 8004c1c:	2204      	movs	r2, #4
 8004c1e:	409a      	lsls	r2, r3
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	4013      	ands	r3, r2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 808f 	beq.w	8004d48 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a2c      	ldr	r2, [pc, #176]	; (8004ce0 <HAL_DMA_IRQHandler+0x3f8>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d04a      	beq.n	8004cca <HAL_DMA_IRQHandler+0x3e2>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a2a      	ldr	r2, [pc, #168]	; (8004ce4 <HAL_DMA_IRQHandler+0x3fc>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d045      	beq.n	8004cca <HAL_DMA_IRQHandler+0x3e2>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a29      	ldr	r2, [pc, #164]	; (8004ce8 <HAL_DMA_IRQHandler+0x400>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d040      	beq.n	8004cca <HAL_DMA_IRQHandler+0x3e2>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a27      	ldr	r2, [pc, #156]	; (8004cec <HAL_DMA_IRQHandler+0x404>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d03b      	beq.n	8004cca <HAL_DMA_IRQHandler+0x3e2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a26      	ldr	r2, [pc, #152]	; (8004cf0 <HAL_DMA_IRQHandler+0x408>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d036      	beq.n	8004cca <HAL_DMA_IRQHandler+0x3e2>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a24      	ldr	r2, [pc, #144]	; (8004cf4 <HAL_DMA_IRQHandler+0x40c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d031      	beq.n	8004cca <HAL_DMA_IRQHandler+0x3e2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a23      	ldr	r2, [pc, #140]	; (8004cf8 <HAL_DMA_IRQHandler+0x410>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d02c      	beq.n	8004cca <HAL_DMA_IRQHandler+0x3e2>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a21      	ldr	r2, [pc, #132]	; (8004cfc <HAL_DMA_IRQHandler+0x414>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d027      	beq.n	8004cca <HAL_DMA_IRQHandler+0x3e2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a20      	ldr	r2, [pc, #128]	; (8004d00 <HAL_DMA_IRQHandler+0x418>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d022      	beq.n	8004cca <HAL_DMA_IRQHandler+0x3e2>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a1e      	ldr	r2, [pc, #120]	; (8004d04 <HAL_DMA_IRQHandler+0x41c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d01d      	beq.n	8004cca <HAL_DMA_IRQHandler+0x3e2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a1d      	ldr	r2, [pc, #116]	; (8004d08 <HAL_DMA_IRQHandler+0x420>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d018      	beq.n	8004cca <HAL_DMA_IRQHandler+0x3e2>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a1b      	ldr	r2, [pc, #108]	; (8004d0c <HAL_DMA_IRQHandler+0x424>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d013      	beq.n	8004cca <HAL_DMA_IRQHandler+0x3e2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a1a      	ldr	r2, [pc, #104]	; (8004d10 <HAL_DMA_IRQHandler+0x428>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d00e      	beq.n	8004cca <HAL_DMA_IRQHandler+0x3e2>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a18      	ldr	r2, [pc, #96]	; (8004d14 <HAL_DMA_IRQHandler+0x42c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d009      	beq.n	8004cca <HAL_DMA_IRQHandler+0x3e2>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a17      	ldr	r2, [pc, #92]	; (8004d18 <HAL_DMA_IRQHandler+0x430>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d004      	beq.n	8004cca <HAL_DMA_IRQHandler+0x3e2>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a15      	ldr	r2, [pc, #84]	; (8004d1c <HAL_DMA_IRQHandler+0x434>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d12a      	bne.n	8004d20 <HAL_DMA_IRQHandler+0x438>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	bf14      	ite	ne
 8004cd8:	2301      	movne	r3, #1
 8004cda:	2300      	moveq	r3, #0
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	e023      	b.n	8004d28 <HAL_DMA_IRQHandler+0x440>
 8004ce0:	40020010 	.word	0x40020010
 8004ce4:	40020028 	.word	0x40020028
 8004ce8:	40020040 	.word	0x40020040
 8004cec:	40020058 	.word	0x40020058
 8004cf0:	40020070 	.word	0x40020070
 8004cf4:	40020088 	.word	0x40020088
 8004cf8:	400200a0 	.word	0x400200a0
 8004cfc:	400200b8 	.word	0x400200b8
 8004d00:	40020410 	.word	0x40020410
 8004d04:	40020428 	.word	0x40020428
 8004d08:	40020440 	.word	0x40020440
 8004d0c:	40020458 	.word	0x40020458
 8004d10:	40020470 	.word	0x40020470
 8004d14:	40020488 	.word	0x40020488
 8004d18:	400204a0 	.word	0x400204a0
 8004d1c:	400204b8 	.word	0x400204b8
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2300      	movs	r3, #0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00d      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d30:	f003 031f 	and.w	r3, r3, #31
 8004d34:	2204      	movs	r2, #4
 8004d36:	409a      	lsls	r2, r3
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d40:	f043 0204 	orr.w	r2, r3, #4
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d4c:	f003 031f 	and.w	r3, r3, #31
 8004d50:	2210      	movs	r2, #16
 8004d52:	409a      	lsls	r2, r3
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	4013      	ands	r3, r2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f000 80a6 	beq.w	8004eaa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a85      	ldr	r2, [pc, #532]	; (8004f78 <HAL_DMA_IRQHandler+0x690>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d04a      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x516>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a83      	ldr	r2, [pc, #524]	; (8004f7c <HAL_DMA_IRQHandler+0x694>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d045      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x516>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a82      	ldr	r2, [pc, #520]	; (8004f80 <HAL_DMA_IRQHandler+0x698>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d040      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x516>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a80      	ldr	r2, [pc, #512]	; (8004f84 <HAL_DMA_IRQHandler+0x69c>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d03b      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x516>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a7f      	ldr	r2, [pc, #508]	; (8004f88 <HAL_DMA_IRQHandler+0x6a0>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d036      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x516>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a7d      	ldr	r2, [pc, #500]	; (8004f8c <HAL_DMA_IRQHandler+0x6a4>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d031      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x516>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a7c      	ldr	r2, [pc, #496]	; (8004f90 <HAL_DMA_IRQHandler+0x6a8>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d02c      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x516>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a7a      	ldr	r2, [pc, #488]	; (8004f94 <HAL_DMA_IRQHandler+0x6ac>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d027      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x516>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a79      	ldr	r2, [pc, #484]	; (8004f98 <HAL_DMA_IRQHandler+0x6b0>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d022      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x516>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a77      	ldr	r2, [pc, #476]	; (8004f9c <HAL_DMA_IRQHandler+0x6b4>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d01d      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x516>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a76      	ldr	r2, [pc, #472]	; (8004fa0 <HAL_DMA_IRQHandler+0x6b8>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d018      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x516>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a74      	ldr	r2, [pc, #464]	; (8004fa4 <HAL_DMA_IRQHandler+0x6bc>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d013      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x516>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a73      	ldr	r2, [pc, #460]	; (8004fa8 <HAL_DMA_IRQHandler+0x6c0>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d00e      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x516>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a71      	ldr	r2, [pc, #452]	; (8004fac <HAL_DMA_IRQHandler+0x6c4>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d009      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x516>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a70      	ldr	r2, [pc, #448]	; (8004fb0 <HAL_DMA_IRQHandler+0x6c8>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d004      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x516>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a6e      	ldr	r2, [pc, #440]	; (8004fb4 <HAL_DMA_IRQHandler+0x6cc>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d10a      	bne.n	8004e14 <HAL_DMA_IRQHandler+0x52c>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0308 	and.w	r3, r3, #8
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	bf14      	ite	ne
 8004e0c:	2301      	movne	r3, #1
 8004e0e:	2300      	moveq	r3, #0
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	e009      	b.n	8004e28 <HAL_DMA_IRQHandler+0x540>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0304 	and.w	r3, r3, #4
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	bf14      	ite	ne
 8004e22:	2301      	movne	r3, #1
 8004e24:	2300      	moveq	r3, #0
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d03e      	beq.n	8004eaa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e30:	f003 031f 	and.w	r3, r3, #31
 8004e34:	2210      	movs	r2, #16
 8004e36:	409a      	lsls	r2, r3
 8004e38:	6a3b      	ldr	r3, [r7, #32]
 8004e3a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d018      	beq.n	8004e7c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d108      	bne.n	8004e6a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d024      	beq.n	8004eaa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	4798      	blx	r3
 8004e68:	e01f      	b.n	8004eaa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d01b      	beq.n	8004eaa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	4798      	blx	r3
 8004e7a:	e016      	b.n	8004eaa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d107      	bne.n	8004e9a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 0208 	bic.w	r2, r2, #8
 8004e98:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eae:	f003 031f 	and.w	r3, r3, #31
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	409a      	lsls	r2, r3
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f000 8110 	beq.w	80050e0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a2c      	ldr	r2, [pc, #176]	; (8004f78 <HAL_DMA_IRQHandler+0x690>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d04a      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x678>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a2b      	ldr	r2, [pc, #172]	; (8004f7c <HAL_DMA_IRQHandler+0x694>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d045      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x678>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a29      	ldr	r2, [pc, #164]	; (8004f80 <HAL_DMA_IRQHandler+0x698>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d040      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x678>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a28      	ldr	r2, [pc, #160]	; (8004f84 <HAL_DMA_IRQHandler+0x69c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d03b      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x678>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a26      	ldr	r2, [pc, #152]	; (8004f88 <HAL_DMA_IRQHandler+0x6a0>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d036      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x678>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a25      	ldr	r2, [pc, #148]	; (8004f8c <HAL_DMA_IRQHandler+0x6a4>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d031      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x678>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a23      	ldr	r2, [pc, #140]	; (8004f90 <HAL_DMA_IRQHandler+0x6a8>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d02c      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x678>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a22      	ldr	r2, [pc, #136]	; (8004f94 <HAL_DMA_IRQHandler+0x6ac>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d027      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x678>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a20      	ldr	r2, [pc, #128]	; (8004f98 <HAL_DMA_IRQHandler+0x6b0>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d022      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x678>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a1f      	ldr	r2, [pc, #124]	; (8004f9c <HAL_DMA_IRQHandler+0x6b4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d01d      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x678>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a1d      	ldr	r2, [pc, #116]	; (8004fa0 <HAL_DMA_IRQHandler+0x6b8>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d018      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x678>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a1c      	ldr	r2, [pc, #112]	; (8004fa4 <HAL_DMA_IRQHandler+0x6bc>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d013      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x678>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a1a      	ldr	r2, [pc, #104]	; (8004fa8 <HAL_DMA_IRQHandler+0x6c0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d00e      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x678>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a19      	ldr	r2, [pc, #100]	; (8004fac <HAL_DMA_IRQHandler+0x6c4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d009      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x678>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a17      	ldr	r2, [pc, #92]	; (8004fb0 <HAL_DMA_IRQHandler+0x6c8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d004      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x678>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a16      	ldr	r2, [pc, #88]	; (8004fb4 <HAL_DMA_IRQHandler+0x6cc>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d12b      	bne.n	8004fb8 <HAL_DMA_IRQHandler+0x6d0>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0310 	and.w	r3, r3, #16
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	bf14      	ite	ne
 8004f6e:	2301      	movne	r3, #1
 8004f70:	2300      	moveq	r3, #0
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	e02a      	b.n	8004fcc <HAL_DMA_IRQHandler+0x6e4>
 8004f76:	bf00      	nop
 8004f78:	40020010 	.word	0x40020010
 8004f7c:	40020028 	.word	0x40020028
 8004f80:	40020040 	.word	0x40020040
 8004f84:	40020058 	.word	0x40020058
 8004f88:	40020070 	.word	0x40020070
 8004f8c:	40020088 	.word	0x40020088
 8004f90:	400200a0 	.word	0x400200a0
 8004f94:	400200b8 	.word	0x400200b8
 8004f98:	40020410 	.word	0x40020410
 8004f9c:	40020428 	.word	0x40020428
 8004fa0:	40020440 	.word	0x40020440
 8004fa4:	40020458 	.word	0x40020458
 8004fa8:	40020470 	.word	0x40020470
 8004fac:	40020488 	.word	0x40020488
 8004fb0:	400204a0 	.word	0x400204a0
 8004fb4:	400204b8 	.word	0x400204b8
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	bf14      	ite	ne
 8004fc6:	2301      	movne	r3, #1
 8004fc8:	2300      	moveq	r3, #0
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 8087 	beq.w	80050e0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd6:	f003 031f 	and.w	r3, r3, #31
 8004fda:	2220      	movs	r2, #32
 8004fdc:	409a      	lsls	r2, r3
 8004fde:	6a3b      	ldr	r3, [r7, #32]
 8004fe0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	d139      	bne.n	8005062 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f022 0216 	bic.w	r2, r2, #22
 8004ffc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	695a      	ldr	r2, [r3, #20]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800500c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	2b00      	cmp	r3, #0
 8005014:	d103      	bne.n	800501e <HAL_DMA_IRQHandler+0x736>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800501a:	2b00      	cmp	r3, #0
 800501c:	d007      	beq.n	800502e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 0208 	bic.w	r2, r2, #8
 800502c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005032:	f003 031f 	and.w	r3, r3, #31
 8005036:	223f      	movs	r2, #63	; 0x3f
 8005038:	409a      	lsls	r2, r3
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005052:	2b00      	cmp	r3, #0
 8005054:	f000 834a 	beq.w	80056ec <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	4798      	blx	r3
          }
          return;
 8005060:	e344      	b.n	80056ec <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d018      	beq.n	80050a2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d108      	bne.n	8005090 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005082:	2b00      	cmp	r3, #0
 8005084:	d02c      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	4798      	blx	r3
 800508e:	e027      	b.n	80050e0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005094:	2b00      	cmp	r3, #0
 8005096:	d023      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	4798      	blx	r3
 80050a0:	e01e      	b.n	80050e0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10f      	bne.n	80050d0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 0210 	bic.w	r2, r2, #16
 80050be:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 8306 	beq.w	80056f6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 8088 	beq.w	8005208 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2204      	movs	r2, #4
 80050fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a7a      	ldr	r2, [pc, #488]	; (80052f0 <HAL_DMA_IRQHandler+0xa08>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d04a      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x8b8>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a79      	ldr	r2, [pc, #484]	; (80052f4 <HAL_DMA_IRQHandler+0xa0c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d045      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x8b8>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a77      	ldr	r2, [pc, #476]	; (80052f8 <HAL_DMA_IRQHandler+0xa10>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d040      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x8b8>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a76      	ldr	r2, [pc, #472]	; (80052fc <HAL_DMA_IRQHandler+0xa14>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d03b      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x8b8>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a74      	ldr	r2, [pc, #464]	; (8005300 <HAL_DMA_IRQHandler+0xa18>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d036      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x8b8>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a73      	ldr	r2, [pc, #460]	; (8005304 <HAL_DMA_IRQHandler+0xa1c>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d031      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x8b8>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a71      	ldr	r2, [pc, #452]	; (8005308 <HAL_DMA_IRQHandler+0xa20>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d02c      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x8b8>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a70      	ldr	r2, [pc, #448]	; (800530c <HAL_DMA_IRQHandler+0xa24>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d027      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x8b8>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a6e      	ldr	r2, [pc, #440]	; (8005310 <HAL_DMA_IRQHandler+0xa28>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d022      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x8b8>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a6d      	ldr	r2, [pc, #436]	; (8005314 <HAL_DMA_IRQHandler+0xa2c>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d01d      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x8b8>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a6b      	ldr	r2, [pc, #428]	; (8005318 <HAL_DMA_IRQHandler+0xa30>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d018      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x8b8>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a6a      	ldr	r2, [pc, #424]	; (800531c <HAL_DMA_IRQHandler+0xa34>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d013      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x8b8>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a68      	ldr	r2, [pc, #416]	; (8005320 <HAL_DMA_IRQHandler+0xa38>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d00e      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x8b8>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a67      	ldr	r2, [pc, #412]	; (8005324 <HAL_DMA_IRQHandler+0xa3c>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d009      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x8b8>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a65      	ldr	r2, [pc, #404]	; (8005328 <HAL_DMA_IRQHandler+0xa40>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d004      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x8b8>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a64      	ldr	r2, [pc, #400]	; (800532c <HAL_DMA_IRQHandler+0xa44>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d108      	bne.n	80051b2 <HAL_DMA_IRQHandler+0x8ca>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f022 0201 	bic.w	r2, r2, #1
 80051ae:	601a      	str	r2, [r3, #0]
 80051b0:	e007      	b.n	80051c2 <HAL_DMA_IRQHandler+0x8da>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f022 0201 	bic.w	r2, r2, #1
 80051c0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	3301      	adds	r3, #1
 80051c6:	60fb      	str	r3, [r7, #12]
 80051c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d307      	bcc.n	80051de <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0301 	and.w	r3, r3, #1
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1f2      	bne.n	80051c2 <HAL_DMA_IRQHandler+0x8da>
 80051dc:	e000      	b.n	80051e0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80051de:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d004      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2203      	movs	r2, #3
 80051f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80051f6:	e003      	b.n	8005200 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 8272 	beq.w	80056f6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	4798      	blx	r3
 800521a:	e26c      	b.n	80056f6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a43      	ldr	r2, [pc, #268]	; (8005330 <HAL_DMA_IRQHandler+0xa48>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d022      	beq.n	800526c <HAL_DMA_IRQHandler+0x984>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a42      	ldr	r2, [pc, #264]	; (8005334 <HAL_DMA_IRQHandler+0xa4c>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d01d      	beq.n	800526c <HAL_DMA_IRQHandler+0x984>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a40      	ldr	r2, [pc, #256]	; (8005338 <HAL_DMA_IRQHandler+0xa50>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d018      	beq.n	800526c <HAL_DMA_IRQHandler+0x984>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a3f      	ldr	r2, [pc, #252]	; (800533c <HAL_DMA_IRQHandler+0xa54>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d013      	beq.n	800526c <HAL_DMA_IRQHandler+0x984>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a3d      	ldr	r2, [pc, #244]	; (8005340 <HAL_DMA_IRQHandler+0xa58>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d00e      	beq.n	800526c <HAL_DMA_IRQHandler+0x984>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a3c      	ldr	r2, [pc, #240]	; (8005344 <HAL_DMA_IRQHandler+0xa5c>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d009      	beq.n	800526c <HAL_DMA_IRQHandler+0x984>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a3a      	ldr	r2, [pc, #232]	; (8005348 <HAL_DMA_IRQHandler+0xa60>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d004      	beq.n	800526c <HAL_DMA_IRQHandler+0x984>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a39      	ldr	r2, [pc, #228]	; (800534c <HAL_DMA_IRQHandler+0xa64>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d101      	bne.n	8005270 <HAL_DMA_IRQHandler+0x988>
 800526c:	2301      	movs	r3, #1
 800526e:	e000      	b.n	8005272 <HAL_DMA_IRQHandler+0x98a>
 8005270:	2300      	movs	r3, #0
 8005272:	2b00      	cmp	r3, #0
 8005274:	f000 823f 	beq.w	80056f6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005284:	f003 031f 	and.w	r3, r3, #31
 8005288:	2204      	movs	r2, #4
 800528a:	409a      	lsls	r2, r3
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	4013      	ands	r3, r2
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 80cd 	beq.w	8005430 <HAL_DMA_IRQHandler+0xb48>
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	f003 0304 	and.w	r3, r3, #4
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 80c7 	beq.w	8005430 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052a6:	f003 031f 	and.w	r3, r3, #31
 80052aa:	2204      	movs	r2, #4
 80052ac:	409a      	lsls	r2, r3
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d049      	beq.n	8005350 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d109      	bne.n	80052da <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 8210 	beq.w	80056f0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052d8:	e20a      	b.n	80056f0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f000 8206 	beq.w	80056f0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052ec:	e200      	b.n	80056f0 <HAL_DMA_IRQHandler+0xe08>
 80052ee:	bf00      	nop
 80052f0:	40020010 	.word	0x40020010
 80052f4:	40020028 	.word	0x40020028
 80052f8:	40020040 	.word	0x40020040
 80052fc:	40020058 	.word	0x40020058
 8005300:	40020070 	.word	0x40020070
 8005304:	40020088 	.word	0x40020088
 8005308:	400200a0 	.word	0x400200a0
 800530c:	400200b8 	.word	0x400200b8
 8005310:	40020410 	.word	0x40020410
 8005314:	40020428 	.word	0x40020428
 8005318:	40020440 	.word	0x40020440
 800531c:	40020458 	.word	0x40020458
 8005320:	40020470 	.word	0x40020470
 8005324:	40020488 	.word	0x40020488
 8005328:	400204a0 	.word	0x400204a0
 800532c:	400204b8 	.word	0x400204b8
 8005330:	58025408 	.word	0x58025408
 8005334:	5802541c 	.word	0x5802541c
 8005338:	58025430 	.word	0x58025430
 800533c:	58025444 	.word	0x58025444
 8005340:	58025458 	.word	0x58025458
 8005344:	5802546c 	.word	0x5802546c
 8005348:	58025480 	.word	0x58025480
 800534c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	f003 0320 	and.w	r3, r3, #32
 8005356:	2b00      	cmp	r3, #0
 8005358:	d160      	bne.n	800541c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a8c      	ldr	r2, [pc, #560]	; (8005590 <HAL_DMA_IRQHandler+0xca8>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d04a      	beq.n	80053fa <HAL_DMA_IRQHandler+0xb12>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a8a      	ldr	r2, [pc, #552]	; (8005594 <HAL_DMA_IRQHandler+0xcac>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d045      	beq.n	80053fa <HAL_DMA_IRQHandler+0xb12>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a89      	ldr	r2, [pc, #548]	; (8005598 <HAL_DMA_IRQHandler+0xcb0>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d040      	beq.n	80053fa <HAL_DMA_IRQHandler+0xb12>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a87      	ldr	r2, [pc, #540]	; (800559c <HAL_DMA_IRQHandler+0xcb4>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d03b      	beq.n	80053fa <HAL_DMA_IRQHandler+0xb12>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a86      	ldr	r2, [pc, #536]	; (80055a0 <HAL_DMA_IRQHandler+0xcb8>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d036      	beq.n	80053fa <HAL_DMA_IRQHandler+0xb12>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a84      	ldr	r2, [pc, #528]	; (80055a4 <HAL_DMA_IRQHandler+0xcbc>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d031      	beq.n	80053fa <HAL_DMA_IRQHandler+0xb12>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a83      	ldr	r2, [pc, #524]	; (80055a8 <HAL_DMA_IRQHandler+0xcc0>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d02c      	beq.n	80053fa <HAL_DMA_IRQHandler+0xb12>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a81      	ldr	r2, [pc, #516]	; (80055ac <HAL_DMA_IRQHandler+0xcc4>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d027      	beq.n	80053fa <HAL_DMA_IRQHandler+0xb12>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a80      	ldr	r2, [pc, #512]	; (80055b0 <HAL_DMA_IRQHandler+0xcc8>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d022      	beq.n	80053fa <HAL_DMA_IRQHandler+0xb12>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a7e      	ldr	r2, [pc, #504]	; (80055b4 <HAL_DMA_IRQHandler+0xccc>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d01d      	beq.n	80053fa <HAL_DMA_IRQHandler+0xb12>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a7d      	ldr	r2, [pc, #500]	; (80055b8 <HAL_DMA_IRQHandler+0xcd0>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d018      	beq.n	80053fa <HAL_DMA_IRQHandler+0xb12>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a7b      	ldr	r2, [pc, #492]	; (80055bc <HAL_DMA_IRQHandler+0xcd4>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d013      	beq.n	80053fa <HAL_DMA_IRQHandler+0xb12>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a7a      	ldr	r2, [pc, #488]	; (80055c0 <HAL_DMA_IRQHandler+0xcd8>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00e      	beq.n	80053fa <HAL_DMA_IRQHandler+0xb12>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a78      	ldr	r2, [pc, #480]	; (80055c4 <HAL_DMA_IRQHandler+0xcdc>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d009      	beq.n	80053fa <HAL_DMA_IRQHandler+0xb12>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a77      	ldr	r2, [pc, #476]	; (80055c8 <HAL_DMA_IRQHandler+0xce0>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d004      	beq.n	80053fa <HAL_DMA_IRQHandler+0xb12>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a75      	ldr	r2, [pc, #468]	; (80055cc <HAL_DMA_IRQHandler+0xce4>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d108      	bne.n	800540c <HAL_DMA_IRQHandler+0xb24>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 0208 	bic.w	r2, r2, #8
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	e007      	b.n	800541c <HAL_DMA_IRQHandler+0xb34>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0204 	bic.w	r2, r2, #4
 800541a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005420:	2b00      	cmp	r3, #0
 8005422:	f000 8165 	beq.w	80056f0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800542e:	e15f      	b.n	80056f0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005434:	f003 031f 	and.w	r3, r3, #31
 8005438:	2202      	movs	r2, #2
 800543a:	409a      	lsls	r2, r3
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	4013      	ands	r3, r2
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 80c5 	beq.w	80055d0 <HAL_DMA_IRQHandler+0xce8>
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 80bf 	beq.w	80055d0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005456:	f003 031f 	and.w	r3, r3, #31
 800545a:	2202      	movs	r2, #2
 800545c:	409a      	lsls	r2, r3
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d018      	beq.n	800549e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d109      	bne.n	800548a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 813a 	beq.w	80056f4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005488:	e134      	b.n	80056f4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 8130 	beq.w	80056f4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800549c:	e12a      	b.n	80056f4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f003 0320 	and.w	r3, r3, #32
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d168      	bne.n	800557a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a38      	ldr	r2, [pc, #224]	; (8005590 <HAL_DMA_IRQHandler+0xca8>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d04a      	beq.n	8005548 <HAL_DMA_IRQHandler+0xc60>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a37      	ldr	r2, [pc, #220]	; (8005594 <HAL_DMA_IRQHandler+0xcac>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d045      	beq.n	8005548 <HAL_DMA_IRQHandler+0xc60>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a35      	ldr	r2, [pc, #212]	; (8005598 <HAL_DMA_IRQHandler+0xcb0>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d040      	beq.n	8005548 <HAL_DMA_IRQHandler+0xc60>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a34      	ldr	r2, [pc, #208]	; (800559c <HAL_DMA_IRQHandler+0xcb4>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d03b      	beq.n	8005548 <HAL_DMA_IRQHandler+0xc60>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a32      	ldr	r2, [pc, #200]	; (80055a0 <HAL_DMA_IRQHandler+0xcb8>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d036      	beq.n	8005548 <HAL_DMA_IRQHandler+0xc60>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a31      	ldr	r2, [pc, #196]	; (80055a4 <HAL_DMA_IRQHandler+0xcbc>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d031      	beq.n	8005548 <HAL_DMA_IRQHandler+0xc60>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a2f      	ldr	r2, [pc, #188]	; (80055a8 <HAL_DMA_IRQHandler+0xcc0>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d02c      	beq.n	8005548 <HAL_DMA_IRQHandler+0xc60>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a2e      	ldr	r2, [pc, #184]	; (80055ac <HAL_DMA_IRQHandler+0xcc4>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d027      	beq.n	8005548 <HAL_DMA_IRQHandler+0xc60>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a2c      	ldr	r2, [pc, #176]	; (80055b0 <HAL_DMA_IRQHandler+0xcc8>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d022      	beq.n	8005548 <HAL_DMA_IRQHandler+0xc60>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a2b      	ldr	r2, [pc, #172]	; (80055b4 <HAL_DMA_IRQHandler+0xccc>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d01d      	beq.n	8005548 <HAL_DMA_IRQHandler+0xc60>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a29      	ldr	r2, [pc, #164]	; (80055b8 <HAL_DMA_IRQHandler+0xcd0>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d018      	beq.n	8005548 <HAL_DMA_IRQHandler+0xc60>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a28      	ldr	r2, [pc, #160]	; (80055bc <HAL_DMA_IRQHandler+0xcd4>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d013      	beq.n	8005548 <HAL_DMA_IRQHandler+0xc60>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a26      	ldr	r2, [pc, #152]	; (80055c0 <HAL_DMA_IRQHandler+0xcd8>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d00e      	beq.n	8005548 <HAL_DMA_IRQHandler+0xc60>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a25      	ldr	r2, [pc, #148]	; (80055c4 <HAL_DMA_IRQHandler+0xcdc>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d009      	beq.n	8005548 <HAL_DMA_IRQHandler+0xc60>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a23      	ldr	r2, [pc, #140]	; (80055c8 <HAL_DMA_IRQHandler+0xce0>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d004      	beq.n	8005548 <HAL_DMA_IRQHandler+0xc60>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a22      	ldr	r2, [pc, #136]	; (80055cc <HAL_DMA_IRQHandler+0xce4>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d108      	bne.n	800555a <HAL_DMA_IRQHandler+0xc72>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0214 	bic.w	r2, r2, #20
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	e007      	b.n	800556a <HAL_DMA_IRQHandler+0xc82>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 020a 	bic.w	r2, r2, #10
 8005568:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800557e:	2b00      	cmp	r3, #0
 8005580:	f000 80b8 	beq.w	80056f4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800558c:	e0b2      	b.n	80056f4 <HAL_DMA_IRQHandler+0xe0c>
 800558e:	bf00      	nop
 8005590:	40020010 	.word	0x40020010
 8005594:	40020028 	.word	0x40020028
 8005598:	40020040 	.word	0x40020040
 800559c:	40020058 	.word	0x40020058
 80055a0:	40020070 	.word	0x40020070
 80055a4:	40020088 	.word	0x40020088
 80055a8:	400200a0 	.word	0x400200a0
 80055ac:	400200b8 	.word	0x400200b8
 80055b0:	40020410 	.word	0x40020410
 80055b4:	40020428 	.word	0x40020428
 80055b8:	40020440 	.word	0x40020440
 80055bc:	40020458 	.word	0x40020458
 80055c0:	40020470 	.word	0x40020470
 80055c4:	40020488 	.word	0x40020488
 80055c8:	400204a0 	.word	0x400204a0
 80055cc:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d4:	f003 031f 	and.w	r3, r3, #31
 80055d8:	2208      	movs	r2, #8
 80055da:	409a      	lsls	r2, r3
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	4013      	ands	r3, r2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 8088 	beq.w	80056f6 <HAL_DMA_IRQHandler+0xe0e>
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	f003 0308 	and.w	r3, r3, #8
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f000 8082 	beq.w	80056f6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a41      	ldr	r2, [pc, #260]	; (80056fc <HAL_DMA_IRQHandler+0xe14>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d04a      	beq.n	8005692 <HAL_DMA_IRQHandler+0xdaa>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a3f      	ldr	r2, [pc, #252]	; (8005700 <HAL_DMA_IRQHandler+0xe18>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d045      	beq.n	8005692 <HAL_DMA_IRQHandler+0xdaa>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a3e      	ldr	r2, [pc, #248]	; (8005704 <HAL_DMA_IRQHandler+0xe1c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d040      	beq.n	8005692 <HAL_DMA_IRQHandler+0xdaa>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a3c      	ldr	r2, [pc, #240]	; (8005708 <HAL_DMA_IRQHandler+0xe20>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d03b      	beq.n	8005692 <HAL_DMA_IRQHandler+0xdaa>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a3b      	ldr	r2, [pc, #236]	; (800570c <HAL_DMA_IRQHandler+0xe24>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d036      	beq.n	8005692 <HAL_DMA_IRQHandler+0xdaa>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a39      	ldr	r2, [pc, #228]	; (8005710 <HAL_DMA_IRQHandler+0xe28>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d031      	beq.n	8005692 <HAL_DMA_IRQHandler+0xdaa>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a38      	ldr	r2, [pc, #224]	; (8005714 <HAL_DMA_IRQHandler+0xe2c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d02c      	beq.n	8005692 <HAL_DMA_IRQHandler+0xdaa>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a36      	ldr	r2, [pc, #216]	; (8005718 <HAL_DMA_IRQHandler+0xe30>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d027      	beq.n	8005692 <HAL_DMA_IRQHandler+0xdaa>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a35      	ldr	r2, [pc, #212]	; (800571c <HAL_DMA_IRQHandler+0xe34>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d022      	beq.n	8005692 <HAL_DMA_IRQHandler+0xdaa>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a33      	ldr	r2, [pc, #204]	; (8005720 <HAL_DMA_IRQHandler+0xe38>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d01d      	beq.n	8005692 <HAL_DMA_IRQHandler+0xdaa>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a32      	ldr	r2, [pc, #200]	; (8005724 <HAL_DMA_IRQHandler+0xe3c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d018      	beq.n	8005692 <HAL_DMA_IRQHandler+0xdaa>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a30      	ldr	r2, [pc, #192]	; (8005728 <HAL_DMA_IRQHandler+0xe40>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d013      	beq.n	8005692 <HAL_DMA_IRQHandler+0xdaa>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a2f      	ldr	r2, [pc, #188]	; (800572c <HAL_DMA_IRQHandler+0xe44>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d00e      	beq.n	8005692 <HAL_DMA_IRQHandler+0xdaa>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a2d      	ldr	r2, [pc, #180]	; (8005730 <HAL_DMA_IRQHandler+0xe48>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d009      	beq.n	8005692 <HAL_DMA_IRQHandler+0xdaa>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a2c      	ldr	r2, [pc, #176]	; (8005734 <HAL_DMA_IRQHandler+0xe4c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d004      	beq.n	8005692 <HAL_DMA_IRQHandler+0xdaa>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a2a      	ldr	r2, [pc, #168]	; (8005738 <HAL_DMA_IRQHandler+0xe50>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d108      	bne.n	80056a4 <HAL_DMA_IRQHandler+0xdbc>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 021c 	bic.w	r2, r2, #28
 80056a0:	601a      	str	r2, [r3, #0]
 80056a2:	e007      	b.n	80056b4 <HAL_DMA_IRQHandler+0xdcc>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 020e 	bic.w	r2, r2, #14
 80056b2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b8:	f003 031f 	and.w	r3, r3, #31
 80056bc:	2201      	movs	r2, #1
 80056be:	409a      	lsls	r2, r3
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d009      	beq.n	80056f6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	4798      	blx	r3
 80056ea:	e004      	b.n	80056f6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80056ec:	bf00      	nop
 80056ee:	e002      	b.n	80056f6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056f0:	bf00      	nop
 80056f2:	e000      	b.n	80056f6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056f4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80056f6:	3728      	adds	r7, #40	; 0x28
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	40020010 	.word	0x40020010
 8005700:	40020028 	.word	0x40020028
 8005704:	40020040 	.word	0x40020040
 8005708:	40020058 	.word	0x40020058
 800570c:	40020070 	.word	0x40020070
 8005710:	40020088 	.word	0x40020088
 8005714:	400200a0 	.word	0x400200a0
 8005718:	400200b8 	.word	0x400200b8
 800571c:	40020410 	.word	0x40020410
 8005720:	40020428 	.word	0x40020428
 8005724:	40020440 	.word	0x40020440
 8005728:	40020458 	.word	0x40020458
 800572c:	40020470 	.word	0x40020470
 8005730:	40020488 	.word	0x40020488
 8005734:	400204a0 	.word	0x400204a0
 8005738:	400204b8 	.word	0x400204b8

0800573c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005748:	4618      	mov	r0, r3
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
 8005760:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005766:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800576c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a84      	ldr	r2, [pc, #528]	; (8005984 <DMA_SetConfig+0x230>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d072      	beq.n	800585e <DMA_SetConfig+0x10a>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a82      	ldr	r2, [pc, #520]	; (8005988 <DMA_SetConfig+0x234>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d06d      	beq.n	800585e <DMA_SetConfig+0x10a>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a81      	ldr	r2, [pc, #516]	; (800598c <DMA_SetConfig+0x238>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d068      	beq.n	800585e <DMA_SetConfig+0x10a>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a7f      	ldr	r2, [pc, #508]	; (8005990 <DMA_SetConfig+0x23c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d063      	beq.n	800585e <DMA_SetConfig+0x10a>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a7e      	ldr	r2, [pc, #504]	; (8005994 <DMA_SetConfig+0x240>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d05e      	beq.n	800585e <DMA_SetConfig+0x10a>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a7c      	ldr	r2, [pc, #496]	; (8005998 <DMA_SetConfig+0x244>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d059      	beq.n	800585e <DMA_SetConfig+0x10a>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a7b      	ldr	r2, [pc, #492]	; (800599c <DMA_SetConfig+0x248>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d054      	beq.n	800585e <DMA_SetConfig+0x10a>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a79      	ldr	r2, [pc, #484]	; (80059a0 <DMA_SetConfig+0x24c>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d04f      	beq.n	800585e <DMA_SetConfig+0x10a>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a78      	ldr	r2, [pc, #480]	; (80059a4 <DMA_SetConfig+0x250>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d04a      	beq.n	800585e <DMA_SetConfig+0x10a>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a76      	ldr	r2, [pc, #472]	; (80059a8 <DMA_SetConfig+0x254>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d045      	beq.n	800585e <DMA_SetConfig+0x10a>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a75      	ldr	r2, [pc, #468]	; (80059ac <DMA_SetConfig+0x258>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d040      	beq.n	800585e <DMA_SetConfig+0x10a>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a73      	ldr	r2, [pc, #460]	; (80059b0 <DMA_SetConfig+0x25c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d03b      	beq.n	800585e <DMA_SetConfig+0x10a>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a72      	ldr	r2, [pc, #456]	; (80059b4 <DMA_SetConfig+0x260>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d036      	beq.n	800585e <DMA_SetConfig+0x10a>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a70      	ldr	r2, [pc, #448]	; (80059b8 <DMA_SetConfig+0x264>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d031      	beq.n	800585e <DMA_SetConfig+0x10a>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a6f      	ldr	r2, [pc, #444]	; (80059bc <DMA_SetConfig+0x268>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d02c      	beq.n	800585e <DMA_SetConfig+0x10a>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a6d      	ldr	r2, [pc, #436]	; (80059c0 <DMA_SetConfig+0x26c>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d027      	beq.n	800585e <DMA_SetConfig+0x10a>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a6c      	ldr	r2, [pc, #432]	; (80059c4 <DMA_SetConfig+0x270>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d022      	beq.n	800585e <DMA_SetConfig+0x10a>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a6a      	ldr	r2, [pc, #424]	; (80059c8 <DMA_SetConfig+0x274>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d01d      	beq.n	800585e <DMA_SetConfig+0x10a>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a69      	ldr	r2, [pc, #420]	; (80059cc <DMA_SetConfig+0x278>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d018      	beq.n	800585e <DMA_SetConfig+0x10a>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a67      	ldr	r2, [pc, #412]	; (80059d0 <DMA_SetConfig+0x27c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d013      	beq.n	800585e <DMA_SetConfig+0x10a>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a66      	ldr	r2, [pc, #408]	; (80059d4 <DMA_SetConfig+0x280>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d00e      	beq.n	800585e <DMA_SetConfig+0x10a>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a64      	ldr	r2, [pc, #400]	; (80059d8 <DMA_SetConfig+0x284>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d009      	beq.n	800585e <DMA_SetConfig+0x10a>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a63      	ldr	r2, [pc, #396]	; (80059dc <DMA_SetConfig+0x288>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d004      	beq.n	800585e <DMA_SetConfig+0x10a>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a61      	ldr	r2, [pc, #388]	; (80059e0 <DMA_SetConfig+0x28c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d101      	bne.n	8005862 <DMA_SetConfig+0x10e>
 800585e:	2301      	movs	r3, #1
 8005860:	e000      	b.n	8005864 <DMA_SetConfig+0x110>
 8005862:	2300      	movs	r3, #0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00d      	beq.n	8005884 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005870:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005876:	2b00      	cmp	r3, #0
 8005878:	d004      	beq.n	8005884 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005882:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a3e      	ldr	r2, [pc, #248]	; (8005984 <DMA_SetConfig+0x230>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d04a      	beq.n	8005924 <DMA_SetConfig+0x1d0>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a3d      	ldr	r2, [pc, #244]	; (8005988 <DMA_SetConfig+0x234>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d045      	beq.n	8005924 <DMA_SetConfig+0x1d0>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a3b      	ldr	r2, [pc, #236]	; (800598c <DMA_SetConfig+0x238>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d040      	beq.n	8005924 <DMA_SetConfig+0x1d0>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a3a      	ldr	r2, [pc, #232]	; (8005990 <DMA_SetConfig+0x23c>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d03b      	beq.n	8005924 <DMA_SetConfig+0x1d0>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a38      	ldr	r2, [pc, #224]	; (8005994 <DMA_SetConfig+0x240>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d036      	beq.n	8005924 <DMA_SetConfig+0x1d0>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a37      	ldr	r2, [pc, #220]	; (8005998 <DMA_SetConfig+0x244>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d031      	beq.n	8005924 <DMA_SetConfig+0x1d0>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a35      	ldr	r2, [pc, #212]	; (800599c <DMA_SetConfig+0x248>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d02c      	beq.n	8005924 <DMA_SetConfig+0x1d0>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a34      	ldr	r2, [pc, #208]	; (80059a0 <DMA_SetConfig+0x24c>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d027      	beq.n	8005924 <DMA_SetConfig+0x1d0>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a32      	ldr	r2, [pc, #200]	; (80059a4 <DMA_SetConfig+0x250>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d022      	beq.n	8005924 <DMA_SetConfig+0x1d0>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a31      	ldr	r2, [pc, #196]	; (80059a8 <DMA_SetConfig+0x254>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d01d      	beq.n	8005924 <DMA_SetConfig+0x1d0>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a2f      	ldr	r2, [pc, #188]	; (80059ac <DMA_SetConfig+0x258>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d018      	beq.n	8005924 <DMA_SetConfig+0x1d0>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a2e      	ldr	r2, [pc, #184]	; (80059b0 <DMA_SetConfig+0x25c>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d013      	beq.n	8005924 <DMA_SetConfig+0x1d0>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a2c      	ldr	r2, [pc, #176]	; (80059b4 <DMA_SetConfig+0x260>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d00e      	beq.n	8005924 <DMA_SetConfig+0x1d0>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a2b      	ldr	r2, [pc, #172]	; (80059b8 <DMA_SetConfig+0x264>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d009      	beq.n	8005924 <DMA_SetConfig+0x1d0>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a29      	ldr	r2, [pc, #164]	; (80059bc <DMA_SetConfig+0x268>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d004      	beq.n	8005924 <DMA_SetConfig+0x1d0>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a28      	ldr	r2, [pc, #160]	; (80059c0 <DMA_SetConfig+0x26c>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d101      	bne.n	8005928 <DMA_SetConfig+0x1d4>
 8005924:	2301      	movs	r3, #1
 8005926:	e000      	b.n	800592a <DMA_SetConfig+0x1d6>
 8005928:	2300      	movs	r3, #0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d05a      	beq.n	80059e4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005932:	f003 031f 	and.w	r3, r3, #31
 8005936:	223f      	movs	r2, #63	; 0x3f
 8005938:	409a      	lsls	r2, r3
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800594c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	2b40      	cmp	r3, #64	; 0x40
 800595c:	d108      	bne.n	8005970 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800596e:	e087      	b.n	8005a80 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	60da      	str	r2, [r3, #12]
}
 8005980:	e07e      	b.n	8005a80 <DMA_SetConfig+0x32c>
 8005982:	bf00      	nop
 8005984:	40020010 	.word	0x40020010
 8005988:	40020028 	.word	0x40020028
 800598c:	40020040 	.word	0x40020040
 8005990:	40020058 	.word	0x40020058
 8005994:	40020070 	.word	0x40020070
 8005998:	40020088 	.word	0x40020088
 800599c:	400200a0 	.word	0x400200a0
 80059a0:	400200b8 	.word	0x400200b8
 80059a4:	40020410 	.word	0x40020410
 80059a8:	40020428 	.word	0x40020428
 80059ac:	40020440 	.word	0x40020440
 80059b0:	40020458 	.word	0x40020458
 80059b4:	40020470 	.word	0x40020470
 80059b8:	40020488 	.word	0x40020488
 80059bc:	400204a0 	.word	0x400204a0
 80059c0:	400204b8 	.word	0x400204b8
 80059c4:	58025408 	.word	0x58025408
 80059c8:	5802541c 	.word	0x5802541c
 80059cc:	58025430 	.word	0x58025430
 80059d0:	58025444 	.word	0x58025444
 80059d4:	58025458 	.word	0x58025458
 80059d8:	5802546c 	.word	0x5802546c
 80059dc:	58025480 	.word	0x58025480
 80059e0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a28      	ldr	r2, [pc, #160]	; (8005a8c <DMA_SetConfig+0x338>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d022      	beq.n	8005a34 <DMA_SetConfig+0x2e0>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a27      	ldr	r2, [pc, #156]	; (8005a90 <DMA_SetConfig+0x33c>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d01d      	beq.n	8005a34 <DMA_SetConfig+0x2e0>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a25      	ldr	r2, [pc, #148]	; (8005a94 <DMA_SetConfig+0x340>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d018      	beq.n	8005a34 <DMA_SetConfig+0x2e0>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a24      	ldr	r2, [pc, #144]	; (8005a98 <DMA_SetConfig+0x344>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d013      	beq.n	8005a34 <DMA_SetConfig+0x2e0>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a22      	ldr	r2, [pc, #136]	; (8005a9c <DMA_SetConfig+0x348>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d00e      	beq.n	8005a34 <DMA_SetConfig+0x2e0>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a21      	ldr	r2, [pc, #132]	; (8005aa0 <DMA_SetConfig+0x34c>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d009      	beq.n	8005a34 <DMA_SetConfig+0x2e0>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a1f      	ldr	r2, [pc, #124]	; (8005aa4 <DMA_SetConfig+0x350>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d004      	beq.n	8005a34 <DMA_SetConfig+0x2e0>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a1e      	ldr	r2, [pc, #120]	; (8005aa8 <DMA_SetConfig+0x354>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d101      	bne.n	8005a38 <DMA_SetConfig+0x2e4>
 8005a34:	2301      	movs	r3, #1
 8005a36:	e000      	b.n	8005a3a <DMA_SetConfig+0x2e6>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d020      	beq.n	8005a80 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a42:	f003 031f 	and.w	r3, r3, #31
 8005a46:	2201      	movs	r2, #1
 8005a48:	409a      	lsls	r2, r3
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	2b40      	cmp	r3, #64	; 0x40
 8005a5c:	d108      	bne.n	8005a70 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	60da      	str	r2, [r3, #12]
}
 8005a6e:	e007      	b.n	8005a80 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	60da      	str	r2, [r3, #12]
}
 8005a80:	bf00      	nop
 8005a82:	371c      	adds	r7, #28
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	58025408 	.word	0x58025408
 8005a90:	5802541c 	.word	0x5802541c
 8005a94:	58025430 	.word	0x58025430
 8005a98:	58025444 	.word	0x58025444
 8005a9c:	58025458 	.word	0x58025458
 8005aa0:	5802546c 	.word	0x5802546c
 8005aa4:	58025480 	.word	0x58025480
 8005aa8:	58025494 	.word	0x58025494

08005aac <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a42      	ldr	r2, [pc, #264]	; (8005bc4 <DMA_CalcBaseAndBitshift+0x118>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d04a      	beq.n	8005b54 <DMA_CalcBaseAndBitshift+0xa8>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a41      	ldr	r2, [pc, #260]	; (8005bc8 <DMA_CalcBaseAndBitshift+0x11c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d045      	beq.n	8005b54 <DMA_CalcBaseAndBitshift+0xa8>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a3f      	ldr	r2, [pc, #252]	; (8005bcc <DMA_CalcBaseAndBitshift+0x120>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d040      	beq.n	8005b54 <DMA_CalcBaseAndBitshift+0xa8>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a3e      	ldr	r2, [pc, #248]	; (8005bd0 <DMA_CalcBaseAndBitshift+0x124>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d03b      	beq.n	8005b54 <DMA_CalcBaseAndBitshift+0xa8>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a3c      	ldr	r2, [pc, #240]	; (8005bd4 <DMA_CalcBaseAndBitshift+0x128>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d036      	beq.n	8005b54 <DMA_CalcBaseAndBitshift+0xa8>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a3b      	ldr	r2, [pc, #236]	; (8005bd8 <DMA_CalcBaseAndBitshift+0x12c>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d031      	beq.n	8005b54 <DMA_CalcBaseAndBitshift+0xa8>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a39      	ldr	r2, [pc, #228]	; (8005bdc <DMA_CalcBaseAndBitshift+0x130>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d02c      	beq.n	8005b54 <DMA_CalcBaseAndBitshift+0xa8>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a38      	ldr	r2, [pc, #224]	; (8005be0 <DMA_CalcBaseAndBitshift+0x134>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d027      	beq.n	8005b54 <DMA_CalcBaseAndBitshift+0xa8>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a36      	ldr	r2, [pc, #216]	; (8005be4 <DMA_CalcBaseAndBitshift+0x138>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d022      	beq.n	8005b54 <DMA_CalcBaseAndBitshift+0xa8>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a35      	ldr	r2, [pc, #212]	; (8005be8 <DMA_CalcBaseAndBitshift+0x13c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d01d      	beq.n	8005b54 <DMA_CalcBaseAndBitshift+0xa8>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a33      	ldr	r2, [pc, #204]	; (8005bec <DMA_CalcBaseAndBitshift+0x140>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d018      	beq.n	8005b54 <DMA_CalcBaseAndBitshift+0xa8>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a32      	ldr	r2, [pc, #200]	; (8005bf0 <DMA_CalcBaseAndBitshift+0x144>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d013      	beq.n	8005b54 <DMA_CalcBaseAndBitshift+0xa8>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a30      	ldr	r2, [pc, #192]	; (8005bf4 <DMA_CalcBaseAndBitshift+0x148>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d00e      	beq.n	8005b54 <DMA_CalcBaseAndBitshift+0xa8>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a2f      	ldr	r2, [pc, #188]	; (8005bf8 <DMA_CalcBaseAndBitshift+0x14c>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d009      	beq.n	8005b54 <DMA_CalcBaseAndBitshift+0xa8>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a2d      	ldr	r2, [pc, #180]	; (8005bfc <DMA_CalcBaseAndBitshift+0x150>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d004      	beq.n	8005b54 <DMA_CalcBaseAndBitshift+0xa8>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a2c      	ldr	r2, [pc, #176]	; (8005c00 <DMA_CalcBaseAndBitshift+0x154>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d101      	bne.n	8005b58 <DMA_CalcBaseAndBitshift+0xac>
 8005b54:	2301      	movs	r3, #1
 8005b56:	e000      	b.n	8005b5a <DMA_CalcBaseAndBitshift+0xae>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d024      	beq.n	8005ba8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	3b10      	subs	r3, #16
 8005b66:	4a27      	ldr	r2, [pc, #156]	; (8005c04 <DMA_CalcBaseAndBitshift+0x158>)
 8005b68:	fba2 2303 	umull	r2, r3, r2, r3
 8005b6c:	091b      	lsrs	r3, r3, #4
 8005b6e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f003 0307 	and.w	r3, r3, #7
 8005b76:	4a24      	ldr	r2, [pc, #144]	; (8005c08 <DMA_CalcBaseAndBitshift+0x15c>)
 8005b78:	5cd3      	ldrb	r3, [r2, r3]
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2b03      	cmp	r3, #3
 8005b84:	d908      	bls.n	8005b98 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	4b1f      	ldr	r3, [pc, #124]	; (8005c0c <DMA_CalcBaseAndBitshift+0x160>)
 8005b8e:	4013      	ands	r3, r2
 8005b90:	1d1a      	adds	r2, r3, #4
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	659a      	str	r2, [r3, #88]	; 0x58
 8005b96:	e00d      	b.n	8005bb4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	4b1b      	ldr	r3, [pc, #108]	; (8005c0c <DMA_CalcBaseAndBitshift+0x160>)
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	6593      	str	r3, [r2, #88]	; 0x58
 8005ba6:	e005      	b.n	8005bb4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	40020010 	.word	0x40020010
 8005bc8:	40020028 	.word	0x40020028
 8005bcc:	40020040 	.word	0x40020040
 8005bd0:	40020058 	.word	0x40020058
 8005bd4:	40020070 	.word	0x40020070
 8005bd8:	40020088 	.word	0x40020088
 8005bdc:	400200a0 	.word	0x400200a0
 8005be0:	400200b8 	.word	0x400200b8
 8005be4:	40020410 	.word	0x40020410
 8005be8:	40020428 	.word	0x40020428
 8005bec:	40020440 	.word	0x40020440
 8005bf0:	40020458 	.word	0x40020458
 8005bf4:	40020470 	.word	0x40020470
 8005bf8:	40020488 	.word	0x40020488
 8005bfc:	400204a0 	.word	0x400204a0
 8005c00:	400204b8 	.word	0x400204b8
 8005c04:	aaaaaaab 	.word	0xaaaaaaab
 8005c08:	0800ce58 	.word	0x0800ce58
 8005c0c:	fffffc00 	.word	0xfffffc00

08005c10 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d120      	bne.n	8005c66 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c28:	2b03      	cmp	r3, #3
 8005c2a:	d858      	bhi.n	8005cde <DMA_CheckFifoParam+0xce>
 8005c2c:	a201      	add	r2, pc, #4	; (adr r2, 8005c34 <DMA_CheckFifoParam+0x24>)
 8005c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c32:	bf00      	nop
 8005c34:	08005c45 	.word	0x08005c45
 8005c38:	08005c57 	.word	0x08005c57
 8005c3c:	08005c45 	.word	0x08005c45
 8005c40:	08005cdf 	.word	0x08005cdf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d048      	beq.n	8005ce2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005c54:	e045      	b.n	8005ce2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c5e:	d142      	bne.n	8005ce6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005c64:	e03f      	b.n	8005ce6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c6e:	d123      	bne.n	8005cb8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c74:	2b03      	cmp	r3, #3
 8005c76:	d838      	bhi.n	8005cea <DMA_CheckFifoParam+0xda>
 8005c78:	a201      	add	r2, pc, #4	; (adr r2, 8005c80 <DMA_CheckFifoParam+0x70>)
 8005c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7e:	bf00      	nop
 8005c80:	08005c91 	.word	0x08005c91
 8005c84:	08005c97 	.word	0x08005c97
 8005c88:	08005c91 	.word	0x08005c91
 8005c8c:	08005ca9 	.word	0x08005ca9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	73fb      	strb	r3, [r7, #15]
        break;
 8005c94:	e030      	b.n	8005cf8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d025      	beq.n	8005cee <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ca6:	e022      	b.n	8005cee <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005cb0:	d11f      	bne.n	8005cf2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005cb6:	e01c      	b.n	8005cf2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d902      	bls.n	8005cc6 <DMA_CheckFifoParam+0xb6>
 8005cc0:	2b03      	cmp	r3, #3
 8005cc2:	d003      	beq.n	8005ccc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005cc4:	e018      	b.n	8005cf8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	73fb      	strb	r3, [r7, #15]
        break;
 8005cca:	e015      	b.n	8005cf8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00e      	beq.n	8005cf6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	73fb      	strb	r3, [r7, #15]
    break;
 8005cdc:	e00b      	b.n	8005cf6 <DMA_CheckFifoParam+0xe6>
        break;
 8005cde:	bf00      	nop
 8005ce0:	e00a      	b.n	8005cf8 <DMA_CheckFifoParam+0xe8>
        break;
 8005ce2:	bf00      	nop
 8005ce4:	e008      	b.n	8005cf8 <DMA_CheckFifoParam+0xe8>
        break;
 8005ce6:	bf00      	nop
 8005ce8:	e006      	b.n	8005cf8 <DMA_CheckFifoParam+0xe8>
        break;
 8005cea:	bf00      	nop
 8005cec:	e004      	b.n	8005cf8 <DMA_CheckFifoParam+0xe8>
        break;
 8005cee:	bf00      	nop
 8005cf0:	e002      	b.n	8005cf8 <DMA_CheckFifoParam+0xe8>
        break;
 8005cf2:	bf00      	nop
 8005cf4:	e000      	b.n	8005cf8 <DMA_CheckFifoParam+0xe8>
    break;
 8005cf6:	bf00      	nop
    }
  }

  return status;
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop

08005d08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a38      	ldr	r2, [pc, #224]	; (8005dfc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d022      	beq.n	8005d66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a36      	ldr	r2, [pc, #216]	; (8005e00 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d01d      	beq.n	8005d66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a35      	ldr	r2, [pc, #212]	; (8005e04 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d018      	beq.n	8005d66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a33      	ldr	r2, [pc, #204]	; (8005e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d013      	beq.n	8005d66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a32      	ldr	r2, [pc, #200]	; (8005e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d00e      	beq.n	8005d66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a30      	ldr	r2, [pc, #192]	; (8005e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d009      	beq.n	8005d66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a2f      	ldr	r2, [pc, #188]	; (8005e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d004      	beq.n	8005d66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a2d      	ldr	r2, [pc, #180]	; (8005e18 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d101      	bne.n	8005d6a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005d66:	2301      	movs	r3, #1
 8005d68:	e000      	b.n	8005d6c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d01a      	beq.n	8005da6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	3b08      	subs	r3, #8
 8005d78:	4a28      	ldr	r2, [pc, #160]	; (8005e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7e:	091b      	lsrs	r3, r3, #4
 8005d80:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	4b26      	ldr	r3, [pc, #152]	; (8005e20 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005d86:	4413      	add	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a24      	ldr	r2, [pc, #144]	; (8005e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005d94:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f003 031f 	and.w	r3, r3, #31
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	409a      	lsls	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005da4:	e024      	b.n	8005df0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	3b10      	subs	r3, #16
 8005dae:	4a1e      	ldr	r2, [pc, #120]	; (8005e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005db0:	fba2 2303 	umull	r2, r3, r2, r3
 8005db4:	091b      	lsrs	r3, r3, #4
 8005db6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	4a1c      	ldr	r2, [pc, #112]	; (8005e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d806      	bhi.n	8005dce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	4a1b      	ldr	r2, [pc, #108]	; (8005e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d902      	bls.n	8005dce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	3308      	adds	r3, #8
 8005dcc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	4b18      	ldr	r3, [pc, #96]	; (8005e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005dd2:	4413      	add	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a16      	ldr	r2, [pc, #88]	; (8005e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005de0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f003 031f 	and.w	r3, r3, #31
 8005de8:	2201      	movs	r2, #1
 8005dea:	409a      	lsls	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005df0:	bf00      	nop
 8005df2:	3714      	adds	r7, #20
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	58025408 	.word	0x58025408
 8005e00:	5802541c 	.word	0x5802541c
 8005e04:	58025430 	.word	0x58025430
 8005e08:	58025444 	.word	0x58025444
 8005e0c:	58025458 	.word	0x58025458
 8005e10:	5802546c 	.word	0x5802546c
 8005e14:	58025480 	.word	0x58025480
 8005e18:	58025494 	.word	0x58025494
 8005e1c:	cccccccd 	.word	0xcccccccd
 8005e20:	16009600 	.word	0x16009600
 8005e24:	58025880 	.word	0x58025880
 8005e28:	aaaaaaab 	.word	0xaaaaaaab
 8005e2c:	400204b8 	.word	0x400204b8
 8005e30:	4002040f 	.word	0x4002040f
 8005e34:	10008200 	.word	0x10008200
 8005e38:	40020880 	.word	0x40020880

08005e3c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d04a      	beq.n	8005ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2b08      	cmp	r3, #8
 8005e56:	d847      	bhi.n	8005ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a25      	ldr	r2, [pc, #148]	; (8005ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d022      	beq.n	8005ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a24      	ldr	r2, [pc, #144]	; (8005ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d01d      	beq.n	8005ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a22      	ldr	r2, [pc, #136]	; (8005efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d018      	beq.n	8005ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a21      	ldr	r2, [pc, #132]	; (8005f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d013      	beq.n	8005ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a1f      	ldr	r2, [pc, #124]	; (8005f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d00e      	beq.n	8005ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a1e      	ldr	r2, [pc, #120]	; (8005f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d009      	beq.n	8005ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a1c      	ldr	r2, [pc, #112]	; (8005f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d004      	beq.n	8005ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a1b      	ldr	r2, [pc, #108]	; (8005f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d101      	bne.n	8005eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e000      	b.n	8005eae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005eac:	2300      	movs	r3, #0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00a      	beq.n	8005ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	4b17      	ldr	r3, [pc, #92]	; (8005f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005eb6:	4413      	add	r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	461a      	mov	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a15      	ldr	r2, [pc, #84]	; (8005f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005ec4:	671a      	str	r2, [r3, #112]	; 0x70
 8005ec6:	e009      	b.n	8005edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	4b14      	ldr	r3, [pc, #80]	; (8005f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005ecc:	4413      	add	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a11      	ldr	r2, [pc, #68]	; (8005f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005eda:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	409a      	lsls	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005ee8:	bf00      	nop
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr
 8005ef4:	58025408 	.word	0x58025408
 8005ef8:	5802541c 	.word	0x5802541c
 8005efc:	58025430 	.word	0x58025430
 8005f00:	58025444 	.word	0x58025444
 8005f04:	58025458 	.word	0x58025458
 8005f08:	5802546c 	.word	0x5802546c
 8005f0c:	58025480 	.word	0x58025480
 8005f10:	58025494 	.word	0x58025494
 8005f14:	1600963f 	.word	0x1600963f
 8005f18:	58025940 	.word	0x58025940
 8005f1c:	1000823f 	.word	0x1000823f
 8005f20:	40020940 	.word	0x40020940

08005f24 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e0c6      	b.n	80060c4 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d102      	bne.n	8005f44 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7fc ff3e 	bl	8002dc0 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2223      	movs	r2, #35	; 0x23
 8005f48:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f4a:	4b60      	ldr	r3, [pc, #384]	; (80060cc <HAL_ETH_Init+0x1a8>)
 8005f4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f50:	4a5e      	ldr	r2, [pc, #376]	; (80060cc <HAL_ETH_Init+0x1a8>)
 8005f52:	f043 0302 	orr.w	r3, r3, #2
 8005f56:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005f5a:	4b5c      	ldr	r3, [pc, #368]	; (80060cc <HAL_ETH_Init+0x1a8>)
 8005f5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f60:	f003 0302 	and.w	r3, r3, #2
 8005f64:	60bb      	str	r3, [r7, #8]
 8005f66:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	7a1b      	ldrb	r3, [r3, #8]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d103      	bne.n	8005f78 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005f70:	2000      	movs	r0, #0
 8005f72:	f7fd fb8b 	bl	800368c <HAL_SYSCFG_ETHInterfaceSelect>
 8005f76:	e003      	b.n	8005f80 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005f78:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005f7c:	f7fd fb86 	bl	800368c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f042 0201 	orr.w	r2, r2, #1
 8005f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f98:	f7fd fb3c 	bl	8003614 <HAL_GetTick>
 8005f9c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005f9e:	e00f      	b.n	8005fc0 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8005fa0:	f7fd fb38 	bl	8003614 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005fae:	d907      	bls.n	8005fc0 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2204      	movs	r2, #4
 8005fb4:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	22e0      	movs	r2, #224	; 0xe0
 8005fba:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e081      	b.n	80060c4 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1e6      	bne.n	8005fa0 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 fac0 	bl	8006558 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005fd8:	f001 fed8 	bl	8007d8c <HAL_RCC_GetHCLKFreq>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	4a3c      	ldr	r2, [pc, #240]	; (80060d0 <HAL_ETH_Init+0x1ac>)
 8005fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe4:	0c9a      	lsrs	r2, r3, #18
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	3a01      	subs	r2, #1
 8005fec:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 fa13 	bl	800641c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800600c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8006010:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	f003 0303 	and.w	r3, r3, #3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d007      	beq.n	800602e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	22e0      	movs	r2, #224	; 0xe0
 8006028:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e04a      	b.n	80060c4 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	f241 1308 	movw	r3, #4360	; 0x1108
 8006036:	4413      	add	r3, r2
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	4b26      	ldr	r3, [pc, #152]	; (80060d4 <HAL_ETH_Init+0x1b0>)
 800603c:	4013      	ands	r3, r2
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	6952      	ldr	r2, [r2, #20]
 8006042:	0052      	lsls	r2, r2, #1
 8006044:	6879      	ldr	r1, [r7, #4]
 8006046:	6809      	ldr	r1, [r1, #0]
 8006048:	431a      	orrs	r2, r3
 800604a:	f241 1308 	movw	r3, #4360	; 0x1108
 800604e:	440b      	add	r3, r1
 8006050:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fad8 	bl	8006608 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fb1c 	bl	8006696 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	3305      	adds	r3, #5
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	021a      	lsls	r2, r3, #8
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	3304      	adds	r3, #4
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	4619      	mov	r1, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	430a      	orrs	r2, r1
 8006078:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	3303      	adds	r3, #3
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	061a      	lsls	r2, r3, #24
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	3302      	adds	r3, #2
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	041b      	lsls	r3, r3, #16
 8006090:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	3301      	adds	r3, #1
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800609c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80060aa:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80060ac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2210      	movs	r2, #16
 80060ba:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2210      	movs	r2, #16
 80060c0:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	58024400 	.word	0x58024400
 80060d0:	431bde83 	.word	0x431bde83
 80060d4:	ffff8001 	.word	0xffff8001

080060d8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80060ea:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	791b      	ldrb	r3, [r3, #4]
 80060f0:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80060f2:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	7b1b      	ldrb	r3, [r3, #12]
 80060f8:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80060fa:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	7b5b      	ldrb	r3, [r3, #13]
 8006100:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006102:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	7b9b      	ldrb	r3, [r3, #14]
 8006108:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800610a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	7bdb      	ldrb	r3, [r3, #15]
 8006110:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006112:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006114:	683a      	ldr	r2, [r7, #0]
 8006116:	7c12      	ldrb	r2, [r2, #16]
 8006118:	2a00      	cmp	r2, #0
 800611a:	d102      	bne.n	8006122 <ETH_SetMACConfig+0x4a>
 800611c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006120:	e000      	b.n	8006124 <ETH_SetMACConfig+0x4c>
 8006122:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006124:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	7c52      	ldrb	r2, [r2, #17]
 800612a:	2a00      	cmp	r2, #0
 800612c:	d102      	bne.n	8006134 <ETH_SetMACConfig+0x5c>
 800612e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006132:	e000      	b.n	8006136 <ETH_SetMACConfig+0x5e>
 8006134:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006136:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	7c9b      	ldrb	r3, [r3, #18]
 800613c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800613e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8006144:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800614a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	7f1b      	ldrb	r3, [r3, #28]
 8006150:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8006152:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	7f5b      	ldrb	r3, [r3, #29]
 8006158:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800615a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800615c:	683a      	ldr	r2, [r7, #0]
 800615e:	7f92      	ldrb	r2, [r2, #30]
 8006160:	2a00      	cmp	r2, #0
 8006162:	d102      	bne.n	800616a <ETH_SetMACConfig+0x92>
 8006164:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006168:	e000      	b.n	800616c <ETH_SetMACConfig+0x94>
 800616a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800616c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	7fdb      	ldrb	r3, [r3, #31]
 8006172:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8006174:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	f892 2020 	ldrb.w	r2, [r2, #32]
 800617c:	2a00      	cmp	r2, #0
 800617e:	d102      	bne.n	8006186 <ETH_SetMACConfig+0xae>
 8006180:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006184:	e000      	b.n	8006188 <ETH_SetMACConfig+0xb0>
 8006186:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8006188:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800618e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006196:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8006198:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800619e:	4313      	orrs	r3, r2
 80061a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	4b56      	ldr	r3, [pc, #344]	; (8006304 <ETH_SetMACConfig+0x22c>)
 80061aa:	4013      	ands	r3, r2
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	6812      	ldr	r2, [r2, #0]
 80061b0:	68f9      	ldr	r1, [r7, #12]
 80061b2:	430b      	orrs	r3, r1
 80061b4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ba:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80061c2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80061c4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80061cc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80061ce:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80061d6:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80061d8:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80061e0:	2a00      	cmp	r2, #0
 80061e2:	d102      	bne.n	80061ea <ETH_SetMACConfig+0x112>
 80061e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80061e8:	e000      	b.n	80061ec <ETH_SetMACConfig+0x114>
 80061ea:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80061ec:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80061f2:	4313      	orrs	r3, r2
 80061f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	4b42      	ldr	r3, [pc, #264]	; (8006308 <ETH_SetMACConfig+0x230>)
 80061fe:	4013      	ands	r3, r2
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	6812      	ldr	r2, [r2, #0]
 8006204:	68f9      	ldr	r1, [r7, #12]
 8006206:	430b      	orrs	r3, r1
 8006208:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006210:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8006216:	4313      	orrs	r3, r2
 8006218:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68da      	ldr	r2, [r3, #12]
 8006220:	4b3a      	ldr	r3, [pc, #232]	; (800630c <ETH_SetMACConfig+0x234>)
 8006222:	4013      	ands	r3, r2
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	6812      	ldr	r2, [r2, #0]
 8006228:	68f9      	ldr	r1, [r7, #12]
 800622a:	430b      	orrs	r3, r1
 800622c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006234:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800623a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800623c:	683a      	ldr	r2, [r7, #0]
 800623e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8006242:	2a00      	cmp	r2, #0
 8006244:	d101      	bne.n	800624a <ETH_SetMACConfig+0x172>
 8006246:	2280      	movs	r2, #128	; 0x80
 8006248:	e000      	b.n	800624c <ETH_SetMACConfig+0x174>
 800624a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800624c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006252:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006254:	4313      	orrs	r3, r2
 8006256:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800625e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8006262:	4013      	ands	r3, r2
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	6812      	ldr	r2, [r2, #0]
 8006268:	68f9      	ldr	r1, [r7, #12]
 800626a:	430b      	orrs	r3, r1
 800626c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006274:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800627c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800627e:	4313      	orrs	r3, r2
 8006280:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800628a:	f023 0103 	bic.w	r1, r3, #3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	430a      	orrs	r2, r1
 8006296:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80062a2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80062be:	2a00      	cmp	r2, #0
 80062c0:	d101      	bne.n	80062c6 <ETH_SetMACConfig+0x1ee>
 80062c2:	2240      	movs	r2, #64	; 0x40
 80062c4:	e000      	b.n	80062c8 <ETH_SetMACConfig+0x1f0>
 80062c6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80062c8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80062d0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80062d2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80062da:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80062dc:	4313      	orrs	r3, r2
 80062de:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80062e8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80062f8:	bf00      	nop
 80062fa:	3714      	adds	r7, #20
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	00048083 	.word	0x00048083
 8006308:	c0f88000 	.word	0xc0f88000
 800630c:	fffffef0 	.word	0xfffffef0

08006310 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	4b38      	ldr	r3, [pc, #224]	; (8006408 <ETH_SetDMAConfig+0xf8>)
 8006326:	4013      	ands	r3, r2
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	6812      	ldr	r2, [r2, #0]
 800632c:	6879      	ldr	r1, [r7, #4]
 800632e:	6809      	ldr	r1, [r1, #0]
 8006330:	431a      	orrs	r2, r3
 8006332:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8006336:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	791b      	ldrb	r3, [r3, #4]
 800633c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006342:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	7b1b      	ldrb	r3, [r3, #12]
 8006348:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800634a:	4313      	orrs	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	f241 0304 	movw	r3, #4100	; 0x1004
 8006356:	4413      	add	r3, r2
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	4b2c      	ldr	r3, [pc, #176]	; (800640c <ETH_SetDMAConfig+0xfc>)
 800635c:	4013      	ands	r3, r2
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	6811      	ldr	r1, [r2, #0]
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	431a      	orrs	r2, r3
 8006366:	f241 0304 	movw	r3, #4100	; 0x1004
 800636a:	440b      	add	r3, r1
 800636c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	7b5b      	ldrb	r3, [r3, #13]
 8006372:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006378:	4313      	orrs	r3, r2
 800637a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	4b22      	ldr	r3, [pc, #136]	; (8006410 <ETH_SetDMAConfig+0x100>)
 8006388:	4013      	ands	r3, r2
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	6811      	ldr	r1, [r2, #0]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	431a      	orrs	r2, r3
 8006392:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8006396:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	7d1b      	ldrb	r3, [r3, #20]
 80063a0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80063a2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	7f5b      	ldrb	r3, [r3, #29]
 80063a8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80063aa:	4313      	orrs	r3, r2
 80063ac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	f241 1304 	movw	r3, #4356	; 0x1104
 80063b6:	4413      	add	r3, r2
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	4b16      	ldr	r3, [pc, #88]	; (8006414 <ETH_SetDMAConfig+0x104>)
 80063bc:	4013      	ands	r3, r2
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	6811      	ldr	r1, [r2, #0]
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	431a      	orrs	r2, r3
 80063c6:	f241 1304 	movw	r3, #4356	; 0x1104
 80063ca:	440b      	add	r3, r1
 80063cc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	7f1b      	ldrb	r3, [r3, #28]
 80063d2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80063d8:	4313      	orrs	r3, r2
 80063da:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	f241 1308 	movw	r3, #4360	; 0x1108
 80063e4:	4413      	add	r3, r2
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	4b0b      	ldr	r3, [pc, #44]	; (8006418 <ETH_SetDMAConfig+0x108>)
 80063ea:	4013      	ands	r3, r2
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	6811      	ldr	r1, [r2, #0]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	431a      	orrs	r2, r3
 80063f4:	f241 1308 	movw	r3, #4360	; 0x1108
 80063f8:	440b      	add	r3, r1
 80063fa:	601a      	str	r2, [r3, #0]
}
 80063fc:	bf00      	nop
 80063fe:	3714      	adds	r7, #20
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr
 8006408:	ffff87fd 	.word	0xffff87fd
 800640c:	ffff2ffe 	.word	0xffff2ffe
 8006410:	fffec000 	.word	0xfffec000
 8006414:	ffc0efef 	.word	0xffc0efef
 8006418:	7fc0ffff 	.word	0x7fc0ffff

0800641c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b0a4      	sub	sp, #144	; 0x90
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8006424:	2301      	movs	r3, #1
 8006426:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800642a:	2300      	movs	r3, #0
 800642c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800642e:	2300      	movs	r3, #0
 8006430:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006434:	2300      	movs	r3, #0
 8006436:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800643a:	2301      	movs	r3, #1
 800643c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8006440:	2301      	movs	r3, #1
 8006442:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8006446:	2301      	movs	r3, #1
 8006448:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800644c:	2300      	movs	r3, #0
 800644e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8006452:	2301      	movs	r3, #1
 8006454:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006458:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800645c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800645e:	2300      	movs	r3, #0
 8006460:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8006464:	2300      	movs	r3, #0
 8006466:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8006468:	2300      	movs	r3, #0
 800646a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800646e:	2300      	movs	r3, #0
 8006470:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8006474:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8006478:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800647a:	2300      	movs	r3, #0
 800647c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8006480:	2300      	movs	r3, #0
 8006482:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8006484:	2301      	movs	r3, #1
 8006486:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800648a:	2300      	movs	r3, #0
 800648c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8006490:	2300      	movs	r3, #0
 8006492:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8006496:	2300      	movs	r3, #0
 8006498:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800649a:	2300      	movs	r3, #0
 800649c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800649e:	2300      	movs	r3, #0
 80064a0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80064a2:	2300      	movs	r3, #0
 80064a4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80064a8:	2300      	movs	r3, #0
 80064aa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80064ae:	2301      	movs	r3, #1
 80064b0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80064b4:	2320      	movs	r3, #32
 80064b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80064ba:	2301      	movs	r3, #1
 80064bc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80064c0:	2300      	movs	r3, #0
 80064c2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80064c6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80064ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80064cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80064d0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80064d2:	2300      	movs	r3, #0
 80064d4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80064d8:	2302      	movs	r3, #2
 80064da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80064de:	2300      	movs	r3, #0
 80064e0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80064e4:	2300      	movs	r3, #0
 80064e6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80064ea:	2300      	movs	r3, #0
 80064ec:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80064f0:	2301      	movs	r3, #1
 80064f2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80064f6:	2300      	movs	r3, #0
 80064f8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80064fa:	2301      	movs	r3, #1
 80064fc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006500:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006504:	4619      	mov	r1, r3
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7ff fde6 	bl	80060d8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800650c:	2301      	movs	r3, #1
 800650e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006510:	2301      	movs	r3, #1
 8006512:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8006514:	2300      	movs	r3, #0
 8006516:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8006518:	2300      	movs	r3, #0
 800651a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800651e:	2300      	movs	r3, #0
 8006520:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8006522:	2300      	movs	r3, #0
 8006524:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006526:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800652a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800652c:	2300      	movs	r3, #0
 800652e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006530:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006534:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8006536:	2300      	movs	r3, #0
 8006538:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800653c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8006540:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006542:	f107 0308 	add.w	r3, r7, #8
 8006546:	4619      	mov	r1, r3
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7ff fee1 	bl	8006310 <ETH_SetDMAConfig>
}
 800654e:	bf00      	nop
 8006550:	3790      	adds	r7, #144	; 0x90
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
	...

08006558 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006568:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006570:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006572:	f001 fc0b 	bl	8007d8c <HAL_RCC_GetHCLKFreq>
 8006576:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	4a1e      	ldr	r2, [pc, #120]	; (80065f4 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d908      	bls.n	8006592 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	4a1d      	ldr	r2, [pc, #116]	; (80065f8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d804      	bhi.n	8006592 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800658e:	60fb      	str	r3, [r7, #12]
 8006590:	e027      	b.n	80065e2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	4a18      	ldr	r2, [pc, #96]	; (80065f8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d908      	bls.n	80065ac <ETH_MAC_MDIO_ClkConfig+0x54>
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	4a17      	ldr	r2, [pc, #92]	; (80065fc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d204      	bcs.n	80065ac <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80065a8:	60fb      	str	r3, [r7, #12]
 80065aa:	e01a      	b.n	80065e2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	4a13      	ldr	r2, [pc, #76]	; (80065fc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d303      	bcc.n	80065bc <ETH_MAC_MDIO_ClkConfig+0x64>
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	4a12      	ldr	r2, [pc, #72]	; (8006600 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d911      	bls.n	80065e0 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	4a10      	ldr	r2, [pc, #64]	; (8006600 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d908      	bls.n	80065d6 <ETH_MAC_MDIO_ClkConfig+0x7e>
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	4a0f      	ldr	r2, [pc, #60]	; (8006604 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d804      	bhi.n	80065d6 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	e005      	b.n	80065e2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065dc:	60fb      	str	r3, [r7, #12]
 80065de:	e000      	b.n	80065e2 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80065e0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80065ec:	bf00      	nop
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	01312cff 	.word	0x01312cff
 80065f8:	02160ebf 	.word	0x02160ebf
 80065fc:	03938700 	.word	0x03938700
 8006600:	05f5e0ff 	.word	0x05f5e0ff
 8006604:	08f0d17f 	.word	0x08f0d17f

08006608 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006610:	2300      	movs	r3, #0
 8006612:	60fb      	str	r3, [r7, #12]
 8006614:	e01d      	b.n	8006652 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68d9      	ldr	r1, [r3, #12]
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	4613      	mov	r3, r2
 800661e:	005b      	lsls	r3, r3, #1
 8006620:	4413      	add	r3, r2
 8006622:	00db      	lsls	r3, r3, #3
 8006624:	440b      	add	r3, r1
 8006626:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	2200      	movs	r2, #0
 800662c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	2200      	movs	r2, #0
 8006632:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	2200      	movs	r2, #0
 8006638:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2200      	movs	r2, #0
 800663e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006640:	68b9      	ldr	r1, [r7, #8]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	3206      	adds	r2, #6
 8006648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	3301      	adds	r3, #1
 8006650:	60fb      	str	r3, [r7, #12]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2b03      	cmp	r3, #3
 8006656:	d9de      	bls.n	8006616 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	f241 132c 	movw	r3, #4396	; 0x112c
 8006666:	4413      	add	r3, r2
 8006668:	2203      	movs	r2, #3
 800666a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68d9      	ldr	r1, [r3, #12]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	f241 1314 	movw	r3, #4372	; 0x1114
 8006678:	4413      	add	r3, r2
 800667a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68da      	ldr	r2, [r3, #12]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8006688:	601a      	str	r2, [r3, #0]
}
 800668a:	bf00      	nop
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr

08006696 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006696:	b480      	push	{r7}
 8006698:	b085      	sub	sp, #20
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800669e:	2300      	movs	r3, #0
 80066a0:	60fb      	str	r3, [r7, #12]
 80066a2:	e024      	b.n	80066ee <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6919      	ldr	r1, [r3, #16]
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	4613      	mov	r3, r2
 80066ac:	005b      	lsls	r3, r3, #1
 80066ae:	4413      	add	r3, r2
 80066b0:	00db      	lsls	r3, r3, #3
 80066b2:	440b      	add	r3, r1
 80066b4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2200      	movs	r2, #0
 80066ba:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	2200      	movs	r2, #0
 80066c0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	2200      	movs	r2, #0
 80066c6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2200      	movs	r2, #0
 80066cc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2200      	movs	r2, #0
 80066d2:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2200      	movs	r2, #0
 80066d8:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	6879      	ldr	r1, [r7, #4]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	3310      	adds	r3, #16
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	440b      	add	r3, r1
 80066e6:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	3301      	adds	r3, #1
 80066ec:	60fb      	str	r3, [r7, #12]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	d9d7      	bls.n	80066a4 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	f241 1330 	movw	r3, #4400	; 0x1130
 800671a:	4413      	add	r3, r2
 800671c:	2203      	movs	r2, #3
 800671e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6919      	ldr	r1, [r3, #16]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	f241 131c 	movw	r3, #4380	; 0x111c
 800672c:	4413      	add	r3, r2
 800672e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	f241 1328 	movw	r3, #4392	; 0x1128
 8006740:	4413      	add	r3, r2
 8006742:	6019      	str	r1, [r3, #0]
}
 8006744:	bf00      	nop
 8006746:	3714      	adds	r7, #20
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006750:	b480      	push	{r7}
 8006752:	b089      	sub	sp, #36	; 0x24
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800675a:	2300      	movs	r3, #0
 800675c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800675e:	4b89      	ldr	r3, [pc, #548]	; (8006984 <HAL_GPIO_Init+0x234>)
 8006760:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006762:	e194      	b.n	8006a8e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	2101      	movs	r1, #1
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	fa01 f303 	lsl.w	r3, r1, r3
 8006770:	4013      	ands	r3, r2
 8006772:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	2b00      	cmp	r3, #0
 8006778:	f000 8186 	beq.w	8006a88 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f003 0303 	and.w	r3, r3, #3
 8006784:	2b01      	cmp	r3, #1
 8006786:	d005      	beq.n	8006794 <HAL_GPIO_Init+0x44>
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f003 0303 	and.w	r3, r3, #3
 8006790:	2b02      	cmp	r3, #2
 8006792:	d130      	bne.n	80067f6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	005b      	lsls	r3, r3, #1
 800679e:	2203      	movs	r2, #3
 80067a0:	fa02 f303 	lsl.w	r3, r2, r3
 80067a4:	43db      	mvns	r3, r3
 80067a6:	69ba      	ldr	r2, [r7, #24]
 80067a8:	4013      	ands	r3, r2
 80067aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	68da      	ldr	r2, [r3, #12]
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	005b      	lsls	r3, r3, #1
 80067b4:	fa02 f303 	lsl.w	r3, r2, r3
 80067b8:	69ba      	ldr	r2, [r7, #24]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	69ba      	ldr	r2, [r7, #24]
 80067c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80067ca:	2201      	movs	r2, #1
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	fa02 f303 	lsl.w	r3, r2, r3
 80067d2:	43db      	mvns	r3, r3
 80067d4:	69ba      	ldr	r2, [r7, #24]
 80067d6:	4013      	ands	r3, r2
 80067d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	091b      	lsrs	r3, r3, #4
 80067e0:	f003 0201 	and.w	r2, r3, #1
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ea:	69ba      	ldr	r2, [r7, #24]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	69ba      	ldr	r2, [r7, #24]
 80067f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f003 0303 	and.w	r3, r3, #3
 80067fe:	2b03      	cmp	r3, #3
 8006800:	d017      	beq.n	8006832 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	005b      	lsls	r3, r3, #1
 800680c:	2203      	movs	r2, #3
 800680e:	fa02 f303 	lsl.w	r3, r2, r3
 8006812:	43db      	mvns	r3, r3
 8006814:	69ba      	ldr	r2, [r7, #24]
 8006816:	4013      	ands	r3, r2
 8006818:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	689a      	ldr	r2, [r3, #8]
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	005b      	lsls	r3, r3, #1
 8006822:	fa02 f303 	lsl.w	r3, r2, r3
 8006826:	69ba      	ldr	r2, [r7, #24]
 8006828:	4313      	orrs	r3, r2
 800682a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	69ba      	ldr	r2, [r7, #24]
 8006830:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f003 0303 	and.w	r3, r3, #3
 800683a:	2b02      	cmp	r3, #2
 800683c:	d123      	bne.n	8006886 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	08da      	lsrs	r2, r3, #3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	3208      	adds	r2, #8
 8006846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800684a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	f003 0307 	and.w	r3, r3, #7
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	220f      	movs	r2, #15
 8006856:	fa02 f303 	lsl.w	r3, r2, r3
 800685a:	43db      	mvns	r3, r3
 800685c:	69ba      	ldr	r2, [r7, #24]
 800685e:	4013      	ands	r3, r2
 8006860:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	691a      	ldr	r2, [r3, #16]
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	f003 0307 	and.w	r3, r3, #7
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	fa02 f303 	lsl.w	r3, r2, r3
 8006872:	69ba      	ldr	r2, [r7, #24]
 8006874:	4313      	orrs	r3, r2
 8006876:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	08da      	lsrs	r2, r3, #3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	3208      	adds	r2, #8
 8006880:	69b9      	ldr	r1, [r7, #24]
 8006882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	005b      	lsls	r3, r3, #1
 8006890:	2203      	movs	r2, #3
 8006892:	fa02 f303 	lsl.w	r3, r2, r3
 8006896:	43db      	mvns	r3, r3
 8006898:	69ba      	ldr	r2, [r7, #24]
 800689a:	4013      	ands	r3, r2
 800689c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	f003 0203 	and.w	r2, r3, #3
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	005b      	lsls	r3, r3, #1
 80068aa:	fa02 f303 	lsl.w	r3, r2, r3
 80068ae:	69ba      	ldr	r2, [r7, #24]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	69ba      	ldr	r2, [r7, #24]
 80068b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f000 80e0 	beq.w	8006a88 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068c8:	4b2f      	ldr	r3, [pc, #188]	; (8006988 <HAL_GPIO_Init+0x238>)
 80068ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80068ce:	4a2e      	ldr	r2, [pc, #184]	; (8006988 <HAL_GPIO_Init+0x238>)
 80068d0:	f043 0302 	orr.w	r3, r3, #2
 80068d4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80068d8:	4b2b      	ldr	r3, [pc, #172]	; (8006988 <HAL_GPIO_Init+0x238>)
 80068da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	60fb      	str	r3, [r7, #12]
 80068e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80068e6:	4a29      	ldr	r2, [pc, #164]	; (800698c <HAL_GPIO_Init+0x23c>)
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	089b      	lsrs	r3, r3, #2
 80068ec:	3302      	adds	r3, #2
 80068ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	f003 0303 	and.w	r3, r3, #3
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	220f      	movs	r2, #15
 80068fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006902:	43db      	mvns	r3, r3
 8006904:	69ba      	ldr	r2, [r7, #24]
 8006906:	4013      	ands	r3, r2
 8006908:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a20      	ldr	r2, [pc, #128]	; (8006990 <HAL_GPIO_Init+0x240>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d052      	beq.n	80069b8 <HAL_GPIO_Init+0x268>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a1f      	ldr	r2, [pc, #124]	; (8006994 <HAL_GPIO_Init+0x244>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d031      	beq.n	800697e <HAL_GPIO_Init+0x22e>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a1e      	ldr	r2, [pc, #120]	; (8006998 <HAL_GPIO_Init+0x248>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d02b      	beq.n	800697a <HAL_GPIO_Init+0x22a>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a1d      	ldr	r2, [pc, #116]	; (800699c <HAL_GPIO_Init+0x24c>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d025      	beq.n	8006976 <HAL_GPIO_Init+0x226>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a1c      	ldr	r2, [pc, #112]	; (80069a0 <HAL_GPIO_Init+0x250>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d01f      	beq.n	8006972 <HAL_GPIO_Init+0x222>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a1b      	ldr	r2, [pc, #108]	; (80069a4 <HAL_GPIO_Init+0x254>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d019      	beq.n	800696e <HAL_GPIO_Init+0x21e>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a1a      	ldr	r2, [pc, #104]	; (80069a8 <HAL_GPIO_Init+0x258>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d013      	beq.n	800696a <HAL_GPIO_Init+0x21a>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a19      	ldr	r2, [pc, #100]	; (80069ac <HAL_GPIO_Init+0x25c>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d00d      	beq.n	8006966 <HAL_GPIO_Init+0x216>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a18      	ldr	r2, [pc, #96]	; (80069b0 <HAL_GPIO_Init+0x260>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d007      	beq.n	8006962 <HAL_GPIO_Init+0x212>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a17      	ldr	r2, [pc, #92]	; (80069b4 <HAL_GPIO_Init+0x264>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d101      	bne.n	800695e <HAL_GPIO_Init+0x20e>
 800695a:	2309      	movs	r3, #9
 800695c:	e02d      	b.n	80069ba <HAL_GPIO_Init+0x26a>
 800695e:	230a      	movs	r3, #10
 8006960:	e02b      	b.n	80069ba <HAL_GPIO_Init+0x26a>
 8006962:	2308      	movs	r3, #8
 8006964:	e029      	b.n	80069ba <HAL_GPIO_Init+0x26a>
 8006966:	2307      	movs	r3, #7
 8006968:	e027      	b.n	80069ba <HAL_GPIO_Init+0x26a>
 800696a:	2306      	movs	r3, #6
 800696c:	e025      	b.n	80069ba <HAL_GPIO_Init+0x26a>
 800696e:	2305      	movs	r3, #5
 8006970:	e023      	b.n	80069ba <HAL_GPIO_Init+0x26a>
 8006972:	2304      	movs	r3, #4
 8006974:	e021      	b.n	80069ba <HAL_GPIO_Init+0x26a>
 8006976:	2303      	movs	r3, #3
 8006978:	e01f      	b.n	80069ba <HAL_GPIO_Init+0x26a>
 800697a:	2302      	movs	r3, #2
 800697c:	e01d      	b.n	80069ba <HAL_GPIO_Init+0x26a>
 800697e:	2301      	movs	r3, #1
 8006980:	e01b      	b.n	80069ba <HAL_GPIO_Init+0x26a>
 8006982:	bf00      	nop
 8006984:	58000080 	.word	0x58000080
 8006988:	58024400 	.word	0x58024400
 800698c:	58000400 	.word	0x58000400
 8006990:	58020000 	.word	0x58020000
 8006994:	58020400 	.word	0x58020400
 8006998:	58020800 	.word	0x58020800
 800699c:	58020c00 	.word	0x58020c00
 80069a0:	58021000 	.word	0x58021000
 80069a4:	58021400 	.word	0x58021400
 80069a8:	58021800 	.word	0x58021800
 80069ac:	58021c00 	.word	0x58021c00
 80069b0:	58022000 	.word	0x58022000
 80069b4:	58022400 	.word	0x58022400
 80069b8:	2300      	movs	r3, #0
 80069ba:	69fa      	ldr	r2, [r7, #28]
 80069bc:	f002 0203 	and.w	r2, r2, #3
 80069c0:	0092      	lsls	r2, r2, #2
 80069c2:	4093      	lsls	r3, r2
 80069c4:	69ba      	ldr	r2, [r7, #24]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80069ca:	4938      	ldr	r1, [pc, #224]	; (8006aac <HAL_GPIO_Init+0x35c>)
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	089b      	lsrs	r3, r3, #2
 80069d0:	3302      	adds	r3, #2
 80069d2:	69ba      	ldr	r2, [r7, #24]
 80069d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80069d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	43db      	mvns	r3, r3
 80069e4:	69ba      	ldr	r2, [r7, #24]
 80069e6:	4013      	ands	r3, r2
 80069e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d003      	beq.n	80069fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80069f6:	69ba      	ldr	r2, [r7, #24]
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80069fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	43db      	mvns	r3, r3
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	4013      	ands	r3, r2
 8006a16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d003      	beq.n	8006a2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006a24:	69ba      	ldr	r2, [r7, #24]
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006a2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	43db      	mvns	r3, r3
 8006a3e:	69ba      	ldr	r2, [r7, #24]
 8006a40:	4013      	ands	r3, r2
 8006a42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d003      	beq.n	8006a58 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006a50:	69ba      	ldr	r2, [r7, #24]
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	69ba      	ldr	r2, [r7, #24]
 8006a5c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	43db      	mvns	r3, r3
 8006a68:	69ba      	ldr	r2, [r7, #24]
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d003      	beq.n	8006a82 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006a7a:	69ba      	ldr	r2, [r7, #24]
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	69ba      	ldr	r2, [r7, #24]
 8006a86:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	fa22 f303 	lsr.w	r3, r2, r3
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f47f ae63 	bne.w	8006764 <HAL_GPIO_Init+0x14>
  }
}
 8006a9e:	bf00      	nop
 8006aa0:	bf00      	nop
 8006aa2:	3724      	adds	r7, #36	; 0x24
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	58000400 	.word	0x58000400

08006ab0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	460b      	mov	r3, r1
 8006aba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	691a      	ldr	r2, [r3, #16]
 8006ac0:	887b      	ldrh	r3, [r7, #2]
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d002      	beq.n	8006ace <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	73fb      	strb	r3, [r7, #15]
 8006acc:	e001      	b.n	8006ad2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3714      	adds	r7, #20
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	460b      	mov	r3, r1
 8006aea:	807b      	strh	r3, [r7, #2]
 8006aec:	4613      	mov	r3, r2
 8006aee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006af0:	787b      	ldrb	r3, [r7, #1]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d003      	beq.n	8006afe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006af6:	887a      	ldrh	r2, [r7, #2]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006afc:	e003      	b.n	8006b06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006afe:	887b      	ldrh	r3, [r7, #2]
 8006b00:	041a      	lsls	r2, r3, #16
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	619a      	str	r2, [r3, #24]
}
 8006b06:	bf00      	nop
 8006b08:	370c      	adds	r7, #12
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
	...

08006b14 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006b1c:	4a08      	ldr	r2, [pc, #32]	; (8006b40 <HAL_HSEM_FastTake+0x2c>)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	3320      	adds	r3, #32
 8006b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b26:	4a07      	ldr	r2, [pc, #28]	; (8006b44 <HAL_HSEM_FastTake+0x30>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d101      	bne.n	8006b30 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	e000      	b.n	8006b32 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	370c      	adds	r7, #12
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	58026400 	.word	0x58026400
 8006b44:	80000300 	.word	0x80000300

08006b48 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006b52:	4906      	ldr	r1, [pc, #24]	; (8006b6c <HAL_HSEM_Release+0x24>)
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	58026400 	.word	0x58026400

08006b70 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b72:	b08f      	sub	sp, #60	; 0x3c
 8006b74:	af0a      	add	r7, sp, #40	; 0x28
 8006b76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e116      	b.n	8006db0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d106      	bne.n	8006ba2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f7fc fb6d 	bl	800327c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2203      	movs	r2, #3
 8006ba6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d102      	bne.n	8006bbc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f005 fa3d 	bl	800c040 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	603b      	str	r3, [r7, #0]
 8006bcc:	687e      	ldr	r6, [r7, #4]
 8006bce:	466d      	mov	r5, sp
 8006bd0:	f106 0410 	add.w	r4, r6, #16
 8006bd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006bd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006bd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006bda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006bdc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006be0:	e885 0003 	stmia.w	r5, {r0, r1}
 8006be4:	1d33      	adds	r3, r6, #4
 8006be6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006be8:	6838      	ldr	r0, [r7, #0]
 8006bea:	f005 f9bb 	bl	800bf64 <USB_CoreInit>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d005      	beq.n	8006c00 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e0d7      	b.n	8006db0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2100      	movs	r1, #0
 8006c06:	4618      	mov	r0, r3
 8006c08:	f005 fa2b 	bl	800c062 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	73fb      	strb	r3, [r7, #15]
 8006c10:	e04a      	b.n	8006ca8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006c12:	7bfa      	ldrb	r2, [r7, #15]
 8006c14:	6879      	ldr	r1, [r7, #4]
 8006c16:	4613      	mov	r3, r2
 8006c18:	00db      	lsls	r3, r3, #3
 8006c1a:	1a9b      	subs	r3, r3, r2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	440b      	add	r3, r1
 8006c20:	333d      	adds	r3, #61	; 0x3d
 8006c22:	2201      	movs	r2, #1
 8006c24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006c26:	7bfa      	ldrb	r2, [r7, #15]
 8006c28:	6879      	ldr	r1, [r7, #4]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	00db      	lsls	r3, r3, #3
 8006c2e:	1a9b      	subs	r3, r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	440b      	add	r3, r1
 8006c34:	333c      	adds	r3, #60	; 0x3c
 8006c36:	7bfa      	ldrb	r2, [r7, #15]
 8006c38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006c3a:	7bfa      	ldrb	r2, [r7, #15]
 8006c3c:	7bfb      	ldrb	r3, [r7, #15]
 8006c3e:	b298      	uxth	r0, r3
 8006c40:	6879      	ldr	r1, [r7, #4]
 8006c42:	4613      	mov	r3, r2
 8006c44:	00db      	lsls	r3, r3, #3
 8006c46:	1a9b      	subs	r3, r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	440b      	add	r3, r1
 8006c4c:	3342      	adds	r3, #66	; 0x42
 8006c4e:	4602      	mov	r2, r0
 8006c50:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006c52:	7bfa      	ldrb	r2, [r7, #15]
 8006c54:	6879      	ldr	r1, [r7, #4]
 8006c56:	4613      	mov	r3, r2
 8006c58:	00db      	lsls	r3, r3, #3
 8006c5a:	1a9b      	subs	r3, r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	440b      	add	r3, r1
 8006c60:	333f      	adds	r3, #63	; 0x3f
 8006c62:	2200      	movs	r2, #0
 8006c64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006c66:	7bfa      	ldrb	r2, [r7, #15]
 8006c68:	6879      	ldr	r1, [r7, #4]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	00db      	lsls	r3, r3, #3
 8006c6e:	1a9b      	subs	r3, r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	440b      	add	r3, r1
 8006c74:	3344      	adds	r3, #68	; 0x44
 8006c76:	2200      	movs	r2, #0
 8006c78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006c7a:	7bfa      	ldrb	r2, [r7, #15]
 8006c7c:	6879      	ldr	r1, [r7, #4]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	00db      	lsls	r3, r3, #3
 8006c82:	1a9b      	subs	r3, r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	440b      	add	r3, r1
 8006c88:	3348      	adds	r3, #72	; 0x48
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006c8e:	7bfa      	ldrb	r2, [r7, #15]
 8006c90:	6879      	ldr	r1, [r7, #4]
 8006c92:	4613      	mov	r3, r2
 8006c94:	00db      	lsls	r3, r3, #3
 8006c96:	1a9b      	subs	r3, r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	440b      	add	r3, r1
 8006c9c:	3350      	adds	r3, #80	; 0x50
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ca2:	7bfb      	ldrb	r3, [r7, #15]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	73fb      	strb	r3, [r7, #15]
 8006ca8:	7bfa      	ldrb	r2, [r7, #15]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d3af      	bcc.n	8006c12 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	73fb      	strb	r3, [r7, #15]
 8006cb6:	e044      	b.n	8006d42 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006cb8:	7bfa      	ldrb	r2, [r7, #15]
 8006cba:	6879      	ldr	r1, [r7, #4]
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	00db      	lsls	r3, r3, #3
 8006cc0:	1a9b      	subs	r3, r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	440b      	add	r3, r1
 8006cc6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006cca:	2200      	movs	r2, #0
 8006ccc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006cce:	7bfa      	ldrb	r2, [r7, #15]
 8006cd0:	6879      	ldr	r1, [r7, #4]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	00db      	lsls	r3, r3, #3
 8006cd6:	1a9b      	subs	r3, r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	440b      	add	r3, r1
 8006cdc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006ce0:	7bfa      	ldrb	r2, [r7, #15]
 8006ce2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006ce4:	7bfa      	ldrb	r2, [r7, #15]
 8006ce6:	6879      	ldr	r1, [r7, #4]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	00db      	lsls	r3, r3, #3
 8006cec:	1a9b      	subs	r3, r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	440b      	add	r3, r1
 8006cf2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006cfa:	7bfa      	ldrb	r2, [r7, #15]
 8006cfc:	6879      	ldr	r1, [r7, #4]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	00db      	lsls	r3, r3, #3
 8006d02:	1a9b      	subs	r3, r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	440b      	add	r3, r1
 8006d08:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006d10:	7bfa      	ldrb	r2, [r7, #15]
 8006d12:	6879      	ldr	r1, [r7, #4]
 8006d14:	4613      	mov	r3, r2
 8006d16:	00db      	lsls	r3, r3, #3
 8006d18:	1a9b      	subs	r3, r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	440b      	add	r3, r1
 8006d1e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006d22:	2200      	movs	r2, #0
 8006d24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006d26:	7bfa      	ldrb	r2, [r7, #15]
 8006d28:	6879      	ldr	r1, [r7, #4]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	00db      	lsls	r3, r3, #3
 8006d2e:	1a9b      	subs	r3, r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	440b      	add	r3, r1
 8006d34:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006d38:	2200      	movs	r2, #0
 8006d3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d3c:	7bfb      	ldrb	r3, [r7, #15]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	73fb      	strb	r3, [r7, #15]
 8006d42:	7bfa      	ldrb	r2, [r7, #15]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d3b5      	bcc.n	8006cb8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	603b      	str	r3, [r7, #0]
 8006d52:	687e      	ldr	r6, [r7, #4]
 8006d54:	466d      	mov	r5, sp
 8006d56:	f106 0410 	add.w	r4, r6, #16
 8006d5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006d66:	e885 0003 	stmia.w	r5, {r0, r1}
 8006d6a:	1d33      	adds	r3, r6, #4
 8006d6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d6e:	6838      	ldr	r0, [r7, #0]
 8006d70:	f005 f9c4 	bl	800c0fc <USB_DevInit>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d005      	beq.n	8006d86 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2202      	movs	r2, #2
 8006d7e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e014      	b.n	8006db0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d102      	bne.n	8006da4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f80a 	bl	8006db8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4618      	mov	r0, r3
 8006daa:	f005 fb7e 	bl	800c4aa <USB_DevDisconnect>

  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3714      	adds	r7, #20
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006db8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006de6:	4b05      	ldr	r3, [pc, #20]	; (8006dfc <HAL_PCDEx_ActivateLPM+0x44>)
 8006de8:	4313      	orrs	r3, r2
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	10000003 	.word	0x10000003

08006e00 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006e08:	4b29      	ldr	r3, [pc, #164]	; (8006eb0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	f003 0307 	and.w	r3, r3, #7
 8006e10:	2b06      	cmp	r3, #6
 8006e12:	d00a      	beq.n	8006e2a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006e14:	4b26      	ldr	r3, [pc, #152]	; (8006eb0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d001      	beq.n	8006e26 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e040      	b.n	8006ea8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006e26:	2300      	movs	r3, #0
 8006e28:	e03e      	b.n	8006ea8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006e2a:	4b21      	ldr	r3, [pc, #132]	; (8006eb0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006e32:	491f      	ldr	r1, [pc, #124]	; (8006eb0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006e3a:	f7fc fbeb 	bl	8003614 <HAL_GetTick>
 8006e3e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e40:	e009      	b.n	8006e56 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006e42:	f7fc fbe7 	bl	8003614 <HAL_GetTick>
 8006e46:	4602      	mov	r2, r0
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e50:	d901      	bls.n	8006e56 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e028      	b.n	8006ea8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e56:	4b16      	ldr	r3, [pc, #88]	; (8006eb0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e62:	d1ee      	bne.n	8006e42 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b1e      	cmp	r3, #30
 8006e68:	d008      	beq.n	8006e7c <HAL_PWREx_ConfigSupply+0x7c>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2b2e      	cmp	r3, #46	; 0x2e
 8006e6e:	d005      	beq.n	8006e7c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b1d      	cmp	r3, #29
 8006e74:	d002      	beq.n	8006e7c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b2d      	cmp	r3, #45	; 0x2d
 8006e7a:	d114      	bne.n	8006ea6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006e7c:	f7fc fbca 	bl	8003614 <HAL_GetTick>
 8006e80:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006e82:	e009      	b.n	8006e98 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006e84:	f7fc fbc6 	bl	8003614 <HAL_GetTick>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e92:	d901      	bls.n	8006e98 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e007      	b.n	8006ea8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006e98:	4b05      	ldr	r3, [pc, #20]	; (8006eb0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ea4:	d1ee      	bne.n	8006e84 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	58024800 	.word	0x58024800

08006eb4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006eb8:	4b05      	ldr	r3, [pc, #20]	; (8006ed0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	4a04      	ldr	r2, [pc, #16]	; (8006ed0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006ebe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ec2:	60d3      	str	r3, [r2, #12]
}
 8006ec4:	bf00      	nop
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	58024800 	.word	0x58024800

08006ed4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b08c      	sub	sp, #48	; 0x30
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d102      	bne.n	8006ee8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	f000 bc1c 	b.w	8007720 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0301 	and.w	r3, r3, #1
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 8087 	beq.w	8007004 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ef6:	4b9e      	ldr	r3, [pc, #632]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006f00:	4b9b      	ldr	r3, [pc, #620]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 8006f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f04:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f08:	2b10      	cmp	r3, #16
 8006f0a:	d007      	beq.n	8006f1c <HAL_RCC_OscConfig+0x48>
 8006f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0e:	2b18      	cmp	r3, #24
 8006f10:	d110      	bne.n	8006f34 <HAL_RCC_OscConfig+0x60>
 8006f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f14:	f003 0303 	and.w	r3, r3, #3
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d10b      	bne.n	8006f34 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f1c:	4b94      	ldr	r3, [pc, #592]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d06c      	beq.n	8007002 <HAL_RCC_OscConfig+0x12e>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d168      	bne.n	8007002 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e3f5      	b.n	8007720 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f3c:	d106      	bne.n	8006f4c <HAL_RCC_OscConfig+0x78>
 8006f3e:	4b8c      	ldr	r3, [pc, #560]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a8b      	ldr	r2, [pc, #556]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 8006f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f48:	6013      	str	r3, [r2, #0]
 8006f4a:	e02e      	b.n	8006faa <HAL_RCC_OscConfig+0xd6>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10c      	bne.n	8006f6e <HAL_RCC_OscConfig+0x9a>
 8006f54:	4b86      	ldr	r3, [pc, #536]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a85      	ldr	r2, [pc, #532]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 8006f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f5e:	6013      	str	r3, [r2, #0]
 8006f60:	4b83      	ldr	r3, [pc, #524]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a82      	ldr	r2, [pc, #520]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 8006f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f6a:	6013      	str	r3, [r2, #0]
 8006f6c:	e01d      	b.n	8006faa <HAL_RCC_OscConfig+0xd6>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f76:	d10c      	bne.n	8006f92 <HAL_RCC_OscConfig+0xbe>
 8006f78:	4b7d      	ldr	r3, [pc, #500]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a7c      	ldr	r2, [pc, #496]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 8006f7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f82:	6013      	str	r3, [r2, #0]
 8006f84:	4b7a      	ldr	r3, [pc, #488]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a79      	ldr	r2, [pc, #484]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 8006f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f8e:	6013      	str	r3, [r2, #0]
 8006f90:	e00b      	b.n	8006faa <HAL_RCC_OscConfig+0xd6>
 8006f92:	4b77      	ldr	r3, [pc, #476]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a76      	ldr	r2, [pc, #472]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 8006f98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f9c:	6013      	str	r3, [r2, #0]
 8006f9e:	4b74      	ldr	r3, [pc, #464]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a73      	ldr	r2, [pc, #460]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 8006fa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fa8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d013      	beq.n	8006fda <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb2:	f7fc fb2f 	bl	8003614 <HAL_GetTick>
 8006fb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fb8:	e008      	b.n	8006fcc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fba:	f7fc fb2b 	bl	8003614 <HAL_GetTick>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	2b64      	cmp	r3, #100	; 0x64
 8006fc6:	d901      	bls.n	8006fcc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e3a9      	b.n	8007720 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fcc:	4b68      	ldr	r3, [pc, #416]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d0f0      	beq.n	8006fba <HAL_RCC_OscConfig+0xe6>
 8006fd8:	e014      	b.n	8007004 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fda:	f7fc fb1b 	bl	8003614 <HAL_GetTick>
 8006fde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006fe0:	e008      	b.n	8006ff4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fe2:	f7fc fb17 	bl	8003614 <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	2b64      	cmp	r3, #100	; 0x64
 8006fee:	d901      	bls.n	8006ff4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e395      	b.n	8007720 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ff4:	4b5e      	ldr	r3, [pc, #376]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1f0      	bne.n	8006fe2 <HAL_RCC_OscConfig+0x10e>
 8007000:	e000      	b.n	8007004 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007002:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	2b00      	cmp	r3, #0
 800700e:	f000 80ca 	beq.w	80071a6 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007012:	4b57      	ldr	r3, [pc, #348]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800701a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800701c:	4b54      	ldr	r3, [pc, #336]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 800701e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007020:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007022:	6a3b      	ldr	r3, [r7, #32]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d007      	beq.n	8007038 <HAL_RCC_OscConfig+0x164>
 8007028:	6a3b      	ldr	r3, [r7, #32]
 800702a:	2b18      	cmp	r3, #24
 800702c:	d156      	bne.n	80070dc <HAL_RCC_OscConfig+0x208>
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	f003 0303 	and.w	r3, r3, #3
 8007034:	2b00      	cmp	r3, #0
 8007036:	d151      	bne.n	80070dc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007038:	4b4d      	ldr	r3, [pc, #308]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0304 	and.w	r3, r3, #4
 8007040:	2b00      	cmp	r3, #0
 8007042:	d005      	beq.n	8007050 <HAL_RCC_OscConfig+0x17c>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d101      	bne.n	8007050 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e367      	b.n	8007720 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007050:	4b47      	ldr	r3, [pc, #284]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f023 0219 	bic.w	r2, r3, #25
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	4944      	ldr	r1, [pc, #272]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 800705e:	4313      	orrs	r3, r2
 8007060:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007062:	f7fc fad7 	bl	8003614 <HAL_GetTick>
 8007066:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007068:	e008      	b.n	800707c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800706a:	f7fc fad3 	bl	8003614 <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	2b02      	cmp	r3, #2
 8007076:	d901      	bls.n	800707c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e351      	b.n	8007720 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800707c:	4b3c      	ldr	r3, [pc, #240]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0304 	and.w	r3, r3, #4
 8007084:	2b00      	cmp	r3, #0
 8007086:	d0f0      	beq.n	800706a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007088:	f7fc faf4 	bl	8003674 <HAL_GetREVID>
 800708c:	4603      	mov	r3, r0
 800708e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007092:	4293      	cmp	r3, r2
 8007094:	d817      	bhi.n	80070c6 <HAL_RCC_OscConfig+0x1f2>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	2b40      	cmp	r3, #64	; 0x40
 800709c:	d108      	bne.n	80070b0 <HAL_RCC_OscConfig+0x1dc>
 800709e:	4b34      	ldr	r3, [pc, #208]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80070a6:	4a32      	ldr	r2, [pc, #200]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 80070a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070ac:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070ae:	e07a      	b.n	80071a6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070b0:	4b2f      	ldr	r3, [pc, #188]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	031b      	lsls	r3, r3, #12
 80070be:	492c      	ldr	r1, [pc, #176]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070c4:	e06f      	b.n	80071a6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070c6:	4b2a      	ldr	r3, [pc, #168]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	061b      	lsls	r3, r3, #24
 80070d4:	4926      	ldr	r1, [pc, #152]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070da:	e064      	b.n	80071a6 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d047      	beq.n	8007174 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80070e4:	4b22      	ldr	r3, [pc, #136]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f023 0219 	bic.w	r2, r3, #25
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	491f      	ldr	r1, [pc, #124]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 80070f2:	4313      	orrs	r3, r2
 80070f4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070f6:	f7fc fa8d 	bl	8003614 <HAL_GetTick>
 80070fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070fc:	e008      	b.n	8007110 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070fe:	f7fc fa89 	bl	8003614 <HAL_GetTick>
 8007102:	4602      	mov	r2, r0
 8007104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	2b02      	cmp	r3, #2
 800710a:	d901      	bls.n	8007110 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800710c:	2303      	movs	r3, #3
 800710e:	e307      	b.n	8007720 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007110:	4b17      	ldr	r3, [pc, #92]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0304 	and.w	r3, r3, #4
 8007118:	2b00      	cmp	r3, #0
 800711a:	d0f0      	beq.n	80070fe <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800711c:	f7fc faaa 	bl	8003674 <HAL_GetREVID>
 8007120:	4603      	mov	r3, r0
 8007122:	f241 0203 	movw	r2, #4099	; 0x1003
 8007126:	4293      	cmp	r3, r2
 8007128:	d817      	bhi.n	800715a <HAL_RCC_OscConfig+0x286>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	2b40      	cmp	r3, #64	; 0x40
 8007130:	d108      	bne.n	8007144 <HAL_RCC_OscConfig+0x270>
 8007132:	4b0f      	ldr	r3, [pc, #60]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800713a:	4a0d      	ldr	r2, [pc, #52]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 800713c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007140:	6053      	str	r3, [r2, #4]
 8007142:	e030      	b.n	80071a6 <HAL_RCC_OscConfig+0x2d2>
 8007144:	4b0a      	ldr	r3, [pc, #40]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	031b      	lsls	r3, r3, #12
 8007152:	4907      	ldr	r1, [pc, #28]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 8007154:	4313      	orrs	r3, r2
 8007156:	604b      	str	r3, [r1, #4]
 8007158:	e025      	b.n	80071a6 <HAL_RCC_OscConfig+0x2d2>
 800715a:	4b05      	ldr	r3, [pc, #20]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	061b      	lsls	r3, r3, #24
 8007168:	4901      	ldr	r1, [pc, #4]	; (8007170 <HAL_RCC_OscConfig+0x29c>)
 800716a:	4313      	orrs	r3, r2
 800716c:	604b      	str	r3, [r1, #4]
 800716e:	e01a      	b.n	80071a6 <HAL_RCC_OscConfig+0x2d2>
 8007170:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007174:	4b9e      	ldr	r3, [pc, #632]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a9d      	ldr	r2, [pc, #628]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 800717a:	f023 0301 	bic.w	r3, r3, #1
 800717e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007180:	f7fc fa48 	bl	8003614 <HAL_GetTick>
 8007184:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007186:	e008      	b.n	800719a <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007188:	f7fc fa44 	bl	8003614 <HAL_GetTick>
 800718c:	4602      	mov	r2, r0
 800718e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	2b02      	cmp	r3, #2
 8007194:	d901      	bls.n	800719a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	e2c2      	b.n	8007720 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800719a:	4b95      	ldr	r3, [pc, #596]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0304 	and.w	r3, r3, #4
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1f0      	bne.n	8007188 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0310 	and.w	r3, r3, #16
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f000 80a9 	beq.w	8007306 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071b4:	4b8e      	ldr	r3, [pc, #568]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071bc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80071be:	4b8c      	ldr	r3, [pc, #560]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 80071c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	2b08      	cmp	r3, #8
 80071c8:	d007      	beq.n	80071da <HAL_RCC_OscConfig+0x306>
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	2b18      	cmp	r3, #24
 80071ce:	d13a      	bne.n	8007246 <HAL_RCC_OscConfig+0x372>
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	f003 0303 	and.w	r3, r3, #3
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d135      	bne.n	8007246 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071da:	4b85      	ldr	r3, [pc, #532]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d005      	beq.n	80071f2 <HAL_RCC_OscConfig+0x31e>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	69db      	ldr	r3, [r3, #28]
 80071ea:	2b80      	cmp	r3, #128	; 0x80
 80071ec:	d001      	beq.n	80071f2 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e296      	b.n	8007720 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071f2:	f7fc fa3f 	bl	8003674 <HAL_GetREVID>
 80071f6:	4603      	mov	r3, r0
 80071f8:	f241 0203 	movw	r2, #4099	; 0x1003
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d817      	bhi.n	8007230 <HAL_RCC_OscConfig+0x35c>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a1b      	ldr	r3, [r3, #32]
 8007204:	2b20      	cmp	r3, #32
 8007206:	d108      	bne.n	800721a <HAL_RCC_OscConfig+0x346>
 8007208:	4b79      	ldr	r3, [pc, #484]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007210:	4a77      	ldr	r2, [pc, #476]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 8007212:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007216:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007218:	e075      	b.n	8007306 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800721a:	4b75      	ldr	r3, [pc, #468]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	069b      	lsls	r3, r3, #26
 8007228:	4971      	ldr	r1, [pc, #452]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 800722a:	4313      	orrs	r3, r2
 800722c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800722e:	e06a      	b.n	8007306 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007230:	4b6f      	ldr	r3, [pc, #444]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a1b      	ldr	r3, [r3, #32]
 800723c:	061b      	lsls	r3, r3, #24
 800723e:	496c      	ldr	r1, [pc, #432]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 8007240:	4313      	orrs	r3, r2
 8007242:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007244:	e05f      	b.n	8007306 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	69db      	ldr	r3, [r3, #28]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d042      	beq.n	80072d4 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800724e:	4b68      	ldr	r3, [pc, #416]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a67      	ldr	r2, [pc, #412]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 8007254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007258:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800725a:	f7fc f9db 	bl	8003614 <HAL_GetTick>
 800725e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007260:	e008      	b.n	8007274 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007262:	f7fc f9d7 	bl	8003614 <HAL_GetTick>
 8007266:	4602      	mov	r2, r0
 8007268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	2b02      	cmp	r3, #2
 800726e:	d901      	bls.n	8007274 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e255      	b.n	8007720 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007274:	4b5e      	ldr	r3, [pc, #376]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800727c:	2b00      	cmp	r3, #0
 800727e:	d0f0      	beq.n	8007262 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007280:	f7fc f9f8 	bl	8003674 <HAL_GetREVID>
 8007284:	4603      	mov	r3, r0
 8007286:	f241 0203 	movw	r2, #4099	; 0x1003
 800728a:	4293      	cmp	r3, r2
 800728c:	d817      	bhi.n	80072be <HAL_RCC_OscConfig+0x3ea>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	2b20      	cmp	r3, #32
 8007294:	d108      	bne.n	80072a8 <HAL_RCC_OscConfig+0x3d4>
 8007296:	4b56      	ldr	r3, [pc, #344]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800729e:	4a54      	ldr	r2, [pc, #336]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 80072a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072a4:	6053      	str	r3, [r2, #4]
 80072a6:	e02e      	b.n	8007306 <HAL_RCC_OscConfig+0x432>
 80072a8:	4b51      	ldr	r3, [pc, #324]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a1b      	ldr	r3, [r3, #32]
 80072b4:	069b      	lsls	r3, r3, #26
 80072b6:	494e      	ldr	r1, [pc, #312]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 80072b8:	4313      	orrs	r3, r2
 80072ba:	604b      	str	r3, [r1, #4]
 80072bc:	e023      	b.n	8007306 <HAL_RCC_OscConfig+0x432>
 80072be:	4b4c      	ldr	r3, [pc, #304]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a1b      	ldr	r3, [r3, #32]
 80072ca:	061b      	lsls	r3, r3, #24
 80072cc:	4948      	ldr	r1, [pc, #288]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 80072ce:	4313      	orrs	r3, r2
 80072d0:	60cb      	str	r3, [r1, #12]
 80072d2:	e018      	b.n	8007306 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80072d4:	4b46      	ldr	r3, [pc, #280]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a45      	ldr	r2, [pc, #276]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 80072da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072e0:	f7fc f998 	bl	8003614 <HAL_GetTick>
 80072e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80072e6:	e008      	b.n	80072fa <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80072e8:	f7fc f994 	bl	8003614 <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d901      	bls.n	80072fa <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e212      	b.n	8007720 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80072fa:	4b3d      	ldr	r3, [pc, #244]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1f0      	bne.n	80072e8 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 0308 	and.w	r3, r3, #8
 800730e:	2b00      	cmp	r3, #0
 8007310:	d036      	beq.n	8007380 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d019      	beq.n	800734e <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800731a:	4b35      	ldr	r3, [pc, #212]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 800731c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800731e:	4a34      	ldr	r2, [pc, #208]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 8007320:	f043 0301 	orr.w	r3, r3, #1
 8007324:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007326:	f7fc f975 	bl	8003614 <HAL_GetTick>
 800732a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800732c:	e008      	b.n	8007340 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800732e:	f7fc f971 	bl	8003614 <HAL_GetTick>
 8007332:	4602      	mov	r2, r0
 8007334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	2b02      	cmp	r3, #2
 800733a:	d901      	bls.n	8007340 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e1ef      	b.n	8007720 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007340:	4b2b      	ldr	r3, [pc, #172]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 8007342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007344:	f003 0302 	and.w	r3, r3, #2
 8007348:	2b00      	cmp	r3, #0
 800734a:	d0f0      	beq.n	800732e <HAL_RCC_OscConfig+0x45a>
 800734c:	e018      	b.n	8007380 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800734e:	4b28      	ldr	r3, [pc, #160]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 8007350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007352:	4a27      	ldr	r2, [pc, #156]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 8007354:	f023 0301 	bic.w	r3, r3, #1
 8007358:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800735a:	f7fc f95b 	bl	8003614 <HAL_GetTick>
 800735e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007360:	e008      	b.n	8007374 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007362:	f7fc f957 	bl	8003614 <HAL_GetTick>
 8007366:	4602      	mov	r2, r0
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	2b02      	cmp	r3, #2
 800736e:	d901      	bls.n	8007374 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	e1d5      	b.n	8007720 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007374:	4b1e      	ldr	r3, [pc, #120]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 8007376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007378:	f003 0302 	and.w	r3, r3, #2
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1f0      	bne.n	8007362 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0320 	and.w	r3, r3, #32
 8007388:	2b00      	cmp	r3, #0
 800738a:	d039      	beq.n	8007400 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d019      	beq.n	80073c8 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007394:	4b16      	ldr	r3, [pc, #88]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a15      	ldr	r2, [pc, #84]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 800739a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800739e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80073a0:	f7fc f938 	bl	8003614 <HAL_GetTick>
 80073a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80073a6:	e008      	b.n	80073ba <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80073a8:	f7fc f934 	bl	8003614 <HAL_GetTick>
 80073ac:	4602      	mov	r2, r0
 80073ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d901      	bls.n	80073ba <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e1b2      	b.n	8007720 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80073ba:	4b0d      	ldr	r3, [pc, #52]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d0f0      	beq.n	80073a8 <HAL_RCC_OscConfig+0x4d4>
 80073c6:	e01b      	b.n	8007400 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80073c8:	4b09      	ldr	r3, [pc, #36]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a08      	ldr	r2, [pc, #32]	; (80073f0 <HAL_RCC_OscConfig+0x51c>)
 80073ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073d2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80073d4:	f7fc f91e 	bl	8003614 <HAL_GetTick>
 80073d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80073da:	e00b      	b.n	80073f4 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80073dc:	f7fc f91a 	bl	8003614 <HAL_GetTick>
 80073e0:	4602      	mov	r2, r0
 80073e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e4:	1ad3      	subs	r3, r2, r3
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	d904      	bls.n	80073f4 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80073ea:	2303      	movs	r3, #3
 80073ec:	e198      	b.n	8007720 <HAL_RCC_OscConfig+0x84c>
 80073ee:	bf00      	nop
 80073f0:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80073f4:	4ba3      	ldr	r3, [pc, #652]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1ed      	bne.n	80073dc <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0304 	and.w	r3, r3, #4
 8007408:	2b00      	cmp	r3, #0
 800740a:	f000 8081 	beq.w	8007510 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800740e:	4b9e      	ldr	r3, [pc, #632]	; (8007688 <HAL_RCC_OscConfig+0x7b4>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a9d      	ldr	r2, [pc, #628]	; (8007688 <HAL_RCC_OscConfig+0x7b4>)
 8007414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007418:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800741a:	f7fc f8fb 	bl	8003614 <HAL_GetTick>
 800741e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007420:	e008      	b.n	8007434 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007422:	f7fc f8f7 	bl	8003614 <HAL_GetTick>
 8007426:	4602      	mov	r2, r0
 8007428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	2b64      	cmp	r3, #100	; 0x64
 800742e:	d901      	bls.n	8007434 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8007430:	2303      	movs	r3, #3
 8007432:	e175      	b.n	8007720 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007434:	4b94      	ldr	r3, [pc, #592]	; (8007688 <HAL_RCC_OscConfig+0x7b4>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800743c:	2b00      	cmp	r3, #0
 800743e:	d0f0      	beq.n	8007422 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d106      	bne.n	8007456 <HAL_RCC_OscConfig+0x582>
 8007448:	4b8e      	ldr	r3, [pc, #568]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 800744a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800744c:	4a8d      	ldr	r2, [pc, #564]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 800744e:	f043 0301 	orr.w	r3, r3, #1
 8007452:	6713      	str	r3, [r2, #112]	; 0x70
 8007454:	e02d      	b.n	80074b2 <HAL_RCC_OscConfig+0x5de>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10c      	bne.n	8007478 <HAL_RCC_OscConfig+0x5a4>
 800745e:	4b89      	ldr	r3, [pc, #548]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 8007460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007462:	4a88      	ldr	r2, [pc, #544]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 8007464:	f023 0301 	bic.w	r3, r3, #1
 8007468:	6713      	str	r3, [r2, #112]	; 0x70
 800746a:	4b86      	ldr	r3, [pc, #536]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 800746c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800746e:	4a85      	ldr	r2, [pc, #532]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 8007470:	f023 0304 	bic.w	r3, r3, #4
 8007474:	6713      	str	r3, [r2, #112]	; 0x70
 8007476:	e01c      	b.n	80074b2 <HAL_RCC_OscConfig+0x5de>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	2b05      	cmp	r3, #5
 800747e:	d10c      	bne.n	800749a <HAL_RCC_OscConfig+0x5c6>
 8007480:	4b80      	ldr	r3, [pc, #512]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 8007482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007484:	4a7f      	ldr	r2, [pc, #508]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 8007486:	f043 0304 	orr.w	r3, r3, #4
 800748a:	6713      	str	r3, [r2, #112]	; 0x70
 800748c:	4b7d      	ldr	r3, [pc, #500]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 800748e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007490:	4a7c      	ldr	r2, [pc, #496]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 8007492:	f043 0301 	orr.w	r3, r3, #1
 8007496:	6713      	str	r3, [r2, #112]	; 0x70
 8007498:	e00b      	b.n	80074b2 <HAL_RCC_OscConfig+0x5de>
 800749a:	4b7a      	ldr	r3, [pc, #488]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 800749c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800749e:	4a79      	ldr	r2, [pc, #484]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 80074a0:	f023 0301 	bic.w	r3, r3, #1
 80074a4:	6713      	str	r3, [r2, #112]	; 0x70
 80074a6:	4b77      	ldr	r3, [pc, #476]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 80074a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074aa:	4a76      	ldr	r2, [pc, #472]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 80074ac:	f023 0304 	bic.w	r3, r3, #4
 80074b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d015      	beq.n	80074e6 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074ba:	f7fc f8ab 	bl	8003614 <HAL_GetTick>
 80074be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074c0:	e00a      	b.n	80074d8 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074c2:	f7fc f8a7 	bl	8003614 <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d901      	bls.n	80074d8 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e123      	b.n	8007720 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074d8:	4b6a      	ldr	r3, [pc, #424]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 80074da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074dc:	f003 0302 	and.w	r3, r3, #2
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d0ee      	beq.n	80074c2 <HAL_RCC_OscConfig+0x5ee>
 80074e4:	e014      	b.n	8007510 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074e6:	f7fc f895 	bl	8003614 <HAL_GetTick>
 80074ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80074ec:	e00a      	b.n	8007504 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074ee:	f7fc f891 	bl	8003614 <HAL_GetTick>
 80074f2:	4602      	mov	r2, r0
 80074f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d901      	bls.n	8007504 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	e10d      	b.n	8007720 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007504:	4b5f      	ldr	r3, [pc, #380]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 8007506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007508:	f003 0302 	and.w	r3, r3, #2
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1ee      	bne.n	80074ee <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 8102 	beq.w	800771e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800751a:	4b5a      	ldr	r3, [pc, #360]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007522:	2b18      	cmp	r3, #24
 8007524:	f000 80bd 	beq.w	80076a2 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752c:	2b02      	cmp	r3, #2
 800752e:	f040 8095 	bne.w	800765c <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007532:	4b54      	ldr	r3, [pc, #336]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a53      	ldr	r2, [pc, #332]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 8007538:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800753c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800753e:	f7fc f869 	bl	8003614 <HAL_GetTick>
 8007542:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007544:	e008      	b.n	8007558 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007546:	f7fc f865 	bl	8003614 <HAL_GetTick>
 800754a:	4602      	mov	r2, r0
 800754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	2b02      	cmp	r3, #2
 8007552:	d901      	bls.n	8007558 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8007554:	2303      	movs	r3, #3
 8007556:	e0e3      	b.n	8007720 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007558:	4b4a      	ldr	r3, [pc, #296]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1f0      	bne.n	8007546 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007564:	4b47      	ldr	r3, [pc, #284]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 8007566:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007568:	4b48      	ldr	r3, [pc, #288]	; (800768c <HAL_RCC_OscConfig+0x7b8>)
 800756a:	4013      	ands	r3, r2
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007574:	0112      	lsls	r2, r2, #4
 8007576:	430a      	orrs	r2, r1
 8007578:	4942      	ldr	r1, [pc, #264]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 800757a:	4313      	orrs	r3, r2
 800757c:	628b      	str	r3, [r1, #40]	; 0x28
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007582:	3b01      	subs	r3, #1
 8007584:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800758c:	3b01      	subs	r3, #1
 800758e:	025b      	lsls	r3, r3, #9
 8007590:	b29b      	uxth	r3, r3
 8007592:	431a      	orrs	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007598:	3b01      	subs	r3, #1
 800759a:	041b      	lsls	r3, r3, #16
 800759c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80075a0:	431a      	orrs	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a6:	3b01      	subs	r3, #1
 80075a8:	061b      	lsls	r3, r3, #24
 80075aa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80075ae:	4935      	ldr	r1, [pc, #212]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 80075b0:	4313      	orrs	r3, r2
 80075b2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80075b4:	4b33      	ldr	r3, [pc, #204]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 80075b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b8:	4a32      	ldr	r2, [pc, #200]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 80075ba:	f023 0301 	bic.w	r3, r3, #1
 80075be:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80075c0:	4b30      	ldr	r3, [pc, #192]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 80075c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075c4:	4b32      	ldr	r3, [pc, #200]	; (8007690 <HAL_RCC_OscConfig+0x7bc>)
 80075c6:	4013      	ands	r3, r2
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80075cc:	00d2      	lsls	r2, r2, #3
 80075ce:	492d      	ldr	r1, [pc, #180]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 80075d0:	4313      	orrs	r3, r2
 80075d2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80075d4:	4b2b      	ldr	r3, [pc, #172]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 80075d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d8:	f023 020c 	bic.w	r2, r3, #12
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e0:	4928      	ldr	r1, [pc, #160]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 80075e2:	4313      	orrs	r3, r2
 80075e4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80075e6:	4b27      	ldr	r3, [pc, #156]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 80075e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ea:	f023 0202 	bic.w	r2, r3, #2
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f2:	4924      	ldr	r1, [pc, #144]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 80075f4:	4313      	orrs	r3, r2
 80075f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80075f8:	4b22      	ldr	r3, [pc, #136]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 80075fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fc:	4a21      	ldr	r2, [pc, #132]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 80075fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007602:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007604:	4b1f      	ldr	r3, [pc, #124]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 8007606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007608:	4a1e      	ldr	r2, [pc, #120]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 800760a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800760e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007610:	4b1c      	ldr	r3, [pc, #112]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 8007612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007614:	4a1b      	ldr	r2, [pc, #108]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 8007616:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800761a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800761c:	4b19      	ldr	r3, [pc, #100]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 800761e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007620:	4a18      	ldr	r2, [pc, #96]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 8007622:	f043 0301 	orr.w	r3, r3, #1
 8007626:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007628:	4b16      	ldr	r3, [pc, #88]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a15      	ldr	r2, [pc, #84]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 800762e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007634:	f7fb ffee 	bl	8003614 <HAL_GetTick>
 8007638:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800763a:	e008      	b.n	800764e <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800763c:	f7fb ffea 	bl	8003614 <HAL_GetTick>
 8007640:	4602      	mov	r2, r0
 8007642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	2b02      	cmp	r3, #2
 8007648:	d901      	bls.n	800764e <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e068      	b.n	8007720 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800764e:	4b0d      	ldr	r3, [pc, #52]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d0f0      	beq.n	800763c <HAL_RCC_OscConfig+0x768>
 800765a:	e060      	b.n	800771e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800765c:	4b09      	ldr	r3, [pc, #36]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a08      	ldr	r2, [pc, #32]	; (8007684 <HAL_RCC_OscConfig+0x7b0>)
 8007662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007668:	f7fb ffd4 	bl	8003614 <HAL_GetTick>
 800766c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800766e:	e011      	b.n	8007694 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007670:	f7fb ffd0 	bl	8003614 <HAL_GetTick>
 8007674:	4602      	mov	r2, r0
 8007676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	2b02      	cmp	r3, #2
 800767c:	d90a      	bls.n	8007694 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e04e      	b.n	8007720 <HAL_RCC_OscConfig+0x84c>
 8007682:	bf00      	nop
 8007684:	58024400 	.word	0x58024400
 8007688:	58024800 	.word	0x58024800
 800768c:	fffffc0c 	.word	0xfffffc0c
 8007690:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007694:	4b24      	ldr	r3, [pc, #144]	; (8007728 <HAL_RCC_OscConfig+0x854>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1e7      	bne.n	8007670 <HAL_RCC_OscConfig+0x79c>
 80076a0:	e03d      	b.n	800771e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80076a2:	4b21      	ldr	r3, [pc, #132]	; (8007728 <HAL_RCC_OscConfig+0x854>)
 80076a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80076a8:	4b1f      	ldr	r3, [pc, #124]	; (8007728 <HAL_RCC_OscConfig+0x854>)
 80076aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ac:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d031      	beq.n	800771a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	f003 0203 	and.w	r2, r3, #3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d12a      	bne.n	800771a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	091b      	lsrs	r3, r3, #4
 80076c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d122      	bne.n	800771a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076de:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d11a      	bne.n	800771a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	0a5b      	lsrs	r3, r3, #9
 80076e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076f0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d111      	bne.n	800771a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	0c1b      	lsrs	r3, r3, #16
 80076fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007702:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007704:	429a      	cmp	r2, r3
 8007706:	d108      	bne.n	800771a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	0e1b      	lsrs	r3, r3, #24
 800770c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007714:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007716:	429a      	cmp	r2, r3
 8007718:	d001      	beq.n	800771e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e000      	b.n	8007720 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3730      	adds	r7, #48	; 0x30
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	58024400 	.word	0x58024400

0800772c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d101      	bne.n	8007740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e19c      	b.n	8007a7a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007740:	4b8a      	ldr	r3, [pc, #552]	; (800796c <HAL_RCC_ClockConfig+0x240>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 030f 	and.w	r3, r3, #15
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	429a      	cmp	r2, r3
 800774c:	d910      	bls.n	8007770 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800774e:	4b87      	ldr	r3, [pc, #540]	; (800796c <HAL_RCC_ClockConfig+0x240>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f023 020f 	bic.w	r2, r3, #15
 8007756:	4985      	ldr	r1, [pc, #532]	; (800796c <HAL_RCC_ClockConfig+0x240>)
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	4313      	orrs	r3, r2
 800775c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800775e:	4b83      	ldr	r3, [pc, #524]	; (800796c <HAL_RCC_ClockConfig+0x240>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 030f 	and.w	r3, r3, #15
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	429a      	cmp	r2, r3
 800776a:	d001      	beq.n	8007770 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e184      	b.n	8007a7a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 0304 	and.w	r3, r3, #4
 8007778:	2b00      	cmp	r3, #0
 800777a:	d010      	beq.n	800779e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	691a      	ldr	r2, [r3, #16]
 8007780:	4b7b      	ldr	r3, [pc, #492]	; (8007970 <HAL_RCC_ClockConfig+0x244>)
 8007782:	699b      	ldr	r3, [r3, #24]
 8007784:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007788:	429a      	cmp	r2, r3
 800778a:	d908      	bls.n	800779e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800778c:	4b78      	ldr	r3, [pc, #480]	; (8007970 <HAL_RCC_ClockConfig+0x244>)
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	4975      	ldr	r1, [pc, #468]	; (8007970 <HAL_RCC_ClockConfig+0x244>)
 800779a:	4313      	orrs	r3, r2
 800779c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0308 	and.w	r3, r3, #8
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d010      	beq.n	80077cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	695a      	ldr	r2, [r3, #20]
 80077ae:	4b70      	ldr	r3, [pc, #448]	; (8007970 <HAL_RCC_ClockConfig+0x244>)
 80077b0:	69db      	ldr	r3, [r3, #28]
 80077b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d908      	bls.n	80077cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80077ba:	4b6d      	ldr	r3, [pc, #436]	; (8007970 <HAL_RCC_ClockConfig+0x244>)
 80077bc:	69db      	ldr	r3, [r3, #28]
 80077be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	695b      	ldr	r3, [r3, #20]
 80077c6:	496a      	ldr	r1, [pc, #424]	; (8007970 <HAL_RCC_ClockConfig+0x244>)
 80077c8:	4313      	orrs	r3, r2
 80077ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0310 	and.w	r3, r3, #16
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d010      	beq.n	80077fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	699a      	ldr	r2, [r3, #24]
 80077dc:	4b64      	ldr	r3, [pc, #400]	; (8007970 <HAL_RCC_ClockConfig+0x244>)
 80077de:	69db      	ldr	r3, [r3, #28]
 80077e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d908      	bls.n	80077fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80077e8:	4b61      	ldr	r3, [pc, #388]	; (8007970 <HAL_RCC_ClockConfig+0x244>)
 80077ea:	69db      	ldr	r3, [r3, #28]
 80077ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	495e      	ldr	r1, [pc, #376]	; (8007970 <HAL_RCC_ClockConfig+0x244>)
 80077f6:	4313      	orrs	r3, r2
 80077f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0320 	and.w	r3, r3, #32
 8007802:	2b00      	cmp	r3, #0
 8007804:	d010      	beq.n	8007828 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	69da      	ldr	r2, [r3, #28]
 800780a:	4b59      	ldr	r3, [pc, #356]	; (8007970 <HAL_RCC_ClockConfig+0x244>)
 800780c:	6a1b      	ldr	r3, [r3, #32]
 800780e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007812:	429a      	cmp	r2, r3
 8007814:	d908      	bls.n	8007828 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007816:	4b56      	ldr	r3, [pc, #344]	; (8007970 <HAL_RCC_ClockConfig+0x244>)
 8007818:	6a1b      	ldr	r3, [r3, #32]
 800781a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	69db      	ldr	r3, [r3, #28]
 8007822:	4953      	ldr	r1, [pc, #332]	; (8007970 <HAL_RCC_ClockConfig+0x244>)
 8007824:	4313      	orrs	r3, r2
 8007826:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f003 0302 	and.w	r3, r3, #2
 8007830:	2b00      	cmp	r3, #0
 8007832:	d010      	beq.n	8007856 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	68da      	ldr	r2, [r3, #12]
 8007838:	4b4d      	ldr	r3, [pc, #308]	; (8007970 <HAL_RCC_ClockConfig+0x244>)
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	f003 030f 	and.w	r3, r3, #15
 8007840:	429a      	cmp	r2, r3
 8007842:	d908      	bls.n	8007856 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007844:	4b4a      	ldr	r3, [pc, #296]	; (8007970 <HAL_RCC_ClockConfig+0x244>)
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	f023 020f 	bic.w	r2, r3, #15
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	4947      	ldr	r1, [pc, #284]	; (8007970 <HAL_RCC_ClockConfig+0x244>)
 8007852:	4313      	orrs	r3, r2
 8007854:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	2b00      	cmp	r3, #0
 8007860:	d055      	beq.n	800790e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007862:	4b43      	ldr	r3, [pc, #268]	; (8007970 <HAL_RCC_ClockConfig+0x244>)
 8007864:	699b      	ldr	r3, [r3, #24]
 8007866:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	4940      	ldr	r1, [pc, #256]	; (8007970 <HAL_RCC_ClockConfig+0x244>)
 8007870:	4313      	orrs	r3, r2
 8007872:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	2b02      	cmp	r3, #2
 800787a:	d107      	bne.n	800788c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800787c:	4b3c      	ldr	r3, [pc, #240]	; (8007970 <HAL_RCC_ClockConfig+0x244>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007884:	2b00      	cmp	r3, #0
 8007886:	d121      	bne.n	80078cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e0f6      	b.n	8007a7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	2b03      	cmp	r3, #3
 8007892:	d107      	bne.n	80078a4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007894:	4b36      	ldr	r3, [pc, #216]	; (8007970 <HAL_RCC_ClockConfig+0x244>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800789c:	2b00      	cmp	r3, #0
 800789e:	d115      	bne.n	80078cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	e0ea      	b.n	8007a7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d107      	bne.n	80078bc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80078ac:	4b30      	ldr	r3, [pc, #192]	; (8007970 <HAL_RCC_ClockConfig+0x244>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d109      	bne.n	80078cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e0de      	b.n	8007a7a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078bc:	4b2c      	ldr	r3, [pc, #176]	; (8007970 <HAL_RCC_ClockConfig+0x244>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0304 	and.w	r3, r3, #4
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d101      	bne.n	80078cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e0d6      	b.n	8007a7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80078cc:	4b28      	ldr	r3, [pc, #160]	; (8007970 <HAL_RCC_ClockConfig+0x244>)
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	f023 0207 	bic.w	r2, r3, #7
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	4925      	ldr	r1, [pc, #148]	; (8007970 <HAL_RCC_ClockConfig+0x244>)
 80078da:	4313      	orrs	r3, r2
 80078dc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078de:	f7fb fe99 	bl	8003614 <HAL_GetTick>
 80078e2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078e4:	e00a      	b.n	80078fc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078e6:	f7fb fe95 	bl	8003614 <HAL_GetTick>
 80078ea:	4602      	mov	r2, r0
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d901      	bls.n	80078fc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e0be      	b.n	8007a7a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078fc:	4b1c      	ldr	r3, [pc, #112]	; (8007970 <HAL_RCC_ClockConfig+0x244>)
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	00db      	lsls	r3, r3, #3
 800790a:	429a      	cmp	r2, r3
 800790c:	d1eb      	bne.n	80078e6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 0302 	and.w	r3, r3, #2
 8007916:	2b00      	cmp	r3, #0
 8007918:	d010      	beq.n	800793c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	68da      	ldr	r2, [r3, #12]
 800791e:	4b14      	ldr	r3, [pc, #80]	; (8007970 <HAL_RCC_ClockConfig+0x244>)
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	f003 030f 	and.w	r3, r3, #15
 8007926:	429a      	cmp	r2, r3
 8007928:	d208      	bcs.n	800793c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800792a:	4b11      	ldr	r3, [pc, #68]	; (8007970 <HAL_RCC_ClockConfig+0x244>)
 800792c:	699b      	ldr	r3, [r3, #24]
 800792e:	f023 020f 	bic.w	r2, r3, #15
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	490e      	ldr	r1, [pc, #56]	; (8007970 <HAL_RCC_ClockConfig+0x244>)
 8007938:	4313      	orrs	r3, r2
 800793a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800793c:	4b0b      	ldr	r3, [pc, #44]	; (800796c <HAL_RCC_ClockConfig+0x240>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 030f 	and.w	r3, r3, #15
 8007944:	683a      	ldr	r2, [r7, #0]
 8007946:	429a      	cmp	r2, r3
 8007948:	d214      	bcs.n	8007974 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800794a:	4b08      	ldr	r3, [pc, #32]	; (800796c <HAL_RCC_ClockConfig+0x240>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f023 020f 	bic.w	r2, r3, #15
 8007952:	4906      	ldr	r1, [pc, #24]	; (800796c <HAL_RCC_ClockConfig+0x240>)
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	4313      	orrs	r3, r2
 8007958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800795a:	4b04      	ldr	r3, [pc, #16]	; (800796c <HAL_RCC_ClockConfig+0x240>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 030f 	and.w	r3, r3, #15
 8007962:	683a      	ldr	r2, [r7, #0]
 8007964:	429a      	cmp	r2, r3
 8007966:	d005      	beq.n	8007974 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	e086      	b.n	8007a7a <HAL_RCC_ClockConfig+0x34e>
 800796c:	52002000 	.word	0x52002000
 8007970:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 0304 	and.w	r3, r3, #4
 800797c:	2b00      	cmp	r3, #0
 800797e:	d010      	beq.n	80079a2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	691a      	ldr	r2, [r3, #16]
 8007984:	4b3f      	ldr	r3, [pc, #252]	; (8007a84 <HAL_RCC_ClockConfig+0x358>)
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800798c:	429a      	cmp	r2, r3
 800798e:	d208      	bcs.n	80079a2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007990:	4b3c      	ldr	r3, [pc, #240]	; (8007a84 <HAL_RCC_ClockConfig+0x358>)
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	4939      	ldr	r1, [pc, #228]	; (8007a84 <HAL_RCC_ClockConfig+0x358>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 0308 	and.w	r3, r3, #8
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d010      	beq.n	80079d0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	695a      	ldr	r2, [r3, #20]
 80079b2:	4b34      	ldr	r3, [pc, #208]	; (8007a84 <HAL_RCC_ClockConfig+0x358>)
 80079b4:	69db      	ldr	r3, [r3, #28]
 80079b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d208      	bcs.n	80079d0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80079be:	4b31      	ldr	r3, [pc, #196]	; (8007a84 <HAL_RCC_ClockConfig+0x358>)
 80079c0:	69db      	ldr	r3, [r3, #28]
 80079c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	695b      	ldr	r3, [r3, #20]
 80079ca:	492e      	ldr	r1, [pc, #184]	; (8007a84 <HAL_RCC_ClockConfig+0x358>)
 80079cc:	4313      	orrs	r3, r2
 80079ce:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 0310 	and.w	r3, r3, #16
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d010      	beq.n	80079fe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	699a      	ldr	r2, [r3, #24]
 80079e0:	4b28      	ldr	r3, [pc, #160]	; (8007a84 <HAL_RCC_ClockConfig+0x358>)
 80079e2:	69db      	ldr	r3, [r3, #28]
 80079e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d208      	bcs.n	80079fe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80079ec:	4b25      	ldr	r3, [pc, #148]	; (8007a84 <HAL_RCC_ClockConfig+0x358>)
 80079ee:	69db      	ldr	r3, [r3, #28]
 80079f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	4922      	ldr	r1, [pc, #136]	; (8007a84 <HAL_RCC_ClockConfig+0x358>)
 80079fa:	4313      	orrs	r3, r2
 80079fc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0320 	and.w	r3, r3, #32
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d010      	beq.n	8007a2c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	69da      	ldr	r2, [r3, #28]
 8007a0e:	4b1d      	ldr	r3, [pc, #116]	; (8007a84 <HAL_RCC_ClockConfig+0x358>)
 8007a10:	6a1b      	ldr	r3, [r3, #32]
 8007a12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d208      	bcs.n	8007a2c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007a1a:	4b1a      	ldr	r3, [pc, #104]	; (8007a84 <HAL_RCC_ClockConfig+0x358>)
 8007a1c:	6a1b      	ldr	r3, [r3, #32]
 8007a1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	69db      	ldr	r3, [r3, #28]
 8007a26:	4917      	ldr	r1, [pc, #92]	; (8007a84 <HAL_RCC_ClockConfig+0x358>)
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007a2c:	f000 f834 	bl	8007a98 <HAL_RCC_GetSysClockFreq>
 8007a30:	4602      	mov	r2, r0
 8007a32:	4b14      	ldr	r3, [pc, #80]	; (8007a84 <HAL_RCC_ClockConfig+0x358>)
 8007a34:	699b      	ldr	r3, [r3, #24]
 8007a36:	0a1b      	lsrs	r3, r3, #8
 8007a38:	f003 030f 	and.w	r3, r3, #15
 8007a3c:	4912      	ldr	r1, [pc, #72]	; (8007a88 <HAL_RCC_ClockConfig+0x35c>)
 8007a3e:	5ccb      	ldrb	r3, [r1, r3]
 8007a40:	f003 031f 	and.w	r3, r3, #31
 8007a44:	fa22 f303 	lsr.w	r3, r2, r3
 8007a48:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007a4a:	4b0e      	ldr	r3, [pc, #56]	; (8007a84 <HAL_RCC_ClockConfig+0x358>)
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	f003 030f 	and.w	r3, r3, #15
 8007a52:	4a0d      	ldr	r2, [pc, #52]	; (8007a88 <HAL_RCC_ClockConfig+0x35c>)
 8007a54:	5cd3      	ldrb	r3, [r2, r3]
 8007a56:	f003 031f 	and.w	r3, r3, #31
 8007a5a:	693a      	ldr	r2, [r7, #16]
 8007a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a60:	4a0a      	ldr	r2, [pc, #40]	; (8007a8c <HAL_RCC_ClockConfig+0x360>)
 8007a62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007a64:	4a0a      	ldr	r2, [pc, #40]	; (8007a90 <HAL_RCC_ClockConfig+0x364>)
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007a6a:	4b0a      	ldr	r3, [pc, #40]	; (8007a94 <HAL_RCC_ClockConfig+0x368>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7fb fd86 	bl	8003580 <HAL_InitTick>
 8007a74:	4603      	mov	r3, r0
 8007a76:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3718      	adds	r7, #24
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	58024400 	.word	0x58024400
 8007a88:	0800ce48 	.word	0x0800ce48
 8007a8c:	24000004 	.word	0x24000004
 8007a90:	24000000 	.word	0x24000000
 8007a94:	2404651c 	.word	0x2404651c

08007a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b089      	sub	sp, #36	; 0x24
 8007a9c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a9e:	4bb3      	ldr	r3, [pc, #716]	; (8007d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007aa6:	2b18      	cmp	r3, #24
 8007aa8:	f200 8155 	bhi.w	8007d56 <HAL_RCC_GetSysClockFreq+0x2be>
 8007aac:	a201      	add	r2, pc, #4	; (adr r2, 8007ab4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab2:	bf00      	nop
 8007ab4:	08007b19 	.word	0x08007b19
 8007ab8:	08007d57 	.word	0x08007d57
 8007abc:	08007d57 	.word	0x08007d57
 8007ac0:	08007d57 	.word	0x08007d57
 8007ac4:	08007d57 	.word	0x08007d57
 8007ac8:	08007d57 	.word	0x08007d57
 8007acc:	08007d57 	.word	0x08007d57
 8007ad0:	08007d57 	.word	0x08007d57
 8007ad4:	08007b3f 	.word	0x08007b3f
 8007ad8:	08007d57 	.word	0x08007d57
 8007adc:	08007d57 	.word	0x08007d57
 8007ae0:	08007d57 	.word	0x08007d57
 8007ae4:	08007d57 	.word	0x08007d57
 8007ae8:	08007d57 	.word	0x08007d57
 8007aec:	08007d57 	.word	0x08007d57
 8007af0:	08007d57 	.word	0x08007d57
 8007af4:	08007b45 	.word	0x08007b45
 8007af8:	08007d57 	.word	0x08007d57
 8007afc:	08007d57 	.word	0x08007d57
 8007b00:	08007d57 	.word	0x08007d57
 8007b04:	08007d57 	.word	0x08007d57
 8007b08:	08007d57 	.word	0x08007d57
 8007b0c:	08007d57 	.word	0x08007d57
 8007b10:	08007d57 	.word	0x08007d57
 8007b14:	08007b4b 	.word	0x08007b4b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b18:	4b94      	ldr	r3, [pc, #592]	; (8007d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 0320 	and.w	r3, r3, #32
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d009      	beq.n	8007b38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b24:	4b91      	ldr	r3, [pc, #580]	; (8007d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	08db      	lsrs	r3, r3, #3
 8007b2a:	f003 0303 	and.w	r3, r3, #3
 8007b2e:	4a90      	ldr	r2, [pc, #576]	; (8007d70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b30:	fa22 f303 	lsr.w	r3, r2, r3
 8007b34:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007b36:	e111      	b.n	8007d5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007b38:	4b8d      	ldr	r3, [pc, #564]	; (8007d70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b3a:	61bb      	str	r3, [r7, #24]
    break;
 8007b3c:	e10e      	b.n	8007d5c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007b3e:	4b8d      	ldr	r3, [pc, #564]	; (8007d74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007b40:	61bb      	str	r3, [r7, #24]
    break;
 8007b42:	e10b      	b.n	8007d5c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007b44:	4b8c      	ldr	r3, [pc, #560]	; (8007d78 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007b46:	61bb      	str	r3, [r7, #24]
    break;
 8007b48:	e108      	b.n	8007d5c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b4a:	4b88      	ldr	r3, [pc, #544]	; (8007d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4e:	f003 0303 	and.w	r3, r3, #3
 8007b52:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007b54:	4b85      	ldr	r3, [pc, #532]	; (8007d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b58:	091b      	lsrs	r3, r3, #4
 8007b5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b5e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007b60:	4b82      	ldr	r3, [pc, #520]	; (8007d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b64:	f003 0301 	and.w	r3, r3, #1
 8007b68:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007b6a:	4b80      	ldr	r3, [pc, #512]	; (8007d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b6e:	08db      	lsrs	r3, r3, #3
 8007b70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	fb02 f303 	mul.w	r3, r2, r3
 8007b7a:	ee07 3a90 	vmov	s15, r3
 8007b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b82:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f000 80e1 	beq.w	8007d50 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	f000 8083 	beq.w	8007c9c <HAL_RCC_GetSysClockFreq+0x204>
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	f200 80a1 	bhi.w	8007ce0 <HAL_RCC_GetSysClockFreq+0x248>
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d003      	beq.n	8007bac <HAL_RCC_GetSysClockFreq+0x114>
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d056      	beq.n	8007c58 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007baa:	e099      	b.n	8007ce0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bac:	4b6f      	ldr	r3, [pc, #444]	; (8007d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 0320 	and.w	r3, r3, #32
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d02d      	beq.n	8007c14 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007bb8:	4b6c      	ldr	r3, [pc, #432]	; (8007d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	08db      	lsrs	r3, r3, #3
 8007bbe:	f003 0303 	and.w	r3, r3, #3
 8007bc2:	4a6b      	ldr	r2, [pc, #428]	; (8007d70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8007bc8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	ee07 3a90 	vmov	s15, r3
 8007bd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	ee07 3a90 	vmov	s15, r3
 8007bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007be2:	4b62      	ldr	r3, [pc, #392]	; (8007d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bea:	ee07 3a90 	vmov	s15, r3
 8007bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bf2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bf6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007d7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007c12:	e087      	b.n	8007d24 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	ee07 3a90 	vmov	s15, r3
 8007c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c1e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007d80 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c26:	4b51      	ldr	r3, [pc, #324]	; (8007d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c2e:	ee07 3a90 	vmov	s15, r3
 8007c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c36:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c3a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007d7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c56:	e065      	b.n	8007d24 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	ee07 3a90 	vmov	s15, r3
 8007c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c62:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007d84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c6a:	4b40      	ldr	r3, [pc, #256]	; (8007d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c72:	ee07 3a90 	vmov	s15, r3
 8007c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c7e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007d7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c9a:	e043      	b.n	8007d24 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	ee07 3a90 	vmov	s15, r3
 8007ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ca6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007d88 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cae:	4b2f      	ldr	r3, [pc, #188]	; (8007d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cb6:	ee07 3a90 	vmov	s15, r3
 8007cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8007cc2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007d7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cde:	e021      	b.n	8007d24 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	ee07 3a90 	vmov	s15, r3
 8007ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007d84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cf2:	4b1e      	ldr	r3, [pc, #120]	; (8007d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cfa:	ee07 3a90 	vmov	s15, r3
 8007cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d02:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d06:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007d7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d22:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007d24:	4b11      	ldr	r3, [pc, #68]	; (8007d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d28:	0a5b      	lsrs	r3, r3, #9
 8007d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d2e:	3301      	adds	r3, #1
 8007d30:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	ee07 3a90 	vmov	s15, r3
 8007d38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007d3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d48:	ee17 3a90 	vmov	r3, s15
 8007d4c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007d4e:	e005      	b.n	8007d5c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007d50:	2300      	movs	r3, #0
 8007d52:	61bb      	str	r3, [r7, #24]
    break;
 8007d54:	e002      	b.n	8007d5c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007d56:	4b07      	ldr	r3, [pc, #28]	; (8007d74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007d58:	61bb      	str	r3, [r7, #24]
    break;
 8007d5a:	bf00      	nop
  }

  return sysclockfreq;
 8007d5c:	69bb      	ldr	r3, [r7, #24]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3724      	adds	r7, #36	; 0x24
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	58024400 	.word	0x58024400
 8007d70:	03d09000 	.word	0x03d09000
 8007d74:	003d0900 	.word	0x003d0900
 8007d78:	007a1200 	.word	0x007a1200
 8007d7c:	46000000 	.word	0x46000000
 8007d80:	4c742400 	.word	0x4c742400
 8007d84:	4a742400 	.word	0x4a742400
 8007d88:	4af42400 	.word	0x4af42400

08007d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007d92:	f7ff fe81 	bl	8007a98 <HAL_RCC_GetSysClockFreq>
 8007d96:	4602      	mov	r2, r0
 8007d98:	4b10      	ldr	r3, [pc, #64]	; (8007ddc <HAL_RCC_GetHCLKFreq+0x50>)
 8007d9a:	699b      	ldr	r3, [r3, #24]
 8007d9c:	0a1b      	lsrs	r3, r3, #8
 8007d9e:	f003 030f 	and.w	r3, r3, #15
 8007da2:	490f      	ldr	r1, [pc, #60]	; (8007de0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007da4:	5ccb      	ldrb	r3, [r1, r3]
 8007da6:	f003 031f 	and.w	r3, r3, #31
 8007daa:	fa22 f303 	lsr.w	r3, r2, r3
 8007dae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007db0:	4b0a      	ldr	r3, [pc, #40]	; (8007ddc <HAL_RCC_GetHCLKFreq+0x50>)
 8007db2:	699b      	ldr	r3, [r3, #24]
 8007db4:	f003 030f 	and.w	r3, r3, #15
 8007db8:	4a09      	ldr	r2, [pc, #36]	; (8007de0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007dba:	5cd3      	ldrb	r3, [r2, r3]
 8007dbc:	f003 031f 	and.w	r3, r3, #31
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8007dc6:	4a07      	ldr	r2, [pc, #28]	; (8007de4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007dc8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007dca:	4a07      	ldr	r2, [pc, #28]	; (8007de8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007dd0:	4b04      	ldr	r3, [pc, #16]	; (8007de4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	58024400 	.word	0x58024400
 8007de0:	0800ce48 	.word	0x0800ce48
 8007de4:	24000004 	.word	0x24000004
 8007de8:	24000000 	.word	0x24000000

08007dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007df0:	f7ff ffcc 	bl	8007d8c <HAL_RCC_GetHCLKFreq>
 8007df4:	4602      	mov	r2, r0
 8007df6:	4b06      	ldr	r3, [pc, #24]	; (8007e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007df8:	69db      	ldr	r3, [r3, #28]
 8007dfa:	091b      	lsrs	r3, r3, #4
 8007dfc:	f003 0307 	and.w	r3, r3, #7
 8007e00:	4904      	ldr	r1, [pc, #16]	; (8007e14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007e02:	5ccb      	ldrb	r3, [r1, r3]
 8007e04:	f003 031f 	and.w	r3, r3, #31
 8007e08:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	58024400 	.word	0x58024400
 8007e14:	0800ce48 	.word	0x0800ce48

08007e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007e1c:	f7ff ffb6 	bl	8007d8c <HAL_RCC_GetHCLKFreq>
 8007e20:	4602      	mov	r2, r0
 8007e22:	4b06      	ldr	r3, [pc, #24]	; (8007e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e24:	69db      	ldr	r3, [r3, #28]
 8007e26:	0a1b      	lsrs	r3, r3, #8
 8007e28:	f003 0307 	and.w	r3, r3, #7
 8007e2c:	4904      	ldr	r1, [pc, #16]	; (8007e40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007e2e:	5ccb      	ldrb	r3, [r1, r3]
 8007e30:	f003 031f 	and.w	r3, r3, #31
 8007e34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	58024400 	.word	0x58024400
 8007e40:	0800ce48 	.word	0x0800ce48

08007e44 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b086      	sub	sp, #24
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007e50:	2300      	movs	r3, #0
 8007e52:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d03f      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007e68:	d02a      	beq.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007e6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007e6e:	d824      	bhi.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007e70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e74:	d018      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007e76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e7a:	d81e      	bhi.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d003      	beq.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007e80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e84:	d007      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007e86:	e018      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e88:	4bab      	ldr	r3, [pc, #684]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8c:	4aaa      	ldr	r2, [pc, #680]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007e94:	e015      	b.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	3304      	adds	r3, #4
 8007e9a:	2102      	movs	r1, #2
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f001 f9cf 	bl	8009240 <RCCEx_PLL2_Config>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007ea6:	e00c      	b.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	3324      	adds	r3, #36	; 0x24
 8007eac:	2102      	movs	r1, #2
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f001 fa78 	bl	80093a4 <RCCEx_PLL3_Config>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007eb8:	e003      	b.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	75fb      	strb	r3, [r7, #23]
      break;
 8007ebe:	e000      	b.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007ec0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ec2:	7dfb      	ldrb	r3, [r7, #23]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d109      	bne.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007ec8:	4b9b      	ldr	r3, [pc, #620]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ecc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ed4:	4998      	ldr	r1, [pc, #608]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	650b      	str	r3, [r1, #80]	; 0x50
 8007eda:	e001      	b.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007edc:	7dfb      	ldrb	r3, [r7, #23]
 8007ede:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d03d      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef0:	2b04      	cmp	r3, #4
 8007ef2:	d826      	bhi.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007ef4:	a201      	add	r2, pc, #4	; (adr r2, 8007efc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007efa:	bf00      	nop
 8007efc:	08007f11 	.word	0x08007f11
 8007f00:	08007f1f 	.word	0x08007f1f
 8007f04:	08007f31 	.word	0x08007f31
 8007f08:	08007f49 	.word	0x08007f49
 8007f0c:	08007f49 	.word	0x08007f49
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f10:	4b89      	ldr	r3, [pc, #548]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f14:	4a88      	ldr	r2, [pc, #544]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f1c:	e015      	b.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	3304      	adds	r3, #4
 8007f22:	2100      	movs	r1, #0
 8007f24:	4618      	mov	r0, r3
 8007f26:	f001 f98b 	bl	8009240 <RCCEx_PLL2_Config>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f2e:	e00c      	b.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	3324      	adds	r3, #36	; 0x24
 8007f34:	2100      	movs	r1, #0
 8007f36:	4618      	mov	r0, r3
 8007f38:	f001 fa34 	bl	80093a4 <RCCEx_PLL3_Config>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f40:	e003      	b.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	75fb      	strb	r3, [r7, #23]
      break;
 8007f46:	e000      	b.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007f48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f4a:	7dfb      	ldrb	r3, [r7, #23]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d109      	bne.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f50:	4b79      	ldr	r3, [pc, #484]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f54:	f023 0207 	bic.w	r2, r3, #7
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f5c:	4976      	ldr	r1, [pc, #472]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	650b      	str	r3, [r1, #80]	; 0x50
 8007f62:	e001      	b.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f64:	7dfb      	ldrb	r3, [r7, #23]
 8007f66:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d042      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f7c:	d02b      	beq.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007f7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f82:	d825      	bhi.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007f84:	2bc0      	cmp	r3, #192	; 0xc0
 8007f86:	d028      	beq.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007f88:	2bc0      	cmp	r3, #192	; 0xc0
 8007f8a:	d821      	bhi.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007f8c:	2b80      	cmp	r3, #128	; 0x80
 8007f8e:	d016      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007f90:	2b80      	cmp	r3, #128	; 0x80
 8007f92:	d81d      	bhi.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d002      	beq.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007f98:	2b40      	cmp	r3, #64	; 0x40
 8007f9a:	d007      	beq.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007f9c:	e018      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f9e:	4b66      	ldr	r3, [pc, #408]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa2:	4a65      	ldr	r2, [pc, #404]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007faa:	e017      	b.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	3304      	adds	r3, #4
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f001 f944 	bl	8009240 <RCCEx_PLL2_Config>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007fbc:	e00e      	b.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	3324      	adds	r3, #36	; 0x24
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f001 f9ed 	bl	80093a4 <RCCEx_PLL3_Config>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007fce:	e005      	b.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8007fd4:	e002      	b.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007fd6:	bf00      	nop
 8007fd8:	e000      	b.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007fda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fdc:	7dfb      	ldrb	r3, [r7, #23]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d109      	bne.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007fe2:	4b55      	ldr	r3, [pc, #340]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fe6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fee:	4952      	ldr	r1, [pc, #328]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	650b      	str	r3, [r1, #80]	; 0x50
 8007ff4:	e001      	b.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff6:	7dfb      	ldrb	r3, [r7, #23]
 8007ff8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008002:	2b00      	cmp	r3, #0
 8008004:	d049      	beq.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800800c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008010:	d030      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008012:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008016:	d82a      	bhi.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008018:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800801c:	d02c      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800801e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008022:	d824      	bhi.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008024:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008028:	d018      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800802a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800802e:	d81e      	bhi.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008030:	2b00      	cmp	r3, #0
 8008032:	d003      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008034:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008038:	d007      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800803a:	e018      	b.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800803c:	4b3e      	ldr	r3, [pc, #248]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800803e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008040:	4a3d      	ldr	r2, [pc, #244]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008046:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008048:	e017      	b.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	3304      	adds	r3, #4
 800804e:	2100      	movs	r1, #0
 8008050:	4618      	mov	r0, r3
 8008052:	f001 f8f5 	bl	8009240 <RCCEx_PLL2_Config>
 8008056:	4603      	mov	r3, r0
 8008058:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800805a:	e00e      	b.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	3324      	adds	r3, #36	; 0x24
 8008060:	2100      	movs	r1, #0
 8008062:	4618      	mov	r0, r3
 8008064:	f001 f99e 	bl	80093a4 <RCCEx_PLL3_Config>
 8008068:	4603      	mov	r3, r0
 800806a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800806c:	e005      	b.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	75fb      	strb	r3, [r7, #23]
      break;
 8008072:	e002      	b.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008074:	bf00      	nop
 8008076:	e000      	b.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008078:	bf00      	nop
    }

    if(ret == HAL_OK)
 800807a:	7dfb      	ldrb	r3, [r7, #23]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d10a      	bne.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008080:	4b2d      	ldr	r3, [pc, #180]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008084:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800808e:	492a      	ldr	r1, [pc, #168]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008090:	4313      	orrs	r3, r2
 8008092:	658b      	str	r3, [r1, #88]	; 0x58
 8008094:	e001      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008096:	7dfb      	ldrb	r3, [r7, #23]
 8008098:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d04c      	beq.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80080ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80080b0:	d030      	beq.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80080b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80080b6:	d82a      	bhi.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80080b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80080bc:	d02c      	beq.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80080be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80080c2:	d824      	bhi.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80080c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080c8:	d018      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80080ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080ce:	d81e      	bhi.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d003      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80080d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80080d8:	d007      	beq.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80080da:	e018      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080dc:	4b16      	ldr	r3, [pc, #88]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e0:	4a15      	ldr	r2, [pc, #84]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80080e8:	e017      	b.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	3304      	adds	r3, #4
 80080ee:	2100      	movs	r1, #0
 80080f0:	4618      	mov	r0, r3
 80080f2:	f001 f8a5 	bl	8009240 <RCCEx_PLL2_Config>
 80080f6:	4603      	mov	r3, r0
 80080f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80080fa:	e00e      	b.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	3324      	adds	r3, #36	; 0x24
 8008100:	2100      	movs	r1, #0
 8008102:	4618      	mov	r0, r3
 8008104:	f001 f94e 	bl	80093a4 <RCCEx_PLL3_Config>
 8008108:	4603      	mov	r3, r0
 800810a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800810c:	e005      	b.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	75fb      	strb	r3, [r7, #23]
      break;
 8008112:	e002      	b.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008114:	bf00      	nop
 8008116:	e000      	b.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008118:	bf00      	nop
    }

    if(ret == HAL_OK)
 800811a:	7dfb      	ldrb	r3, [r7, #23]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d10d      	bne.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008120:	4b05      	ldr	r3, [pc, #20]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008124:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800812e:	4902      	ldr	r1, [pc, #8]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008130:	4313      	orrs	r3, r2
 8008132:	658b      	str	r3, [r1, #88]	; 0x58
 8008134:	e004      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008136:	bf00      	nop
 8008138:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800813c:	7dfb      	ldrb	r3, [r7, #23]
 800813e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008148:	2b00      	cmp	r3, #0
 800814a:	d032      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008150:	2b30      	cmp	r3, #48	; 0x30
 8008152:	d01c      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008154:	2b30      	cmp	r3, #48	; 0x30
 8008156:	d817      	bhi.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008158:	2b20      	cmp	r3, #32
 800815a:	d00c      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800815c:	2b20      	cmp	r3, #32
 800815e:	d813      	bhi.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008160:	2b00      	cmp	r3, #0
 8008162:	d016      	beq.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008164:	2b10      	cmp	r3, #16
 8008166:	d10f      	bne.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008168:	4baf      	ldr	r3, [pc, #700]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800816a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816c:	4aae      	ldr	r2, [pc, #696]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800816e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008172:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008174:	e00e      	b.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	3304      	adds	r3, #4
 800817a:	2102      	movs	r1, #2
 800817c:	4618      	mov	r0, r3
 800817e:	f001 f85f 	bl	8009240 <RCCEx_PLL2_Config>
 8008182:	4603      	mov	r3, r0
 8008184:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008186:	e005      	b.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	75fb      	strb	r3, [r7, #23]
      break;
 800818c:	e002      	b.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800818e:	bf00      	nop
 8008190:	e000      	b.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008192:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008194:	7dfb      	ldrb	r3, [r7, #23]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d109      	bne.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800819a:	4ba3      	ldr	r3, [pc, #652]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800819c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800819e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081a6:	49a0      	ldr	r1, [pc, #640]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80081a8:	4313      	orrs	r3, r2
 80081aa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80081ac:	e001      	b.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ae:	7dfb      	ldrb	r3, [r7, #23]
 80081b0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d047      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081c6:	d030      	beq.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80081c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081cc:	d82a      	bhi.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80081ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081d2:	d02c      	beq.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80081d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081d8:	d824      	bhi.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80081da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081de:	d018      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80081e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081e4:	d81e      	bhi.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d003      	beq.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80081ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081ee:	d007      	beq.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80081f0:	e018      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081f2:	4b8d      	ldr	r3, [pc, #564]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80081f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f6:	4a8c      	ldr	r2, [pc, #560]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80081f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80081fe:	e017      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	3304      	adds	r3, #4
 8008204:	2100      	movs	r1, #0
 8008206:	4618      	mov	r0, r3
 8008208:	f001 f81a 	bl	8009240 <RCCEx_PLL2_Config>
 800820c:	4603      	mov	r3, r0
 800820e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008210:	e00e      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	3324      	adds	r3, #36	; 0x24
 8008216:	2100      	movs	r1, #0
 8008218:	4618      	mov	r0, r3
 800821a:	f001 f8c3 	bl	80093a4 <RCCEx_PLL3_Config>
 800821e:	4603      	mov	r3, r0
 8008220:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008222:	e005      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	75fb      	strb	r3, [r7, #23]
      break;
 8008228:	e002      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800822a:	bf00      	nop
 800822c:	e000      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800822e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008230:	7dfb      	ldrb	r3, [r7, #23]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d109      	bne.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008236:	4b7c      	ldr	r3, [pc, #496]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800823a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008242:	4979      	ldr	r1, [pc, #484]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008244:	4313      	orrs	r3, r2
 8008246:	650b      	str	r3, [r1, #80]	; 0x50
 8008248:	e001      	b.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800824a:	7dfb      	ldrb	r3, [r7, #23]
 800824c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008256:	2b00      	cmp	r3, #0
 8008258:	d049      	beq.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800825e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008262:	d02e      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8008264:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008268:	d828      	bhi.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x478>
 800826a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800826e:	d02a      	beq.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8008270:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008274:	d822      	bhi.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008276:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800827a:	d026      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x486>
 800827c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008280:	d81c      	bhi.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008282:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008286:	d010      	beq.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x466>
 8008288:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800828c:	d816      	bhi.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x478>
 800828e:	2b00      	cmp	r3, #0
 8008290:	d01d      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8008292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008296:	d111      	bne.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	3304      	adds	r3, #4
 800829c:	2101      	movs	r1, #1
 800829e:	4618      	mov	r0, r3
 80082a0:	f000 ffce 	bl	8009240 <RCCEx_PLL2_Config>
 80082a4:	4603      	mov	r3, r0
 80082a6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80082a8:	e012      	b.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	3324      	adds	r3, #36	; 0x24
 80082ae:	2101      	movs	r1, #1
 80082b0:	4618      	mov	r0, r3
 80082b2:	f001 f877 	bl	80093a4 <RCCEx_PLL3_Config>
 80082b6:	4603      	mov	r3, r0
 80082b8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80082ba:	e009      	b.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	75fb      	strb	r3, [r7, #23]
      break;
 80082c0:	e006      	b.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80082c2:	bf00      	nop
 80082c4:	e004      	b.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80082c6:	bf00      	nop
 80082c8:	e002      	b.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80082ca:	bf00      	nop
 80082cc:	e000      	b.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80082ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082d0:	7dfb      	ldrb	r3, [r7, #23]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d109      	bne.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80082d6:	4b54      	ldr	r3, [pc, #336]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80082d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082da:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082e2:	4951      	ldr	r1, [pc, #324]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80082e4:	4313      	orrs	r3, r2
 80082e6:	650b      	str	r3, [r1, #80]	; 0x50
 80082e8:	e001      	b.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082ea:	7dfb      	ldrb	r3, [r7, #23]
 80082ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d04b      	beq.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008300:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008304:	d02e      	beq.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8008306:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800830a:	d828      	bhi.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800830c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008310:	d02a      	beq.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8008312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008316:	d822      	bhi.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008318:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800831c:	d026      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x528>
 800831e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008322:	d81c      	bhi.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008324:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008328:	d010      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800832a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800832e:	d816      	bhi.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008330:	2b00      	cmp	r3, #0
 8008332:	d01d      	beq.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8008334:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008338:	d111      	bne.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	3304      	adds	r3, #4
 800833e:	2101      	movs	r1, #1
 8008340:	4618      	mov	r0, r3
 8008342:	f000 ff7d 	bl	8009240 <RCCEx_PLL2_Config>
 8008346:	4603      	mov	r3, r0
 8008348:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800834a:	e012      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	3324      	adds	r3, #36	; 0x24
 8008350:	2101      	movs	r1, #1
 8008352:	4618      	mov	r0, r3
 8008354:	f001 f826 	bl	80093a4 <RCCEx_PLL3_Config>
 8008358:	4603      	mov	r3, r0
 800835a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800835c:	e009      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	75fb      	strb	r3, [r7, #23]
      break;
 8008362:	e006      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008364:	bf00      	nop
 8008366:	e004      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008368:	bf00      	nop
 800836a:	e002      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800836c:	bf00      	nop
 800836e:	e000      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008370:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008372:	7dfb      	ldrb	r3, [r7, #23]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d10a      	bne.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008378:	4b2b      	ldr	r3, [pc, #172]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800837a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800837c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008386:	4928      	ldr	r1, [pc, #160]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008388:	4313      	orrs	r3, r2
 800838a:	658b      	str	r3, [r1, #88]	; 0x58
 800838c:	e001      	b.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800838e:	7dfb      	ldrb	r3, [r7, #23]
 8008390:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800839a:	2b00      	cmp	r3, #0
 800839c:	d02f      	beq.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083a6:	d00e      	beq.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80083a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083ac:	d814      	bhi.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d015      	beq.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80083b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083b6:	d10f      	bne.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083b8:	4b1b      	ldr	r3, [pc, #108]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80083ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083bc:	4a1a      	ldr	r2, [pc, #104]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80083be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80083c4:	e00c      	b.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	3304      	adds	r3, #4
 80083ca:	2101      	movs	r1, #1
 80083cc:	4618      	mov	r0, r3
 80083ce:	f000 ff37 	bl	8009240 <RCCEx_PLL2_Config>
 80083d2:	4603      	mov	r3, r0
 80083d4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80083d6:	e003      	b.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	75fb      	strb	r3, [r7, #23]
      break;
 80083dc:	e000      	b.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80083de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083e0:	7dfb      	ldrb	r3, [r7, #23]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d109      	bne.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80083e6:	4b10      	ldr	r3, [pc, #64]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80083e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083f2:	490d      	ldr	r1, [pc, #52]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80083f4:	4313      	orrs	r3, r2
 80083f6:	650b      	str	r3, [r1, #80]	; 0x50
 80083f8:	e001      	b.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083fa:	7dfb      	ldrb	r3, [r7, #23]
 80083fc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008406:	2b00      	cmp	r3, #0
 8008408:	d033      	beq.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800840e:	2b03      	cmp	r3, #3
 8008410:	d81c      	bhi.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008412:	a201      	add	r2, pc, #4	; (adr r2, 8008418 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8008414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008418:	08008453 	.word	0x08008453
 800841c:	0800842d 	.word	0x0800842d
 8008420:	0800843b 	.word	0x0800843b
 8008424:	08008453 	.word	0x08008453
 8008428:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800842c:	4bb8      	ldr	r3, [pc, #736]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800842e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008430:	4ab7      	ldr	r2, [pc, #732]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008436:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008438:	e00c      	b.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	3304      	adds	r3, #4
 800843e:	2102      	movs	r1, #2
 8008440:	4618      	mov	r0, r3
 8008442:	f000 fefd 	bl	8009240 <RCCEx_PLL2_Config>
 8008446:	4603      	mov	r3, r0
 8008448:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800844a:	e003      	b.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	75fb      	strb	r3, [r7, #23]
      break;
 8008450:	e000      	b.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008452:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008454:	7dfb      	ldrb	r3, [r7, #23]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d109      	bne.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800845a:	4bad      	ldr	r3, [pc, #692]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800845c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800845e:	f023 0203 	bic.w	r2, r3, #3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008466:	49aa      	ldr	r1, [pc, #680]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008468:	4313      	orrs	r3, r2
 800846a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800846c:	e001      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800846e:	7dfb      	ldrb	r3, [r7, #23]
 8008470:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800847a:	2b00      	cmp	r3, #0
 800847c:	f000 8086 	beq.w	800858c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008480:	4ba4      	ldr	r3, [pc, #656]	; (8008714 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4aa3      	ldr	r2, [pc, #652]	; (8008714 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800848a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800848c:	f7fb f8c2 	bl	8003614 <HAL_GetTick>
 8008490:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008492:	e009      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008494:	f7fb f8be 	bl	8003614 <HAL_GetTick>
 8008498:	4602      	mov	r2, r0
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	1ad3      	subs	r3, r2, r3
 800849e:	2b64      	cmp	r3, #100	; 0x64
 80084a0:	d902      	bls.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80084a2:	2303      	movs	r3, #3
 80084a4:	75fb      	strb	r3, [r7, #23]
        break;
 80084a6:	e005      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80084a8:	4b9a      	ldr	r3, [pc, #616]	; (8008714 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d0ef      	beq.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80084b4:	7dfb      	ldrb	r3, [r7, #23]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d166      	bne.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80084ba:	4b95      	ldr	r3, [pc, #596]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80084bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80084c4:	4053      	eors	r3, r2
 80084c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d013      	beq.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80084ce:	4b90      	ldr	r3, [pc, #576]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80084d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084d6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80084d8:	4b8d      	ldr	r3, [pc, #564]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80084da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084dc:	4a8c      	ldr	r2, [pc, #560]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80084de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084e2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80084e4:	4b8a      	ldr	r3, [pc, #552]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80084e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084e8:	4a89      	ldr	r2, [pc, #548]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80084ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084ee:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80084f0:	4a87      	ldr	r2, [pc, #540]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80084fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008500:	d115      	bne.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008502:	f7fb f887 	bl	8003614 <HAL_GetTick>
 8008506:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008508:	e00b      	b.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800850a:	f7fb f883 	bl	8003614 <HAL_GetTick>
 800850e:	4602      	mov	r2, r0
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	f241 3288 	movw	r2, #5000	; 0x1388
 8008518:	4293      	cmp	r3, r2
 800851a:	d902      	bls.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800851c:	2303      	movs	r3, #3
 800851e:	75fb      	strb	r3, [r7, #23]
            break;
 8008520:	e005      	b.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008522:	4b7b      	ldr	r3, [pc, #492]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008526:	f003 0302 	and.w	r3, r3, #2
 800852a:	2b00      	cmp	r3, #0
 800852c:	d0ed      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800852e:	7dfb      	ldrb	r3, [r7, #23]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d126      	bne.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800853a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800853e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008542:	d10d      	bne.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008544:	4b72      	ldr	r3, [pc, #456]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008552:	0919      	lsrs	r1, r3, #4
 8008554:	4b70      	ldr	r3, [pc, #448]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8008556:	400b      	ands	r3, r1
 8008558:	496d      	ldr	r1, [pc, #436]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800855a:	4313      	orrs	r3, r2
 800855c:	610b      	str	r3, [r1, #16]
 800855e:	e005      	b.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008560:	4b6b      	ldr	r3, [pc, #428]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008562:	691b      	ldr	r3, [r3, #16]
 8008564:	4a6a      	ldr	r2, [pc, #424]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008566:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800856a:	6113      	str	r3, [r2, #16]
 800856c:	4b68      	ldr	r3, [pc, #416]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800856e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008576:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800857a:	4965      	ldr	r1, [pc, #404]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800857c:	4313      	orrs	r3, r2
 800857e:	670b      	str	r3, [r1, #112]	; 0x70
 8008580:	e004      	b.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008582:	7dfb      	ldrb	r3, [r7, #23]
 8008584:	75bb      	strb	r3, [r7, #22]
 8008586:	e001      	b.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008588:	7dfb      	ldrb	r3, [r7, #23]
 800858a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 0301 	and.w	r3, r3, #1
 8008594:	2b00      	cmp	r3, #0
 8008596:	d07e      	beq.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800859c:	2b28      	cmp	r3, #40	; 0x28
 800859e:	d867      	bhi.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80085a0:	a201      	add	r2, pc, #4	; (adr r2, 80085a8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80085a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a6:	bf00      	nop
 80085a8:	08008677 	.word	0x08008677
 80085ac:	08008671 	.word	0x08008671
 80085b0:	08008671 	.word	0x08008671
 80085b4:	08008671 	.word	0x08008671
 80085b8:	08008671 	.word	0x08008671
 80085bc:	08008671 	.word	0x08008671
 80085c0:	08008671 	.word	0x08008671
 80085c4:	08008671 	.word	0x08008671
 80085c8:	0800864d 	.word	0x0800864d
 80085cc:	08008671 	.word	0x08008671
 80085d0:	08008671 	.word	0x08008671
 80085d4:	08008671 	.word	0x08008671
 80085d8:	08008671 	.word	0x08008671
 80085dc:	08008671 	.word	0x08008671
 80085e0:	08008671 	.word	0x08008671
 80085e4:	08008671 	.word	0x08008671
 80085e8:	0800865f 	.word	0x0800865f
 80085ec:	08008671 	.word	0x08008671
 80085f0:	08008671 	.word	0x08008671
 80085f4:	08008671 	.word	0x08008671
 80085f8:	08008671 	.word	0x08008671
 80085fc:	08008671 	.word	0x08008671
 8008600:	08008671 	.word	0x08008671
 8008604:	08008671 	.word	0x08008671
 8008608:	08008677 	.word	0x08008677
 800860c:	08008671 	.word	0x08008671
 8008610:	08008671 	.word	0x08008671
 8008614:	08008671 	.word	0x08008671
 8008618:	08008671 	.word	0x08008671
 800861c:	08008671 	.word	0x08008671
 8008620:	08008671 	.word	0x08008671
 8008624:	08008671 	.word	0x08008671
 8008628:	08008677 	.word	0x08008677
 800862c:	08008671 	.word	0x08008671
 8008630:	08008671 	.word	0x08008671
 8008634:	08008671 	.word	0x08008671
 8008638:	08008671 	.word	0x08008671
 800863c:	08008671 	.word	0x08008671
 8008640:	08008671 	.word	0x08008671
 8008644:	08008671 	.word	0x08008671
 8008648:	08008677 	.word	0x08008677
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	3304      	adds	r3, #4
 8008650:	2101      	movs	r1, #1
 8008652:	4618      	mov	r0, r3
 8008654:	f000 fdf4 	bl	8009240 <RCCEx_PLL2_Config>
 8008658:	4603      	mov	r3, r0
 800865a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800865c:	e00c      	b.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	3324      	adds	r3, #36	; 0x24
 8008662:	2101      	movs	r1, #1
 8008664:	4618      	mov	r0, r3
 8008666:	f000 fe9d 	bl	80093a4 <RCCEx_PLL3_Config>
 800866a:	4603      	mov	r3, r0
 800866c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800866e:	e003      	b.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	75fb      	strb	r3, [r7, #23]
      break;
 8008674:	e000      	b.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8008676:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008678:	7dfb      	ldrb	r3, [r7, #23]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d109      	bne.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800867e:	4b24      	ldr	r3, [pc, #144]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008682:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800868a:	4921      	ldr	r1, [pc, #132]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800868c:	4313      	orrs	r3, r2
 800868e:	654b      	str	r3, [r1, #84]	; 0x54
 8008690:	e001      	b.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008692:	7dfb      	ldrb	r3, [r7, #23]
 8008694:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 0302 	and.w	r3, r3, #2
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d03e      	beq.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086a6:	2b05      	cmp	r3, #5
 80086a8:	d820      	bhi.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80086aa:	a201      	add	r2, pc, #4	; (adr r2, 80086b0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80086ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b0:	080086f3 	.word	0x080086f3
 80086b4:	080086c9 	.word	0x080086c9
 80086b8:	080086db 	.word	0x080086db
 80086bc:	080086f3 	.word	0x080086f3
 80086c0:	080086f3 	.word	0x080086f3
 80086c4:	080086f3 	.word	0x080086f3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	3304      	adds	r3, #4
 80086cc:	2101      	movs	r1, #1
 80086ce:	4618      	mov	r0, r3
 80086d0:	f000 fdb6 	bl	8009240 <RCCEx_PLL2_Config>
 80086d4:	4603      	mov	r3, r0
 80086d6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80086d8:	e00c      	b.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	3324      	adds	r3, #36	; 0x24
 80086de:	2101      	movs	r1, #1
 80086e0:	4618      	mov	r0, r3
 80086e2:	f000 fe5f 	bl	80093a4 <RCCEx_PLL3_Config>
 80086e6:	4603      	mov	r3, r0
 80086e8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80086ea:	e003      	b.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	75fb      	strb	r3, [r7, #23]
      break;
 80086f0:	e000      	b.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80086f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086f4:	7dfb      	ldrb	r3, [r7, #23]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d110      	bne.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80086fa:	4b05      	ldr	r3, [pc, #20]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80086fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086fe:	f023 0207 	bic.w	r2, r3, #7
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008706:	4902      	ldr	r1, [pc, #8]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008708:	4313      	orrs	r3, r2
 800870a:	654b      	str	r3, [r1, #84]	; 0x54
 800870c:	e008      	b.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800870e:	bf00      	nop
 8008710:	58024400 	.word	0x58024400
 8008714:	58024800 	.word	0x58024800
 8008718:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800871c:	7dfb      	ldrb	r3, [r7, #23]
 800871e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 0304 	and.w	r3, r3, #4
 8008728:	2b00      	cmp	r3, #0
 800872a:	d039      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008732:	2b05      	cmp	r3, #5
 8008734:	d820      	bhi.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8008736:	a201      	add	r2, pc, #4	; (adr r2, 800873c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8008738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800873c:	0800877f 	.word	0x0800877f
 8008740:	08008755 	.word	0x08008755
 8008744:	08008767 	.word	0x08008767
 8008748:	0800877f 	.word	0x0800877f
 800874c:	0800877f 	.word	0x0800877f
 8008750:	0800877f 	.word	0x0800877f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	3304      	adds	r3, #4
 8008758:	2101      	movs	r1, #1
 800875a:	4618      	mov	r0, r3
 800875c:	f000 fd70 	bl	8009240 <RCCEx_PLL2_Config>
 8008760:	4603      	mov	r3, r0
 8008762:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008764:	e00c      	b.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	3324      	adds	r3, #36	; 0x24
 800876a:	2101      	movs	r1, #1
 800876c:	4618      	mov	r0, r3
 800876e:	f000 fe19 	bl	80093a4 <RCCEx_PLL3_Config>
 8008772:	4603      	mov	r3, r0
 8008774:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008776:	e003      	b.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	75fb      	strb	r3, [r7, #23]
      break;
 800877c:	e000      	b.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800877e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008780:	7dfb      	ldrb	r3, [r7, #23]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d10a      	bne.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008786:	4bb7      	ldr	r3, [pc, #732]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800878a:	f023 0207 	bic.w	r2, r3, #7
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008794:	49b3      	ldr	r1, [pc, #716]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008796:	4313      	orrs	r3, r2
 8008798:	658b      	str	r3, [r1, #88]	; 0x58
 800879a:	e001      	b.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800879c:	7dfb      	ldrb	r3, [r7, #23]
 800879e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f003 0320 	and.w	r3, r3, #32
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d04b      	beq.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087b6:	d02e      	beq.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80087b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087bc:	d828      	bhi.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80087be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087c2:	d02a      	beq.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80087c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087c8:	d822      	bhi.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80087ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087ce:	d026      	beq.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80087d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087d4:	d81c      	bhi.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80087d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087da:	d010      	beq.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80087dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087e0:	d816      	bhi.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d01d      	beq.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80087e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087ea:	d111      	bne.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	3304      	adds	r3, #4
 80087f0:	2100      	movs	r1, #0
 80087f2:	4618      	mov	r0, r3
 80087f4:	f000 fd24 	bl	8009240 <RCCEx_PLL2_Config>
 80087f8:	4603      	mov	r3, r0
 80087fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80087fc:	e012      	b.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	3324      	adds	r3, #36	; 0x24
 8008802:	2102      	movs	r1, #2
 8008804:	4618      	mov	r0, r3
 8008806:	f000 fdcd 	bl	80093a4 <RCCEx_PLL3_Config>
 800880a:	4603      	mov	r3, r0
 800880c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800880e:	e009      	b.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	75fb      	strb	r3, [r7, #23]
      break;
 8008814:	e006      	b.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008816:	bf00      	nop
 8008818:	e004      	b.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800881a:	bf00      	nop
 800881c:	e002      	b.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800881e:	bf00      	nop
 8008820:	e000      	b.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008822:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008824:	7dfb      	ldrb	r3, [r7, #23]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d10a      	bne.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800882a:	4b8e      	ldr	r3, [pc, #568]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800882c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800882e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008838:	498a      	ldr	r1, [pc, #552]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800883a:	4313      	orrs	r3, r2
 800883c:	654b      	str	r3, [r1, #84]	; 0x54
 800883e:	e001      	b.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008840:	7dfb      	ldrb	r3, [r7, #23]
 8008842:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800884c:	2b00      	cmp	r3, #0
 800884e:	d04b      	beq.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008856:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800885a:	d02e      	beq.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800885c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008860:	d828      	bhi.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008866:	d02a      	beq.n	80088be <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800886c:	d822      	bhi.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800886e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008872:	d026      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008874:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008878:	d81c      	bhi.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800887a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800887e:	d010      	beq.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8008880:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008884:	d816      	bhi.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008886:	2b00      	cmp	r3, #0
 8008888:	d01d      	beq.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800888a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800888e:	d111      	bne.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	3304      	adds	r3, #4
 8008894:	2100      	movs	r1, #0
 8008896:	4618      	mov	r0, r3
 8008898:	f000 fcd2 	bl	8009240 <RCCEx_PLL2_Config>
 800889c:	4603      	mov	r3, r0
 800889e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80088a0:	e012      	b.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	3324      	adds	r3, #36	; 0x24
 80088a6:	2102      	movs	r1, #2
 80088a8:	4618      	mov	r0, r3
 80088aa:	f000 fd7b 	bl	80093a4 <RCCEx_PLL3_Config>
 80088ae:	4603      	mov	r3, r0
 80088b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80088b2:	e009      	b.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	75fb      	strb	r3, [r7, #23]
      break;
 80088b8:	e006      	b.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80088ba:	bf00      	nop
 80088bc:	e004      	b.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80088be:	bf00      	nop
 80088c0:	e002      	b.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80088c2:	bf00      	nop
 80088c4:	e000      	b.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80088c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088c8:	7dfb      	ldrb	r3, [r7, #23]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d10a      	bne.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80088ce:	4b65      	ldr	r3, [pc, #404]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80088d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088d2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80088dc:	4961      	ldr	r1, [pc, #388]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80088de:	4313      	orrs	r3, r2
 80088e0:	658b      	str	r3, [r1, #88]	; 0x58
 80088e2:	e001      	b.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088e4:	7dfb      	ldrb	r3, [r7, #23]
 80088e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d04b      	beq.n	800898c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80088fa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80088fe:	d02e      	beq.n	800895e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008900:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008904:	d828      	bhi.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800890a:	d02a      	beq.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800890c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008910:	d822      	bhi.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008912:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008916:	d026      	beq.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008918:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800891c:	d81c      	bhi.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800891e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008922:	d010      	beq.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8008924:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008928:	d816      	bhi.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800892a:	2b00      	cmp	r3, #0
 800892c:	d01d      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800892e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008932:	d111      	bne.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	3304      	adds	r3, #4
 8008938:	2100      	movs	r1, #0
 800893a:	4618      	mov	r0, r3
 800893c:	f000 fc80 	bl	8009240 <RCCEx_PLL2_Config>
 8008940:	4603      	mov	r3, r0
 8008942:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008944:	e012      	b.n	800896c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	3324      	adds	r3, #36	; 0x24
 800894a:	2102      	movs	r1, #2
 800894c:	4618      	mov	r0, r3
 800894e:	f000 fd29 	bl	80093a4 <RCCEx_PLL3_Config>
 8008952:	4603      	mov	r3, r0
 8008954:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008956:	e009      	b.n	800896c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	75fb      	strb	r3, [r7, #23]
      break;
 800895c:	e006      	b.n	800896c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800895e:	bf00      	nop
 8008960:	e004      	b.n	800896c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008962:	bf00      	nop
 8008964:	e002      	b.n	800896c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008966:	bf00      	nop
 8008968:	e000      	b.n	800896c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800896a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800896c:	7dfb      	ldrb	r3, [r7, #23]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d10a      	bne.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008972:	4b3c      	ldr	r3, [pc, #240]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008976:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008980:	4938      	ldr	r1, [pc, #224]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008982:	4313      	orrs	r3, r2
 8008984:	658b      	str	r3, [r1, #88]	; 0x58
 8008986:	e001      	b.n	800898c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008988:	7dfb      	ldrb	r3, [r7, #23]
 800898a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f003 0308 	and.w	r3, r3, #8
 8008994:	2b00      	cmp	r3, #0
 8008996:	d01a      	beq.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800899e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089a2:	d10a      	bne.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	3324      	adds	r3, #36	; 0x24
 80089a8:	2102      	movs	r1, #2
 80089aa:	4618      	mov	r0, r3
 80089ac:	f000 fcfa 	bl	80093a4 <RCCEx_PLL3_Config>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d001      	beq.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80089ba:	4b2a      	ldr	r3, [pc, #168]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80089bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089c8:	4926      	ldr	r1, [pc, #152]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80089ca:	4313      	orrs	r3, r2
 80089cc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 0310 	and.w	r3, r3, #16
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d01a      	beq.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80089e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089e4:	d10a      	bne.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	3324      	adds	r3, #36	; 0x24
 80089ea:	2102      	movs	r1, #2
 80089ec:	4618      	mov	r0, r3
 80089ee:	f000 fcd9 	bl	80093a4 <RCCEx_PLL3_Config>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d001      	beq.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80089fc:	4b19      	ldr	r3, [pc, #100]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80089fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a0a:	4916      	ldr	r1, [pc, #88]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d036      	beq.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008a22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a26:	d01f      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008a28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a2c:	d817      	bhi.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d003      	beq.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8008a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a36:	d009      	beq.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008a38:	e011      	b.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	3304      	adds	r3, #4
 8008a3e:	2100      	movs	r1, #0
 8008a40:	4618      	mov	r0, r3
 8008a42:	f000 fbfd 	bl	8009240 <RCCEx_PLL2_Config>
 8008a46:	4603      	mov	r3, r0
 8008a48:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008a4a:	e00e      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	3324      	adds	r3, #36	; 0x24
 8008a50:	2102      	movs	r1, #2
 8008a52:	4618      	mov	r0, r3
 8008a54:	f000 fca6 	bl	80093a4 <RCCEx_PLL3_Config>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008a5c:	e005      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	75fb      	strb	r3, [r7, #23]
      break;
 8008a62:	e002      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8008a64:	58024400 	.word	0x58024400
      break;
 8008a68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a6a:	7dfb      	ldrb	r3, [r7, #23]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d10a      	bne.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008a70:	4b93      	ldr	r3, [pc, #588]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008a7e:	4990      	ldr	r1, [pc, #576]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a80:	4313      	orrs	r3, r2
 8008a82:	658b      	str	r3, [r1, #88]	; 0x58
 8008a84:	e001      	b.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a86:	7dfb      	ldrb	r3, [r7, #23]
 8008a88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d033      	beq.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a9c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008aa0:	d01c      	beq.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8008aa2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008aa6:	d816      	bhi.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8008aa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008aac:	d003      	beq.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8008aae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ab2:	d007      	beq.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008ab4:	e00f      	b.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ab6:	4b82      	ldr	r3, [pc, #520]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aba:	4a81      	ldr	r2, [pc, #516]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ac0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008ac2:	e00c      	b.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	3324      	adds	r3, #36	; 0x24
 8008ac8:	2101      	movs	r1, #1
 8008aca:	4618      	mov	r0, r3
 8008acc:	f000 fc6a 	bl	80093a4 <RCCEx_PLL3_Config>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008ad4:	e003      	b.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	75fb      	strb	r3, [r7, #23]
      break;
 8008ada:	e000      	b.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008adc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ade:	7dfb      	ldrb	r3, [r7, #23]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d10a      	bne.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008ae4:	4b76      	ldr	r3, [pc, #472]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ae8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008af2:	4973      	ldr	r1, [pc, #460]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008af4:	4313      	orrs	r3, r2
 8008af6:	654b      	str	r3, [r1, #84]	; 0x54
 8008af8:	e001      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008afa:	7dfb      	ldrb	r3, [r7, #23]
 8008afc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d029      	beq.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d003      	beq.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8008b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b16:	d007      	beq.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008b18:	e00f      	b.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b1a:	4b69      	ldr	r3, [pc, #420]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b1e:	4a68      	ldr	r2, [pc, #416]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008b26:	e00b      	b.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	3304      	adds	r3, #4
 8008b2c:	2102      	movs	r1, #2
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 fb86 	bl	8009240 <RCCEx_PLL2_Config>
 8008b34:	4603      	mov	r3, r0
 8008b36:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008b38:	e002      	b.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	75fb      	strb	r3, [r7, #23]
      break;
 8008b3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b40:	7dfb      	ldrb	r3, [r7, #23]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d109      	bne.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008b46:	4b5e      	ldr	r3, [pc, #376]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b4a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b52:	495b      	ldr	r1, [pc, #364]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b54:	4313      	orrs	r3, r2
 8008b56:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008b58:	e001      	b.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b5a:	7dfb      	ldrb	r3, [r7, #23]
 8008b5c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d00a      	beq.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	3324      	adds	r3, #36	; 0x24
 8008b6e:	2102      	movs	r1, #2
 8008b70:	4618      	mov	r0, r3
 8008b72:	f000 fc17 	bl	80093a4 <RCCEx_PLL3_Config>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d001      	beq.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d030      	beq.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b94:	d017      	beq.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8008b96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b9a:	d811      	bhi.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ba0:	d013      	beq.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008ba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ba6:	d80b      	bhi.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d010      	beq.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008bac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bb0:	d106      	bne.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bb2:	4b43      	ldr	r3, [pc, #268]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb6:	4a42      	ldr	r2, [pc, #264]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bbc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008bbe:	e007      	b.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8008bc4:	e004      	b.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008bc6:	bf00      	nop
 8008bc8:	e002      	b.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008bca:	bf00      	nop
 8008bcc:	e000      	b.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008bce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bd0:	7dfb      	ldrb	r3, [r7, #23]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d109      	bne.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008bd6:	4b3a      	ldr	r3, [pc, #232]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008be2:	4937      	ldr	r1, [pc, #220]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008be4:	4313      	orrs	r3, r2
 8008be6:	654b      	str	r3, [r1, #84]	; 0x54
 8008be8:	e001      	b.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bea:	7dfb      	ldrb	r3, [r7, #23]
 8008bec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d008      	beq.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008bfa:	4b31      	ldr	r3, [pc, #196]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bfe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c06:	492e      	ldr	r1, [pc, #184]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d009      	beq.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008c18:	4b29      	ldr	r3, [pc, #164]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c1a:	691b      	ldr	r3, [r3, #16]
 8008c1c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008c26:	4926      	ldr	r1, [pc, #152]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d008      	beq.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008c38:	4b21      	ldr	r3, [pc, #132]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c3c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c44:	491e      	ldr	r1, [pc, #120]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c46:	4313      	orrs	r3, r2
 8008c48:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00d      	beq.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008c56:	4b1a      	ldr	r3, [pc, #104]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	4a19      	ldr	r2, [pc, #100]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c60:	6113      	str	r3, [r2, #16]
 8008c62:	4b17      	ldr	r3, [pc, #92]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c64:	691a      	ldr	r2, [r3, #16]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008c6c:	4914      	ldr	r1, [pc, #80]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	da08      	bge.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008c7a:	4b11      	ldr	r3, [pc, #68]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c86:	490e      	ldr	r1, [pc, #56]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d009      	beq.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008c98:	4b09      	ldr	r3, [pc, #36]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ca6:	4906      	ldr	r1, [pc, #24]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008cac:	7dbb      	ldrb	r3, [r7, #22]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d101      	bne.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	e000      	b.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3718      	adds	r7, #24
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	58024400 	.word	0x58024400

08008cc4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008cc8:	f7ff f860 	bl	8007d8c <HAL_RCC_GetHCLKFreq>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	4b06      	ldr	r3, [pc, #24]	; (8008ce8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	091b      	lsrs	r3, r3, #4
 8008cd4:	f003 0307 	and.w	r3, r3, #7
 8008cd8:	4904      	ldr	r1, [pc, #16]	; (8008cec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008cda:	5ccb      	ldrb	r3, [r1, r3]
 8008cdc:	f003 031f 	and.w	r3, r3, #31
 8008ce0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	58024400 	.word	0x58024400
 8008cec:	0800ce48 	.word	0x0800ce48

08008cf0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b089      	sub	sp, #36	; 0x24
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008cf8:	4ba1      	ldr	r3, [pc, #644]	; (8008f80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cfc:	f003 0303 	and.w	r3, r3, #3
 8008d00:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008d02:	4b9f      	ldr	r3, [pc, #636]	; (8008f80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d06:	0b1b      	lsrs	r3, r3, #12
 8008d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d0c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008d0e:	4b9c      	ldr	r3, [pc, #624]	; (8008f80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d12:	091b      	lsrs	r3, r3, #4
 8008d14:	f003 0301 	and.w	r3, r3, #1
 8008d18:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008d1a:	4b99      	ldr	r3, [pc, #612]	; (8008f80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d1e:	08db      	lsrs	r3, r3, #3
 8008d20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d24:	693a      	ldr	r2, [r7, #16]
 8008d26:	fb02 f303 	mul.w	r3, r2, r3
 8008d2a:	ee07 3a90 	vmov	s15, r3
 8008d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f000 8111 	beq.w	8008f60 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	f000 8083 	beq.w	8008e4c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	f200 80a1 	bhi.w	8008e90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d003      	beq.n	8008d5c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d056      	beq.n	8008e08 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008d5a:	e099      	b.n	8008e90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d5c:	4b88      	ldr	r3, [pc, #544]	; (8008f80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f003 0320 	and.w	r3, r3, #32
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d02d      	beq.n	8008dc4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d68:	4b85      	ldr	r3, [pc, #532]	; (8008f80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	08db      	lsrs	r3, r3, #3
 8008d6e:	f003 0303 	and.w	r3, r3, #3
 8008d72:	4a84      	ldr	r2, [pc, #528]	; (8008f84 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008d74:	fa22 f303 	lsr.w	r3, r2, r3
 8008d78:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	ee07 3a90 	vmov	s15, r3
 8008d80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	ee07 3a90 	vmov	s15, r3
 8008d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d92:	4b7b      	ldr	r3, [pc, #492]	; (8008f80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d9a:	ee07 3a90 	vmov	s15, r3
 8008d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008da2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008da6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008f88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008db2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dbe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008dc2:	e087      	b.n	8008ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	ee07 3a90 	vmov	s15, r3
 8008dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008f8c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dd6:	4b6a      	ldr	r3, [pc, #424]	; (8008f80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dde:	ee07 3a90 	vmov	s15, r3
 8008de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008de6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008f88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e06:	e065      	b.n	8008ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	ee07 3a90 	vmov	s15, r3
 8008e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e12:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008f90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e1a:	4b59      	ldr	r3, [pc, #356]	; (8008f80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e22:	ee07 3a90 	vmov	s15, r3
 8008e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e2e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008f88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e4a:	e043      	b.n	8008ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	ee07 3a90 	vmov	s15, r3
 8008e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e56:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e5e:	4b48      	ldr	r3, [pc, #288]	; (8008f80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e66:	ee07 3a90 	vmov	s15, r3
 8008e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e72:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008f88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e8e:	e021      	b.n	8008ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	ee07 3a90 	vmov	s15, r3
 8008e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e9a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008f90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ea2:	4b37      	ldr	r3, [pc, #220]	; (8008f80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eaa:	ee07 3a90 	vmov	s15, r3
 8008eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eb6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008f88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ece:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ed2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008ed4:	4b2a      	ldr	r3, [pc, #168]	; (8008f80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed8:	0a5b      	lsrs	r3, r3, #9
 8008eda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ede:	ee07 3a90 	vmov	s15, r3
 8008ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ee6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008eea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008eee:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ef2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ef6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008efa:	ee17 2a90 	vmov	r2, s15
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008f02:	4b1f      	ldr	r3, [pc, #124]	; (8008f80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f06:	0c1b      	lsrs	r3, r3, #16
 8008f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f0c:	ee07 3a90 	vmov	s15, r3
 8008f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f28:	ee17 2a90 	vmov	r2, s15
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008f30:	4b13      	ldr	r3, [pc, #76]	; (8008f80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f34:	0e1b      	lsrs	r3, r3, #24
 8008f36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f3a:	ee07 3a90 	vmov	s15, r3
 8008f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f56:	ee17 2a90 	vmov	r2, s15
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008f5e:	e008      	b.n	8008f72 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	609a      	str	r2, [r3, #8]
}
 8008f72:	bf00      	nop
 8008f74:	3724      	adds	r7, #36	; 0x24
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr
 8008f7e:	bf00      	nop
 8008f80:	58024400 	.word	0x58024400
 8008f84:	03d09000 	.word	0x03d09000
 8008f88:	46000000 	.word	0x46000000
 8008f8c:	4c742400 	.word	0x4c742400
 8008f90:	4a742400 	.word	0x4a742400
 8008f94:	4af42400 	.word	0x4af42400

08008f98 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b089      	sub	sp, #36	; 0x24
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fa0:	4ba1      	ldr	r3, [pc, #644]	; (8009228 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa4:	f003 0303 	and.w	r3, r3, #3
 8008fa8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008faa:	4b9f      	ldr	r3, [pc, #636]	; (8009228 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fae:	0d1b      	lsrs	r3, r3, #20
 8008fb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fb4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008fb6:	4b9c      	ldr	r3, [pc, #624]	; (8009228 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fba:	0a1b      	lsrs	r3, r3, #8
 8008fbc:	f003 0301 	and.w	r3, r3, #1
 8008fc0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008fc2:	4b99      	ldr	r3, [pc, #612]	; (8009228 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fc6:	08db      	lsrs	r3, r3, #3
 8008fc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008fcc:	693a      	ldr	r2, [r7, #16]
 8008fce:	fb02 f303 	mul.w	r3, r2, r3
 8008fd2:	ee07 3a90 	vmov	s15, r3
 8008fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fda:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f000 8111 	beq.w	8009208 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	f000 8083 	beq.w	80090f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	2b02      	cmp	r3, #2
 8008ff2:	f200 80a1 	bhi.w	8009138 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d003      	beq.n	8009004 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d056      	beq.n	80090b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009002:	e099      	b.n	8009138 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009004:	4b88      	ldr	r3, [pc, #544]	; (8009228 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f003 0320 	and.w	r3, r3, #32
 800900c:	2b00      	cmp	r3, #0
 800900e:	d02d      	beq.n	800906c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009010:	4b85      	ldr	r3, [pc, #532]	; (8009228 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	08db      	lsrs	r3, r3, #3
 8009016:	f003 0303 	and.w	r3, r3, #3
 800901a:	4a84      	ldr	r2, [pc, #528]	; (800922c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800901c:	fa22 f303 	lsr.w	r3, r2, r3
 8009020:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	ee07 3a90 	vmov	s15, r3
 8009028:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	ee07 3a90 	vmov	s15, r3
 8009032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800903a:	4b7b      	ldr	r3, [pc, #492]	; (8009228 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800903c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009042:	ee07 3a90 	vmov	s15, r3
 8009046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800904a:	ed97 6a03 	vldr	s12, [r7, #12]
 800904e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009230 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800905a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800905e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009066:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800906a:	e087      	b.n	800917c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	ee07 3a90 	vmov	s15, r3
 8009072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009076:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009234 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800907a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800907e:	4b6a      	ldr	r3, [pc, #424]	; (8009228 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009086:	ee07 3a90 	vmov	s15, r3
 800908a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800908e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009092:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009230 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800909a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800909e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80090ae:	e065      	b.n	800917c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	ee07 3a90 	vmov	s15, r3
 80090b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009238 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80090be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090c2:	4b59      	ldr	r3, [pc, #356]	; (8009228 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ca:	ee07 3a90 	vmov	s15, r3
 80090ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80090d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009230 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80090f2:	e043      	b.n	800917c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	ee07 3a90 	vmov	s15, r3
 80090fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800923c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009106:	4b48      	ldr	r3, [pc, #288]	; (8009228 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800910a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800910e:	ee07 3a90 	vmov	s15, r3
 8009112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009116:	ed97 6a03 	vldr	s12, [r7, #12]
 800911a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009230 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800911e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800912a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800912e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009132:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009136:	e021      	b.n	800917c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	ee07 3a90 	vmov	s15, r3
 800913e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009142:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009238 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800914a:	4b37      	ldr	r3, [pc, #220]	; (8009228 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800914c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009152:	ee07 3a90 	vmov	s15, r3
 8009156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800915a:	ed97 6a03 	vldr	s12, [r7, #12]
 800915e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009230 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800916a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800916e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009176:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800917a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800917c:	4b2a      	ldr	r3, [pc, #168]	; (8009228 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800917e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009180:	0a5b      	lsrs	r3, r3, #9
 8009182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009186:	ee07 3a90 	vmov	s15, r3
 800918a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800918e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009192:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009196:	edd7 6a07 	vldr	s13, [r7, #28]
 800919a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800919e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091a2:	ee17 2a90 	vmov	r2, s15
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80091aa:	4b1f      	ldr	r3, [pc, #124]	; (8009228 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ae:	0c1b      	lsrs	r3, r3, #16
 80091b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091b4:	ee07 3a90 	vmov	s15, r3
 80091b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80091c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091d0:	ee17 2a90 	vmov	r2, s15
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80091d8:	4b13      	ldr	r3, [pc, #76]	; (8009228 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091dc:	0e1b      	lsrs	r3, r3, #24
 80091de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091e2:	ee07 3a90 	vmov	s15, r3
 80091e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80091f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091fe:	ee17 2a90 	vmov	r2, s15
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009206:	e008      	b.n	800921a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	609a      	str	r2, [r3, #8]
}
 800921a:	bf00      	nop
 800921c:	3724      	adds	r7, #36	; 0x24
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr
 8009226:	bf00      	nop
 8009228:	58024400 	.word	0x58024400
 800922c:	03d09000 	.word	0x03d09000
 8009230:	46000000 	.word	0x46000000
 8009234:	4c742400 	.word	0x4c742400
 8009238:	4a742400 	.word	0x4a742400
 800923c:	4af42400 	.word	0x4af42400

08009240 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800924a:	2300      	movs	r3, #0
 800924c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800924e:	4b53      	ldr	r3, [pc, #332]	; (800939c <RCCEx_PLL2_Config+0x15c>)
 8009250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009252:	f003 0303 	and.w	r3, r3, #3
 8009256:	2b03      	cmp	r3, #3
 8009258:	d101      	bne.n	800925e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	e099      	b.n	8009392 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800925e:	4b4f      	ldr	r3, [pc, #316]	; (800939c <RCCEx_PLL2_Config+0x15c>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a4e      	ldr	r2, [pc, #312]	; (800939c <RCCEx_PLL2_Config+0x15c>)
 8009264:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009268:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800926a:	f7fa f9d3 	bl	8003614 <HAL_GetTick>
 800926e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009270:	e008      	b.n	8009284 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009272:	f7fa f9cf 	bl	8003614 <HAL_GetTick>
 8009276:	4602      	mov	r2, r0
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	2b02      	cmp	r3, #2
 800927e:	d901      	bls.n	8009284 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009280:	2303      	movs	r3, #3
 8009282:	e086      	b.n	8009392 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009284:	4b45      	ldr	r3, [pc, #276]	; (800939c <RCCEx_PLL2_Config+0x15c>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800928c:	2b00      	cmp	r3, #0
 800928e:	d1f0      	bne.n	8009272 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009290:	4b42      	ldr	r3, [pc, #264]	; (800939c <RCCEx_PLL2_Config+0x15c>)
 8009292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009294:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	031b      	lsls	r3, r3, #12
 800929e:	493f      	ldr	r1, [pc, #252]	; (800939c <RCCEx_PLL2_Config+0x15c>)
 80092a0:	4313      	orrs	r3, r2
 80092a2:	628b      	str	r3, [r1, #40]	; 0x28
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	3b01      	subs	r3, #1
 80092aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	3b01      	subs	r3, #1
 80092b4:	025b      	lsls	r3, r3, #9
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	431a      	orrs	r2, r3
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	3b01      	subs	r3, #1
 80092c0:	041b      	lsls	r3, r3, #16
 80092c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80092c6:	431a      	orrs	r2, r3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	691b      	ldr	r3, [r3, #16]
 80092cc:	3b01      	subs	r3, #1
 80092ce:	061b      	lsls	r3, r3, #24
 80092d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80092d4:	4931      	ldr	r1, [pc, #196]	; (800939c <RCCEx_PLL2_Config+0x15c>)
 80092d6:	4313      	orrs	r3, r2
 80092d8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80092da:	4b30      	ldr	r3, [pc, #192]	; (800939c <RCCEx_PLL2_Config+0x15c>)
 80092dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	695b      	ldr	r3, [r3, #20]
 80092e6:	492d      	ldr	r1, [pc, #180]	; (800939c <RCCEx_PLL2_Config+0x15c>)
 80092e8:	4313      	orrs	r3, r2
 80092ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80092ec:	4b2b      	ldr	r3, [pc, #172]	; (800939c <RCCEx_PLL2_Config+0x15c>)
 80092ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f0:	f023 0220 	bic.w	r2, r3, #32
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	699b      	ldr	r3, [r3, #24]
 80092f8:	4928      	ldr	r1, [pc, #160]	; (800939c <RCCEx_PLL2_Config+0x15c>)
 80092fa:	4313      	orrs	r3, r2
 80092fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80092fe:	4b27      	ldr	r3, [pc, #156]	; (800939c <RCCEx_PLL2_Config+0x15c>)
 8009300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009302:	4a26      	ldr	r2, [pc, #152]	; (800939c <RCCEx_PLL2_Config+0x15c>)
 8009304:	f023 0310 	bic.w	r3, r3, #16
 8009308:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800930a:	4b24      	ldr	r3, [pc, #144]	; (800939c <RCCEx_PLL2_Config+0x15c>)
 800930c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800930e:	4b24      	ldr	r3, [pc, #144]	; (80093a0 <RCCEx_PLL2_Config+0x160>)
 8009310:	4013      	ands	r3, r2
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	69d2      	ldr	r2, [r2, #28]
 8009316:	00d2      	lsls	r2, r2, #3
 8009318:	4920      	ldr	r1, [pc, #128]	; (800939c <RCCEx_PLL2_Config+0x15c>)
 800931a:	4313      	orrs	r3, r2
 800931c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800931e:	4b1f      	ldr	r3, [pc, #124]	; (800939c <RCCEx_PLL2_Config+0x15c>)
 8009320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009322:	4a1e      	ldr	r2, [pc, #120]	; (800939c <RCCEx_PLL2_Config+0x15c>)
 8009324:	f043 0310 	orr.w	r3, r3, #16
 8009328:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d106      	bne.n	800933e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009330:	4b1a      	ldr	r3, [pc, #104]	; (800939c <RCCEx_PLL2_Config+0x15c>)
 8009332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009334:	4a19      	ldr	r2, [pc, #100]	; (800939c <RCCEx_PLL2_Config+0x15c>)
 8009336:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800933a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800933c:	e00f      	b.n	800935e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	2b01      	cmp	r3, #1
 8009342:	d106      	bne.n	8009352 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009344:	4b15      	ldr	r3, [pc, #84]	; (800939c <RCCEx_PLL2_Config+0x15c>)
 8009346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009348:	4a14      	ldr	r2, [pc, #80]	; (800939c <RCCEx_PLL2_Config+0x15c>)
 800934a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800934e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009350:	e005      	b.n	800935e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009352:	4b12      	ldr	r3, [pc, #72]	; (800939c <RCCEx_PLL2_Config+0x15c>)
 8009354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009356:	4a11      	ldr	r2, [pc, #68]	; (800939c <RCCEx_PLL2_Config+0x15c>)
 8009358:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800935c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800935e:	4b0f      	ldr	r3, [pc, #60]	; (800939c <RCCEx_PLL2_Config+0x15c>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a0e      	ldr	r2, [pc, #56]	; (800939c <RCCEx_PLL2_Config+0x15c>)
 8009364:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009368:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800936a:	f7fa f953 	bl	8003614 <HAL_GetTick>
 800936e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009370:	e008      	b.n	8009384 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009372:	f7fa f94f 	bl	8003614 <HAL_GetTick>
 8009376:	4602      	mov	r2, r0
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	1ad3      	subs	r3, r2, r3
 800937c:	2b02      	cmp	r3, #2
 800937e:	d901      	bls.n	8009384 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009380:	2303      	movs	r3, #3
 8009382:	e006      	b.n	8009392 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009384:	4b05      	ldr	r3, [pc, #20]	; (800939c <RCCEx_PLL2_Config+0x15c>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800938c:	2b00      	cmp	r3, #0
 800938e:	d0f0      	beq.n	8009372 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009390:	7bfb      	ldrb	r3, [r7, #15]
}
 8009392:	4618      	mov	r0, r3
 8009394:	3710      	adds	r7, #16
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	58024400 	.word	0x58024400
 80093a0:	ffff0007 	.word	0xffff0007

080093a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80093ae:	2300      	movs	r3, #0
 80093b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80093b2:	4b53      	ldr	r3, [pc, #332]	; (8009500 <RCCEx_PLL3_Config+0x15c>)
 80093b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b6:	f003 0303 	and.w	r3, r3, #3
 80093ba:	2b03      	cmp	r3, #3
 80093bc:	d101      	bne.n	80093c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80093be:	2301      	movs	r3, #1
 80093c0:	e099      	b.n	80094f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80093c2:	4b4f      	ldr	r3, [pc, #316]	; (8009500 <RCCEx_PLL3_Config+0x15c>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a4e      	ldr	r2, [pc, #312]	; (8009500 <RCCEx_PLL3_Config+0x15c>)
 80093c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093ce:	f7fa f921 	bl	8003614 <HAL_GetTick>
 80093d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80093d4:	e008      	b.n	80093e8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80093d6:	f7fa f91d 	bl	8003614 <HAL_GetTick>
 80093da:	4602      	mov	r2, r0
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	1ad3      	subs	r3, r2, r3
 80093e0:	2b02      	cmp	r3, #2
 80093e2:	d901      	bls.n	80093e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80093e4:	2303      	movs	r3, #3
 80093e6:	e086      	b.n	80094f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80093e8:	4b45      	ldr	r3, [pc, #276]	; (8009500 <RCCEx_PLL3_Config+0x15c>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d1f0      	bne.n	80093d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80093f4:	4b42      	ldr	r3, [pc, #264]	; (8009500 <RCCEx_PLL3_Config+0x15c>)
 80093f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093f8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	051b      	lsls	r3, r3, #20
 8009402:	493f      	ldr	r1, [pc, #252]	; (8009500 <RCCEx_PLL3_Config+0x15c>)
 8009404:	4313      	orrs	r3, r2
 8009406:	628b      	str	r3, [r1, #40]	; 0x28
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	3b01      	subs	r3, #1
 800940e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	3b01      	subs	r3, #1
 8009418:	025b      	lsls	r3, r3, #9
 800941a:	b29b      	uxth	r3, r3
 800941c:	431a      	orrs	r2, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	68db      	ldr	r3, [r3, #12]
 8009422:	3b01      	subs	r3, #1
 8009424:	041b      	lsls	r3, r3, #16
 8009426:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800942a:	431a      	orrs	r2, r3
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	3b01      	subs	r3, #1
 8009432:	061b      	lsls	r3, r3, #24
 8009434:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009438:	4931      	ldr	r1, [pc, #196]	; (8009500 <RCCEx_PLL3_Config+0x15c>)
 800943a:	4313      	orrs	r3, r2
 800943c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800943e:	4b30      	ldr	r3, [pc, #192]	; (8009500 <RCCEx_PLL3_Config+0x15c>)
 8009440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009442:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	695b      	ldr	r3, [r3, #20]
 800944a:	492d      	ldr	r1, [pc, #180]	; (8009500 <RCCEx_PLL3_Config+0x15c>)
 800944c:	4313      	orrs	r3, r2
 800944e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009450:	4b2b      	ldr	r3, [pc, #172]	; (8009500 <RCCEx_PLL3_Config+0x15c>)
 8009452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009454:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	699b      	ldr	r3, [r3, #24]
 800945c:	4928      	ldr	r1, [pc, #160]	; (8009500 <RCCEx_PLL3_Config+0x15c>)
 800945e:	4313      	orrs	r3, r2
 8009460:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009462:	4b27      	ldr	r3, [pc, #156]	; (8009500 <RCCEx_PLL3_Config+0x15c>)
 8009464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009466:	4a26      	ldr	r2, [pc, #152]	; (8009500 <RCCEx_PLL3_Config+0x15c>)
 8009468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800946c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800946e:	4b24      	ldr	r3, [pc, #144]	; (8009500 <RCCEx_PLL3_Config+0x15c>)
 8009470:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009472:	4b24      	ldr	r3, [pc, #144]	; (8009504 <RCCEx_PLL3_Config+0x160>)
 8009474:	4013      	ands	r3, r2
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	69d2      	ldr	r2, [r2, #28]
 800947a:	00d2      	lsls	r2, r2, #3
 800947c:	4920      	ldr	r1, [pc, #128]	; (8009500 <RCCEx_PLL3_Config+0x15c>)
 800947e:	4313      	orrs	r3, r2
 8009480:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009482:	4b1f      	ldr	r3, [pc, #124]	; (8009500 <RCCEx_PLL3_Config+0x15c>)
 8009484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009486:	4a1e      	ldr	r2, [pc, #120]	; (8009500 <RCCEx_PLL3_Config+0x15c>)
 8009488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800948c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d106      	bne.n	80094a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009494:	4b1a      	ldr	r3, [pc, #104]	; (8009500 <RCCEx_PLL3_Config+0x15c>)
 8009496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009498:	4a19      	ldr	r2, [pc, #100]	; (8009500 <RCCEx_PLL3_Config+0x15c>)
 800949a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800949e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80094a0:	e00f      	b.n	80094c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d106      	bne.n	80094b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80094a8:	4b15      	ldr	r3, [pc, #84]	; (8009500 <RCCEx_PLL3_Config+0x15c>)
 80094aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ac:	4a14      	ldr	r2, [pc, #80]	; (8009500 <RCCEx_PLL3_Config+0x15c>)
 80094ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80094b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80094b4:	e005      	b.n	80094c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80094b6:	4b12      	ldr	r3, [pc, #72]	; (8009500 <RCCEx_PLL3_Config+0x15c>)
 80094b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ba:	4a11      	ldr	r2, [pc, #68]	; (8009500 <RCCEx_PLL3_Config+0x15c>)
 80094bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80094c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80094c2:	4b0f      	ldr	r3, [pc, #60]	; (8009500 <RCCEx_PLL3_Config+0x15c>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a0e      	ldr	r2, [pc, #56]	; (8009500 <RCCEx_PLL3_Config+0x15c>)
 80094c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094ce:	f7fa f8a1 	bl	8003614 <HAL_GetTick>
 80094d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80094d4:	e008      	b.n	80094e8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80094d6:	f7fa f89d 	bl	8003614 <HAL_GetTick>
 80094da:	4602      	mov	r2, r0
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	1ad3      	subs	r3, r2, r3
 80094e0:	2b02      	cmp	r3, #2
 80094e2:	d901      	bls.n	80094e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80094e4:	2303      	movs	r3, #3
 80094e6:	e006      	b.n	80094f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80094e8:	4b05      	ldr	r3, [pc, #20]	; (8009500 <RCCEx_PLL3_Config+0x15c>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d0f0      	beq.n	80094d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80094f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3710      	adds	r7, #16
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	58024400 	.word	0x58024400
 8009504:	ffff0007 	.word	0xffff0007

08009508 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d101      	bne.n	800951a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	e0f1      	b.n	80096fe <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2200      	movs	r2, #0
 800951e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a78      	ldr	r2, [pc, #480]	; (8009708 <HAL_SPI_Init+0x200>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d00f      	beq.n	800954a <HAL_SPI_Init+0x42>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a77      	ldr	r2, [pc, #476]	; (800970c <HAL_SPI_Init+0x204>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d00a      	beq.n	800954a <HAL_SPI_Init+0x42>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a75      	ldr	r2, [pc, #468]	; (8009710 <HAL_SPI_Init+0x208>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d005      	beq.n	800954a <HAL_SPI_Init+0x42>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	2b0f      	cmp	r3, #15
 8009544:	d901      	bls.n	800954a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	e0d9      	b.n	80096fe <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 ff6c 	bl	800a428 <SPI_GetPacketSize>
 8009550:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a6c      	ldr	r2, [pc, #432]	; (8009708 <HAL_SPI_Init+0x200>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d00c      	beq.n	8009576 <HAL_SPI_Init+0x6e>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a6a      	ldr	r2, [pc, #424]	; (800970c <HAL_SPI_Init+0x204>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d007      	beq.n	8009576 <HAL_SPI_Init+0x6e>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a69      	ldr	r2, [pc, #420]	; (8009710 <HAL_SPI_Init+0x208>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d002      	beq.n	8009576 <HAL_SPI_Init+0x6e>
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2b08      	cmp	r3, #8
 8009574:	d811      	bhi.n	800959a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800957a:	4a63      	ldr	r2, [pc, #396]	; (8009708 <HAL_SPI_Init+0x200>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d009      	beq.n	8009594 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a61      	ldr	r2, [pc, #388]	; (800970c <HAL_SPI_Init+0x204>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d004      	beq.n	8009594 <HAL_SPI_Init+0x8c>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4a60      	ldr	r2, [pc, #384]	; (8009710 <HAL_SPI_Init+0x208>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d104      	bne.n	800959e <HAL_SPI_Init+0x96>
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2b10      	cmp	r3, #16
 8009598:	d901      	bls.n	800959e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800959a:	2301      	movs	r3, #1
 800959c:	e0af      	b.n	80096fe <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d106      	bne.n	80095b8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f7f9 fcd2 	bl	8002f5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2202      	movs	r2, #2
 80095bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f022 0201 	bic.w	r2, r2, #1
 80095ce:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80095da:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	699b      	ldr	r3, [r3, #24]
 80095e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095e4:	d119      	bne.n	800961a <HAL_SPI_Init+0x112>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095ee:	d103      	bne.n	80095f8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d008      	beq.n	800960a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d10c      	bne.n	800961a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009604:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009608:	d107      	bne.n	800961a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009618:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	69da      	ldr	r2, [r3, #28]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009622:	431a      	orrs	r2, r3
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	431a      	orrs	r2, r3
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800962c:	ea42 0103 	orr.w	r1, r2, r3
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	68da      	ldr	r2, [r3, #12]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	430a      	orrs	r2, r1
 800963a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009644:	431a      	orrs	r2, r3
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800964a:	431a      	orrs	r2, r3
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	699b      	ldr	r3, [r3, #24]
 8009650:	431a      	orrs	r2, r3
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	431a      	orrs	r2, r3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	695b      	ldr	r3, [r3, #20]
 800965c:	431a      	orrs	r2, r3
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6a1b      	ldr	r3, [r3, #32]
 8009662:	431a      	orrs	r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	431a      	orrs	r2, r3
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800966e:	431a      	orrs	r2, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	431a      	orrs	r2, r3
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800967a:	ea42 0103 	orr.w	r1, r2, r3
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	430a      	orrs	r2, r1
 8009688:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d113      	bne.n	80096ba <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096a4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80096b8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f022 0201 	bic.w	r2, r2, #1
 80096c8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d00a      	beq.n	80096ec <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	430a      	orrs	r2, r1
 80096ea:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2201      	movs	r2, #1
 80096f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80096fc:	2300      	movs	r3, #0
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3710      	adds	r7, #16
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	40013000 	.word	0x40013000
 800970c:	40003800 	.word	0x40003800
 8009710:	40003c00 	.word	0x40003c00

08009714 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b08a      	sub	sp, #40	; 0x28
 8009718:	af02      	add	r7, sp, #8
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	603b      	str	r3, [r7, #0]
 8009720:	4613      	mov	r3, r2
 8009722:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	3320      	adds	r3, #32
 800972a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800972c:	2300      	movs	r3, #0
 800972e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009736:	2b01      	cmp	r3, #1
 8009738:	d101      	bne.n	800973e <HAL_SPI_Transmit+0x2a>
 800973a:	2302      	movs	r3, #2
 800973c:	e1d7      	b.n	8009aee <HAL_SPI_Transmit+0x3da>
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2201      	movs	r2, #1
 8009742:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009746:	f7f9 ff65 	bl	8003614 <HAL_GetTick>
 800974a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009752:	b2db      	uxtb	r3, r3
 8009754:	2b01      	cmp	r3, #1
 8009756:	d007      	beq.n	8009768 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8009758:	2302      	movs	r3, #2
 800975a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2200      	movs	r2, #0
 8009760:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009764:	7efb      	ldrb	r3, [r7, #27]
 8009766:	e1c2      	b.n	8009aee <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d002      	beq.n	8009774 <HAL_SPI_Transmit+0x60>
 800976e:	88fb      	ldrh	r3, [r7, #6]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d107      	bne.n	8009784 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2200      	movs	r2, #0
 800977c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009780:	7efb      	ldrb	r3, [r7, #27]
 8009782:	e1b4      	b.n	8009aee <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2203      	movs	r2, #3
 8009788:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2200      	movs	r2, #0
 8009790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	68ba      	ldr	r2, [r7, #8]
 8009798:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	88fa      	ldrh	r2, [r7, #6]
 800979e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	88fa      	ldrh	r2, [r7, #6]
 80097a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2200      	movs	r2, #0
 80097ae:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2200      	movs	r2, #0
 80097c4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2200      	movs	r2, #0
 80097ca:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80097d4:	d107      	bne.n	80097e6 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	685a      	ldr	r2, [r3, #4]
 80097ec:	4b96      	ldr	r3, [pc, #600]	; (8009a48 <HAL_SPI_Transmit+0x334>)
 80097ee:	4013      	ands	r3, r2
 80097f0:	88f9      	ldrh	r1, [r7, #6]
 80097f2:	68fa      	ldr	r2, [r7, #12]
 80097f4:	6812      	ldr	r2, [r2, #0]
 80097f6:	430b      	orrs	r3, r1
 80097f8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	681a      	ldr	r2, [r3, #0]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f042 0201 	orr.w	r2, r2, #1
 8009808:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009812:	d107      	bne.n	8009824 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009822:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	2b0f      	cmp	r3, #15
 800982a:	d947      	bls.n	80098bc <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800982c:	e03f      	b.n	80098ae <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	695b      	ldr	r3, [r3, #20]
 8009834:	f003 0302 	and.w	r3, r3, #2
 8009838:	2b02      	cmp	r3, #2
 800983a:	d114      	bne.n	8009866 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	6812      	ldr	r2, [r2, #0]
 8009846:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800984c:	1d1a      	adds	r2, r3, #4
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009858:	b29b      	uxth	r3, r3
 800985a:	3b01      	subs	r3, #1
 800985c:	b29a      	uxth	r2, r3
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009864:	e023      	b.n	80098ae <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009866:	f7f9 fed5 	bl	8003614 <HAL_GetTick>
 800986a:	4602      	mov	r2, r0
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	1ad3      	subs	r3, r2, r3
 8009870:	683a      	ldr	r2, [r7, #0]
 8009872:	429a      	cmp	r2, r3
 8009874:	d803      	bhi.n	800987e <HAL_SPI_Transmit+0x16a>
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800987c:	d102      	bne.n	8009884 <HAL_SPI_Transmit+0x170>
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d114      	bne.n	80098ae <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009884:	68f8      	ldr	r0, [r7, #12]
 8009886:	f000 fd01 	bl	800a28c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2200      	movs	r2, #0
 800988e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009898:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2201      	movs	r2, #1
 80098a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80098aa:	2303      	movs	r3, #3
 80098ac:	e11f      	b.n	8009aee <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1b9      	bne.n	800982e <HAL_SPI_Transmit+0x11a>
 80098ba:	e0f2      	b.n	8009aa2 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	2b07      	cmp	r3, #7
 80098c2:	f240 80e7 	bls.w	8009a94 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80098c6:	e05d      	b.n	8009984 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	695b      	ldr	r3, [r3, #20]
 80098ce:	f003 0302 	and.w	r3, r3, #2
 80098d2:	2b02      	cmp	r3, #2
 80098d4:	d132      	bne.n	800993c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80098dc:	b29b      	uxth	r3, r3
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d918      	bls.n	8009914 <HAL_SPI_Transmit+0x200>
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d014      	beq.n	8009914 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	6812      	ldr	r2, [r2, #0]
 80098f4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098fa:	1d1a      	adds	r2, r3, #4
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009906:	b29b      	uxth	r3, r3
 8009908:	3b02      	subs	r3, #2
 800990a:	b29a      	uxth	r2, r3
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009912:	e037      	b.n	8009984 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009918:	881a      	ldrh	r2, [r3, #0]
 800991a:	69fb      	ldr	r3, [r7, #28]
 800991c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009922:	1c9a      	adds	r2, r3, #2
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800992e:	b29b      	uxth	r3, r3
 8009930:	3b01      	subs	r3, #1
 8009932:	b29a      	uxth	r2, r3
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800993a:	e023      	b.n	8009984 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800993c:	f7f9 fe6a 	bl	8003614 <HAL_GetTick>
 8009940:	4602      	mov	r2, r0
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	1ad3      	subs	r3, r2, r3
 8009946:	683a      	ldr	r2, [r7, #0]
 8009948:	429a      	cmp	r2, r3
 800994a:	d803      	bhi.n	8009954 <HAL_SPI_Transmit+0x240>
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009952:	d102      	bne.n	800995a <HAL_SPI_Transmit+0x246>
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d114      	bne.n	8009984 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800995a:	68f8      	ldr	r0, [r7, #12]
 800995c:	f000 fc96 	bl	800a28c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2200      	movs	r2, #0
 8009964:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800996e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009980:	2303      	movs	r3, #3
 8009982:	e0b4      	b.n	8009aee <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800998a:	b29b      	uxth	r3, r3
 800998c:	2b00      	cmp	r3, #0
 800998e:	d19b      	bne.n	80098c8 <HAL_SPI_Transmit+0x1b4>
 8009990:	e087      	b.n	8009aa2 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	695b      	ldr	r3, [r3, #20]
 8009998:	f003 0302 	and.w	r3, r3, #2
 800999c:	2b02      	cmp	r3, #2
 800999e:	d155      	bne.n	8009a4c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	2b03      	cmp	r3, #3
 80099aa:	d918      	bls.n	80099de <HAL_SPI_Transmit+0x2ca>
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099b0:	2b40      	cmp	r3, #64	; 0x40
 80099b2:	d914      	bls.n	80099de <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	6812      	ldr	r2, [r2, #0]
 80099be:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099c4:	1d1a      	adds	r2, r3, #4
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	3b04      	subs	r3, #4
 80099d4:	b29a      	uxth	r2, r3
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80099dc:	e05a      	b.n	8009a94 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d917      	bls.n	8009a1a <HAL_SPI_Transmit+0x306>
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d013      	beq.n	8009a1a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099f6:	881a      	ldrh	r2, [r3, #0]
 80099f8:	69fb      	ldr	r3, [r7, #28]
 80099fa:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a00:	1c9a      	adds	r2, r3, #2
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	3b02      	subs	r3, #2
 8009a10:	b29a      	uxth	r2, r3
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009a18:	e03c      	b.n	8009a94 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	3320      	adds	r3, #32
 8009a24:	7812      	ldrb	r2, [r2, #0]
 8009a26:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a2c:	1c5a      	adds	r2, r3, #1
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	3b01      	subs	r3, #1
 8009a3c:	b29a      	uxth	r2, r3
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009a44:	e026      	b.n	8009a94 <HAL_SPI_Transmit+0x380>
 8009a46:	bf00      	nop
 8009a48:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009a4c:	f7f9 fde2 	bl	8003614 <HAL_GetTick>
 8009a50:	4602      	mov	r2, r0
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	683a      	ldr	r2, [r7, #0]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d803      	bhi.n	8009a64 <HAL_SPI_Transmit+0x350>
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a62:	d102      	bne.n	8009a6a <HAL_SPI_Transmit+0x356>
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d114      	bne.n	8009a94 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	f000 fc0e 	bl	800a28c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009a90:	2303      	movs	r3, #3
 8009a92:	e02c      	b.n	8009aee <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f47f af78 	bne.w	8009992 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	9300      	str	r3, [sp, #0]
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	2108      	movs	r1, #8
 8009aac:	68f8      	ldr	r0, [r7, #12]
 8009aae:	f000 fc8d 	bl	800a3cc <SPI_WaitOnFlagUntilTimeout>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d007      	beq.n	8009ac8 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009abe:	f043 0220 	orr.w	r2, r3, #32
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009ac8:	68f8      	ldr	r0, [r7, #12]
 8009aca:	f000 fbdf 	bl	800a28c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d001      	beq.n	8009aec <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	e000      	b.n	8009aee <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8009aec:	7efb      	ldrb	r3, [r7, #27]
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3720      	adds	r7, #32
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop

08009af8 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b086      	sub	sp, #24
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	60b9      	str	r1, [r7, #8]
 8009b02:	4613      	mov	r3, r2
 8009b04:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009b06:	2300      	movs	r3, #0
 8009b08:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d101      	bne.n	8009b18 <HAL_SPI_Transmit_DMA+0x20>
 8009b14:	2302      	movs	r3, #2
 8009b16:	e12c      	b.n	8009d72 <HAL_SPI_Transmit_DMA+0x27a>
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d007      	beq.n	8009b3c <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 8009b2c:	2302      	movs	r3, #2
 8009b2e:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2200      	movs	r2, #0
 8009b34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009b38:	7dfb      	ldrb	r3, [r7, #23]
 8009b3a:	e11a      	b.n	8009d72 <HAL_SPI_Transmit_DMA+0x27a>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d002      	beq.n	8009b48 <HAL_SPI_Transmit_DMA+0x50>
 8009b42:	88fb      	ldrh	r3, [r7, #6]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d107      	bne.n	8009b58 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009b54:	7dfb      	ldrb	r3, [r7, #23]
 8009b56:	e10c      	b.n	8009d72 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2203      	movs	r2, #3
 8009b5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2200      	movs	r2, #0
 8009b64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	68ba      	ldr	r2, [r7, #8]
 8009b6c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	88fa      	ldrh	r2, [r7, #6]
 8009b72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	88fa      	ldrh	r2, [r7, #6]
 8009b7a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2200      	movs	r2, #0
 8009b82:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2200      	movs	r2, #0
 8009b88:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009ba8:	d107      	bne.n	8009bba <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bb8:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	68db      	ldr	r3, [r3, #12]
 8009bbe:	2b0f      	cmp	r3, #15
 8009bc0:	d905      	bls.n	8009bce <HAL_SPI_Transmit_DMA+0xd6>
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bc6:	699b      	ldr	r3, [r3, #24]
 8009bc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009bcc:	d10f      	bne.n	8009bee <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009bd2:	2b07      	cmp	r3, #7
 8009bd4:	d913      	bls.n	8009bfe <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bda:	699b      	ldr	r3, [r3, #24]
 8009bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009be0:	d00d      	beq.n	8009bfe <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009be6:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009be8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009bec:	d007      	beq.n	8009bfe <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009bfa:	7dfb      	ldrb	r3, [r7, #23]
 8009bfc:	e0b9      	b.n	8009d72 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	2b07      	cmp	r3, #7
 8009c04:	d820      	bhi.n	8009c48 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c0a:	699b      	ldr	r3, [r3, #24]
 8009c0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c10:	d109      	bne.n	8009c26 <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	105b      	asrs	r3, r3, #1
 8009c1e:	b29a      	uxth	r2, r3
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c2a:	699b      	ldr	r3, [r3, #24]
 8009c2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c30:	d11e      	bne.n	8009c70 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	3303      	adds	r3, #3
 8009c3c:	109b      	asrs	r3, r3, #2
 8009c3e:	b29a      	uxth	r2, r3
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009c46:	e013      	b.n	8009c70 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	2b0f      	cmp	r3, #15
 8009c4e:	d80f      	bhi.n	8009c70 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c54:	699b      	ldr	r3, [r3, #24]
 8009c56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c5a:	d109      	bne.n	8009c70 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	3301      	adds	r3, #1
 8009c66:	105b      	asrs	r3, r3, #1
 8009c68:	b29a      	uxth	r2, r3
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c74:	4a41      	ldr	r2, [pc, #260]	; (8009d7c <HAL_SPI_Transmit_DMA+0x284>)
 8009c76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c7c:	4a40      	ldr	r2, [pc, #256]	; (8009d80 <HAL_SPI_Transmit_DMA+0x288>)
 8009c7e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c84:	4a3f      	ldr	r2, [pc, #252]	; (8009d84 <HAL_SPI_Transmit_DMA+0x28c>)
 8009c86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	689a      	ldr	r2, [r3, #8]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009c9e:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ca8:	4619      	mov	r1, r3
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	3320      	adds	r3, #32
 8009cb0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009cb8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8009cba:	f7fa f967 	bl	8003f8c <HAL_DMA_Start_IT>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d013      	beq.n	8009cec <HAL_SPI_Transmit_DMA+0x1f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cca:	f043 0210 	orr.w	r2, r3, #16
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8009ce8:	7dfb      	ldrb	r3, [r7, #23]
 8009cea:	e042      	b.n	8009d72 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009cf0:	69db      	ldr	r3, [r3, #28]
 8009cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cf6:	d108      	bne.n	8009d0a <HAL_SPI_Transmit_DMA+0x212>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	6859      	ldr	r1, [r3, #4]
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	4b21      	ldr	r3, [pc, #132]	; (8009d88 <HAL_SPI_Transmit_DMA+0x290>)
 8009d04:	400b      	ands	r3, r1
 8009d06:	6053      	str	r3, [r2, #4]
 8009d08:	e009      	b.n	8009d1e <HAL_SPI_Transmit_DMA+0x226>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	685a      	ldr	r2, [r3, #4]
 8009d10:	4b1d      	ldr	r3, [pc, #116]	; (8009d88 <HAL_SPI_Transmit_DMA+0x290>)
 8009d12:	4013      	ands	r3, r2
 8009d14:	88f9      	ldrh	r1, [r7, #6]
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	6812      	ldr	r2, [r2, #0]
 8009d1a:	430b      	orrs	r3, r1
 8009d1c:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	689a      	ldr	r2, [r3, #8]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d2c:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	691a      	ldr	r2, [r3, #16]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 8009d3c:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f042 0201 	orr.w	r2, r2, #1
 8009d4c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d56:	d107      	bne.n	8009d68 <HAL_SPI_Transmit_DMA+0x270>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d66:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8009d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3718      	adds	r7, #24
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	0800a1f7 	.word	0x0800a1f7
 8009d80:	0800a1b1 	.word	0x0800a1b1
 8009d84:	0800a213 	.word	0x0800a213
 8009d88:	ffff0000 	.word	0xffff0000

08009d8c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b08a      	sub	sp, #40	; 0x28
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	691b      	ldr	r3, [r3, #16]
 8009d9a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	695b      	ldr	r3, [r3, #20]
 8009da2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8009da4:	6a3a      	ldr	r2, [r7, #32]
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	4013      	ands	r3, r2
 8009daa:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8009db4:	2300      	movs	r3, #0
 8009db6:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009dbe:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	3330      	adds	r3, #48	; 0x30
 8009dc6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009dc8:	69bb      	ldr	r3, [r7, #24]
 8009dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d113      	bne.n	8009dfa <HAL_SPI_IRQHandler+0x6e>
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	f003 0320 	and.w	r3, r3, #32
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d10e      	bne.n	8009dfa <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8009ddc:	69bb      	ldr	r3, [r7, #24]
 8009dde:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d009      	beq.n	8009dfa <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	4798      	blx	r3
    hspi->RxISR(hspi);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	4798      	blx	r3
    handled = 1UL;
 8009df6:	2301      	movs	r3, #1
 8009df8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009dfa:	69bb      	ldr	r3, [r7, #24]
 8009dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d10f      	bne.n	8009e24 <HAL_SPI_IRQHandler+0x98>
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	f003 0301 	and.w	r3, r3, #1
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00a      	beq.n	8009e24 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009e0e:	69bb      	ldr	r3, [r7, #24]
 8009e10:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d105      	bne.n	8009e24 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	4798      	blx	r3
    handled = 1UL;
 8009e20:	2301      	movs	r3, #1
 8009e22:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009e24:	69bb      	ldr	r3, [r7, #24]
 8009e26:	f003 0320 	and.w	r3, r3, #32
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d10f      	bne.n	8009e4e <HAL_SPI_IRQHandler+0xc2>
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	f003 0302 	and.w	r3, r3, #2
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d00a      	beq.n	8009e4e <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d105      	bne.n	8009e4e <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	4798      	blx	r3
    handled = 1UL;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8009e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	f040 816f 	bne.w	800a134 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8009e56:	69bb      	ldr	r3, [r7, #24]
 8009e58:	f003 0308 	and.w	r3, r3, #8
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	f000 80a0 	beq.w	8009fa2 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	699a      	ldr	r2, [r3, #24]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f042 0208 	orr.w	r2, r2, #8
 8009e70:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	699a      	ldr	r2, [r3, #24]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f042 0210 	orr.w	r2, r2, #16
 8009e80:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	699a      	ldr	r2, [r3, #24]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e90:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	691a      	ldr	r2, [r3, #16]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f022 0208 	bic.w	r2, r2, #8
 8009ea0:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d00f      	beq.n	8009ecc <HAL_SPI_IRQHandler+0x140>
 8009eac:	7cfb      	ldrb	r3, [r7, #19]
 8009eae:	2b04      	cmp	r3, #4
 8009eb0:	d004      	beq.n	8009ebc <HAL_SPI_IRQHandler+0x130>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009eb6:	69db      	ldr	r3, [r3, #28]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d007      	beq.n	8009ecc <HAL_SPI_IRQHandler+0x140>
 8009ebc:	7cfb      	ldrb	r3, [r7, #19]
 8009ebe:	2b03      	cmp	r3, #3
 8009ec0:	d059      	beq.n	8009f76 <HAL_SPI_IRQHandler+0x1ea>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ec6:	69db      	ldr	r3, [r3, #28]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d154      	bne.n	8009f76 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	689b      	ldr	r3, [r3, #8]
 8009ed2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d13d      	bne.n	8009f56 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8009eda:	e036      	b.n	8009f4a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	68db      	ldr	r3, [r3, #12]
 8009ee0:	2b0f      	cmp	r3, #15
 8009ee2:	d90b      	bls.n	8009efc <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009eec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009eee:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ef4:	1d1a      	adds	r2, r3, #4
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	665a      	str	r2, [r3, #100]	; 0x64
 8009efa:	e01d      	b.n	8009f38 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	2b07      	cmp	r3, #7
 8009f02:	d90b      	bls.n	8009f1c <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f08:	68fa      	ldr	r2, [r7, #12]
 8009f0a:	8812      	ldrh	r2, [r2, #0]
 8009f0c:	b292      	uxth	r2, r2
 8009f0e:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f14:	1c9a      	adds	r2, r3, #2
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	665a      	str	r2, [r3, #100]	; 0x64
 8009f1a:	e00d      	b.n	8009f38 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f28:	7812      	ldrb	r2, [r2, #0]
 8009f2a:	b2d2      	uxtb	r2, r2
 8009f2c:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f32:	1c5a      	adds	r2, r3, #1
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009f3e:	b29b      	uxth	r3, r3
 8009f40:	3b01      	subs	r3, #1
 8009f42:	b29a      	uxth	r2, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d1c2      	bne.n	8009edc <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 f998 	bl	800a28c <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d003      	beq.n	8009f76 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f914 	bl	800a19c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8009f74:	e0e3      	b.n	800a13e <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8009f76:	7cfb      	ldrb	r3, [r7, #19]
 8009f78:	2b05      	cmp	r3, #5
 8009f7a:	d103      	bne.n	8009f84 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 f8f9 	bl	800a174 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8009f82:	e0d9      	b.n	800a138 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8009f84:	7cfb      	ldrb	r3, [r7, #19]
 8009f86:	2b04      	cmp	r3, #4
 8009f88:	d103      	bne.n	8009f92 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 f8e8 	bl	800a160 <HAL_SPI_RxCpltCallback>
    return;
 8009f90:	e0d2      	b.n	800a138 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8009f92:	7cfb      	ldrb	r3, [r7, #19]
 8009f94:	2b03      	cmp	r3, #3
 8009f96:	f040 80cf 	bne.w	800a138 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 f8d6 	bl	800a14c <HAL_SPI_TxCpltCallback>
    return;
 8009fa0:	e0ca      	b.n	800a138 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8009fa2:	69fb      	ldr	r3, [r7, #28]
 8009fa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00d      	beq.n	8009fc8 <HAL_SPI_IRQHandler+0x23c>
 8009fac:	6a3b      	ldr	r3, [r7, #32]
 8009fae:	f003 0308 	and.w	r3, r3, #8
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d008      	beq.n	8009fc8 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	699a      	ldr	r2, [r3, #24]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009fc4:	619a      	str	r2, [r3, #24]

    return;
 8009fc6:	e0ba      	b.n	800a13e <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8009fc8:	69bb      	ldr	r3, [r7, #24]
 8009fca:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	f000 80b5 	beq.w	800a13e <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8009fd4:	69bb      	ldr	r3, [r7, #24]
 8009fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00f      	beq.n	8009ffe <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fe4:	f043 0204 	orr.w	r2, r3, #4
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	699a      	ldr	r2, [r3, #24]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ffc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a004:	2b00      	cmp	r3, #0
 800a006:	d00f      	beq.n	800a028 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a00e:	f043 0201 	orr.w	r2, r3, #1
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	699a      	ldr	r2, [r3, #24]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a026:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d00f      	beq.n	800a052 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a038:	f043 0208 	orr.w	r2, r3, #8
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	699a      	ldr	r2, [r3, #24]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a050:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a052:	69bb      	ldr	r3, [r7, #24]
 800a054:	f003 0320 	and.w	r3, r3, #32
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d00f      	beq.n	800a07c <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a062:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	699a      	ldr	r2, [r3, #24]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f042 0220 	orr.w	r2, r2, #32
 800a07a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a082:	2b00      	cmp	r3, #0
 800a084:	d05a      	beq.n	800a13c <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f022 0201 	bic.w	r2, r2, #1
 800a094:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	6919      	ldr	r1, [r3, #16]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	4b28      	ldr	r3, [pc, #160]	; (800a144 <HAL_SPI_IRQHandler+0x3b8>)
 800a0a2:	400b      	ands	r3, r1
 800a0a4:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a0ac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a0b0:	d138      	bne.n	800a124 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	689a      	ldr	r2, [r3, #8]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a0c0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d013      	beq.n	800a0f2 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0ce:	4a1e      	ldr	r2, [pc, #120]	; (800a148 <HAL_SPI_IRQHandler+0x3bc>)
 800a0d0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7fa f9c2 	bl	8004460 <HAL_DMA_Abort_IT>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d007      	beq.n	800a0f2 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d020      	beq.n	800a13c <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0fe:	4a12      	ldr	r2, [pc, #72]	; (800a148 <HAL_SPI_IRQHandler+0x3bc>)
 800a100:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a106:	4618      	mov	r0, r3
 800a108:	f7fa f9aa 	bl	8004460 <HAL_DMA_Abort_IT>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d014      	beq.n	800a13c <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a118:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a122:	e00b      	b.n	800a13c <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2201      	movs	r2, #1
 800a128:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 f835 	bl	800a19c <HAL_SPI_ErrorCallback>
    return;
 800a132:	e003      	b.n	800a13c <HAL_SPI_IRQHandler+0x3b0>
    return;
 800a134:	bf00      	nop
 800a136:	e002      	b.n	800a13e <HAL_SPI_IRQHandler+0x3b2>
    return;
 800a138:	bf00      	nop
 800a13a:	e000      	b.n	800a13e <HAL_SPI_IRQHandler+0x3b2>
    return;
 800a13c:	bf00      	nop
  }
}
 800a13e:	3728      	adds	r7, #40	; 0x28
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	fffffc94 	.word	0xfffffc94
 800a148:	0800a259 	.word	0x0800a259

0800a14c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a154:	bf00      	nop
 800a156:	370c      	adds	r7, #12
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a168:	bf00      	nop
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a17c:	bf00      	nop
 800a17e:	370c      	adds	r7, #12
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a190:	bf00      	nop
 800a192:	370c      	adds	r7, #12
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a1a4:	bf00      	nop
 800a1a6:	370c      	adds	r7, #12
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b084      	sub	sp, #16
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1bc:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	2b07      	cmp	r3, #7
 800a1c8:	d011      	beq.n	800a1ee <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1ce:	69db      	ldr	r3, [r3, #28]
 800a1d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1d4:	d103      	bne.n	800a1de <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 800a1d6:	68f8      	ldr	r0, [r7, #12]
 800a1d8:	f7ff ffb8 	bl	800a14c <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800a1dc:	e007      	b.n	800a1ee <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	691a      	ldr	r2, [r3, #16]
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f042 0208 	orr.w	r2, r2, #8
 800a1ec:	611a      	str	r2, [r3, #16]
}
 800a1ee:	bf00      	nop
 800a1f0:	3710      	adds	r7, #16
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a1f6:	b580      	push	{r7, lr}
 800a1f8:	b084      	sub	sp, #16
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a202:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	f7ff ffbf 	bl	800a188 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a20a:	bf00      	nop
 800a20c:	3710      	adds	r7, #16
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}

0800a212 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a212:	b580      	push	{r7, lr}
 800a214:	b084      	sub	sp, #16
 800a216:	af00      	add	r7, sp, #0
 800a218:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a21e:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f7fb fa8b 	bl	800573c <HAL_DMA_GetError>
 800a226:	4603      	mov	r3, r0
 800a228:	2b02      	cmp	r3, #2
 800a22a:	d011      	beq.n	800a250 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f000 f82d 	bl	800a28c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a238:	f043 0210 	orr.w	r2, r3, #16
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2201      	movs	r2, #1
 800a246:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800a24a:	68f8      	ldr	r0, [r7, #12]
 800a24c:	f7ff ffa6 	bl	800a19c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800a250:	bf00      	nop
 800a252:	3710      	adds	r7, #16
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a264:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2200      	movs	r2, #0
 800a26a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2200      	movs	r2, #0
 800a272:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2201      	movs	r2, #1
 800a27a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a27e:	68f8      	ldr	r0, [r7, #12]
 800a280:	f7ff ff8c 	bl	800a19c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a284:	bf00      	nop
 800a286:	3710      	adds	r7, #16
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b085      	sub	sp, #20
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	695b      	ldr	r3, [r3, #20]
 800a29a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	699a      	ldr	r2, [r3, #24]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f042 0208 	orr.w	r2, r2, #8
 800a2aa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	699a      	ldr	r2, [r3, #24]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f042 0210 	orr.w	r2, r2, #16
 800a2ba:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f022 0201 	bic.w	r2, r2, #1
 800a2ca:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	6919      	ldr	r1, [r3, #16]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	4b3c      	ldr	r3, [pc, #240]	; (800a3c8 <SPI_CloseTransfer+0x13c>)
 800a2d8:	400b      	ands	r3, r1
 800a2da:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	689a      	ldr	r2, [r3, #8]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a2ea:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	2b04      	cmp	r3, #4
 800a2f6:	d014      	beq.n	800a322 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f003 0320 	and.w	r3, r3, #32
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d00f      	beq.n	800a322 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a308:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	699a      	ldr	r2, [r3, #24]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f042 0220 	orr.w	r2, r2, #32
 800a320:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	2b03      	cmp	r3, #3
 800a32c:	d014      	beq.n	800a358 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a334:	2b00      	cmp	r3, #0
 800a336:	d00f      	beq.n	800a358 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a33e:	f043 0204 	orr.w	r2, r3, #4
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	699a      	ldr	r2, [r3, #24]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a356:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d00f      	beq.n	800a382 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a368:	f043 0201 	orr.w	r2, r3, #1
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	699a      	ldr	r2, [r3, #24]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a380:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d00f      	beq.n	800a3ac <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a392:	f043 0208 	orr.w	r2, r3, #8
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	699a      	ldr	r2, [r3, #24]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3aa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800a3bc:	bf00      	nop
 800a3be:	3714      	adds	r7, #20
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr
 800a3c8:	fffffc90 	.word	0xfffffc90

0800a3cc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	60b9      	str	r1, [r7, #8]
 800a3d6:	603b      	str	r3, [r7, #0]
 800a3d8:	4613      	mov	r3, r2
 800a3da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a3dc:	e010      	b.n	800a400 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a3de:	f7f9 f919 	bl	8003614 <HAL_GetTick>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	1ad3      	subs	r3, r2, r3
 800a3e8:	69ba      	ldr	r2, [r7, #24]
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d803      	bhi.n	800a3f6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a3ee:	69bb      	ldr	r3, [r7, #24]
 800a3f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3f4:	d102      	bne.n	800a3fc <SPI_WaitOnFlagUntilTimeout+0x30>
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d101      	bne.n	800a400 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a3fc:	2303      	movs	r3, #3
 800a3fe:	e00f      	b.n	800a420 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	695a      	ldr	r2, [r3, #20]
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	4013      	ands	r3, r2
 800a40a:	68ba      	ldr	r2, [r7, #8]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	bf0c      	ite	eq
 800a410:	2301      	moveq	r3, #1
 800a412:	2300      	movne	r3, #0
 800a414:	b2db      	uxtb	r3, r3
 800a416:	461a      	mov	r2, r3
 800a418:	79fb      	ldrb	r3, [r7, #7]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d0df      	beq.n	800a3de <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a41e:	2300      	movs	r3, #0
}
 800a420:	4618      	mov	r0, r3
 800a422:	3710      	adds	r7, #16
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a434:	095b      	lsrs	r3, r3, #5
 800a436:	3301      	adds	r3, #1
 800a438:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	68db      	ldr	r3, [r3, #12]
 800a43e:	3301      	adds	r3, #1
 800a440:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	3307      	adds	r3, #7
 800a446:	08db      	lsrs	r3, r3, #3
 800a448:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	68fa      	ldr	r2, [r7, #12]
 800a44e:	fb02 f303 	mul.w	r3, r2, r3
}
 800a452:	4618      	mov	r0, r3
 800a454:	3714      	adds	r7, #20
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr

0800a45e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a45e:	b580      	push	{r7, lr}
 800a460:	b082      	sub	sp, #8
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d101      	bne.n	800a470 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a46c:	2301      	movs	r3, #1
 800a46e:	e049      	b.n	800a504 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a476:	b2db      	uxtb	r3, r3
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d106      	bne.n	800a48a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2200      	movs	r2, #0
 800a480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f7f8 fe2d 	bl	80030e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2202      	movs	r2, #2
 800a48e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	3304      	adds	r3, #4
 800a49a:	4619      	mov	r1, r3
 800a49c:	4610      	mov	r0, r2
 800a49e:	f000 fb15 	bl	800aacc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2201      	movs	r2, #1
 800a4be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2201      	movs	r2, #1
 800a4de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	3708      	adds	r7, #8
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	6a1a      	ldr	r2, [r3, #32]
 800a51a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a51e:	4013      	ands	r3, r2
 800a520:	2b00      	cmp	r3, #0
 800a522:	d10f      	bne.n	800a544 <HAL_TIM_Base_Stop+0x38>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	6a1a      	ldr	r2, [r3, #32]
 800a52a:	f240 4344 	movw	r3, #1092	; 0x444
 800a52e:	4013      	ands	r3, r2
 800a530:	2b00      	cmp	r3, #0
 800a532:	d107      	bne.n	800a544 <HAL_TIM_Base_Stop+0x38>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f022 0201 	bic.w	r2, r2, #1
 800a542:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2201      	movs	r2, #1
 800a548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a54c:	2300      	movs	r3, #0
}
 800a54e:	4618      	mov	r0, r3
 800a550:	370c      	adds	r7, #12
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr
	...

0800a55c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b085      	sub	sp, #20
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a56a:	b2db      	uxtb	r3, r3
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d001      	beq.n	800a574 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a570:	2301      	movs	r3, #1
 800a572:	e054      	b.n	800a61e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2202      	movs	r2, #2
 800a578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	68da      	ldr	r2, [r3, #12]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f042 0201 	orr.w	r2, r2, #1
 800a58a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a26      	ldr	r2, [pc, #152]	; (800a62c <HAL_TIM_Base_Start_IT+0xd0>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d022      	beq.n	800a5dc <HAL_TIM_Base_Start_IT+0x80>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a59e:	d01d      	beq.n	800a5dc <HAL_TIM_Base_Start_IT+0x80>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a22      	ldr	r2, [pc, #136]	; (800a630 <HAL_TIM_Base_Start_IT+0xd4>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d018      	beq.n	800a5dc <HAL_TIM_Base_Start_IT+0x80>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4a21      	ldr	r2, [pc, #132]	; (800a634 <HAL_TIM_Base_Start_IT+0xd8>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d013      	beq.n	800a5dc <HAL_TIM_Base_Start_IT+0x80>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a1f      	ldr	r2, [pc, #124]	; (800a638 <HAL_TIM_Base_Start_IT+0xdc>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d00e      	beq.n	800a5dc <HAL_TIM_Base_Start_IT+0x80>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a1e      	ldr	r2, [pc, #120]	; (800a63c <HAL_TIM_Base_Start_IT+0xe0>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d009      	beq.n	800a5dc <HAL_TIM_Base_Start_IT+0x80>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a1c      	ldr	r2, [pc, #112]	; (800a640 <HAL_TIM_Base_Start_IT+0xe4>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d004      	beq.n	800a5dc <HAL_TIM_Base_Start_IT+0x80>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a1b      	ldr	r2, [pc, #108]	; (800a644 <HAL_TIM_Base_Start_IT+0xe8>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d115      	bne.n	800a608 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	689a      	ldr	r2, [r3, #8]
 800a5e2:	4b19      	ldr	r3, [pc, #100]	; (800a648 <HAL_TIM_Base_Start_IT+0xec>)
 800a5e4:	4013      	ands	r3, r2
 800a5e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2b06      	cmp	r3, #6
 800a5ec:	d015      	beq.n	800a61a <HAL_TIM_Base_Start_IT+0xbe>
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5f4:	d011      	beq.n	800a61a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f042 0201 	orr.w	r2, r2, #1
 800a604:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a606:	e008      	b.n	800a61a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f042 0201 	orr.w	r2, r2, #1
 800a616:	601a      	str	r2, [r3, #0]
 800a618:	e000      	b.n	800a61c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a61a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3714      	adds	r7, #20
 800a622:	46bd      	mov	sp, r7
 800a624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a628:	4770      	bx	lr
 800a62a:	bf00      	nop
 800a62c:	40010000 	.word	0x40010000
 800a630:	40000400 	.word	0x40000400
 800a634:	40000800 	.word	0x40000800
 800a638:	40000c00 	.word	0x40000c00
 800a63c:	40010400 	.word	0x40010400
 800a640:	40001800 	.word	0x40001800
 800a644:	40014000 	.word	0x40014000
 800a648:	00010007 	.word	0x00010007

0800a64c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	691b      	ldr	r3, [r3, #16]
 800a65a:	f003 0302 	and.w	r3, r3, #2
 800a65e:	2b02      	cmp	r3, #2
 800a660:	d122      	bne.n	800a6a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	f003 0302 	and.w	r3, r3, #2
 800a66c:	2b02      	cmp	r3, #2
 800a66e:	d11b      	bne.n	800a6a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f06f 0202 	mvn.w	r2, #2
 800a678:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2201      	movs	r2, #1
 800a67e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	699b      	ldr	r3, [r3, #24]
 800a686:	f003 0303 	and.w	r3, r3, #3
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d003      	beq.n	800a696 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 f9fe 	bl	800aa90 <HAL_TIM_IC_CaptureCallback>
 800a694:	e005      	b.n	800a6a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 f9f0 	bl	800aa7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 fa01 	bl	800aaa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	f003 0304 	and.w	r3, r3, #4
 800a6b2:	2b04      	cmp	r3, #4
 800a6b4:	d122      	bne.n	800a6fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	68db      	ldr	r3, [r3, #12]
 800a6bc:	f003 0304 	and.w	r3, r3, #4
 800a6c0:	2b04      	cmp	r3, #4
 800a6c2:	d11b      	bne.n	800a6fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f06f 0204 	mvn.w	r2, #4
 800a6cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2202      	movs	r2, #2
 800a6d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	699b      	ldr	r3, [r3, #24]
 800a6da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d003      	beq.n	800a6ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 f9d4 	bl	800aa90 <HAL_TIM_IC_CaptureCallback>
 800a6e8:	e005      	b.n	800a6f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 f9c6 	bl	800aa7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 f9d7 	bl	800aaa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	691b      	ldr	r3, [r3, #16]
 800a702:	f003 0308 	and.w	r3, r3, #8
 800a706:	2b08      	cmp	r3, #8
 800a708:	d122      	bne.n	800a750 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	68db      	ldr	r3, [r3, #12]
 800a710:	f003 0308 	and.w	r3, r3, #8
 800a714:	2b08      	cmp	r3, #8
 800a716:	d11b      	bne.n	800a750 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f06f 0208 	mvn.w	r2, #8
 800a720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2204      	movs	r2, #4
 800a726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	69db      	ldr	r3, [r3, #28]
 800a72e:	f003 0303 	and.w	r3, r3, #3
 800a732:	2b00      	cmp	r3, #0
 800a734:	d003      	beq.n	800a73e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 f9aa 	bl	800aa90 <HAL_TIM_IC_CaptureCallback>
 800a73c:	e005      	b.n	800a74a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 f99c 	bl	800aa7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f000 f9ad 	bl	800aaa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2200      	movs	r2, #0
 800a74e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	691b      	ldr	r3, [r3, #16]
 800a756:	f003 0310 	and.w	r3, r3, #16
 800a75a:	2b10      	cmp	r3, #16
 800a75c:	d122      	bne.n	800a7a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	f003 0310 	and.w	r3, r3, #16
 800a768:	2b10      	cmp	r3, #16
 800a76a:	d11b      	bne.n	800a7a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f06f 0210 	mvn.w	r2, #16
 800a774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2208      	movs	r2, #8
 800a77a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	69db      	ldr	r3, [r3, #28]
 800a782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a786:	2b00      	cmp	r3, #0
 800a788:	d003      	beq.n	800a792 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 f980 	bl	800aa90 <HAL_TIM_IC_CaptureCallback>
 800a790:	e005      	b.n	800a79e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 f972 	bl	800aa7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 f983 	bl	800aaa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	691b      	ldr	r3, [r3, #16]
 800a7aa:	f003 0301 	and.w	r3, r3, #1
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d10e      	bne.n	800a7d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	f003 0301 	and.w	r3, r3, #1
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d107      	bne.n	800a7d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f06f 0201 	mvn.w	r2, #1
 800a7c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f7f6 fbe6 	bl	8000f9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	691b      	ldr	r3, [r3, #16]
 800a7d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7da:	2b80      	cmp	r3, #128	; 0x80
 800a7dc:	d10e      	bne.n	800a7fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7e8:	2b80      	cmp	r3, #128	; 0x80
 800a7ea:	d107      	bne.n	800a7fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a7f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 fb38 	bl	800ae6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	691b      	ldr	r3, [r3, #16]
 800a802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a80a:	d10e      	bne.n	800a82a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	68db      	ldr	r3, [r3, #12]
 800a812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a816:	2b80      	cmp	r3, #128	; 0x80
 800a818:	d107      	bne.n	800a82a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 fb2b 	bl	800ae80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	691b      	ldr	r3, [r3, #16]
 800a830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a834:	2b40      	cmp	r3, #64	; 0x40
 800a836:	d10e      	bne.n	800a856 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	68db      	ldr	r3, [r3, #12]
 800a83e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a842:	2b40      	cmp	r3, #64	; 0x40
 800a844:	d107      	bne.n	800a856 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a84e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f000 f931 	bl	800aab8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	691b      	ldr	r3, [r3, #16]
 800a85c:	f003 0320 	and.w	r3, r3, #32
 800a860:	2b20      	cmp	r3, #32
 800a862:	d10e      	bne.n	800a882 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	f003 0320 	and.w	r3, r3, #32
 800a86e:	2b20      	cmp	r3, #32
 800a870:	d107      	bne.n	800a882 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f06f 0220 	mvn.w	r2, #32
 800a87a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f000 faeb 	bl	800ae58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a882:	bf00      	nop
 800a884:	3708      	adds	r7, #8
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
	...

0800a88c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a896:	2300      	movs	r3, #0
 800a898:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d101      	bne.n	800a8a8 <HAL_TIM_ConfigClockSource+0x1c>
 800a8a4:	2302      	movs	r3, #2
 800a8a6:	e0dc      	b.n	800aa62 <HAL_TIM_ConfigClockSource+0x1d6>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2202      	movs	r2, #2
 800a8b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a8c0:	68ba      	ldr	r2, [r7, #8]
 800a8c2:	4b6a      	ldr	r3, [pc, #424]	; (800aa6c <HAL_TIM_ConfigClockSource+0x1e0>)
 800a8c4:	4013      	ands	r3, r2
 800a8c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a8ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	68ba      	ldr	r2, [r7, #8]
 800a8d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a64      	ldr	r2, [pc, #400]	; (800aa70 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	f000 80a9 	beq.w	800aa36 <HAL_TIM_ConfigClockSource+0x1aa>
 800a8e4:	4a62      	ldr	r2, [pc, #392]	; (800aa70 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	f200 80ae 	bhi.w	800aa48 <HAL_TIM_ConfigClockSource+0x1bc>
 800a8ec:	4a61      	ldr	r2, [pc, #388]	; (800aa74 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	f000 80a1 	beq.w	800aa36 <HAL_TIM_ConfigClockSource+0x1aa>
 800a8f4:	4a5f      	ldr	r2, [pc, #380]	; (800aa74 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	f200 80a6 	bhi.w	800aa48 <HAL_TIM_ConfigClockSource+0x1bc>
 800a8fc:	4a5e      	ldr	r2, [pc, #376]	; (800aa78 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	f000 8099 	beq.w	800aa36 <HAL_TIM_ConfigClockSource+0x1aa>
 800a904:	4a5c      	ldr	r2, [pc, #368]	; (800aa78 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a906:	4293      	cmp	r3, r2
 800a908:	f200 809e 	bhi.w	800aa48 <HAL_TIM_ConfigClockSource+0x1bc>
 800a90c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a910:	f000 8091 	beq.w	800aa36 <HAL_TIM_ConfigClockSource+0x1aa>
 800a914:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a918:	f200 8096 	bhi.w	800aa48 <HAL_TIM_ConfigClockSource+0x1bc>
 800a91c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a920:	f000 8089 	beq.w	800aa36 <HAL_TIM_ConfigClockSource+0x1aa>
 800a924:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a928:	f200 808e 	bhi.w	800aa48 <HAL_TIM_ConfigClockSource+0x1bc>
 800a92c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a930:	d03e      	beq.n	800a9b0 <HAL_TIM_ConfigClockSource+0x124>
 800a932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a936:	f200 8087 	bhi.w	800aa48 <HAL_TIM_ConfigClockSource+0x1bc>
 800a93a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a93e:	f000 8086 	beq.w	800aa4e <HAL_TIM_ConfigClockSource+0x1c2>
 800a942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a946:	d87f      	bhi.n	800aa48 <HAL_TIM_ConfigClockSource+0x1bc>
 800a948:	2b70      	cmp	r3, #112	; 0x70
 800a94a:	d01a      	beq.n	800a982 <HAL_TIM_ConfigClockSource+0xf6>
 800a94c:	2b70      	cmp	r3, #112	; 0x70
 800a94e:	d87b      	bhi.n	800aa48 <HAL_TIM_ConfigClockSource+0x1bc>
 800a950:	2b60      	cmp	r3, #96	; 0x60
 800a952:	d050      	beq.n	800a9f6 <HAL_TIM_ConfigClockSource+0x16a>
 800a954:	2b60      	cmp	r3, #96	; 0x60
 800a956:	d877      	bhi.n	800aa48 <HAL_TIM_ConfigClockSource+0x1bc>
 800a958:	2b50      	cmp	r3, #80	; 0x50
 800a95a:	d03c      	beq.n	800a9d6 <HAL_TIM_ConfigClockSource+0x14a>
 800a95c:	2b50      	cmp	r3, #80	; 0x50
 800a95e:	d873      	bhi.n	800aa48 <HAL_TIM_ConfigClockSource+0x1bc>
 800a960:	2b40      	cmp	r3, #64	; 0x40
 800a962:	d058      	beq.n	800aa16 <HAL_TIM_ConfigClockSource+0x18a>
 800a964:	2b40      	cmp	r3, #64	; 0x40
 800a966:	d86f      	bhi.n	800aa48 <HAL_TIM_ConfigClockSource+0x1bc>
 800a968:	2b30      	cmp	r3, #48	; 0x30
 800a96a:	d064      	beq.n	800aa36 <HAL_TIM_ConfigClockSource+0x1aa>
 800a96c:	2b30      	cmp	r3, #48	; 0x30
 800a96e:	d86b      	bhi.n	800aa48 <HAL_TIM_ConfigClockSource+0x1bc>
 800a970:	2b20      	cmp	r3, #32
 800a972:	d060      	beq.n	800aa36 <HAL_TIM_ConfigClockSource+0x1aa>
 800a974:	2b20      	cmp	r3, #32
 800a976:	d867      	bhi.n	800aa48 <HAL_TIM_ConfigClockSource+0x1bc>
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d05c      	beq.n	800aa36 <HAL_TIM_ConfigClockSource+0x1aa>
 800a97c:	2b10      	cmp	r3, #16
 800a97e:	d05a      	beq.n	800aa36 <HAL_TIM_ConfigClockSource+0x1aa>
 800a980:	e062      	b.n	800aa48 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6818      	ldr	r0, [r3, #0]
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	6899      	ldr	r1, [r3, #8]
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	685a      	ldr	r2, [r3, #4]
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	68db      	ldr	r3, [r3, #12]
 800a992:	f000 f9b3 	bl	800acfc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a9a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	68ba      	ldr	r2, [r7, #8]
 800a9ac:	609a      	str	r2, [r3, #8]
      break;
 800a9ae:	e04f      	b.n	800aa50 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6818      	ldr	r0, [r3, #0]
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	6899      	ldr	r1, [r3, #8]
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	685a      	ldr	r2, [r3, #4]
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	68db      	ldr	r3, [r3, #12]
 800a9c0:	f000 f99c 	bl	800acfc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	689a      	ldr	r2, [r3, #8]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a9d2:	609a      	str	r2, [r3, #8]
      break;
 800a9d4:	e03c      	b.n	800aa50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6818      	ldr	r0, [r3, #0]
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	6859      	ldr	r1, [r3, #4]
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	68db      	ldr	r3, [r3, #12]
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	f000 f90c 	bl	800ac00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2150      	movs	r1, #80	; 0x50
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f000 f966 	bl	800acc0 <TIM_ITRx_SetConfig>
      break;
 800a9f4:	e02c      	b.n	800aa50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6818      	ldr	r0, [r3, #0]
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	6859      	ldr	r1, [r3, #4]
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	68db      	ldr	r3, [r3, #12]
 800aa02:	461a      	mov	r2, r3
 800aa04:	f000 f92b 	bl	800ac5e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	2160      	movs	r1, #96	; 0x60
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f000 f956 	bl	800acc0 <TIM_ITRx_SetConfig>
      break;
 800aa14:	e01c      	b.n	800aa50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6818      	ldr	r0, [r3, #0]
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	6859      	ldr	r1, [r3, #4]
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	461a      	mov	r2, r3
 800aa24:	f000 f8ec 	bl	800ac00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	2140      	movs	r1, #64	; 0x40
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f000 f946 	bl	800acc0 <TIM_ITRx_SetConfig>
      break;
 800aa34:	e00c      	b.n	800aa50 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4619      	mov	r1, r3
 800aa40:	4610      	mov	r0, r2
 800aa42:	f000 f93d 	bl	800acc0 <TIM_ITRx_SetConfig>
      break;
 800aa46:	e003      	b.n	800aa50 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	73fb      	strb	r3, [r7, #15]
      break;
 800aa4c:	e000      	b.n	800aa50 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800aa4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aa60:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3710      	adds	r7, #16
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	ffceff88 	.word	0xffceff88
 800aa70:	00100040 	.word	0x00100040
 800aa74:	00100030 	.word	0x00100030
 800aa78:	00100020 	.word	0x00100020

0800aa7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa84:	bf00      	nop
 800aa86:	370c      	adds	r7, #12
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b083      	sub	sp, #12
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa98:	bf00      	nop
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr

0800aaa4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aaac:	bf00      	nop
 800aaae:	370c      	adds	r7, #12
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aac0:	bf00      	nop
 800aac2:	370c      	adds	r7, #12
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aacc:	b480      	push	{r7}
 800aace:	b085      	sub	sp, #20
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	4a40      	ldr	r2, [pc, #256]	; (800abe0 <TIM_Base_SetConfig+0x114>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d013      	beq.n	800ab0c <TIM_Base_SetConfig+0x40>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aaea:	d00f      	beq.n	800ab0c <TIM_Base_SetConfig+0x40>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	4a3d      	ldr	r2, [pc, #244]	; (800abe4 <TIM_Base_SetConfig+0x118>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d00b      	beq.n	800ab0c <TIM_Base_SetConfig+0x40>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	4a3c      	ldr	r2, [pc, #240]	; (800abe8 <TIM_Base_SetConfig+0x11c>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d007      	beq.n	800ab0c <TIM_Base_SetConfig+0x40>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	4a3b      	ldr	r2, [pc, #236]	; (800abec <TIM_Base_SetConfig+0x120>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d003      	beq.n	800ab0c <TIM_Base_SetConfig+0x40>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	4a3a      	ldr	r2, [pc, #232]	; (800abf0 <TIM_Base_SetConfig+0x124>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d108      	bne.n	800ab1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	68fa      	ldr	r2, [r7, #12]
 800ab1a:	4313      	orrs	r3, r2
 800ab1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	4a2f      	ldr	r2, [pc, #188]	; (800abe0 <TIM_Base_SetConfig+0x114>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d01f      	beq.n	800ab66 <TIM_Base_SetConfig+0x9a>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab2c:	d01b      	beq.n	800ab66 <TIM_Base_SetConfig+0x9a>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	4a2c      	ldr	r2, [pc, #176]	; (800abe4 <TIM_Base_SetConfig+0x118>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d017      	beq.n	800ab66 <TIM_Base_SetConfig+0x9a>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	4a2b      	ldr	r2, [pc, #172]	; (800abe8 <TIM_Base_SetConfig+0x11c>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d013      	beq.n	800ab66 <TIM_Base_SetConfig+0x9a>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	4a2a      	ldr	r2, [pc, #168]	; (800abec <TIM_Base_SetConfig+0x120>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d00f      	beq.n	800ab66 <TIM_Base_SetConfig+0x9a>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	4a29      	ldr	r2, [pc, #164]	; (800abf0 <TIM_Base_SetConfig+0x124>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d00b      	beq.n	800ab66 <TIM_Base_SetConfig+0x9a>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	4a28      	ldr	r2, [pc, #160]	; (800abf4 <TIM_Base_SetConfig+0x128>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d007      	beq.n	800ab66 <TIM_Base_SetConfig+0x9a>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	4a27      	ldr	r2, [pc, #156]	; (800abf8 <TIM_Base_SetConfig+0x12c>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d003      	beq.n	800ab66 <TIM_Base_SetConfig+0x9a>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	4a26      	ldr	r2, [pc, #152]	; (800abfc <TIM_Base_SetConfig+0x130>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d108      	bne.n	800ab78 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	68db      	ldr	r3, [r3, #12]
 800ab72:	68fa      	ldr	r2, [r7, #12]
 800ab74:	4313      	orrs	r3, r2
 800ab76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	695b      	ldr	r3, [r3, #20]
 800ab82:	4313      	orrs	r3, r2
 800ab84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	689a      	ldr	r2, [r3, #8]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	681a      	ldr	r2, [r3, #0]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	4a10      	ldr	r2, [pc, #64]	; (800abe0 <TIM_Base_SetConfig+0x114>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d00f      	beq.n	800abc4 <TIM_Base_SetConfig+0xf8>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	4a12      	ldr	r2, [pc, #72]	; (800abf0 <TIM_Base_SetConfig+0x124>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d00b      	beq.n	800abc4 <TIM_Base_SetConfig+0xf8>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	4a11      	ldr	r2, [pc, #68]	; (800abf4 <TIM_Base_SetConfig+0x128>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d007      	beq.n	800abc4 <TIM_Base_SetConfig+0xf8>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	4a10      	ldr	r2, [pc, #64]	; (800abf8 <TIM_Base_SetConfig+0x12c>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d003      	beq.n	800abc4 <TIM_Base_SetConfig+0xf8>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	4a0f      	ldr	r2, [pc, #60]	; (800abfc <TIM_Base_SetConfig+0x130>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d103      	bne.n	800abcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	691a      	ldr	r2, [r3, #16]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2201      	movs	r2, #1
 800abd0:	615a      	str	r2, [r3, #20]
}
 800abd2:	bf00      	nop
 800abd4:	3714      	adds	r7, #20
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr
 800abde:	bf00      	nop
 800abe0:	40010000 	.word	0x40010000
 800abe4:	40000400 	.word	0x40000400
 800abe8:	40000800 	.word	0x40000800
 800abec:	40000c00 	.word	0x40000c00
 800abf0:	40010400 	.word	0x40010400
 800abf4:	40014000 	.word	0x40014000
 800abf8:	40014400 	.word	0x40014400
 800abfc:	40014800 	.word	0x40014800

0800ac00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b087      	sub	sp, #28
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	6a1b      	ldr	r3, [r3, #32]
 800ac10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	6a1b      	ldr	r3, [r3, #32]
 800ac16:	f023 0201 	bic.w	r2, r3, #1
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	699b      	ldr	r3, [r3, #24]
 800ac22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ac2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	011b      	lsls	r3, r3, #4
 800ac30:	693a      	ldr	r2, [r7, #16]
 800ac32:	4313      	orrs	r3, r2
 800ac34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	f023 030a 	bic.w	r3, r3, #10
 800ac3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ac3e:	697a      	ldr	r2, [r7, #20]
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	4313      	orrs	r3, r2
 800ac44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	693a      	ldr	r2, [r7, #16]
 800ac4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	697a      	ldr	r2, [r7, #20]
 800ac50:	621a      	str	r2, [r3, #32]
}
 800ac52:	bf00      	nop
 800ac54:	371c      	adds	r7, #28
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr

0800ac5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac5e:	b480      	push	{r7}
 800ac60:	b087      	sub	sp, #28
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	60f8      	str	r0, [r7, #12]
 800ac66:	60b9      	str	r1, [r7, #8]
 800ac68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	6a1b      	ldr	r3, [r3, #32]
 800ac6e:	f023 0210 	bic.w	r2, r3, #16
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	699b      	ldr	r3, [r3, #24]
 800ac7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	6a1b      	ldr	r3, [r3, #32]
 800ac80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ac88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	031b      	lsls	r3, r3, #12
 800ac8e:	697a      	ldr	r2, [r7, #20]
 800ac90:	4313      	orrs	r3, r2
 800ac92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ac9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	011b      	lsls	r3, r3, #4
 800aca0:	693a      	ldr	r2, [r7, #16]
 800aca2:	4313      	orrs	r3, r2
 800aca4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	697a      	ldr	r2, [r7, #20]
 800acaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	693a      	ldr	r2, [r7, #16]
 800acb0:	621a      	str	r2, [r3, #32]
}
 800acb2:	bf00      	nop
 800acb4:	371c      	adds	r7, #28
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr
	...

0800acc0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b085      	sub	sp, #20
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	4b09      	ldr	r3, [pc, #36]	; (800acf8 <TIM_ITRx_SetConfig+0x38>)
 800acd4:	4013      	ands	r3, r2
 800acd6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800acd8:	683a      	ldr	r2, [r7, #0]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	4313      	orrs	r3, r2
 800acde:	f043 0307 	orr.w	r3, r3, #7
 800ace2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	68fa      	ldr	r2, [r7, #12]
 800ace8:	609a      	str	r2, [r3, #8]
}
 800acea:	bf00      	nop
 800acec:	3714      	adds	r7, #20
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr
 800acf6:	bf00      	nop
 800acf8:	ffcfff8f 	.word	0xffcfff8f

0800acfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b087      	sub	sp, #28
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	60f8      	str	r0, [r7, #12]
 800ad04:	60b9      	str	r1, [r7, #8]
 800ad06:	607a      	str	r2, [r7, #4]
 800ad08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	689b      	ldr	r3, [r3, #8]
 800ad0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ad16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	021a      	lsls	r2, r3, #8
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	431a      	orrs	r2, r3
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	4313      	orrs	r3, r2
 800ad24:	697a      	ldr	r2, [r7, #20]
 800ad26:	4313      	orrs	r3, r2
 800ad28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	697a      	ldr	r2, [r7, #20]
 800ad2e:	609a      	str	r2, [r3, #8]
}
 800ad30:	bf00      	nop
 800ad32:	371c      	adds	r7, #28
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr

0800ad3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d101      	bne.n	800ad54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ad50:	2302      	movs	r3, #2
 800ad52:	e06d      	b.n	800ae30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2201      	movs	r2, #1
 800ad58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2202      	movs	r2, #2
 800ad60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	689b      	ldr	r3, [r3, #8]
 800ad72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a30      	ldr	r2, [pc, #192]	; (800ae3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d004      	beq.n	800ad88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a2f      	ldr	r2, [pc, #188]	; (800ae40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d108      	bne.n	800ad9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ad8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	68fa      	ldr	r2, [r7, #12]
 800ad96:	4313      	orrs	r3, r2
 800ad98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ada0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	68fa      	ldr	r2, [r7, #12]
 800ada8:	4313      	orrs	r3, r2
 800adaa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	68fa      	ldr	r2, [r7, #12]
 800adb2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a20      	ldr	r2, [pc, #128]	; (800ae3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d022      	beq.n	800ae04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adc6:	d01d      	beq.n	800ae04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a1d      	ldr	r2, [pc, #116]	; (800ae44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d018      	beq.n	800ae04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a1c      	ldr	r2, [pc, #112]	; (800ae48 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d013      	beq.n	800ae04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a1a      	ldr	r2, [pc, #104]	; (800ae4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d00e      	beq.n	800ae04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a15      	ldr	r2, [pc, #84]	; (800ae40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d009      	beq.n	800ae04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a16      	ldr	r2, [pc, #88]	; (800ae50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d004      	beq.n	800ae04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4a15      	ldr	r2, [pc, #84]	; (800ae54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d10c      	bne.n	800ae1e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	68ba      	ldr	r2, [r7, #8]
 800ae12:	4313      	orrs	r3, r2
 800ae14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	68ba      	ldr	r2, [r7, #8]
 800ae1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2201      	movs	r2, #1
 800ae22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ae2e:	2300      	movs	r3, #0
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3714      	adds	r7, #20
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr
 800ae3c:	40010000 	.word	0x40010000
 800ae40:	40010400 	.word	0x40010400
 800ae44:	40000400 	.word	0x40000400
 800ae48:	40000800 	.word	0x40000800
 800ae4c:	40000c00 	.word	0x40000c00
 800ae50:	40001800 	.word	0x40001800
 800ae54:	40014000 	.word	0x40014000

0800ae58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b083      	sub	sp, #12
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ae60:	bf00      	nop
 800ae62:	370c      	adds	r7, #12
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b083      	sub	sp, #12
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ae74:	bf00      	nop
 800ae76:	370c      	adds	r7, #12
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b083      	sub	sp, #12
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ae88:	bf00      	nop
 800ae8a:	370c      	adds	r7, #12
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr

0800ae94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b082      	sub	sp, #8
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d101      	bne.n	800aea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aea2:	2301      	movs	r3, #1
 800aea4:	e042      	b.n	800af2c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d106      	bne.n	800aebe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f7f8 f979 	bl	80031b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2224      	movs	r2, #36	; 0x24
 800aec2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f022 0201 	bic.w	r2, r2, #1
 800aed4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 f82c 	bl	800af34 <UART_SetConfig>
 800aedc:	4603      	mov	r3, r0
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d101      	bne.n	800aee6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800aee2:	2301      	movs	r3, #1
 800aee4:	e022      	b.n	800af2c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d002      	beq.n	800aef4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 fd80 	bl	800b9f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	685a      	ldr	r2, [r3, #4]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800af02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	689a      	ldr	r2, [r3, #8]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800af12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f042 0201 	orr.w	r2, r2, #1
 800af22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 fe07 	bl	800bb38 <UART_CheckIdleState>
 800af2a:	4603      	mov	r3, r0
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3708      	adds	r7, #8
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af34:	b5b0      	push	{r4, r5, r7, lr}
 800af36:	b08e      	sub	sp, #56	; 0x38
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800af3c:	2300      	movs	r3, #0
 800af3e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	689a      	ldr	r2, [r3, #8]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	691b      	ldr	r3, [r3, #16]
 800af4a:	431a      	orrs	r2, r3
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	695b      	ldr	r3, [r3, #20]
 800af50:	431a      	orrs	r2, r3
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	69db      	ldr	r3, [r3, #28]
 800af56:	4313      	orrs	r3, r2
 800af58:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	681a      	ldr	r2, [r3, #0]
 800af60:	4bbf      	ldr	r3, [pc, #764]	; (800b260 <UART_SetConfig+0x32c>)
 800af62:	4013      	ands	r3, r2
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	6812      	ldr	r2, [r2, #0]
 800af68:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800af6a:	430b      	orrs	r3, r1
 800af6c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	68da      	ldr	r2, [r3, #12]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	430a      	orrs	r2, r1
 800af82:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	699b      	ldr	r3, [r3, #24]
 800af88:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4ab5      	ldr	r2, [pc, #724]	; (800b264 <UART_SetConfig+0x330>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d004      	beq.n	800af9e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6a1b      	ldr	r3, [r3, #32]
 800af98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af9a:	4313      	orrs	r3, r2
 800af9c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	689a      	ldr	r2, [r3, #8]
 800afa4:	4bb0      	ldr	r3, [pc, #704]	; (800b268 <UART_SetConfig+0x334>)
 800afa6:	4013      	ands	r3, r2
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	6812      	ldr	r2, [r2, #0]
 800afac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800afae:	430b      	orrs	r3, r1
 800afb0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afb8:	f023 010f 	bic.w	r1, r3, #15
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	430a      	orrs	r2, r1
 800afc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4aa7      	ldr	r2, [pc, #668]	; (800b26c <UART_SetConfig+0x338>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d176      	bne.n	800b0c0 <UART_SetConfig+0x18c>
 800afd2:	4ba7      	ldr	r3, [pc, #668]	; (800b270 <UART_SetConfig+0x33c>)
 800afd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800afda:	2b28      	cmp	r3, #40	; 0x28
 800afdc:	d86c      	bhi.n	800b0b8 <UART_SetConfig+0x184>
 800afde:	a201      	add	r2, pc, #4	; (adr r2, 800afe4 <UART_SetConfig+0xb0>)
 800afe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe4:	0800b089 	.word	0x0800b089
 800afe8:	0800b0b9 	.word	0x0800b0b9
 800afec:	0800b0b9 	.word	0x0800b0b9
 800aff0:	0800b0b9 	.word	0x0800b0b9
 800aff4:	0800b0b9 	.word	0x0800b0b9
 800aff8:	0800b0b9 	.word	0x0800b0b9
 800affc:	0800b0b9 	.word	0x0800b0b9
 800b000:	0800b0b9 	.word	0x0800b0b9
 800b004:	0800b091 	.word	0x0800b091
 800b008:	0800b0b9 	.word	0x0800b0b9
 800b00c:	0800b0b9 	.word	0x0800b0b9
 800b010:	0800b0b9 	.word	0x0800b0b9
 800b014:	0800b0b9 	.word	0x0800b0b9
 800b018:	0800b0b9 	.word	0x0800b0b9
 800b01c:	0800b0b9 	.word	0x0800b0b9
 800b020:	0800b0b9 	.word	0x0800b0b9
 800b024:	0800b099 	.word	0x0800b099
 800b028:	0800b0b9 	.word	0x0800b0b9
 800b02c:	0800b0b9 	.word	0x0800b0b9
 800b030:	0800b0b9 	.word	0x0800b0b9
 800b034:	0800b0b9 	.word	0x0800b0b9
 800b038:	0800b0b9 	.word	0x0800b0b9
 800b03c:	0800b0b9 	.word	0x0800b0b9
 800b040:	0800b0b9 	.word	0x0800b0b9
 800b044:	0800b0a1 	.word	0x0800b0a1
 800b048:	0800b0b9 	.word	0x0800b0b9
 800b04c:	0800b0b9 	.word	0x0800b0b9
 800b050:	0800b0b9 	.word	0x0800b0b9
 800b054:	0800b0b9 	.word	0x0800b0b9
 800b058:	0800b0b9 	.word	0x0800b0b9
 800b05c:	0800b0b9 	.word	0x0800b0b9
 800b060:	0800b0b9 	.word	0x0800b0b9
 800b064:	0800b0a9 	.word	0x0800b0a9
 800b068:	0800b0b9 	.word	0x0800b0b9
 800b06c:	0800b0b9 	.word	0x0800b0b9
 800b070:	0800b0b9 	.word	0x0800b0b9
 800b074:	0800b0b9 	.word	0x0800b0b9
 800b078:	0800b0b9 	.word	0x0800b0b9
 800b07c:	0800b0b9 	.word	0x0800b0b9
 800b080:	0800b0b9 	.word	0x0800b0b9
 800b084:	0800b0b1 	.word	0x0800b0b1
 800b088:	2301      	movs	r3, #1
 800b08a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b08e:	e222      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b090:	2304      	movs	r3, #4
 800b092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b096:	e21e      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b098:	2308      	movs	r3, #8
 800b09a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b09e:	e21a      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b0a0:	2310      	movs	r3, #16
 800b0a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0a6:	e216      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b0a8:	2320      	movs	r3, #32
 800b0aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0ae:	e212      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b0b0:	2340      	movs	r3, #64	; 0x40
 800b0b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0b6:	e20e      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b0b8:	2380      	movs	r3, #128	; 0x80
 800b0ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0be:	e20a      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4a6b      	ldr	r2, [pc, #428]	; (800b274 <UART_SetConfig+0x340>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d130      	bne.n	800b12c <UART_SetConfig+0x1f8>
 800b0ca:	4b69      	ldr	r3, [pc, #420]	; (800b270 <UART_SetConfig+0x33c>)
 800b0cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0ce:	f003 0307 	and.w	r3, r3, #7
 800b0d2:	2b05      	cmp	r3, #5
 800b0d4:	d826      	bhi.n	800b124 <UART_SetConfig+0x1f0>
 800b0d6:	a201      	add	r2, pc, #4	; (adr r2, 800b0dc <UART_SetConfig+0x1a8>)
 800b0d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0dc:	0800b0f5 	.word	0x0800b0f5
 800b0e0:	0800b0fd 	.word	0x0800b0fd
 800b0e4:	0800b105 	.word	0x0800b105
 800b0e8:	0800b10d 	.word	0x0800b10d
 800b0ec:	0800b115 	.word	0x0800b115
 800b0f0:	0800b11d 	.word	0x0800b11d
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0fa:	e1ec      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b0fc:	2304      	movs	r3, #4
 800b0fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b102:	e1e8      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b104:	2308      	movs	r3, #8
 800b106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b10a:	e1e4      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b10c:	2310      	movs	r3, #16
 800b10e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b112:	e1e0      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b114:	2320      	movs	r3, #32
 800b116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b11a:	e1dc      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b11c:	2340      	movs	r3, #64	; 0x40
 800b11e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b122:	e1d8      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b124:	2380      	movs	r3, #128	; 0x80
 800b126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b12a:	e1d4      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4a51      	ldr	r2, [pc, #324]	; (800b278 <UART_SetConfig+0x344>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d130      	bne.n	800b198 <UART_SetConfig+0x264>
 800b136:	4b4e      	ldr	r3, [pc, #312]	; (800b270 <UART_SetConfig+0x33c>)
 800b138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b13a:	f003 0307 	and.w	r3, r3, #7
 800b13e:	2b05      	cmp	r3, #5
 800b140:	d826      	bhi.n	800b190 <UART_SetConfig+0x25c>
 800b142:	a201      	add	r2, pc, #4	; (adr r2, 800b148 <UART_SetConfig+0x214>)
 800b144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b148:	0800b161 	.word	0x0800b161
 800b14c:	0800b169 	.word	0x0800b169
 800b150:	0800b171 	.word	0x0800b171
 800b154:	0800b179 	.word	0x0800b179
 800b158:	0800b181 	.word	0x0800b181
 800b15c:	0800b189 	.word	0x0800b189
 800b160:	2300      	movs	r3, #0
 800b162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b166:	e1b6      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b168:	2304      	movs	r3, #4
 800b16a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b16e:	e1b2      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b170:	2308      	movs	r3, #8
 800b172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b176:	e1ae      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b178:	2310      	movs	r3, #16
 800b17a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b17e:	e1aa      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b180:	2320      	movs	r3, #32
 800b182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b186:	e1a6      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b188:	2340      	movs	r3, #64	; 0x40
 800b18a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b18e:	e1a2      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b190:	2380      	movs	r3, #128	; 0x80
 800b192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b196:	e19e      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	4a37      	ldr	r2, [pc, #220]	; (800b27c <UART_SetConfig+0x348>)
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d130      	bne.n	800b204 <UART_SetConfig+0x2d0>
 800b1a2:	4b33      	ldr	r3, [pc, #204]	; (800b270 <UART_SetConfig+0x33c>)
 800b1a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1a6:	f003 0307 	and.w	r3, r3, #7
 800b1aa:	2b05      	cmp	r3, #5
 800b1ac:	d826      	bhi.n	800b1fc <UART_SetConfig+0x2c8>
 800b1ae:	a201      	add	r2, pc, #4	; (adr r2, 800b1b4 <UART_SetConfig+0x280>)
 800b1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1b4:	0800b1cd 	.word	0x0800b1cd
 800b1b8:	0800b1d5 	.word	0x0800b1d5
 800b1bc:	0800b1dd 	.word	0x0800b1dd
 800b1c0:	0800b1e5 	.word	0x0800b1e5
 800b1c4:	0800b1ed 	.word	0x0800b1ed
 800b1c8:	0800b1f5 	.word	0x0800b1f5
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1d2:	e180      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b1d4:	2304      	movs	r3, #4
 800b1d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1da:	e17c      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b1dc:	2308      	movs	r3, #8
 800b1de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1e2:	e178      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b1e4:	2310      	movs	r3, #16
 800b1e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1ea:	e174      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b1ec:	2320      	movs	r3, #32
 800b1ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1f2:	e170      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b1f4:	2340      	movs	r3, #64	; 0x40
 800b1f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1fa:	e16c      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b1fc:	2380      	movs	r3, #128	; 0x80
 800b1fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b202:	e168      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4a1d      	ldr	r2, [pc, #116]	; (800b280 <UART_SetConfig+0x34c>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d142      	bne.n	800b294 <UART_SetConfig+0x360>
 800b20e:	4b18      	ldr	r3, [pc, #96]	; (800b270 <UART_SetConfig+0x33c>)
 800b210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b212:	f003 0307 	and.w	r3, r3, #7
 800b216:	2b05      	cmp	r3, #5
 800b218:	d838      	bhi.n	800b28c <UART_SetConfig+0x358>
 800b21a:	a201      	add	r2, pc, #4	; (adr r2, 800b220 <UART_SetConfig+0x2ec>)
 800b21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b220:	0800b239 	.word	0x0800b239
 800b224:	0800b241 	.word	0x0800b241
 800b228:	0800b249 	.word	0x0800b249
 800b22c:	0800b251 	.word	0x0800b251
 800b230:	0800b259 	.word	0x0800b259
 800b234:	0800b285 	.word	0x0800b285
 800b238:	2300      	movs	r3, #0
 800b23a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b23e:	e14a      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b240:	2304      	movs	r3, #4
 800b242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b246:	e146      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b248:	2308      	movs	r3, #8
 800b24a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b24e:	e142      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b250:	2310      	movs	r3, #16
 800b252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b256:	e13e      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b258:	2320      	movs	r3, #32
 800b25a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b25e:	e13a      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b260:	cfff69f3 	.word	0xcfff69f3
 800b264:	58000c00 	.word	0x58000c00
 800b268:	11fff4ff 	.word	0x11fff4ff
 800b26c:	40011000 	.word	0x40011000
 800b270:	58024400 	.word	0x58024400
 800b274:	40004400 	.word	0x40004400
 800b278:	40004800 	.word	0x40004800
 800b27c:	40004c00 	.word	0x40004c00
 800b280:	40005000 	.word	0x40005000
 800b284:	2340      	movs	r3, #64	; 0x40
 800b286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b28a:	e124      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b28c:	2380      	movs	r3, #128	; 0x80
 800b28e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b292:	e120      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	4acc      	ldr	r2, [pc, #816]	; (800b5cc <UART_SetConfig+0x698>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d176      	bne.n	800b38c <UART_SetConfig+0x458>
 800b29e:	4bcc      	ldr	r3, [pc, #816]	; (800b5d0 <UART_SetConfig+0x69c>)
 800b2a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b2a6:	2b28      	cmp	r3, #40	; 0x28
 800b2a8:	d86c      	bhi.n	800b384 <UART_SetConfig+0x450>
 800b2aa:	a201      	add	r2, pc, #4	; (adr r2, 800b2b0 <UART_SetConfig+0x37c>)
 800b2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2b0:	0800b355 	.word	0x0800b355
 800b2b4:	0800b385 	.word	0x0800b385
 800b2b8:	0800b385 	.word	0x0800b385
 800b2bc:	0800b385 	.word	0x0800b385
 800b2c0:	0800b385 	.word	0x0800b385
 800b2c4:	0800b385 	.word	0x0800b385
 800b2c8:	0800b385 	.word	0x0800b385
 800b2cc:	0800b385 	.word	0x0800b385
 800b2d0:	0800b35d 	.word	0x0800b35d
 800b2d4:	0800b385 	.word	0x0800b385
 800b2d8:	0800b385 	.word	0x0800b385
 800b2dc:	0800b385 	.word	0x0800b385
 800b2e0:	0800b385 	.word	0x0800b385
 800b2e4:	0800b385 	.word	0x0800b385
 800b2e8:	0800b385 	.word	0x0800b385
 800b2ec:	0800b385 	.word	0x0800b385
 800b2f0:	0800b365 	.word	0x0800b365
 800b2f4:	0800b385 	.word	0x0800b385
 800b2f8:	0800b385 	.word	0x0800b385
 800b2fc:	0800b385 	.word	0x0800b385
 800b300:	0800b385 	.word	0x0800b385
 800b304:	0800b385 	.word	0x0800b385
 800b308:	0800b385 	.word	0x0800b385
 800b30c:	0800b385 	.word	0x0800b385
 800b310:	0800b36d 	.word	0x0800b36d
 800b314:	0800b385 	.word	0x0800b385
 800b318:	0800b385 	.word	0x0800b385
 800b31c:	0800b385 	.word	0x0800b385
 800b320:	0800b385 	.word	0x0800b385
 800b324:	0800b385 	.word	0x0800b385
 800b328:	0800b385 	.word	0x0800b385
 800b32c:	0800b385 	.word	0x0800b385
 800b330:	0800b375 	.word	0x0800b375
 800b334:	0800b385 	.word	0x0800b385
 800b338:	0800b385 	.word	0x0800b385
 800b33c:	0800b385 	.word	0x0800b385
 800b340:	0800b385 	.word	0x0800b385
 800b344:	0800b385 	.word	0x0800b385
 800b348:	0800b385 	.word	0x0800b385
 800b34c:	0800b385 	.word	0x0800b385
 800b350:	0800b37d 	.word	0x0800b37d
 800b354:	2301      	movs	r3, #1
 800b356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b35a:	e0bc      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b35c:	2304      	movs	r3, #4
 800b35e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b362:	e0b8      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b364:	2308      	movs	r3, #8
 800b366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b36a:	e0b4      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b36c:	2310      	movs	r3, #16
 800b36e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b372:	e0b0      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b374:	2320      	movs	r3, #32
 800b376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b37a:	e0ac      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b37c:	2340      	movs	r3, #64	; 0x40
 800b37e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b382:	e0a8      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b384:	2380      	movs	r3, #128	; 0x80
 800b386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b38a:	e0a4      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4a90      	ldr	r2, [pc, #576]	; (800b5d4 <UART_SetConfig+0x6a0>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d130      	bne.n	800b3f8 <UART_SetConfig+0x4c4>
 800b396:	4b8e      	ldr	r3, [pc, #568]	; (800b5d0 <UART_SetConfig+0x69c>)
 800b398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b39a:	f003 0307 	and.w	r3, r3, #7
 800b39e:	2b05      	cmp	r3, #5
 800b3a0:	d826      	bhi.n	800b3f0 <UART_SetConfig+0x4bc>
 800b3a2:	a201      	add	r2, pc, #4	; (adr r2, 800b3a8 <UART_SetConfig+0x474>)
 800b3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3a8:	0800b3c1 	.word	0x0800b3c1
 800b3ac:	0800b3c9 	.word	0x0800b3c9
 800b3b0:	0800b3d1 	.word	0x0800b3d1
 800b3b4:	0800b3d9 	.word	0x0800b3d9
 800b3b8:	0800b3e1 	.word	0x0800b3e1
 800b3bc:	0800b3e9 	.word	0x0800b3e9
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3c6:	e086      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b3c8:	2304      	movs	r3, #4
 800b3ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3ce:	e082      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b3d0:	2308      	movs	r3, #8
 800b3d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3d6:	e07e      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b3d8:	2310      	movs	r3, #16
 800b3da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3de:	e07a      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b3e0:	2320      	movs	r3, #32
 800b3e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3e6:	e076      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b3e8:	2340      	movs	r3, #64	; 0x40
 800b3ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3ee:	e072      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b3f0:	2380      	movs	r3, #128	; 0x80
 800b3f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3f6:	e06e      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	4a76      	ldr	r2, [pc, #472]	; (800b5d8 <UART_SetConfig+0x6a4>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d130      	bne.n	800b464 <UART_SetConfig+0x530>
 800b402:	4b73      	ldr	r3, [pc, #460]	; (800b5d0 <UART_SetConfig+0x69c>)
 800b404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b406:	f003 0307 	and.w	r3, r3, #7
 800b40a:	2b05      	cmp	r3, #5
 800b40c:	d826      	bhi.n	800b45c <UART_SetConfig+0x528>
 800b40e:	a201      	add	r2, pc, #4	; (adr r2, 800b414 <UART_SetConfig+0x4e0>)
 800b410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b414:	0800b42d 	.word	0x0800b42d
 800b418:	0800b435 	.word	0x0800b435
 800b41c:	0800b43d 	.word	0x0800b43d
 800b420:	0800b445 	.word	0x0800b445
 800b424:	0800b44d 	.word	0x0800b44d
 800b428:	0800b455 	.word	0x0800b455
 800b42c:	2300      	movs	r3, #0
 800b42e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b432:	e050      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b434:	2304      	movs	r3, #4
 800b436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b43a:	e04c      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b43c:	2308      	movs	r3, #8
 800b43e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b442:	e048      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b444:	2310      	movs	r3, #16
 800b446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b44a:	e044      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b44c:	2320      	movs	r3, #32
 800b44e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b452:	e040      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b454:	2340      	movs	r3, #64	; 0x40
 800b456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b45a:	e03c      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b45c:	2380      	movs	r3, #128	; 0x80
 800b45e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b462:	e038      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4a5c      	ldr	r2, [pc, #368]	; (800b5dc <UART_SetConfig+0x6a8>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d130      	bne.n	800b4d0 <UART_SetConfig+0x59c>
 800b46e:	4b58      	ldr	r3, [pc, #352]	; (800b5d0 <UART_SetConfig+0x69c>)
 800b470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b472:	f003 0307 	and.w	r3, r3, #7
 800b476:	2b05      	cmp	r3, #5
 800b478:	d826      	bhi.n	800b4c8 <UART_SetConfig+0x594>
 800b47a:	a201      	add	r2, pc, #4	; (adr r2, 800b480 <UART_SetConfig+0x54c>)
 800b47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b480:	0800b499 	.word	0x0800b499
 800b484:	0800b4a1 	.word	0x0800b4a1
 800b488:	0800b4a9 	.word	0x0800b4a9
 800b48c:	0800b4b1 	.word	0x0800b4b1
 800b490:	0800b4b9 	.word	0x0800b4b9
 800b494:	0800b4c1 	.word	0x0800b4c1
 800b498:	2302      	movs	r3, #2
 800b49a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b49e:	e01a      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b4a0:	2304      	movs	r3, #4
 800b4a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4a6:	e016      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b4a8:	2308      	movs	r3, #8
 800b4aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4ae:	e012      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b4b0:	2310      	movs	r3, #16
 800b4b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4b6:	e00e      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b4b8:	2320      	movs	r3, #32
 800b4ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4be:	e00a      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b4c0:	2340      	movs	r3, #64	; 0x40
 800b4c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4c6:	e006      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b4c8:	2380      	movs	r3, #128	; 0x80
 800b4ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4ce:	e002      	b.n	800b4d6 <UART_SetConfig+0x5a2>
 800b4d0:	2380      	movs	r3, #128	; 0x80
 800b4d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4a40      	ldr	r2, [pc, #256]	; (800b5dc <UART_SetConfig+0x6a8>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	f040 80ef 	bne.w	800b6c0 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b4e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b4e6:	2b20      	cmp	r3, #32
 800b4e8:	dc46      	bgt.n	800b578 <UART_SetConfig+0x644>
 800b4ea:	2b02      	cmp	r3, #2
 800b4ec:	f2c0 8081 	blt.w	800b5f2 <UART_SetConfig+0x6be>
 800b4f0:	3b02      	subs	r3, #2
 800b4f2:	2b1e      	cmp	r3, #30
 800b4f4:	d87d      	bhi.n	800b5f2 <UART_SetConfig+0x6be>
 800b4f6:	a201      	add	r2, pc, #4	; (adr r2, 800b4fc <UART_SetConfig+0x5c8>)
 800b4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4fc:	0800b57f 	.word	0x0800b57f
 800b500:	0800b5f3 	.word	0x0800b5f3
 800b504:	0800b587 	.word	0x0800b587
 800b508:	0800b5f3 	.word	0x0800b5f3
 800b50c:	0800b5f3 	.word	0x0800b5f3
 800b510:	0800b5f3 	.word	0x0800b5f3
 800b514:	0800b597 	.word	0x0800b597
 800b518:	0800b5f3 	.word	0x0800b5f3
 800b51c:	0800b5f3 	.word	0x0800b5f3
 800b520:	0800b5f3 	.word	0x0800b5f3
 800b524:	0800b5f3 	.word	0x0800b5f3
 800b528:	0800b5f3 	.word	0x0800b5f3
 800b52c:	0800b5f3 	.word	0x0800b5f3
 800b530:	0800b5f3 	.word	0x0800b5f3
 800b534:	0800b5a7 	.word	0x0800b5a7
 800b538:	0800b5f3 	.word	0x0800b5f3
 800b53c:	0800b5f3 	.word	0x0800b5f3
 800b540:	0800b5f3 	.word	0x0800b5f3
 800b544:	0800b5f3 	.word	0x0800b5f3
 800b548:	0800b5f3 	.word	0x0800b5f3
 800b54c:	0800b5f3 	.word	0x0800b5f3
 800b550:	0800b5f3 	.word	0x0800b5f3
 800b554:	0800b5f3 	.word	0x0800b5f3
 800b558:	0800b5f3 	.word	0x0800b5f3
 800b55c:	0800b5f3 	.word	0x0800b5f3
 800b560:	0800b5f3 	.word	0x0800b5f3
 800b564:	0800b5f3 	.word	0x0800b5f3
 800b568:	0800b5f3 	.word	0x0800b5f3
 800b56c:	0800b5f3 	.word	0x0800b5f3
 800b570:	0800b5f3 	.word	0x0800b5f3
 800b574:	0800b5e5 	.word	0x0800b5e5
 800b578:	2b40      	cmp	r3, #64	; 0x40
 800b57a:	d036      	beq.n	800b5ea <UART_SetConfig+0x6b6>
 800b57c:	e039      	b.n	800b5f2 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b57e:	f7fd fba1 	bl	8008cc4 <HAL_RCCEx_GetD3PCLK1Freq>
 800b582:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b584:	e03b      	b.n	800b5fe <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b586:	f107 0314 	add.w	r3, r7, #20
 800b58a:	4618      	mov	r0, r3
 800b58c:	f7fd fbb0 	bl	8008cf0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b590:	69bb      	ldr	r3, [r7, #24]
 800b592:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b594:	e033      	b.n	800b5fe <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b596:	f107 0308 	add.w	r3, r7, #8
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7fd fcfc 	bl	8008f98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b5a4:	e02b      	b.n	800b5fe <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5a6:	4b0a      	ldr	r3, [pc, #40]	; (800b5d0 <UART_SetConfig+0x69c>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f003 0320 	and.w	r3, r3, #32
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d009      	beq.n	800b5c6 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b5b2:	4b07      	ldr	r3, [pc, #28]	; (800b5d0 <UART_SetConfig+0x69c>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	08db      	lsrs	r3, r3, #3
 800b5b8:	f003 0303 	and.w	r3, r3, #3
 800b5bc:	4a08      	ldr	r2, [pc, #32]	; (800b5e0 <UART_SetConfig+0x6ac>)
 800b5be:	fa22 f303 	lsr.w	r3, r2, r3
 800b5c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b5c4:	e01b      	b.n	800b5fe <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800b5c6:	4b06      	ldr	r3, [pc, #24]	; (800b5e0 <UART_SetConfig+0x6ac>)
 800b5c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b5ca:	e018      	b.n	800b5fe <UART_SetConfig+0x6ca>
 800b5cc:	40011400 	.word	0x40011400
 800b5d0:	58024400 	.word	0x58024400
 800b5d4:	40007800 	.word	0x40007800
 800b5d8:	40007c00 	.word	0x40007c00
 800b5dc:	58000c00 	.word	0x58000c00
 800b5e0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b5e4:	4bc4      	ldr	r3, [pc, #784]	; (800b8f8 <UART_SetConfig+0x9c4>)
 800b5e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b5e8:	e009      	b.n	800b5fe <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b5ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b5f0:	e005      	b.n	800b5fe <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b5fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b600:	2b00      	cmp	r3, #0
 800b602:	f000 81da 	beq.w	800b9ba <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b60a:	4abc      	ldr	r2, [pc, #752]	; (800b8fc <UART_SetConfig+0x9c8>)
 800b60c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b610:	461a      	mov	r2, r3
 800b612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b614:	fbb3 f3f2 	udiv	r3, r3, r2
 800b618:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	685a      	ldr	r2, [r3, #4]
 800b61e:	4613      	mov	r3, r2
 800b620:	005b      	lsls	r3, r3, #1
 800b622:	4413      	add	r3, r2
 800b624:	6a3a      	ldr	r2, [r7, #32]
 800b626:	429a      	cmp	r2, r3
 800b628:	d305      	bcc.n	800b636 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b630:	6a3a      	ldr	r2, [r7, #32]
 800b632:	429a      	cmp	r2, r3
 800b634:	d903      	bls.n	800b63e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800b636:	2301      	movs	r3, #1
 800b638:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b63c:	e1bd      	b.n	800b9ba <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b640:	4618      	mov	r0, r3
 800b642:	f04f 0100 	mov.w	r1, #0
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b64a:	4aac      	ldr	r2, [pc, #688]	; (800b8fc <UART_SetConfig+0x9c8>)
 800b64c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b650:	b29a      	uxth	r2, r3
 800b652:	f04f 0300 	mov.w	r3, #0
 800b656:	f7f4 fe93 	bl	8000380 <__aeabi_uldivmod>
 800b65a:	4602      	mov	r2, r0
 800b65c:	460b      	mov	r3, r1
 800b65e:	4610      	mov	r0, r2
 800b660:	4619      	mov	r1, r3
 800b662:	f04f 0200 	mov.w	r2, #0
 800b666:	f04f 0300 	mov.w	r3, #0
 800b66a:	020b      	lsls	r3, r1, #8
 800b66c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b670:	0202      	lsls	r2, r0, #8
 800b672:	6879      	ldr	r1, [r7, #4]
 800b674:	6849      	ldr	r1, [r1, #4]
 800b676:	0849      	lsrs	r1, r1, #1
 800b678:	4608      	mov	r0, r1
 800b67a:	f04f 0100 	mov.w	r1, #0
 800b67e:	1814      	adds	r4, r2, r0
 800b680:	eb43 0501 	adc.w	r5, r3, r1
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	461a      	mov	r2, r3
 800b68a:	f04f 0300 	mov.w	r3, #0
 800b68e:	4620      	mov	r0, r4
 800b690:	4629      	mov	r1, r5
 800b692:	f7f4 fe75 	bl	8000380 <__aeabi_uldivmod>
 800b696:	4602      	mov	r2, r0
 800b698:	460b      	mov	r3, r1
 800b69a:	4613      	mov	r3, r2
 800b69c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6a4:	d308      	bcc.n	800b6b8 <UART_SetConfig+0x784>
 800b6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6ac:	d204      	bcs.n	800b6b8 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6b4:	60da      	str	r2, [r3, #12]
 800b6b6:	e180      	b.n	800b9ba <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b6be:	e17c      	b.n	800b9ba <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	69db      	ldr	r3, [r3, #28]
 800b6c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6c8:	f040 80be 	bne.w	800b848 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800b6cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b6d0:	2b20      	cmp	r3, #32
 800b6d2:	dc49      	bgt.n	800b768 <UART_SetConfig+0x834>
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	db7c      	blt.n	800b7d2 <UART_SetConfig+0x89e>
 800b6d8:	2b20      	cmp	r3, #32
 800b6da:	d87a      	bhi.n	800b7d2 <UART_SetConfig+0x89e>
 800b6dc:	a201      	add	r2, pc, #4	; (adr r2, 800b6e4 <UART_SetConfig+0x7b0>)
 800b6de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6e2:	bf00      	nop
 800b6e4:	0800b76f 	.word	0x0800b76f
 800b6e8:	0800b777 	.word	0x0800b777
 800b6ec:	0800b7d3 	.word	0x0800b7d3
 800b6f0:	0800b7d3 	.word	0x0800b7d3
 800b6f4:	0800b77f 	.word	0x0800b77f
 800b6f8:	0800b7d3 	.word	0x0800b7d3
 800b6fc:	0800b7d3 	.word	0x0800b7d3
 800b700:	0800b7d3 	.word	0x0800b7d3
 800b704:	0800b78f 	.word	0x0800b78f
 800b708:	0800b7d3 	.word	0x0800b7d3
 800b70c:	0800b7d3 	.word	0x0800b7d3
 800b710:	0800b7d3 	.word	0x0800b7d3
 800b714:	0800b7d3 	.word	0x0800b7d3
 800b718:	0800b7d3 	.word	0x0800b7d3
 800b71c:	0800b7d3 	.word	0x0800b7d3
 800b720:	0800b7d3 	.word	0x0800b7d3
 800b724:	0800b79f 	.word	0x0800b79f
 800b728:	0800b7d3 	.word	0x0800b7d3
 800b72c:	0800b7d3 	.word	0x0800b7d3
 800b730:	0800b7d3 	.word	0x0800b7d3
 800b734:	0800b7d3 	.word	0x0800b7d3
 800b738:	0800b7d3 	.word	0x0800b7d3
 800b73c:	0800b7d3 	.word	0x0800b7d3
 800b740:	0800b7d3 	.word	0x0800b7d3
 800b744:	0800b7d3 	.word	0x0800b7d3
 800b748:	0800b7d3 	.word	0x0800b7d3
 800b74c:	0800b7d3 	.word	0x0800b7d3
 800b750:	0800b7d3 	.word	0x0800b7d3
 800b754:	0800b7d3 	.word	0x0800b7d3
 800b758:	0800b7d3 	.word	0x0800b7d3
 800b75c:	0800b7d3 	.word	0x0800b7d3
 800b760:	0800b7d3 	.word	0x0800b7d3
 800b764:	0800b7c5 	.word	0x0800b7c5
 800b768:	2b40      	cmp	r3, #64	; 0x40
 800b76a:	d02e      	beq.n	800b7ca <UART_SetConfig+0x896>
 800b76c:	e031      	b.n	800b7d2 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b76e:	f7fc fb3d 	bl	8007dec <HAL_RCC_GetPCLK1Freq>
 800b772:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b774:	e033      	b.n	800b7de <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b776:	f7fc fb4f 	bl	8007e18 <HAL_RCC_GetPCLK2Freq>
 800b77a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b77c:	e02f      	b.n	800b7de <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b77e:	f107 0314 	add.w	r3, r7, #20
 800b782:	4618      	mov	r0, r3
 800b784:	f7fd fab4 	bl	8008cf0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b788:	69bb      	ldr	r3, [r7, #24]
 800b78a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b78c:	e027      	b.n	800b7de <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b78e:	f107 0308 	add.w	r3, r7, #8
 800b792:	4618      	mov	r0, r3
 800b794:	f7fd fc00 	bl	8008f98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b79c:	e01f      	b.n	800b7de <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b79e:	4b58      	ldr	r3, [pc, #352]	; (800b900 <UART_SetConfig+0x9cc>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f003 0320 	and.w	r3, r3, #32
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d009      	beq.n	800b7be <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b7aa:	4b55      	ldr	r3, [pc, #340]	; (800b900 <UART_SetConfig+0x9cc>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	08db      	lsrs	r3, r3, #3
 800b7b0:	f003 0303 	and.w	r3, r3, #3
 800b7b4:	4a53      	ldr	r2, [pc, #332]	; (800b904 <UART_SetConfig+0x9d0>)
 800b7b6:	fa22 f303 	lsr.w	r3, r2, r3
 800b7ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b7bc:	e00f      	b.n	800b7de <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800b7be:	4b51      	ldr	r3, [pc, #324]	; (800b904 <UART_SetConfig+0x9d0>)
 800b7c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7c2:	e00c      	b.n	800b7de <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b7c4:	4b4c      	ldr	r3, [pc, #304]	; (800b8f8 <UART_SetConfig+0x9c4>)
 800b7c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7c8:	e009      	b.n	800b7de <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7d0:	e005      	b.n	800b7de <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b7dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f000 80ea 	beq.w	800b9ba <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ea:	4a44      	ldr	r2, [pc, #272]	; (800b8fc <UART_SetConfig+0x9c8>)
 800b7ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7f0:	461a      	mov	r2, r3
 800b7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7f8:	005a      	lsls	r2, r3, #1
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	085b      	lsrs	r3, r3, #1
 800b800:	441a      	add	r2, r3
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	685b      	ldr	r3, [r3, #4]
 800b806:	fbb2 f3f3 	udiv	r3, r2, r3
 800b80a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b80e:	2b0f      	cmp	r3, #15
 800b810:	d916      	bls.n	800b840 <UART_SetConfig+0x90c>
 800b812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b818:	d212      	bcs.n	800b840 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b81c:	b29b      	uxth	r3, r3
 800b81e:	f023 030f 	bic.w	r3, r3, #15
 800b822:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b826:	085b      	lsrs	r3, r3, #1
 800b828:	b29b      	uxth	r3, r3
 800b82a:	f003 0307 	and.w	r3, r3, #7
 800b82e:	b29a      	uxth	r2, r3
 800b830:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b832:	4313      	orrs	r3, r2
 800b834:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b83c:	60da      	str	r2, [r3, #12]
 800b83e:	e0bc      	b.n	800b9ba <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b840:	2301      	movs	r3, #1
 800b842:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b846:	e0b8      	b.n	800b9ba <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b848:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b84c:	2b20      	cmp	r3, #32
 800b84e:	dc4b      	bgt.n	800b8e8 <UART_SetConfig+0x9b4>
 800b850:	2b00      	cmp	r3, #0
 800b852:	f2c0 8087 	blt.w	800b964 <UART_SetConfig+0xa30>
 800b856:	2b20      	cmp	r3, #32
 800b858:	f200 8084 	bhi.w	800b964 <UART_SetConfig+0xa30>
 800b85c:	a201      	add	r2, pc, #4	; (adr r2, 800b864 <UART_SetConfig+0x930>)
 800b85e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b862:	bf00      	nop
 800b864:	0800b8ef 	.word	0x0800b8ef
 800b868:	0800b909 	.word	0x0800b909
 800b86c:	0800b965 	.word	0x0800b965
 800b870:	0800b965 	.word	0x0800b965
 800b874:	0800b911 	.word	0x0800b911
 800b878:	0800b965 	.word	0x0800b965
 800b87c:	0800b965 	.word	0x0800b965
 800b880:	0800b965 	.word	0x0800b965
 800b884:	0800b921 	.word	0x0800b921
 800b888:	0800b965 	.word	0x0800b965
 800b88c:	0800b965 	.word	0x0800b965
 800b890:	0800b965 	.word	0x0800b965
 800b894:	0800b965 	.word	0x0800b965
 800b898:	0800b965 	.word	0x0800b965
 800b89c:	0800b965 	.word	0x0800b965
 800b8a0:	0800b965 	.word	0x0800b965
 800b8a4:	0800b931 	.word	0x0800b931
 800b8a8:	0800b965 	.word	0x0800b965
 800b8ac:	0800b965 	.word	0x0800b965
 800b8b0:	0800b965 	.word	0x0800b965
 800b8b4:	0800b965 	.word	0x0800b965
 800b8b8:	0800b965 	.word	0x0800b965
 800b8bc:	0800b965 	.word	0x0800b965
 800b8c0:	0800b965 	.word	0x0800b965
 800b8c4:	0800b965 	.word	0x0800b965
 800b8c8:	0800b965 	.word	0x0800b965
 800b8cc:	0800b965 	.word	0x0800b965
 800b8d0:	0800b965 	.word	0x0800b965
 800b8d4:	0800b965 	.word	0x0800b965
 800b8d8:	0800b965 	.word	0x0800b965
 800b8dc:	0800b965 	.word	0x0800b965
 800b8e0:	0800b965 	.word	0x0800b965
 800b8e4:	0800b957 	.word	0x0800b957
 800b8e8:	2b40      	cmp	r3, #64	; 0x40
 800b8ea:	d037      	beq.n	800b95c <UART_SetConfig+0xa28>
 800b8ec:	e03a      	b.n	800b964 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8ee:	f7fc fa7d 	bl	8007dec <HAL_RCC_GetPCLK1Freq>
 800b8f2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b8f4:	e03c      	b.n	800b970 <UART_SetConfig+0xa3c>
 800b8f6:	bf00      	nop
 800b8f8:	003d0900 	.word	0x003d0900
 800b8fc:	0800ce60 	.word	0x0800ce60
 800b900:	58024400 	.word	0x58024400
 800b904:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b908:	f7fc fa86 	bl	8007e18 <HAL_RCC_GetPCLK2Freq>
 800b90c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b90e:	e02f      	b.n	800b970 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b910:	f107 0314 	add.w	r3, r7, #20
 800b914:	4618      	mov	r0, r3
 800b916:	f7fd f9eb 	bl	8008cf0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b91a:	69bb      	ldr	r3, [r7, #24]
 800b91c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b91e:	e027      	b.n	800b970 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b920:	f107 0308 	add.w	r3, r7, #8
 800b924:	4618      	mov	r0, r3
 800b926:	f7fd fb37 	bl	8008f98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b92e:	e01f      	b.n	800b970 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b930:	4b2c      	ldr	r3, [pc, #176]	; (800b9e4 <UART_SetConfig+0xab0>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f003 0320 	and.w	r3, r3, #32
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d009      	beq.n	800b950 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b93c:	4b29      	ldr	r3, [pc, #164]	; (800b9e4 <UART_SetConfig+0xab0>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	08db      	lsrs	r3, r3, #3
 800b942:	f003 0303 	and.w	r3, r3, #3
 800b946:	4a28      	ldr	r2, [pc, #160]	; (800b9e8 <UART_SetConfig+0xab4>)
 800b948:	fa22 f303 	lsr.w	r3, r2, r3
 800b94c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b94e:	e00f      	b.n	800b970 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800b950:	4b25      	ldr	r3, [pc, #148]	; (800b9e8 <UART_SetConfig+0xab4>)
 800b952:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b954:	e00c      	b.n	800b970 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b956:	4b25      	ldr	r3, [pc, #148]	; (800b9ec <UART_SetConfig+0xab8>)
 800b958:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b95a:	e009      	b.n	800b970 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b95c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b960:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b962:	e005      	b.n	800b970 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800b964:	2300      	movs	r3, #0
 800b966:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b968:	2301      	movs	r3, #1
 800b96a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b96e:	bf00      	nop
    }

    if (pclk != 0U)
 800b970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b972:	2b00      	cmp	r3, #0
 800b974:	d021      	beq.n	800b9ba <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b97a:	4a1d      	ldr	r2, [pc, #116]	; (800b9f0 <UART_SetConfig+0xabc>)
 800b97c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b980:	461a      	mov	r2, r3
 800b982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b984:	fbb3 f2f2 	udiv	r2, r3, r2
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	085b      	lsrs	r3, r3, #1
 800b98e:	441a      	add	r2, r3
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	fbb2 f3f3 	udiv	r3, r2, r3
 800b998:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99c:	2b0f      	cmp	r3, #15
 800b99e:	d909      	bls.n	800b9b4 <UART_SetConfig+0xa80>
 800b9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9a6:	d205      	bcs.n	800b9b4 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9aa:	b29a      	uxth	r2, r3
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	60da      	str	r2, [r3, #12]
 800b9b2:	e002      	b.n	800b9ba <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2201      	movs	r2, #1
 800b9be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b9d6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3738      	adds	r7, #56	; 0x38
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bdb0      	pop	{r4, r5, r7, pc}
 800b9e2:	bf00      	nop
 800b9e4:	58024400 	.word	0x58024400
 800b9e8:	03d09000 	.word	0x03d09000
 800b9ec:	003d0900 	.word	0x003d0900
 800b9f0:	0800ce60 	.word	0x0800ce60

0800b9f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b083      	sub	sp, #12
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba00:	f003 0301 	and.w	r3, r3, #1
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d00a      	beq.n	800ba1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	430a      	orrs	r2, r1
 800ba1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba22:	f003 0302 	and.w	r3, r3, #2
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d00a      	beq.n	800ba40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	430a      	orrs	r2, r1
 800ba3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba44:	f003 0304 	and.w	r3, r3, #4
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d00a      	beq.n	800ba62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	430a      	orrs	r2, r1
 800ba60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba66:	f003 0308 	and.w	r3, r3, #8
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d00a      	beq.n	800ba84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	685b      	ldr	r3, [r3, #4]
 800ba74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	430a      	orrs	r2, r1
 800ba82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba88:	f003 0310 	and.w	r3, r3, #16
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d00a      	beq.n	800baa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	689b      	ldr	r3, [r3, #8]
 800ba96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	430a      	orrs	r2, r1
 800baa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baaa:	f003 0320 	and.w	r3, r3, #32
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d00a      	beq.n	800bac8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	689b      	ldr	r3, [r3, #8]
 800bab8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	430a      	orrs	r2, r1
 800bac6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bacc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d01a      	beq.n	800bb0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	430a      	orrs	r2, r1
 800bae8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800baf2:	d10a      	bne.n	800bb0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	685b      	ldr	r3, [r3, #4]
 800bafa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	430a      	orrs	r2, r1
 800bb08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d00a      	beq.n	800bb2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	685b      	ldr	r3, [r3, #4]
 800bb1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	430a      	orrs	r2, r1
 800bb2a:	605a      	str	r2, [r3, #4]
  }
}
 800bb2c:	bf00      	nop
 800bb2e:	370c      	adds	r7, #12
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr

0800bb38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b086      	sub	sp, #24
 800bb3c:	af02      	add	r7, sp, #8
 800bb3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2200      	movs	r2, #0
 800bb44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bb48:	f7f7 fd64 	bl	8003614 <HAL_GetTick>
 800bb4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f003 0308 	and.w	r3, r3, #8
 800bb58:	2b08      	cmp	r3, #8
 800bb5a:	d10e      	bne.n	800bb7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bb60:	9300      	str	r3, [sp, #0]
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2200      	movs	r2, #0
 800bb66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 f82f 	bl	800bbce <UART_WaitOnFlagUntilTimeout>
 800bb70:	4603      	mov	r3, r0
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d001      	beq.n	800bb7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb76:	2303      	movs	r3, #3
 800bb78:	e025      	b.n	800bbc6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f003 0304 	and.w	r3, r3, #4
 800bb84:	2b04      	cmp	r3, #4
 800bb86:	d10e      	bne.n	800bba6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bb8c:	9300      	str	r3, [sp, #0]
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2200      	movs	r2, #0
 800bb92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 f819 	bl	800bbce <UART_WaitOnFlagUntilTimeout>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d001      	beq.n	800bba6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bba2:	2303      	movs	r3, #3
 800bba4:	e00f      	b.n	800bbc6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2220      	movs	r2, #32
 800bbaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2220      	movs	r2, #32
 800bbb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bbc4:	2300      	movs	r3, #0
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3710      	adds	r7, #16
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}

0800bbce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bbce:	b580      	push	{r7, lr}
 800bbd0:	b09c      	sub	sp, #112	; 0x70
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	60f8      	str	r0, [r7, #12]
 800bbd6:	60b9      	str	r1, [r7, #8]
 800bbd8:	603b      	str	r3, [r7, #0]
 800bbda:	4613      	mov	r3, r2
 800bbdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bbde:	e0a9      	b.n	800bd34 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bbe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bbe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbe6:	f000 80a5 	beq.w	800bd34 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbea:	f7f7 fd13 	bl	8003614 <HAL_GetTick>
 800bbee:	4602      	mov	r2, r0
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	1ad3      	subs	r3, r2, r3
 800bbf4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d302      	bcc.n	800bc00 <UART_WaitOnFlagUntilTimeout+0x32>
 800bbfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d140      	bne.n	800bc82 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc08:	e853 3f00 	ldrex	r3, [r3]
 800bc0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bc0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bc14:	667b      	str	r3, [r7, #100]	; 0x64
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	461a      	mov	r2, r3
 800bc1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc20:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bc24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bc26:	e841 2300 	strex	r3, r2, [r1]
 800bc2a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bc2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d1e6      	bne.n	800bc00 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	3308      	adds	r3, #8
 800bc38:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc3c:	e853 3f00 	ldrex	r3, [r3]
 800bc40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bc42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc44:	f023 0301 	bic.w	r3, r3, #1
 800bc48:	663b      	str	r3, [r7, #96]	; 0x60
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	3308      	adds	r3, #8
 800bc50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bc52:	64ba      	str	r2, [r7, #72]	; 0x48
 800bc54:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bc58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc5a:	e841 2300 	strex	r3, r2, [r1]
 800bc5e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bc60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d1e5      	bne.n	800bc32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	2220      	movs	r2, #32
 800bc6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2220      	movs	r2, #32
 800bc72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800bc7e:	2303      	movs	r3, #3
 800bc80:	e069      	b.n	800bd56 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f003 0304 	and.w	r3, r3, #4
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d051      	beq.n	800bd34 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	69db      	ldr	r3, [r3, #28]
 800bc96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc9e:	d149      	bne.n	800bd34 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bca8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb2:	e853 3f00 	ldrex	r3, [r3]
 800bcb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bcb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bcbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	461a      	mov	r2, r3
 800bcc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcc8:	637b      	str	r3, [r7, #52]	; 0x34
 800bcca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bccc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bcce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bcd0:	e841 2300 	strex	r3, r2, [r1]
 800bcd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bcd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d1e6      	bne.n	800bcaa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	3308      	adds	r3, #8
 800bce2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	e853 3f00 	ldrex	r3, [r3]
 800bcea:	613b      	str	r3, [r7, #16]
   return(result);
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	f023 0301 	bic.w	r3, r3, #1
 800bcf2:	66bb      	str	r3, [r7, #104]	; 0x68
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	3308      	adds	r3, #8
 800bcfa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bcfc:	623a      	str	r2, [r7, #32]
 800bcfe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd00:	69f9      	ldr	r1, [r7, #28]
 800bd02:	6a3a      	ldr	r2, [r7, #32]
 800bd04:	e841 2300 	strex	r3, r2, [r1]
 800bd08:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd0a:	69bb      	ldr	r3, [r7, #24]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d1e5      	bne.n	800bcdc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2220      	movs	r2, #32
 800bd14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	2220      	movs	r2, #32
 800bd1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	2220      	movs	r2, #32
 800bd24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800bd30:	2303      	movs	r3, #3
 800bd32:	e010      	b.n	800bd56 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	69da      	ldr	r2, [r3, #28]
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	4013      	ands	r3, r2
 800bd3e:	68ba      	ldr	r2, [r7, #8]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	bf0c      	ite	eq
 800bd44:	2301      	moveq	r3, #1
 800bd46:	2300      	movne	r3, #0
 800bd48:	b2db      	uxtb	r3, r3
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	79fb      	ldrb	r3, [r7, #7]
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	f43f af46 	beq.w	800bbe0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bd54:	2300      	movs	r3, #0
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3770      	adds	r7, #112	; 0x70
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}

0800bd5e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bd5e:	b480      	push	{r7}
 800bd60:	b085      	sub	sp, #20
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d101      	bne.n	800bd74 <HAL_UARTEx_DisableFifoMode+0x16>
 800bd70:	2302      	movs	r3, #2
 800bd72:	e027      	b.n	800bdc4 <HAL_UARTEx_DisableFifoMode+0x66>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2201      	movs	r2, #1
 800bd78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2224      	movs	r2, #36	; 0x24
 800bd80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	681a      	ldr	r2, [r3, #0]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f022 0201 	bic.w	r2, r2, #1
 800bd9a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bda2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2200      	movs	r2, #0
 800bda8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	68fa      	ldr	r2, [r7, #12]
 800bdb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2220      	movs	r2, #32
 800bdb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bdc2:	2300      	movs	r3, #0
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3714      	adds	r7, #20
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr

0800bdd0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b084      	sub	sp, #16
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	d101      	bne.n	800bde8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bde4:	2302      	movs	r3, #2
 800bde6:	e02d      	b.n	800be44 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2201      	movs	r2, #1
 800bdec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2224      	movs	r2, #36	; 0x24
 800bdf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f022 0201 	bic.w	r2, r2, #1
 800be0e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	689b      	ldr	r3, [r3, #8]
 800be16:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	683a      	ldr	r2, [r7, #0]
 800be20:	430a      	orrs	r2, r1
 800be22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f000 f84f 	bl	800bec8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	68fa      	ldr	r2, [r7, #12]
 800be30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2220      	movs	r2, #32
 800be36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2200      	movs	r2, #0
 800be3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800be42:	2300      	movs	r3, #0
}
 800be44:	4618      	mov	r0, r3
 800be46:	3710      	adds	r7, #16
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800be5c:	2b01      	cmp	r3, #1
 800be5e:	d101      	bne.n	800be64 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800be60:	2302      	movs	r3, #2
 800be62:	e02d      	b.n	800bec0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2201      	movs	r2, #1
 800be68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2224      	movs	r2, #36	; 0x24
 800be70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	681a      	ldr	r2, [r3, #0]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f022 0201 	bic.w	r2, r2, #1
 800be8a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	689b      	ldr	r3, [r3, #8]
 800be92:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	683a      	ldr	r2, [r7, #0]
 800be9c:	430a      	orrs	r2, r1
 800be9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f000 f811 	bl	800bec8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	68fa      	ldr	r2, [r7, #12]
 800beac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2220      	movs	r2, #32
 800beb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2200      	movs	r2, #0
 800beba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bebe:	2300      	movs	r3, #0
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3710      	adds	r7, #16
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bec8:	b480      	push	{r7}
 800beca:	b085      	sub	sp, #20
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d108      	bne.n	800beea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2201      	movs	r2, #1
 800bedc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2201      	movs	r2, #1
 800bee4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bee8:	e031      	b.n	800bf4e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800beea:	2310      	movs	r3, #16
 800beec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800beee:	2310      	movs	r3, #16
 800bef0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	689b      	ldr	r3, [r3, #8]
 800bef8:	0e5b      	lsrs	r3, r3, #25
 800befa:	b2db      	uxtb	r3, r3
 800befc:	f003 0307 	and.w	r3, r3, #7
 800bf00:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	689b      	ldr	r3, [r3, #8]
 800bf08:	0f5b      	lsrs	r3, r3, #29
 800bf0a:	b2db      	uxtb	r3, r3
 800bf0c:	f003 0307 	and.w	r3, r3, #7
 800bf10:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bf12:	7bbb      	ldrb	r3, [r7, #14]
 800bf14:	7b3a      	ldrb	r2, [r7, #12]
 800bf16:	4911      	ldr	r1, [pc, #68]	; (800bf5c <UARTEx_SetNbDataToProcess+0x94>)
 800bf18:	5c8a      	ldrb	r2, [r1, r2]
 800bf1a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bf1e:	7b3a      	ldrb	r2, [r7, #12]
 800bf20:	490f      	ldr	r1, [pc, #60]	; (800bf60 <UARTEx_SetNbDataToProcess+0x98>)
 800bf22:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bf24:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf28:	b29a      	uxth	r2, r3
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bf30:	7bfb      	ldrb	r3, [r7, #15]
 800bf32:	7b7a      	ldrb	r2, [r7, #13]
 800bf34:	4909      	ldr	r1, [pc, #36]	; (800bf5c <UARTEx_SetNbDataToProcess+0x94>)
 800bf36:	5c8a      	ldrb	r2, [r1, r2]
 800bf38:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bf3c:	7b7a      	ldrb	r2, [r7, #13]
 800bf3e:	4908      	ldr	r1, [pc, #32]	; (800bf60 <UARTEx_SetNbDataToProcess+0x98>)
 800bf40:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bf42:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf46:	b29a      	uxth	r2, r3
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bf4e:	bf00      	nop
 800bf50:	3714      	adds	r7, #20
 800bf52:	46bd      	mov	sp, r7
 800bf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf58:	4770      	bx	lr
 800bf5a:	bf00      	nop
 800bf5c:	0800ce78 	.word	0x0800ce78
 800bf60:	0800ce80 	.word	0x0800ce80

0800bf64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bf64:	b084      	sub	sp, #16
 800bf66:	b580      	push	{r7, lr}
 800bf68:	b084      	sub	sp, #16
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	6078      	str	r0, [r7, #4]
 800bf6e:	f107 001c 	add.w	r0, r7, #28
 800bf72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bf76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf78:	2b01      	cmp	r3, #1
 800bf7a:	d120      	bne.n	800bfbe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	68da      	ldr	r2, [r3, #12]
 800bf8c:	4b2a      	ldr	r3, [pc, #168]	; (800c038 <USB_CoreInit+0xd4>)
 800bf8e:	4013      	ands	r3, r2
 800bf90:	687a      	ldr	r2, [r7, #4]
 800bf92:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	68db      	ldr	r3, [r3, #12]
 800bf98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bfa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d105      	bne.n	800bfb2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	68db      	ldr	r3, [r3, #12]
 800bfaa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f000 faa8 	bl	800c508 <USB_CoreReset>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	73fb      	strb	r3, [r7, #15]
 800bfbc:	e01a      	b.n	800bff4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	68db      	ldr	r3, [r3, #12]
 800bfc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 fa9c 	bl	800c508 <USB_CoreReset>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bfd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d106      	bne.n	800bfe8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfde:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	639a      	str	r2, [r3, #56]	; 0x38
 800bfe6:	e005      	b.n	800bff4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff6:	2b01      	cmp	r3, #1
 800bff8:	d116      	bne.n	800c028 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bffe:	b29a      	uxth	r2, r3
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c008:	4b0c      	ldr	r3, [pc, #48]	; (800c03c <USB_CoreInit+0xd8>)
 800c00a:	4313      	orrs	r3, r2
 800c00c:	687a      	ldr	r2, [r7, #4]
 800c00e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	689b      	ldr	r3, [r3, #8]
 800c014:	f043 0206 	orr.w	r2, r3, #6
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	689b      	ldr	r3, [r3, #8]
 800c020:	f043 0220 	orr.w	r2, r3, #32
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c028:	7bfb      	ldrb	r3, [r7, #15]
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3710      	adds	r7, #16
 800c02e:	46bd      	mov	sp, r7
 800c030:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c034:	b004      	add	sp, #16
 800c036:	4770      	bx	lr
 800c038:	ffbdffbf 	.word	0xffbdffbf
 800c03c:	03ee0000 	.word	0x03ee0000

0800c040 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c040:	b480      	push	{r7}
 800c042:	b083      	sub	sp, #12
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	689b      	ldr	r3, [r3, #8]
 800c04c:	f023 0201 	bic.w	r2, r3, #1
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c054:	2300      	movs	r3, #0
}
 800c056:	4618      	mov	r0, r3
 800c058:	370c      	adds	r7, #12
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr

0800c062 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c062:	b580      	push	{r7, lr}
 800c064:	b084      	sub	sp, #16
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
 800c06a:	460b      	mov	r3, r1
 800c06c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c06e:	2300      	movs	r3, #0
 800c070:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	68db      	ldr	r3, [r3, #12]
 800c076:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c07e:	78fb      	ldrb	r3, [r7, #3]
 800c080:	2b01      	cmp	r3, #1
 800c082:	d115      	bne.n	800c0b0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c090:	2001      	movs	r0, #1
 800c092:	f7f7 facb 	bl	800362c <HAL_Delay>
      ms++;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	3301      	adds	r3, #1
 800c09a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f000 fa25 	bl	800c4ec <USB_GetMode>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	2b01      	cmp	r3, #1
 800c0a6:	d01e      	beq.n	800c0e6 <USB_SetCurrentMode+0x84>
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2b31      	cmp	r3, #49	; 0x31
 800c0ac:	d9f0      	bls.n	800c090 <USB_SetCurrentMode+0x2e>
 800c0ae:	e01a      	b.n	800c0e6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c0b0:	78fb      	ldrb	r3, [r7, #3]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d115      	bne.n	800c0e2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	68db      	ldr	r3, [r3, #12]
 800c0ba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c0c2:	2001      	movs	r0, #1
 800c0c4:	f7f7 fab2 	bl	800362c <HAL_Delay>
      ms++;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f000 fa0c 	bl	800c4ec <USB_GetMode>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d005      	beq.n	800c0e6 <USB_SetCurrentMode+0x84>
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2b31      	cmp	r3, #49	; 0x31
 800c0de:	d9f0      	bls.n	800c0c2 <USB_SetCurrentMode+0x60>
 800c0e0:	e001      	b.n	800c0e6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	e005      	b.n	800c0f2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2b32      	cmp	r3, #50	; 0x32
 800c0ea:	d101      	bne.n	800c0f0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	e000      	b.n	800c0f2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c0f0:	2300      	movs	r3, #0
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3710      	adds	r7, #16
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
	...

0800c0fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c0fc:	b084      	sub	sp, #16
 800c0fe:	b580      	push	{r7, lr}
 800c100:	b086      	sub	sp, #24
 800c102:	af00      	add	r7, sp, #0
 800c104:	6078      	str	r0, [r7, #4]
 800c106:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c10a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c10e:	2300      	movs	r3, #0
 800c110:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c116:	2300      	movs	r3, #0
 800c118:	613b      	str	r3, [r7, #16]
 800c11a:	e009      	b.n	800c130 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	3340      	adds	r3, #64	; 0x40
 800c122:	009b      	lsls	r3, r3, #2
 800c124:	4413      	add	r3, r2
 800c126:	2200      	movs	r2, #0
 800c128:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	3301      	adds	r3, #1
 800c12e:	613b      	str	r3, [r7, #16]
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	2b0e      	cmp	r3, #14
 800c134:	d9f2      	bls.n	800c11c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d11c      	bne.n	800c176 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c142:	685b      	ldr	r3, [r3, #4]
 800c144:	68fa      	ldr	r2, [r7, #12]
 800c146:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c14a:	f043 0302 	orr.w	r3, r3, #2
 800c14e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c154:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	601a      	str	r2, [r3, #0]
 800c174:	e005      	b.n	800c182 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c17a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c188:	461a      	mov	r2, r3
 800c18a:	2300      	movs	r3, #0
 800c18c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c194:	4619      	mov	r1, r3
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c19c:	461a      	mov	r2, r3
 800c19e:	680b      	ldr	r3, [r1, #0]
 800c1a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	d10c      	bne.n	800c1c2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d104      	bne.n	800c1b8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c1ae:	2100      	movs	r1, #0
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 f961 	bl	800c478 <USB_SetDevSpeed>
 800c1b6:	e008      	b.n	800c1ca <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c1b8:	2101      	movs	r1, #1
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 f95c 	bl	800c478 <USB_SetDevSpeed>
 800c1c0:	e003      	b.n	800c1ca <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c1c2:	2103      	movs	r1, #3
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f000 f957 	bl	800c478 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c1ca:	2110      	movs	r1, #16
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f000 f8f3 	bl	800c3b8 <USB_FlushTxFifo>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d001      	beq.n	800c1dc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c1d8:	2301      	movs	r3, #1
 800c1da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 f91d 	bl	800c41c <USB_FlushRxFifo>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d001      	beq.n	800c1ec <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1fe:	461a      	mov	r2, r3
 800c200:	2300      	movs	r3, #0
 800c202:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c20a:	461a      	mov	r2, r3
 800c20c:	2300      	movs	r3, #0
 800c20e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c210:	2300      	movs	r3, #0
 800c212:	613b      	str	r3, [r7, #16]
 800c214:	e043      	b.n	800c29e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	015a      	lsls	r2, r3, #5
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	4413      	add	r3, r2
 800c21e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c228:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c22c:	d118      	bne.n	800c260 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d10a      	bne.n	800c24a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	015a      	lsls	r2, r3, #5
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	4413      	add	r3, r2
 800c23c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c240:	461a      	mov	r2, r3
 800c242:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c246:	6013      	str	r3, [r2, #0]
 800c248:	e013      	b.n	800c272 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	015a      	lsls	r2, r3, #5
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	4413      	add	r3, r2
 800c252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c256:	461a      	mov	r2, r3
 800c258:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c25c:	6013      	str	r3, [r2, #0]
 800c25e:	e008      	b.n	800c272 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	015a      	lsls	r2, r3, #5
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	4413      	add	r3, r2
 800c268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c26c:	461a      	mov	r2, r3
 800c26e:	2300      	movs	r3, #0
 800c270:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c272:	693b      	ldr	r3, [r7, #16]
 800c274:	015a      	lsls	r2, r3, #5
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	4413      	add	r3, r2
 800c27a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c27e:	461a      	mov	r2, r3
 800c280:	2300      	movs	r3, #0
 800c282:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	015a      	lsls	r2, r3, #5
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	4413      	add	r3, r2
 800c28c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c290:	461a      	mov	r2, r3
 800c292:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c296:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	3301      	adds	r3, #1
 800c29c:	613b      	str	r3, [r7, #16]
 800c29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a0:	693a      	ldr	r2, [r7, #16]
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d3b7      	bcc.n	800c216 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	613b      	str	r3, [r7, #16]
 800c2aa:	e043      	b.n	800c334 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	015a      	lsls	r2, r3, #5
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	4413      	add	r3, r2
 800c2b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c2be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c2c2:	d118      	bne.n	800c2f6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d10a      	bne.n	800c2e0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	015a      	lsls	r2, r3, #5
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	4413      	add	r3, r2
 800c2d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c2dc:	6013      	str	r3, [r2, #0]
 800c2de:	e013      	b.n	800c308 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	015a      	lsls	r2, r3, #5
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	4413      	add	r3, r2
 800c2e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2ec:	461a      	mov	r2, r3
 800c2ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c2f2:	6013      	str	r3, [r2, #0]
 800c2f4:	e008      	b.n	800c308 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	015a      	lsls	r2, r3, #5
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	4413      	add	r3, r2
 800c2fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c302:	461a      	mov	r2, r3
 800c304:	2300      	movs	r3, #0
 800c306:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	015a      	lsls	r2, r3, #5
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	4413      	add	r3, r2
 800c310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c314:	461a      	mov	r2, r3
 800c316:	2300      	movs	r3, #0
 800c318:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	015a      	lsls	r2, r3, #5
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	4413      	add	r3, r2
 800c322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c326:	461a      	mov	r2, r3
 800c328:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c32c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	3301      	adds	r3, #1
 800c332:	613b      	str	r3, [r7, #16]
 800c334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c336:	693a      	ldr	r2, [r7, #16]
 800c338:	429a      	cmp	r2, r3
 800c33a:	d3b7      	bcc.n	800c2ac <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c342:	691b      	ldr	r3, [r3, #16]
 800c344:	68fa      	ldr	r2, [r7, #12]
 800c346:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c34a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c34e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2200      	movs	r2, #0
 800c354:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c35c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c360:	2b00      	cmp	r3, #0
 800c362:	d105      	bne.n	800c370 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	699b      	ldr	r3, [r3, #24]
 800c368:	f043 0210 	orr.w	r2, r3, #16
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	699a      	ldr	r2, [r3, #24]
 800c374:	4b0e      	ldr	r3, [pc, #56]	; (800c3b0 <USB_DevInit+0x2b4>)
 800c376:	4313      	orrs	r3, r2
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c37c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d005      	beq.n	800c38e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	699b      	ldr	r3, [r3, #24]
 800c386:	f043 0208 	orr.w	r2, r3, #8
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c38e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c390:	2b01      	cmp	r3, #1
 800c392:	d105      	bne.n	800c3a0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	699a      	ldr	r2, [r3, #24]
 800c398:	4b06      	ldr	r3, [pc, #24]	; (800c3b4 <USB_DevInit+0x2b8>)
 800c39a:	4313      	orrs	r3, r2
 800c39c:	687a      	ldr	r2, [r7, #4]
 800c39e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c3a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3718      	adds	r7, #24
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c3ac:	b004      	add	sp, #16
 800c3ae:	4770      	bx	lr
 800c3b0:	803c3800 	.word	0x803c3800
 800c3b4:	40000004 	.word	0x40000004

0800c3b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b085      	sub	sp, #20
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	3301      	adds	r3, #1
 800c3ca:	60fb      	str	r3, [r7, #12]
 800c3cc:	4a12      	ldr	r2, [pc, #72]	; (800c418 <USB_FlushTxFifo+0x60>)
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	d901      	bls.n	800c3d6 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c3d2:	2303      	movs	r3, #3
 800c3d4:	e01a      	b.n	800c40c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	691b      	ldr	r3, [r3, #16]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	daf3      	bge.n	800c3c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	019b      	lsls	r3, r3, #6
 800c3e6:	f043 0220 	orr.w	r2, r3, #32
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	60fb      	str	r3, [r7, #12]
 800c3f4:	4a08      	ldr	r2, [pc, #32]	; (800c418 <USB_FlushTxFifo+0x60>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d901      	bls.n	800c3fe <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800c3fa:	2303      	movs	r3, #3
 800c3fc:	e006      	b.n	800c40c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	691b      	ldr	r3, [r3, #16]
 800c402:	f003 0320 	and.w	r3, r3, #32
 800c406:	2b20      	cmp	r3, #32
 800c408:	d0f1      	beq.n	800c3ee <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800c40a:	2300      	movs	r3, #0
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3714      	adds	r7, #20
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr
 800c418:	00030d40 	.word	0x00030d40

0800c41c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c41c:	b480      	push	{r7}
 800c41e:	b085      	sub	sp, #20
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c424:	2300      	movs	r3, #0
 800c426:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	3301      	adds	r3, #1
 800c42c:	60fb      	str	r3, [r7, #12]
 800c42e:	4a11      	ldr	r2, [pc, #68]	; (800c474 <USB_FlushRxFifo+0x58>)
 800c430:	4293      	cmp	r3, r2
 800c432:	d901      	bls.n	800c438 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800c434:	2303      	movs	r3, #3
 800c436:	e017      	b.n	800c468 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	691b      	ldr	r3, [r3, #16]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	daf3      	bge.n	800c428 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c440:	2300      	movs	r3, #0
 800c442:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2210      	movs	r2, #16
 800c448:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	3301      	adds	r3, #1
 800c44e:	60fb      	str	r3, [r7, #12]
 800c450:	4a08      	ldr	r2, [pc, #32]	; (800c474 <USB_FlushRxFifo+0x58>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d901      	bls.n	800c45a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800c456:	2303      	movs	r3, #3
 800c458:	e006      	b.n	800c468 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	691b      	ldr	r3, [r3, #16]
 800c45e:	f003 0310 	and.w	r3, r3, #16
 800c462:	2b10      	cmp	r3, #16
 800c464:	d0f1      	beq.n	800c44a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800c466:	2300      	movs	r3, #0
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3714      	adds	r7, #20
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr
 800c474:	00030d40 	.word	0x00030d40

0800c478 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c478:	b480      	push	{r7}
 800c47a:	b085      	sub	sp, #20
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	460b      	mov	r3, r1
 800c482:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c48e:	681a      	ldr	r2, [r3, #0]
 800c490:	78fb      	ldrb	r3, [r7, #3]
 800c492:	68f9      	ldr	r1, [r7, #12]
 800c494:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c498:	4313      	orrs	r3, r2
 800c49a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c49c:	2300      	movs	r3, #0
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3714      	adds	r7, #20
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a8:	4770      	bx	lr

0800c4aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c4aa:	b480      	push	{r7}
 800c4ac:	b085      	sub	sp, #20
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	68fa      	ldr	r2, [r7, #12]
 800c4c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c4c4:	f023 0303 	bic.w	r3, r3, #3
 800c4c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4d0:	685b      	ldr	r3, [r3, #4]
 800c4d2:	68fa      	ldr	r2, [r7, #12]
 800c4d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c4d8:	f043 0302 	orr.w	r3, r3, #2
 800c4dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c4de:	2300      	movs	r3, #0
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3714      	adds	r7, #20
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr

0800c4ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b083      	sub	sp, #12
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	695b      	ldr	r3, [r3, #20]
 800c4f8:	f003 0301 	and.w	r3, r3, #1
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	370c      	adds	r7, #12
 800c500:	46bd      	mov	sp, r7
 800c502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c506:	4770      	bx	lr

0800c508 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c508:	b480      	push	{r7}
 800c50a:	b085      	sub	sp, #20
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c510:	2300      	movs	r3, #0
 800c512:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	3301      	adds	r3, #1
 800c518:	60fb      	str	r3, [r7, #12]
 800c51a:	4a13      	ldr	r2, [pc, #76]	; (800c568 <USB_CoreReset+0x60>)
 800c51c:	4293      	cmp	r3, r2
 800c51e:	d901      	bls.n	800c524 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800c520:	2303      	movs	r3, #3
 800c522:	e01a      	b.n	800c55a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	691b      	ldr	r3, [r3, #16]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	daf3      	bge.n	800c514 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c52c:	2300      	movs	r3, #0
 800c52e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	691b      	ldr	r3, [r3, #16]
 800c534:	f043 0201 	orr.w	r2, r3, #1
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	3301      	adds	r3, #1
 800c540:	60fb      	str	r3, [r7, #12]
 800c542:	4a09      	ldr	r2, [pc, #36]	; (800c568 <USB_CoreReset+0x60>)
 800c544:	4293      	cmp	r3, r2
 800c546:	d901      	bls.n	800c54c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800c548:	2303      	movs	r3, #3
 800c54a:	e006      	b.n	800c55a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	691b      	ldr	r3, [r3, #16]
 800c550:	f003 0301 	and.w	r3, r3, #1
 800c554:	2b01      	cmp	r3, #1
 800c556:	d0f1      	beq.n	800c53c <USB_CoreReset+0x34>

  return HAL_OK;
 800c558:	2300      	movs	r3, #0
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3714      	adds	r7, #20
 800c55e:	46bd      	mov	sp, r7
 800c560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c564:	4770      	bx	lr
 800c566:	bf00      	nop
 800c568:	00030d40 	.word	0x00030d40

0800c56c <__errno>:
 800c56c:	4b01      	ldr	r3, [pc, #4]	; (800c574 <__errno+0x8>)
 800c56e:	6818      	ldr	r0, [r3, #0]
 800c570:	4770      	bx	lr
 800c572:	bf00      	nop
 800c574:	24046524 	.word	0x24046524

0800c578 <__libc_init_array>:
 800c578:	b570      	push	{r4, r5, r6, lr}
 800c57a:	4d0d      	ldr	r5, [pc, #52]	; (800c5b0 <__libc_init_array+0x38>)
 800c57c:	4c0d      	ldr	r4, [pc, #52]	; (800c5b4 <__libc_init_array+0x3c>)
 800c57e:	1b64      	subs	r4, r4, r5
 800c580:	10a4      	asrs	r4, r4, #2
 800c582:	2600      	movs	r6, #0
 800c584:	42a6      	cmp	r6, r4
 800c586:	d109      	bne.n	800c59c <__libc_init_array+0x24>
 800c588:	4d0b      	ldr	r5, [pc, #44]	; (800c5b8 <__libc_init_array+0x40>)
 800c58a:	4c0c      	ldr	r4, [pc, #48]	; (800c5bc <__libc_init_array+0x44>)
 800c58c:	f000 fc4e 	bl	800ce2c <_init>
 800c590:	1b64      	subs	r4, r4, r5
 800c592:	10a4      	asrs	r4, r4, #2
 800c594:	2600      	movs	r6, #0
 800c596:	42a6      	cmp	r6, r4
 800c598:	d105      	bne.n	800c5a6 <__libc_init_array+0x2e>
 800c59a:	bd70      	pop	{r4, r5, r6, pc}
 800c59c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5a0:	4798      	blx	r3
 800c5a2:	3601      	adds	r6, #1
 800c5a4:	e7ee      	b.n	800c584 <__libc_init_array+0xc>
 800c5a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5aa:	4798      	blx	r3
 800c5ac:	3601      	adds	r6, #1
 800c5ae:	e7f2      	b.n	800c596 <__libc_init_array+0x1e>
 800c5b0:	0800cec4 	.word	0x0800cec4
 800c5b4:	0800cec4 	.word	0x0800cec4
 800c5b8:	0800cec4 	.word	0x0800cec4
 800c5bc:	0800cec8 	.word	0x0800cec8

0800c5c0 <memset>:
 800c5c0:	4402      	add	r2, r0
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d100      	bne.n	800c5ca <memset+0xa>
 800c5c8:	4770      	bx	lr
 800c5ca:	f803 1b01 	strb.w	r1, [r3], #1
 800c5ce:	e7f9      	b.n	800c5c4 <memset+0x4>

0800c5d0 <siprintf>:
 800c5d0:	b40e      	push	{r1, r2, r3}
 800c5d2:	b500      	push	{lr}
 800c5d4:	b09c      	sub	sp, #112	; 0x70
 800c5d6:	ab1d      	add	r3, sp, #116	; 0x74
 800c5d8:	9002      	str	r0, [sp, #8]
 800c5da:	9006      	str	r0, [sp, #24]
 800c5dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c5e0:	4809      	ldr	r0, [pc, #36]	; (800c608 <siprintf+0x38>)
 800c5e2:	9107      	str	r1, [sp, #28]
 800c5e4:	9104      	str	r1, [sp, #16]
 800c5e6:	4909      	ldr	r1, [pc, #36]	; (800c60c <siprintf+0x3c>)
 800c5e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5ec:	9105      	str	r1, [sp, #20]
 800c5ee:	6800      	ldr	r0, [r0, #0]
 800c5f0:	9301      	str	r3, [sp, #4]
 800c5f2:	a902      	add	r1, sp, #8
 800c5f4:	f000 f868 	bl	800c6c8 <_svfiprintf_r>
 800c5f8:	9b02      	ldr	r3, [sp, #8]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	701a      	strb	r2, [r3, #0]
 800c5fe:	b01c      	add	sp, #112	; 0x70
 800c600:	f85d eb04 	ldr.w	lr, [sp], #4
 800c604:	b003      	add	sp, #12
 800c606:	4770      	bx	lr
 800c608:	24046524 	.word	0x24046524
 800c60c:	ffff0208 	.word	0xffff0208

0800c610 <__ssputs_r>:
 800c610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c614:	688e      	ldr	r6, [r1, #8]
 800c616:	429e      	cmp	r6, r3
 800c618:	4682      	mov	sl, r0
 800c61a:	460c      	mov	r4, r1
 800c61c:	4690      	mov	r8, r2
 800c61e:	461f      	mov	r7, r3
 800c620:	d838      	bhi.n	800c694 <__ssputs_r+0x84>
 800c622:	898a      	ldrh	r2, [r1, #12]
 800c624:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c628:	d032      	beq.n	800c690 <__ssputs_r+0x80>
 800c62a:	6825      	ldr	r5, [r4, #0]
 800c62c:	6909      	ldr	r1, [r1, #16]
 800c62e:	eba5 0901 	sub.w	r9, r5, r1
 800c632:	6965      	ldr	r5, [r4, #20]
 800c634:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c638:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c63c:	3301      	adds	r3, #1
 800c63e:	444b      	add	r3, r9
 800c640:	106d      	asrs	r5, r5, #1
 800c642:	429d      	cmp	r5, r3
 800c644:	bf38      	it	cc
 800c646:	461d      	movcc	r5, r3
 800c648:	0553      	lsls	r3, r2, #21
 800c64a:	d531      	bpl.n	800c6b0 <__ssputs_r+0xa0>
 800c64c:	4629      	mov	r1, r5
 800c64e:	f000 fb47 	bl	800cce0 <_malloc_r>
 800c652:	4606      	mov	r6, r0
 800c654:	b950      	cbnz	r0, 800c66c <__ssputs_r+0x5c>
 800c656:	230c      	movs	r3, #12
 800c658:	f8ca 3000 	str.w	r3, [sl]
 800c65c:	89a3      	ldrh	r3, [r4, #12]
 800c65e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c662:	81a3      	strh	r3, [r4, #12]
 800c664:	f04f 30ff 	mov.w	r0, #4294967295
 800c668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c66c:	6921      	ldr	r1, [r4, #16]
 800c66e:	464a      	mov	r2, r9
 800c670:	f000 fabe 	bl	800cbf0 <memcpy>
 800c674:	89a3      	ldrh	r3, [r4, #12]
 800c676:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c67a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c67e:	81a3      	strh	r3, [r4, #12]
 800c680:	6126      	str	r6, [r4, #16]
 800c682:	6165      	str	r5, [r4, #20]
 800c684:	444e      	add	r6, r9
 800c686:	eba5 0509 	sub.w	r5, r5, r9
 800c68a:	6026      	str	r6, [r4, #0]
 800c68c:	60a5      	str	r5, [r4, #8]
 800c68e:	463e      	mov	r6, r7
 800c690:	42be      	cmp	r6, r7
 800c692:	d900      	bls.n	800c696 <__ssputs_r+0x86>
 800c694:	463e      	mov	r6, r7
 800c696:	4632      	mov	r2, r6
 800c698:	6820      	ldr	r0, [r4, #0]
 800c69a:	4641      	mov	r1, r8
 800c69c:	f000 fab6 	bl	800cc0c <memmove>
 800c6a0:	68a3      	ldr	r3, [r4, #8]
 800c6a2:	6822      	ldr	r2, [r4, #0]
 800c6a4:	1b9b      	subs	r3, r3, r6
 800c6a6:	4432      	add	r2, r6
 800c6a8:	60a3      	str	r3, [r4, #8]
 800c6aa:	6022      	str	r2, [r4, #0]
 800c6ac:	2000      	movs	r0, #0
 800c6ae:	e7db      	b.n	800c668 <__ssputs_r+0x58>
 800c6b0:	462a      	mov	r2, r5
 800c6b2:	f000 fb6f 	bl	800cd94 <_realloc_r>
 800c6b6:	4606      	mov	r6, r0
 800c6b8:	2800      	cmp	r0, #0
 800c6ba:	d1e1      	bne.n	800c680 <__ssputs_r+0x70>
 800c6bc:	6921      	ldr	r1, [r4, #16]
 800c6be:	4650      	mov	r0, sl
 800c6c0:	f000 fabe 	bl	800cc40 <_free_r>
 800c6c4:	e7c7      	b.n	800c656 <__ssputs_r+0x46>
	...

0800c6c8 <_svfiprintf_r>:
 800c6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6cc:	4698      	mov	r8, r3
 800c6ce:	898b      	ldrh	r3, [r1, #12]
 800c6d0:	061b      	lsls	r3, r3, #24
 800c6d2:	b09d      	sub	sp, #116	; 0x74
 800c6d4:	4607      	mov	r7, r0
 800c6d6:	460d      	mov	r5, r1
 800c6d8:	4614      	mov	r4, r2
 800c6da:	d50e      	bpl.n	800c6fa <_svfiprintf_r+0x32>
 800c6dc:	690b      	ldr	r3, [r1, #16]
 800c6de:	b963      	cbnz	r3, 800c6fa <_svfiprintf_r+0x32>
 800c6e0:	2140      	movs	r1, #64	; 0x40
 800c6e2:	f000 fafd 	bl	800cce0 <_malloc_r>
 800c6e6:	6028      	str	r0, [r5, #0]
 800c6e8:	6128      	str	r0, [r5, #16]
 800c6ea:	b920      	cbnz	r0, 800c6f6 <_svfiprintf_r+0x2e>
 800c6ec:	230c      	movs	r3, #12
 800c6ee:	603b      	str	r3, [r7, #0]
 800c6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c6f4:	e0d1      	b.n	800c89a <_svfiprintf_r+0x1d2>
 800c6f6:	2340      	movs	r3, #64	; 0x40
 800c6f8:	616b      	str	r3, [r5, #20]
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	9309      	str	r3, [sp, #36]	; 0x24
 800c6fe:	2320      	movs	r3, #32
 800c700:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c704:	f8cd 800c 	str.w	r8, [sp, #12]
 800c708:	2330      	movs	r3, #48	; 0x30
 800c70a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c8b4 <_svfiprintf_r+0x1ec>
 800c70e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c712:	f04f 0901 	mov.w	r9, #1
 800c716:	4623      	mov	r3, r4
 800c718:	469a      	mov	sl, r3
 800c71a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c71e:	b10a      	cbz	r2, 800c724 <_svfiprintf_r+0x5c>
 800c720:	2a25      	cmp	r2, #37	; 0x25
 800c722:	d1f9      	bne.n	800c718 <_svfiprintf_r+0x50>
 800c724:	ebba 0b04 	subs.w	fp, sl, r4
 800c728:	d00b      	beq.n	800c742 <_svfiprintf_r+0x7a>
 800c72a:	465b      	mov	r3, fp
 800c72c:	4622      	mov	r2, r4
 800c72e:	4629      	mov	r1, r5
 800c730:	4638      	mov	r0, r7
 800c732:	f7ff ff6d 	bl	800c610 <__ssputs_r>
 800c736:	3001      	adds	r0, #1
 800c738:	f000 80aa 	beq.w	800c890 <_svfiprintf_r+0x1c8>
 800c73c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c73e:	445a      	add	r2, fp
 800c740:	9209      	str	r2, [sp, #36]	; 0x24
 800c742:	f89a 3000 	ldrb.w	r3, [sl]
 800c746:	2b00      	cmp	r3, #0
 800c748:	f000 80a2 	beq.w	800c890 <_svfiprintf_r+0x1c8>
 800c74c:	2300      	movs	r3, #0
 800c74e:	f04f 32ff 	mov.w	r2, #4294967295
 800c752:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c756:	f10a 0a01 	add.w	sl, sl, #1
 800c75a:	9304      	str	r3, [sp, #16]
 800c75c:	9307      	str	r3, [sp, #28]
 800c75e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c762:	931a      	str	r3, [sp, #104]	; 0x68
 800c764:	4654      	mov	r4, sl
 800c766:	2205      	movs	r2, #5
 800c768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c76c:	4851      	ldr	r0, [pc, #324]	; (800c8b4 <_svfiprintf_r+0x1ec>)
 800c76e:	f7f3 fdb7 	bl	80002e0 <memchr>
 800c772:	9a04      	ldr	r2, [sp, #16]
 800c774:	b9d8      	cbnz	r0, 800c7ae <_svfiprintf_r+0xe6>
 800c776:	06d0      	lsls	r0, r2, #27
 800c778:	bf44      	itt	mi
 800c77a:	2320      	movmi	r3, #32
 800c77c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c780:	0711      	lsls	r1, r2, #28
 800c782:	bf44      	itt	mi
 800c784:	232b      	movmi	r3, #43	; 0x2b
 800c786:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c78a:	f89a 3000 	ldrb.w	r3, [sl]
 800c78e:	2b2a      	cmp	r3, #42	; 0x2a
 800c790:	d015      	beq.n	800c7be <_svfiprintf_r+0xf6>
 800c792:	9a07      	ldr	r2, [sp, #28]
 800c794:	4654      	mov	r4, sl
 800c796:	2000      	movs	r0, #0
 800c798:	f04f 0c0a 	mov.w	ip, #10
 800c79c:	4621      	mov	r1, r4
 800c79e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7a2:	3b30      	subs	r3, #48	; 0x30
 800c7a4:	2b09      	cmp	r3, #9
 800c7a6:	d94e      	bls.n	800c846 <_svfiprintf_r+0x17e>
 800c7a8:	b1b0      	cbz	r0, 800c7d8 <_svfiprintf_r+0x110>
 800c7aa:	9207      	str	r2, [sp, #28]
 800c7ac:	e014      	b.n	800c7d8 <_svfiprintf_r+0x110>
 800c7ae:	eba0 0308 	sub.w	r3, r0, r8
 800c7b2:	fa09 f303 	lsl.w	r3, r9, r3
 800c7b6:	4313      	orrs	r3, r2
 800c7b8:	9304      	str	r3, [sp, #16]
 800c7ba:	46a2      	mov	sl, r4
 800c7bc:	e7d2      	b.n	800c764 <_svfiprintf_r+0x9c>
 800c7be:	9b03      	ldr	r3, [sp, #12]
 800c7c0:	1d19      	adds	r1, r3, #4
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	9103      	str	r1, [sp, #12]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	bfbb      	ittet	lt
 800c7ca:	425b      	neglt	r3, r3
 800c7cc:	f042 0202 	orrlt.w	r2, r2, #2
 800c7d0:	9307      	strge	r3, [sp, #28]
 800c7d2:	9307      	strlt	r3, [sp, #28]
 800c7d4:	bfb8      	it	lt
 800c7d6:	9204      	strlt	r2, [sp, #16]
 800c7d8:	7823      	ldrb	r3, [r4, #0]
 800c7da:	2b2e      	cmp	r3, #46	; 0x2e
 800c7dc:	d10c      	bne.n	800c7f8 <_svfiprintf_r+0x130>
 800c7de:	7863      	ldrb	r3, [r4, #1]
 800c7e0:	2b2a      	cmp	r3, #42	; 0x2a
 800c7e2:	d135      	bne.n	800c850 <_svfiprintf_r+0x188>
 800c7e4:	9b03      	ldr	r3, [sp, #12]
 800c7e6:	1d1a      	adds	r2, r3, #4
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	9203      	str	r2, [sp, #12]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	bfb8      	it	lt
 800c7f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7f4:	3402      	adds	r4, #2
 800c7f6:	9305      	str	r3, [sp, #20]
 800c7f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c8c4 <_svfiprintf_r+0x1fc>
 800c7fc:	7821      	ldrb	r1, [r4, #0]
 800c7fe:	2203      	movs	r2, #3
 800c800:	4650      	mov	r0, sl
 800c802:	f7f3 fd6d 	bl	80002e0 <memchr>
 800c806:	b140      	cbz	r0, 800c81a <_svfiprintf_r+0x152>
 800c808:	2340      	movs	r3, #64	; 0x40
 800c80a:	eba0 000a 	sub.w	r0, r0, sl
 800c80e:	fa03 f000 	lsl.w	r0, r3, r0
 800c812:	9b04      	ldr	r3, [sp, #16]
 800c814:	4303      	orrs	r3, r0
 800c816:	3401      	adds	r4, #1
 800c818:	9304      	str	r3, [sp, #16]
 800c81a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c81e:	4826      	ldr	r0, [pc, #152]	; (800c8b8 <_svfiprintf_r+0x1f0>)
 800c820:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c824:	2206      	movs	r2, #6
 800c826:	f7f3 fd5b 	bl	80002e0 <memchr>
 800c82a:	2800      	cmp	r0, #0
 800c82c:	d038      	beq.n	800c8a0 <_svfiprintf_r+0x1d8>
 800c82e:	4b23      	ldr	r3, [pc, #140]	; (800c8bc <_svfiprintf_r+0x1f4>)
 800c830:	bb1b      	cbnz	r3, 800c87a <_svfiprintf_r+0x1b2>
 800c832:	9b03      	ldr	r3, [sp, #12]
 800c834:	3307      	adds	r3, #7
 800c836:	f023 0307 	bic.w	r3, r3, #7
 800c83a:	3308      	adds	r3, #8
 800c83c:	9303      	str	r3, [sp, #12]
 800c83e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c840:	4433      	add	r3, r6
 800c842:	9309      	str	r3, [sp, #36]	; 0x24
 800c844:	e767      	b.n	800c716 <_svfiprintf_r+0x4e>
 800c846:	fb0c 3202 	mla	r2, ip, r2, r3
 800c84a:	460c      	mov	r4, r1
 800c84c:	2001      	movs	r0, #1
 800c84e:	e7a5      	b.n	800c79c <_svfiprintf_r+0xd4>
 800c850:	2300      	movs	r3, #0
 800c852:	3401      	adds	r4, #1
 800c854:	9305      	str	r3, [sp, #20]
 800c856:	4619      	mov	r1, r3
 800c858:	f04f 0c0a 	mov.w	ip, #10
 800c85c:	4620      	mov	r0, r4
 800c85e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c862:	3a30      	subs	r2, #48	; 0x30
 800c864:	2a09      	cmp	r2, #9
 800c866:	d903      	bls.n	800c870 <_svfiprintf_r+0x1a8>
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d0c5      	beq.n	800c7f8 <_svfiprintf_r+0x130>
 800c86c:	9105      	str	r1, [sp, #20]
 800c86e:	e7c3      	b.n	800c7f8 <_svfiprintf_r+0x130>
 800c870:	fb0c 2101 	mla	r1, ip, r1, r2
 800c874:	4604      	mov	r4, r0
 800c876:	2301      	movs	r3, #1
 800c878:	e7f0      	b.n	800c85c <_svfiprintf_r+0x194>
 800c87a:	ab03      	add	r3, sp, #12
 800c87c:	9300      	str	r3, [sp, #0]
 800c87e:	462a      	mov	r2, r5
 800c880:	4b0f      	ldr	r3, [pc, #60]	; (800c8c0 <_svfiprintf_r+0x1f8>)
 800c882:	a904      	add	r1, sp, #16
 800c884:	4638      	mov	r0, r7
 800c886:	f3af 8000 	nop.w
 800c88a:	1c42      	adds	r2, r0, #1
 800c88c:	4606      	mov	r6, r0
 800c88e:	d1d6      	bne.n	800c83e <_svfiprintf_r+0x176>
 800c890:	89ab      	ldrh	r3, [r5, #12]
 800c892:	065b      	lsls	r3, r3, #25
 800c894:	f53f af2c 	bmi.w	800c6f0 <_svfiprintf_r+0x28>
 800c898:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c89a:	b01d      	add	sp, #116	; 0x74
 800c89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8a0:	ab03      	add	r3, sp, #12
 800c8a2:	9300      	str	r3, [sp, #0]
 800c8a4:	462a      	mov	r2, r5
 800c8a6:	4b06      	ldr	r3, [pc, #24]	; (800c8c0 <_svfiprintf_r+0x1f8>)
 800c8a8:	a904      	add	r1, sp, #16
 800c8aa:	4638      	mov	r0, r7
 800c8ac:	f000 f87a 	bl	800c9a4 <_printf_i>
 800c8b0:	e7eb      	b.n	800c88a <_svfiprintf_r+0x1c2>
 800c8b2:	bf00      	nop
 800c8b4:	0800ce88 	.word	0x0800ce88
 800c8b8:	0800ce92 	.word	0x0800ce92
 800c8bc:	00000000 	.word	0x00000000
 800c8c0:	0800c611 	.word	0x0800c611
 800c8c4:	0800ce8e 	.word	0x0800ce8e

0800c8c8 <_printf_common>:
 800c8c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8cc:	4616      	mov	r6, r2
 800c8ce:	4699      	mov	r9, r3
 800c8d0:	688a      	ldr	r2, [r1, #8]
 800c8d2:	690b      	ldr	r3, [r1, #16]
 800c8d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	bfb8      	it	lt
 800c8dc:	4613      	movlt	r3, r2
 800c8de:	6033      	str	r3, [r6, #0]
 800c8e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c8e4:	4607      	mov	r7, r0
 800c8e6:	460c      	mov	r4, r1
 800c8e8:	b10a      	cbz	r2, 800c8ee <_printf_common+0x26>
 800c8ea:	3301      	adds	r3, #1
 800c8ec:	6033      	str	r3, [r6, #0]
 800c8ee:	6823      	ldr	r3, [r4, #0]
 800c8f0:	0699      	lsls	r1, r3, #26
 800c8f2:	bf42      	ittt	mi
 800c8f4:	6833      	ldrmi	r3, [r6, #0]
 800c8f6:	3302      	addmi	r3, #2
 800c8f8:	6033      	strmi	r3, [r6, #0]
 800c8fa:	6825      	ldr	r5, [r4, #0]
 800c8fc:	f015 0506 	ands.w	r5, r5, #6
 800c900:	d106      	bne.n	800c910 <_printf_common+0x48>
 800c902:	f104 0a19 	add.w	sl, r4, #25
 800c906:	68e3      	ldr	r3, [r4, #12]
 800c908:	6832      	ldr	r2, [r6, #0]
 800c90a:	1a9b      	subs	r3, r3, r2
 800c90c:	42ab      	cmp	r3, r5
 800c90e:	dc26      	bgt.n	800c95e <_printf_common+0x96>
 800c910:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c914:	1e13      	subs	r3, r2, #0
 800c916:	6822      	ldr	r2, [r4, #0]
 800c918:	bf18      	it	ne
 800c91a:	2301      	movne	r3, #1
 800c91c:	0692      	lsls	r2, r2, #26
 800c91e:	d42b      	bmi.n	800c978 <_printf_common+0xb0>
 800c920:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c924:	4649      	mov	r1, r9
 800c926:	4638      	mov	r0, r7
 800c928:	47c0      	blx	r8
 800c92a:	3001      	adds	r0, #1
 800c92c:	d01e      	beq.n	800c96c <_printf_common+0xa4>
 800c92e:	6823      	ldr	r3, [r4, #0]
 800c930:	68e5      	ldr	r5, [r4, #12]
 800c932:	6832      	ldr	r2, [r6, #0]
 800c934:	f003 0306 	and.w	r3, r3, #6
 800c938:	2b04      	cmp	r3, #4
 800c93a:	bf08      	it	eq
 800c93c:	1aad      	subeq	r5, r5, r2
 800c93e:	68a3      	ldr	r3, [r4, #8]
 800c940:	6922      	ldr	r2, [r4, #16]
 800c942:	bf0c      	ite	eq
 800c944:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c948:	2500      	movne	r5, #0
 800c94a:	4293      	cmp	r3, r2
 800c94c:	bfc4      	itt	gt
 800c94e:	1a9b      	subgt	r3, r3, r2
 800c950:	18ed      	addgt	r5, r5, r3
 800c952:	2600      	movs	r6, #0
 800c954:	341a      	adds	r4, #26
 800c956:	42b5      	cmp	r5, r6
 800c958:	d11a      	bne.n	800c990 <_printf_common+0xc8>
 800c95a:	2000      	movs	r0, #0
 800c95c:	e008      	b.n	800c970 <_printf_common+0xa8>
 800c95e:	2301      	movs	r3, #1
 800c960:	4652      	mov	r2, sl
 800c962:	4649      	mov	r1, r9
 800c964:	4638      	mov	r0, r7
 800c966:	47c0      	blx	r8
 800c968:	3001      	adds	r0, #1
 800c96a:	d103      	bne.n	800c974 <_printf_common+0xac>
 800c96c:	f04f 30ff 	mov.w	r0, #4294967295
 800c970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c974:	3501      	adds	r5, #1
 800c976:	e7c6      	b.n	800c906 <_printf_common+0x3e>
 800c978:	18e1      	adds	r1, r4, r3
 800c97a:	1c5a      	adds	r2, r3, #1
 800c97c:	2030      	movs	r0, #48	; 0x30
 800c97e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c982:	4422      	add	r2, r4
 800c984:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c988:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c98c:	3302      	adds	r3, #2
 800c98e:	e7c7      	b.n	800c920 <_printf_common+0x58>
 800c990:	2301      	movs	r3, #1
 800c992:	4622      	mov	r2, r4
 800c994:	4649      	mov	r1, r9
 800c996:	4638      	mov	r0, r7
 800c998:	47c0      	blx	r8
 800c99a:	3001      	adds	r0, #1
 800c99c:	d0e6      	beq.n	800c96c <_printf_common+0xa4>
 800c99e:	3601      	adds	r6, #1
 800c9a0:	e7d9      	b.n	800c956 <_printf_common+0x8e>
	...

0800c9a4 <_printf_i>:
 800c9a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c9a8:	460c      	mov	r4, r1
 800c9aa:	4691      	mov	r9, r2
 800c9ac:	7e27      	ldrb	r7, [r4, #24]
 800c9ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c9b0:	2f78      	cmp	r7, #120	; 0x78
 800c9b2:	4680      	mov	r8, r0
 800c9b4:	469a      	mov	sl, r3
 800c9b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c9ba:	d807      	bhi.n	800c9cc <_printf_i+0x28>
 800c9bc:	2f62      	cmp	r7, #98	; 0x62
 800c9be:	d80a      	bhi.n	800c9d6 <_printf_i+0x32>
 800c9c0:	2f00      	cmp	r7, #0
 800c9c2:	f000 80d8 	beq.w	800cb76 <_printf_i+0x1d2>
 800c9c6:	2f58      	cmp	r7, #88	; 0x58
 800c9c8:	f000 80a3 	beq.w	800cb12 <_printf_i+0x16e>
 800c9cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c9d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c9d4:	e03a      	b.n	800ca4c <_printf_i+0xa8>
 800c9d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c9da:	2b15      	cmp	r3, #21
 800c9dc:	d8f6      	bhi.n	800c9cc <_printf_i+0x28>
 800c9de:	a001      	add	r0, pc, #4	; (adr r0, 800c9e4 <_printf_i+0x40>)
 800c9e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c9e4:	0800ca3d 	.word	0x0800ca3d
 800c9e8:	0800ca51 	.word	0x0800ca51
 800c9ec:	0800c9cd 	.word	0x0800c9cd
 800c9f0:	0800c9cd 	.word	0x0800c9cd
 800c9f4:	0800c9cd 	.word	0x0800c9cd
 800c9f8:	0800c9cd 	.word	0x0800c9cd
 800c9fc:	0800ca51 	.word	0x0800ca51
 800ca00:	0800c9cd 	.word	0x0800c9cd
 800ca04:	0800c9cd 	.word	0x0800c9cd
 800ca08:	0800c9cd 	.word	0x0800c9cd
 800ca0c:	0800c9cd 	.word	0x0800c9cd
 800ca10:	0800cb5d 	.word	0x0800cb5d
 800ca14:	0800ca81 	.word	0x0800ca81
 800ca18:	0800cb3f 	.word	0x0800cb3f
 800ca1c:	0800c9cd 	.word	0x0800c9cd
 800ca20:	0800c9cd 	.word	0x0800c9cd
 800ca24:	0800cb7f 	.word	0x0800cb7f
 800ca28:	0800c9cd 	.word	0x0800c9cd
 800ca2c:	0800ca81 	.word	0x0800ca81
 800ca30:	0800c9cd 	.word	0x0800c9cd
 800ca34:	0800c9cd 	.word	0x0800c9cd
 800ca38:	0800cb47 	.word	0x0800cb47
 800ca3c:	680b      	ldr	r3, [r1, #0]
 800ca3e:	1d1a      	adds	r2, r3, #4
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	600a      	str	r2, [r1, #0]
 800ca44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ca48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	e0a3      	b.n	800cb98 <_printf_i+0x1f4>
 800ca50:	6825      	ldr	r5, [r4, #0]
 800ca52:	6808      	ldr	r0, [r1, #0]
 800ca54:	062e      	lsls	r6, r5, #24
 800ca56:	f100 0304 	add.w	r3, r0, #4
 800ca5a:	d50a      	bpl.n	800ca72 <_printf_i+0xce>
 800ca5c:	6805      	ldr	r5, [r0, #0]
 800ca5e:	600b      	str	r3, [r1, #0]
 800ca60:	2d00      	cmp	r5, #0
 800ca62:	da03      	bge.n	800ca6c <_printf_i+0xc8>
 800ca64:	232d      	movs	r3, #45	; 0x2d
 800ca66:	426d      	negs	r5, r5
 800ca68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca6c:	485e      	ldr	r0, [pc, #376]	; (800cbe8 <_printf_i+0x244>)
 800ca6e:	230a      	movs	r3, #10
 800ca70:	e019      	b.n	800caa6 <_printf_i+0x102>
 800ca72:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ca76:	6805      	ldr	r5, [r0, #0]
 800ca78:	600b      	str	r3, [r1, #0]
 800ca7a:	bf18      	it	ne
 800ca7c:	b22d      	sxthne	r5, r5
 800ca7e:	e7ef      	b.n	800ca60 <_printf_i+0xbc>
 800ca80:	680b      	ldr	r3, [r1, #0]
 800ca82:	6825      	ldr	r5, [r4, #0]
 800ca84:	1d18      	adds	r0, r3, #4
 800ca86:	6008      	str	r0, [r1, #0]
 800ca88:	0628      	lsls	r0, r5, #24
 800ca8a:	d501      	bpl.n	800ca90 <_printf_i+0xec>
 800ca8c:	681d      	ldr	r5, [r3, #0]
 800ca8e:	e002      	b.n	800ca96 <_printf_i+0xf2>
 800ca90:	0669      	lsls	r1, r5, #25
 800ca92:	d5fb      	bpl.n	800ca8c <_printf_i+0xe8>
 800ca94:	881d      	ldrh	r5, [r3, #0]
 800ca96:	4854      	ldr	r0, [pc, #336]	; (800cbe8 <_printf_i+0x244>)
 800ca98:	2f6f      	cmp	r7, #111	; 0x6f
 800ca9a:	bf0c      	ite	eq
 800ca9c:	2308      	moveq	r3, #8
 800ca9e:	230a      	movne	r3, #10
 800caa0:	2100      	movs	r1, #0
 800caa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800caa6:	6866      	ldr	r6, [r4, #4]
 800caa8:	60a6      	str	r6, [r4, #8]
 800caaa:	2e00      	cmp	r6, #0
 800caac:	bfa2      	ittt	ge
 800caae:	6821      	ldrge	r1, [r4, #0]
 800cab0:	f021 0104 	bicge.w	r1, r1, #4
 800cab4:	6021      	strge	r1, [r4, #0]
 800cab6:	b90d      	cbnz	r5, 800cabc <_printf_i+0x118>
 800cab8:	2e00      	cmp	r6, #0
 800caba:	d04d      	beq.n	800cb58 <_printf_i+0x1b4>
 800cabc:	4616      	mov	r6, r2
 800cabe:	fbb5 f1f3 	udiv	r1, r5, r3
 800cac2:	fb03 5711 	mls	r7, r3, r1, r5
 800cac6:	5dc7      	ldrb	r7, [r0, r7]
 800cac8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cacc:	462f      	mov	r7, r5
 800cace:	42bb      	cmp	r3, r7
 800cad0:	460d      	mov	r5, r1
 800cad2:	d9f4      	bls.n	800cabe <_printf_i+0x11a>
 800cad4:	2b08      	cmp	r3, #8
 800cad6:	d10b      	bne.n	800caf0 <_printf_i+0x14c>
 800cad8:	6823      	ldr	r3, [r4, #0]
 800cada:	07df      	lsls	r7, r3, #31
 800cadc:	d508      	bpl.n	800caf0 <_printf_i+0x14c>
 800cade:	6923      	ldr	r3, [r4, #16]
 800cae0:	6861      	ldr	r1, [r4, #4]
 800cae2:	4299      	cmp	r1, r3
 800cae4:	bfde      	ittt	le
 800cae6:	2330      	movle	r3, #48	; 0x30
 800cae8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800caec:	f106 36ff 	addle.w	r6, r6, #4294967295
 800caf0:	1b92      	subs	r2, r2, r6
 800caf2:	6122      	str	r2, [r4, #16]
 800caf4:	f8cd a000 	str.w	sl, [sp]
 800caf8:	464b      	mov	r3, r9
 800cafa:	aa03      	add	r2, sp, #12
 800cafc:	4621      	mov	r1, r4
 800cafe:	4640      	mov	r0, r8
 800cb00:	f7ff fee2 	bl	800c8c8 <_printf_common>
 800cb04:	3001      	adds	r0, #1
 800cb06:	d14c      	bne.n	800cba2 <_printf_i+0x1fe>
 800cb08:	f04f 30ff 	mov.w	r0, #4294967295
 800cb0c:	b004      	add	sp, #16
 800cb0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb12:	4835      	ldr	r0, [pc, #212]	; (800cbe8 <_printf_i+0x244>)
 800cb14:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cb18:	6823      	ldr	r3, [r4, #0]
 800cb1a:	680e      	ldr	r6, [r1, #0]
 800cb1c:	061f      	lsls	r7, r3, #24
 800cb1e:	f856 5b04 	ldr.w	r5, [r6], #4
 800cb22:	600e      	str	r6, [r1, #0]
 800cb24:	d514      	bpl.n	800cb50 <_printf_i+0x1ac>
 800cb26:	07d9      	lsls	r1, r3, #31
 800cb28:	bf44      	itt	mi
 800cb2a:	f043 0320 	orrmi.w	r3, r3, #32
 800cb2e:	6023      	strmi	r3, [r4, #0]
 800cb30:	b91d      	cbnz	r5, 800cb3a <_printf_i+0x196>
 800cb32:	6823      	ldr	r3, [r4, #0]
 800cb34:	f023 0320 	bic.w	r3, r3, #32
 800cb38:	6023      	str	r3, [r4, #0]
 800cb3a:	2310      	movs	r3, #16
 800cb3c:	e7b0      	b.n	800caa0 <_printf_i+0xfc>
 800cb3e:	6823      	ldr	r3, [r4, #0]
 800cb40:	f043 0320 	orr.w	r3, r3, #32
 800cb44:	6023      	str	r3, [r4, #0]
 800cb46:	2378      	movs	r3, #120	; 0x78
 800cb48:	4828      	ldr	r0, [pc, #160]	; (800cbec <_printf_i+0x248>)
 800cb4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cb4e:	e7e3      	b.n	800cb18 <_printf_i+0x174>
 800cb50:	065e      	lsls	r6, r3, #25
 800cb52:	bf48      	it	mi
 800cb54:	b2ad      	uxthmi	r5, r5
 800cb56:	e7e6      	b.n	800cb26 <_printf_i+0x182>
 800cb58:	4616      	mov	r6, r2
 800cb5a:	e7bb      	b.n	800cad4 <_printf_i+0x130>
 800cb5c:	680b      	ldr	r3, [r1, #0]
 800cb5e:	6826      	ldr	r6, [r4, #0]
 800cb60:	6960      	ldr	r0, [r4, #20]
 800cb62:	1d1d      	adds	r5, r3, #4
 800cb64:	600d      	str	r5, [r1, #0]
 800cb66:	0635      	lsls	r5, r6, #24
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	d501      	bpl.n	800cb70 <_printf_i+0x1cc>
 800cb6c:	6018      	str	r0, [r3, #0]
 800cb6e:	e002      	b.n	800cb76 <_printf_i+0x1d2>
 800cb70:	0671      	lsls	r1, r6, #25
 800cb72:	d5fb      	bpl.n	800cb6c <_printf_i+0x1c8>
 800cb74:	8018      	strh	r0, [r3, #0]
 800cb76:	2300      	movs	r3, #0
 800cb78:	6123      	str	r3, [r4, #16]
 800cb7a:	4616      	mov	r6, r2
 800cb7c:	e7ba      	b.n	800caf4 <_printf_i+0x150>
 800cb7e:	680b      	ldr	r3, [r1, #0]
 800cb80:	1d1a      	adds	r2, r3, #4
 800cb82:	600a      	str	r2, [r1, #0]
 800cb84:	681e      	ldr	r6, [r3, #0]
 800cb86:	6862      	ldr	r2, [r4, #4]
 800cb88:	2100      	movs	r1, #0
 800cb8a:	4630      	mov	r0, r6
 800cb8c:	f7f3 fba8 	bl	80002e0 <memchr>
 800cb90:	b108      	cbz	r0, 800cb96 <_printf_i+0x1f2>
 800cb92:	1b80      	subs	r0, r0, r6
 800cb94:	6060      	str	r0, [r4, #4]
 800cb96:	6863      	ldr	r3, [r4, #4]
 800cb98:	6123      	str	r3, [r4, #16]
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cba0:	e7a8      	b.n	800caf4 <_printf_i+0x150>
 800cba2:	6923      	ldr	r3, [r4, #16]
 800cba4:	4632      	mov	r2, r6
 800cba6:	4649      	mov	r1, r9
 800cba8:	4640      	mov	r0, r8
 800cbaa:	47d0      	blx	sl
 800cbac:	3001      	adds	r0, #1
 800cbae:	d0ab      	beq.n	800cb08 <_printf_i+0x164>
 800cbb0:	6823      	ldr	r3, [r4, #0]
 800cbb2:	079b      	lsls	r3, r3, #30
 800cbb4:	d413      	bmi.n	800cbde <_printf_i+0x23a>
 800cbb6:	68e0      	ldr	r0, [r4, #12]
 800cbb8:	9b03      	ldr	r3, [sp, #12]
 800cbba:	4298      	cmp	r0, r3
 800cbbc:	bfb8      	it	lt
 800cbbe:	4618      	movlt	r0, r3
 800cbc0:	e7a4      	b.n	800cb0c <_printf_i+0x168>
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	4632      	mov	r2, r6
 800cbc6:	4649      	mov	r1, r9
 800cbc8:	4640      	mov	r0, r8
 800cbca:	47d0      	blx	sl
 800cbcc:	3001      	adds	r0, #1
 800cbce:	d09b      	beq.n	800cb08 <_printf_i+0x164>
 800cbd0:	3501      	adds	r5, #1
 800cbd2:	68e3      	ldr	r3, [r4, #12]
 800cbd4:	9903      	ldr	r1, [sp, #12]
 800cbd6:	1a5b      	subs	r3, r3, r1
 800cbd8:	42ab      	cmp	r3, r5
 800cbda:	dcf2      	bgt.n	800cbc2 <_printf_i+0x21e>
 800cbdc:	e7eb      	b.n	800cbb6 <_printf_i+0x212>
 800cbde:	2500      	movs	r5, #0
 800cbe0:	f104 0619 	add.w	r6, r4, #25
 800cbe4:	e7f5      	b.n	800cbd2 <_printf_i+0x22e>
 800cbe6:	bf00      	nop
 800cbe8:	0800ce99 	.word	0x0800ce99
 800cbec:	0800ceaa 	.word	0x0800ceaa

0800cbf0 <memcpy>:
 800cbf0:	440a      	add	r2, r1
 800cbf2:	4291      	cmp	r1, r2
 800cbf4:	f100 33ff 	add.w	r3, r0, #4294967295
 800cbf8:	d100      	bne.n	800cbfc <memcpy+0xc>
 800cbfa:	4770      	bx	lr
 800cbfc:	b510      	push	{r4, lr}
 800cbfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc06:	4291      	cmp	r1, r2
 800cc08:	d1f9      	bne.n	800cbfe <memcpy+0xe>
 800cc0a:	bd10      	pop	{r4, pc}

0800cc0c <memmove>:
 800cc0c:	4288      	cmp	r0, r1
 800cc0e:	b510      	push	{r4, lr}
 800cc10:	eb01 0402 	add.w	r4, r1, r2
 800cc14:	d902      	bls.n	800cc1c <memmove+0x10>
 800cc16:	4284      	cmp	r4, r0
 800cc18:	4623      	mov	r3, r4
 800cc1a:	d807      	bhi.n	800cc2c <memmove+0x20>
 800cc1c:	1e43      	subs	r3, r0, #1
 800cc1e:	42a1      	cmp	r1, r4
 800cc20:	d008      	beq.n	800cc34 <memmove+0x28>
 800cc22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc26:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc2a:	e7f8      	b.n	800cc1e <memmove+0x12>
 800cc2c:	4402      	add	r2, r0
 800cc2e:	4601      	mov	r1, r0
 800cc30:	428a      	cmp	r2, r1
 800cc32:	d100      	bne.n	800cc36 <memmove+0x2a>
 800cc34:	bd10      	pop	{r4, pc}
 800cc36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc3e:	e7f7      	b.n	800cc30 <memmove+0x24>

0800cc40 <_free_r>:
 800cc40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc42:	2900      	cmp	r1, #0
 800cc44:	d048      	beq.n	800ccd8 <_free_r+0x98>
 800cc46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc4a:	9001      	str	r0, [sp, #4]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	f1a1 0404 	sub.w	r4, r1, #4
 800cc52:	bfb8      	it	lt
 800cc54:	18e4      	addlt	r4, r4, r3
 800cc56:	f000 f8d3 	bl	800ce00 <__malloc_lock>
 800cc5a:	4a20      	ldr	r2, [pc, #128]	; (800ccdc <_free_r+0x9c>)
 800cc5c:	9801      	ldr	r0, [sp, #4]
 800cc5e:	6813      	ldr	r3, [r2, #0]
 800cc60:	4615      	mov	r5, r2
 800cc62:	b933      	cbnz	r3, 800cc72 <_free_r+0x32>
 800cc64:	6063      	str	r3, [r4, #4]
 800cc66:	6014      	str	r4, [r2, #0]
 800cc68:	b003      	add	sp, #12
 800cc6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc6e:	f000 b8cd 	b.w	800ce0c <__malloc_unlock>
 800cc72:	42a3      	cmp	r3, r4
 800cc74:	d90b      	bls.n	800cc8e <_free_r+0x4e>
 800cc76:	6821      	ldr	r1, [r4, #0]
 800cc78:	1862      	adds	r2, r4, r1
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	bf04      	itt	eq
 800cc7e:	681a      	ldreq	r2, [r3, #0]
 800cc80:	685b      	ldreq	r3, [r3, #4]
 800cc82:	6063      	str	r3, [r4, #4]
 800cc84:	bf04      	itt	eq
 800cc86:	1852      	addeq	r2, r2, r1
 800cc88:	6022      	streq	r2, [r4, #0]
 800cc8a:	602c      	str	r4, [r5, #0]
 800cc8c:	e7ec      	b.n	800cc68 <_free_r+0x28>
 800cc8e:	461a      	mov	r2, r3
 800cc90:	685b      	ldr	r3, [r3, #4]
 800cc92:	b10b      	cbz	r3, 800cc98 <_free_r+0x58>
 800cc94:	42a3      	cmp	r3, r4
 800cc96:	d9fa      	bls.n	800cc8e <_free_r+0x4e>
 800cc98:	6811      	ldr	r1, [r2, #0]
 800cc9a:	1855      	adds	r5, r2, r1
 800cc9c:	42a5      	cmp	r5, r4
 800cc9e:	d10b      	bne.n	800ccb8 <_free_r+0x78>
 800cca0:	6824      	ldr	r4, [r4, #0]
 800cca2:	4421      	add	r1, r4
 800cca4:	1854      	adds	r4, r2, r1
 800cca6:	42a3      	cmp	r3, r4
 800cca8:	6011      	str	r1, [r2, #0]
 800ccaa:	d1dd      	bne.n	800cc68 <_free_r+0x28>
 800ccac:	681c      	ldr	r4, [r3, #0]
 800ccae:	685b      	ldr	r3, [r3, #4]
 800ccb0:	6053      	str	r3, [r2, #4]
 800ccb2:	4421      	add	r1, r4
 800ccb4:	6011      	str	r1, [r2, #0]
 800ccb6:	e7d7      	b.n	800cc68 <_free_r+0x28>
 800ccb8:	d902      	bls.n	800ccc0 <_free_r+0x80>
 800ccba:	230c      	movs	r3, #12
 800ccbc:	6003      	str	r3, [r0, #0]
 800ccbe:	e7d3      	b.n	800cc68 <_free_r+0x28>
 800ccc0:	6825      	ldr	r5, [r4, #0]
 800ccc2:	1961      	adds	r1, r4, r5
 800ccc4:	428b      	cmp	r3, r1
 800ccc6:	bf04      	itt	eq
 800ccc8:	6819      	ldreq	r1, [r3, #0]
 800ccca:	685b      	ldreq	r3, [r3, #4]
 800cccc:	6063      	str	r3, [r4, #4]
 800ccce:	bf04      	itt	eq
 800ccd0:	1949      	addeq	r1, r1, r5
 800ccd2:	6021      	streq	r1, [r4, #0]
 800ccd4:	6054      	str	r4, [r2, #4]
 800ccd6:	e7c7      	b.n	800cc68 <_free_r+0x28>
 800ccd8:	b003      	add	sp, #12
 800ccda:	bd30      	pop	{r4, r5, pc}
 800ccdc:	24052720 	.word	0x24052720

0800cce0 <_malloc_r>:
 800cce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cce2:	1ccd      	adds	r5, r1, #3
 800cce4:	f025 0503 	bic.w	r5, r5, #3
 800cce8:	3508      	adds	r5, #8
 800ccea:	2d0c      	cmp	r5, #12
 800ccec:	bf38      	it	cc
 800ccee:	250c      	movcc	r5, #12
 800ccf0:	2d00      	cmp	r5, #0
 800ccf2:	4606      	mov	r6, r0
 800ccf4:	db01      	blt.n	800ccfa <_malloc_r+0x1a>
 800ccf6:	42a9      	cmp	r1, r5
 800ccf8:	d903      	bls.n	800cd02 <_malloc_r+0x22>
 800ccfa:	230c      	movs	r3, #12
 800ccfc:	6033      	str	r3, [r6, #0]
 800ccfe:	2000      	movs	r0, #0
 800cd00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd02:	f000 f87d 	bl	800ce00 <__malloc_lock>
 800cd06:	4921      	ldr	r1, [pc, #132]	; (800cd8c <_malloc_r+0xac>)
 800cd08:	680a      	ldr	r2, [r1, #0]
 800cd0a:	4614      	mov	r4, r2
 800cd0c:	b99c      	cbnz	r4, 800cd36 <_malloc_r+0x56>
 800cd0e:	4f20      	ldr	r7, [pc, #128]	; (800cd90 <_malloc_r+0xb0>)
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	b923      	cbnz	r3, 800cd1e <_malloc_r+0x3e>
 800cd14:	4621      	mov	r1, r4
 800cd16:	4630      	mov	r0, r6
 800cd18:	f000 f862 	bl	800cde0 <_sbrk_r>
 800cd1c:	6038      	str	r0, [r7, #0]
 800cd1e:	4629      	mov	r1, r5
 800cd20:	4630      	mov	r0, r6
 800cd22:	f000 f85d 	bl	800cde0 <_sbrk_r>
 800cd26:	1c43      	adds	r3, r0, #1
 800cd28:	d123      	bne.n	800cd72 <_malloc_r+0x92>
 800cd2a:	230c      	movs	r3, #12
 800cd2c:	6033      	str	r3, [r6, #0]
 800cd2e:	4630      	mov	r0, r6
 800cd30:	f000 f86c 	bl	800ce0c <__malloc_unlock>
 800cd34:	e7e3      	b.n	800ccfe <_malloc_r+0x1e>
 800cd36:	6823      	ldr	r3, [r4, #0]
 800cd38:	1b5b      	subs	r3, r3, r5
 800cd3a:	d417      	bmi.n	800cd6c <_malloc_r+0x8c>
 800cd3c:	2b0b      	cmp	r3, #11
 800cd3e:	d903      	bls.n	800cd48 <_malloc_r+0x68>
 800cd40:	6023      	str	r3, [r4, #0]
 800cd42:	441c      	add	r4, r3
 800cd44:	6025      	str	r5, [r4, #0]
 800cd46:	e004      	b.n	800cd52 <_malloc_r+0x72>
 800cd48:	6863      	ldr	r3, [r4, #4]
 800cd4a:	42a2      	cmp	r2, r4
 800cd4c:	bf0c      	ite	eq
 800cd4e:	600b      	streq	r3, [r1, #0]
 800cd50:	6053      	strne	r3, [r2, #4]
 800cd52:	4630      	mov	r0, r6
 800cd54:	f000 f85a 	bl	800ce0c <__malloc_unlock>
 800cd58:	f104 000b 	add.w	r0, r4, #11
 800cd5c:	1d23      	adds	r3, r4, #4
 800cd5e:	f020 0007 	bic.w	r0, r0, #7
 800cd62:	1ac2      	subs	r2, r0, r3
 800cd64:	d0cc      	beq.n	800cd00 <_malloc_r+0x20>
 800cd66:	1a1b      	subs	r3, r3, r0
 800cd68:	50a3      	str	r3, [r4, r2]
 800cd6a:	e7c9      	b.n	800cd00 <_malloc_r+0x20>
 800cd6c:	4622      	mov	r2, r4
 800cd6e:	6864      	ldr	r4, [r4, #4]
 800cd70:	e7cc      	b.n	800cd0c <_malloc_r+0x2c>
 800cd72:	1cc4      	adds	r4, r0, #3
 800cd74:	f024 0403 	bic.w	r4, r4, #3
 800cd78:	42a0      	cmp	r0, r4
 800cd7a:	d0e3      	beq.n	800cd44 <_malloc_r+0x64>
 800cd7c:	1a21      	subs	r1, r4, r0
 800cd7e:	4630      	mov	r0, r6
 800cd80:	f000 f82e 	bl	800cde0 <_sbrk_r>
 800cd84:	3001      	adds	r0, #1
 800cd86:	d1dd      	bne.n	800cd44 <_malloc_r+0x64>
 800cd88:	e7cf      	b.n	800cd2a <_malloc_r+0x4a>
 800cd8a:	bf00      	nop
 800cd8c:	24052720 	.word	0x24052720
 800cd90:	24052724 	.word	0x24052724

0800cd94 <_realloc_r>:
 800cd94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd96:	4607      	mov	r7, r0
 800cd98:	4614      	mov	r4, r2
 800cd9a:	460e      	mov	r6, r1
 800cd9c:	b921      	cbnz	r1, 800cda8 <_realloc_r+0x14>
 800cd9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cda2:	4611      	mov	r1, r2
 800cda4:	f7ff bf9c 	b.w	800cce0 <_malloc_r>
 800cda8:	b922      	cbnz	r2, 800cdb4 <_realloc_r+0x20>
 800cdaa:	f7ff ff49 	bl	800cc40 <_free_r>
 800cdae:	4625      	mov	r5, r4
 800cdb0:	4628      	mov	r0, r5
 800cdb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdb4:	f000 f830 	bl	800ce18 <_malloc_usable_size_r>
 800cdb8:	42a0      	cmp	r0, r4
 800cdba:	d20f      	bcs.n	800cddc <_realloc_r+0x48>
 800cdbc:	4621      	mov	r1, r4
 800cdbe:	4638      	mov	r0, r7
 800cdc0:	f7ff ff8e 	bl	800cce0 <_malloc_r>
 800cdc4:	4605      	mov	r5, r0
 800cdc6:	2800      	cmp	r0, #0
 800cdc8:	d0f2      	beq.n	800cdb0 <_realloc_r+0x1c>
 800cdca:	4631      	mov	r1, r6
 800cdcc:	4622      	mov	r2, r4
 800cdce:	f7ff ff0f 	bl	800cbf0 <memcpy>
 800cdd2:	4631      	mov	r1, r6
 800cdd4:	4638      	mov	r0, r7
 800cdd6:	f7ff ff33 	bl	800cc40 <_free_r>
 800cdda:	e7e9      	b.n	800cdb0 <_realloc_r+0x1c>
 800cddc:	4635      	mov	r5, r6
 800cdde:	e7e7      	b.n	800cdb0 <_realloc_r+0x1c>

0800cde0 <_sbrk_r>:
 800cde0:	b538      	push	{r3, r4, r5, lr}
 800cde2:	4d06      	ldr	r5, [pc, #24]	; (800cdfc <_sbrk_r+0x1c>)
 800cde4:	2300      	movs	r3, #0
 800cde6:	4604      	mov	r4, r0
 800cde8:	4608      	mov	r0, r1
 800cdea:	602b      	str	r3, [r5, #0]
 800cdec:	f7f6 fb2c 	bl	8003448 <_sbrk>
 800cdf0:	1c43      	adds	r3, r0, #1
 800cdf2:	d102      	bne.n	800cdfa <_sbrk_r+0x1a>
 800cdf4:	682b      	ldr	r3, [r5, #0]
 800cdf6:	b103      	cbz	r3, 800cdfa <_sbrk_r+0x1a>
 800cdf8:	6023      	str	r3, [r4, #0]
 800cdfa:	bd38      	pop	{r3, r4, r5, pc}
 800cdfc:	24052e64 	.word	0x24052e64

0800ce00 <__malloc_lock>:
 800ce00:	4801      	ldr	r0, [pc, #4]	; (800ce08 <__malloc_lock+0x8>)
 800ce02:	f000 b811 	b.w	800ce28 <__retarget_lock_acquire_recursive>
 800ce06:	bf00      	nop
 800ce08:	24052e6c 	.word	0x24052e6c

0800ce0c <__malloc_unlock>:
 800ce0c:	4801      	ldr	r0, [pc, #4]	; (800ce14 <__malloc_unlock+0x8>)
 800ce0e:	f000 b80c 	b.w	800ce2a <__retarget_lock_release_recursive>
 800ce12:	bf00      	nop
 800ce14:	24052e6c 	.word	0x24052e6c

0800ce18 <_malloc_usable_size_r>:
 800ce18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce1c:	1f18      	subs	r0, r3, #4
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	bfbc      	itt	lt
 800ce22:	580b      	ldrlt	r3, [r1, r0]
 800ce24:	18c0      	addlt	r0, r0, r3
 800ce26:	4770      	bx	lr

0800ce28 <__retarget_lock_acquire_recursive>:
 800ce28:	4770      	bx	lr

0800ce2a <__retarget_lock_release_recursive>:
 800ce2a:	4770      	bx	lr

0800ce2c <_init>:
 800ce2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce2e:	bf00      	nop
 800ce30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce32:	bc08      	pop	{r3}
 800ce34:	469e      	mov	lr, r3
 800ce36:	4770      	bx	lr

0800ce38 <_fini>:
 800ce38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce3a:	bf00      	nop
 800ce3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce3e:	bc08      	pop	{r3}
 800ce40:	469e      	mov	lr, r3
 800ce42:	4770      	bx	lr
