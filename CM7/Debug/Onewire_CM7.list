
Onewire_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ccf4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800cf94  0800cf94  0001cf94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d00c  0800d00c  00067cc8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d00c  0800d00c  0001d00c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d014  0800d014  00067cc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d014  0800d014  0001d014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d018  0800d018  0001d018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00047c08  24000000  0800d01c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24047c08  08054c24  00067c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24047c68  08054c84  00067c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000c878  24047cc8  08054ce4  00067cc8  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  24054540  08054ce4  00074540  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00067cc8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00030749  00000000  00000000  00067cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000042a5  00000000  00000000  0009843f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018a8  00000000  00000000  0009c6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001770  00000000  00000000  0009df90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003c957  00000000  00000000  0009f700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020d00  00000000  00000000  000dc057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001913c2  00000000  00000000  000fcd57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  0028e119  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006ec8  00000000  00000000  0028e16c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24047cc8 	.word	0x24047cc8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800cf7c 	.word	0x0800cf7c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24047ccc 	.word	0x24047ccc
 80002dc:	0800cf7c 	.word	0x0800cf7c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b98e 	b.w	80006b4 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f826 	bl	80003f0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_d2ulz>:
 80003b0:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80003e0 <__aeabi_d2ulz+0x30>
 80003b4:	ec41 0b17 	vmov	d7, r0, r1
 80003b8:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80003e8 <__aeabi_d2ulz+0x38>
 80003bc:	ee27 6b06 	vmul.f64	d6, d7, d6
 80003c0:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80003c4:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80003c8:	eea4 7b45 	vfms.f64	d7, d4, d5
 80003cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80003d0:	ee16 1a10 	vmov	r1, s12
 80003d4:	ee17 0a90 	vmov	r0, s15
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	f3af 8000 	nop.w
 80003e0:	00000000 	.word	0x00000000
 80003e4:	3df00000 	.word	0x3df00000
 80003e8:	00000000 	.word	0x00000000
 80003ec:	41f00000 	.word	0x41f00000

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006bc:	4b3f      	ldr	r3, [pc, #252]	; (80007bc <SystemInit+0x104>)
 80006be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006c2:	4a3e      	ldr	r2, [pc, #248]	; (80007bc <SystemInit+0x104>)
 80006c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006cc:	4b3b      	ldr	r3, [pc, #236]	; (80007bc <SystemInit+0x104>)
 80006ce:	691b      	ldr	r3, [r3, #16]
 80006d0:	4a3a      	ldr	r2, [pc, #232]	; (80007bc <SystemInit+0x104>)
 80006d2:	f043 0310 	orr.w	r3, r3, #16
 80006d6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d8:	4b39      	ldr	r3, [pc, #228]	; (80007c0 <SystemInit+0x108>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f003 030f 	and.w	r3, r3, #15
 80006e0:	2b06      	cmp	r3, #6
 80006e2:	d807      	bhi.n	80006f4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e4:	4b36      	ldr	r3, [pc, #216]	; (80007c0 <SystemInit+0x108>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f023 030f 	bic.w	r3, r3, #15
 80006ec:	4a34      	ldr	r2, [pc, #208]	; (80007c0 <SystemInit+0x108>)
 80006ee:	f043 0307 	orr.w	r3, r3, #7
 80006f2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006f4:	4b33      	ldr	r3, [pc, #204]	; (80007c4 <SystemInit+0x10c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a32      	ldr	r2, [pc, #200]	; (80007c4 <SystemInit+0x10c>)
 80006fa:	f043 0301 	orr.w	r3, r3, #1
 80006fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000700:	4b30      	ldr	r3, [pc, #192]	; (80007c4 <SystemInit+0x10c>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000706:	4b2f      	ldr	r3, [pc, #188]	; (80007c4 <SystemInit+0x10c>)
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	492e      	ldr	r1, [pc, #184]	; (80007c4 <SystemInit+0x10c>)
 800070c:	4b2e      	ldr	r3, [pc, #184]	; (80007c8 <SystemInit+0x110>)
 800070e:	4013      	ands	r3, r2
 8000710:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000712:	4b2b      	ldr	r3, [pc, #172]	; (80007c0 <SystemInit+0x108>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f003 0308 	and.w	r3, r3, #8
 800071a:	2b00      	cmp	r3, #0
 800071c:	d007      	beq.n	800072e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800071e:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <SystemInit+0x108>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f023 030f 	bic.w	r3, r3, #15
 8000726:	4a26      	ldr	r2, [pc, #152]	; (80007c0 <SystemInit+0x108>)
 8000728:	f043 0307 	orr.w	r3, r3, #7
 800072c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800072e:	4b25      	ldr	r3, [pc, #148]	; (80007c4 <SystemInit+0x10c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000734:	4b23      	ldr	r3, [pc, #140]	; (80007c4 <SystemInit+0x10c>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800073a:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <SystemInit+0x10c>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000740:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <SystemInit+0x10c>)
 8000742:	4a22      	ldr	r2, [pc, #136]	; (80007cc <SystemInit+0x114>)
 8000744:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000746:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <SystemInit+0x10c>)
 8000748:	4a21      	ldr	r2, [pc, #132]	; (80007d0 <SystemInit+0x118>)
 800074a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800074c:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <SystemInit+0x10c>)
 800074e:	4a21      	ldr	r2, [pc, #132]	; (80007d4 <SystemInit+0x11c>)
 8000750:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000752:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <SystemInit+0x10c>)
 8000754:	2200      	movs	r2, #0
 8000756:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000758:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <SystemInit+0x10c>)
 800075a:	4a1e      	ldr	r2, [pc, #120]	; (80007d4 <SystemInit+0x11c>)
 800075c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800075e:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <SystemInit+0x10c>)
 8000760:	2200      	movs	r2, #0
 8000762:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000764:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <SystemInit+0x10c>)
 8000766:	4a1b      	ldr	r2, [pc, #108]	; (80007d4 <SystemInit+0x11c>)
 8000768:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800076a:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <SystemInit+0x10c>)
 800076c:	2200      	movs	r2, #0
 800076e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <SystemInit+0x10c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a13      	ldr	r2, [pc, #76]	; (80007c4 <SystemInit+0x10c>)
 8000776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800077a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <SystemInit+0x10c>)
 800077e:	2200      	movs	r2, #0
 8000780:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <SystemInit+0x120>)
 8000784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000786:	4a14      	ldr	r2, [pc, #80]	; (80007d8 <SystemInit+0x120>)
 8000788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800078c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800078e:	4b13      	ldr	r3, [pc, #76]	; (80007dc <SystemInit+0x124>)
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <SystemInit+0x128>)
 8000794:	4013      	ands	r3, r2
 8000796:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800079a:	d202      	bcs.n	80007a2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <SystemInit+0x12c>)
 800079e:	2201      	movs	r2, #1
 80007a0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <SystemInit+0x130>)
 80007a4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80007a8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80007aa:	4b04      	ldr	r3, [pc, #16]	; (80007bc <SystemInit+0x104>)
 80007ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007b0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80007b2:	bf00      	nop
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	e000ed00 	.word	0xe000ed00
 80007c0:	52002000 	.word	0x52002000
 80007c4:	58024400 	.word	0x58024400
 80007c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80007cc:	02020200 	.word	0x02020200
 80007d0:	01ff0000 	.word	0x01ff0000
 80007d4:	01010280 	.word	0x01010280
 80007d8:	580000c0 	.word	0x580000c0
 80007dc:	5c001000 	.word	0x5c001000
 80007e0:	ffff0000 	.word	0xffff0000
 80007e4:	51008108 	.word	0x51008108
 80007e8:	52004000 	.word	0x52004000

080007ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007f6:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007f8:	bf00      	nop
 80007fa:	4b36      	ldr	r3, [pc, #216]	; (80008d4 <main+0xe8>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000802:	2b00      	cmp	r3, #0
 8000804:	d004      	beq.n	8000810 <main+0x24>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	1e5a      	subs	r2, r3, #1
 800080a:	607a      	str	r2, [r7, #4]
 800080c:	2b00      	cmp	r3, #0
 800080e:	dcf4      	bgt.n	80007fa <main+0xe>
  if ( timeout < 0 )
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	da01      	bge.n	800081a <main+0x2e>
  {
  Error_Handler();
 8000816:	f002 fb33 	bl	8002e80 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081a:	f002 ff1d 	bl	8003658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081e:	f000 f865 	bl	80008ec <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000822:	4b2c      	ldr	r3, [pc, #176]	; (80008d4 <main+0xe8>)
 8000824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000828:	4a2a      	ldr	r2, [pc, #168]	; (80008d4 <main+0xe8>)
 800082a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800082e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000832:	4b28      	ldr	r3, [pc, #160]	; (80008d4 <main+0xe8>)
 8000834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000840:	2000      	movs	r0, #0
 8000842:	f006 fa0f 	bl	8006c64 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000846:	2100      	movs	r1, #0
 8000848:	2000      	movs	r0, #0
 800084a:	f006 fa25 	bl	8006c98 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800084e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000852:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000854:	bf00      	nop
 8000856:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <main+0xe8>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800085e:	2b00      	cmp	r3, #0
 8000860:	d104      	bne.n	800086c <main+0x80>
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	1e5a      	subs	r2, r3, #1
 8000866:	607a      	str	r2, [r7, #4]
 8000868:	2b00      	cmp	r3, #0
 800086a:	dcf4      	bgt.n	8000856 <main+0x6a>
if ( timeout < 0 )
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b00      	cmp	r3, #0
 8000870:	da01      	bge.n	8000876 <main+0x8a>
{
Error_Handler();
 8000872:	f002 fb05 	bl	8002e80 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000876:	f000 fb3b 	bl	8000ef0 <MX_GPIO_Init>
  MX_ETH_Init();
 800087a:	f000 f8bd 	bl	80009f8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800087e:	f000 fa99 	bl	8000db4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000882:	f000 fae3 	bl	8000e4c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8000886:	f000 f9a9 	bl	8000bdc <MX_TIM3_Init>
  MX_TIM5_Init();
 800088a:	f000 f9f5 	bl	8000c78 <MX_TIM5_Init>
  MX_DMA_Init();
 800088e:	f000 fb0f 	bl	8000eb0 <MX_DMA_Init>
  MX_SPI1_Init();
 8000892:	f000 f8fd 	bl	8000a90 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000896:	f000 f953 	bl	8000b40 <MX_TIM2_Init>
  MX_TIM15_Init();
 800089a:	f000 fa3b 	bl	8000d14 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */


  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 1);
 800089e:	2201      	movs	r2, #1
 80008a0:	2102      	movs	r1, #2
 80008a2:	480d      	ldr	r0, [pc, #52]	; (80008d8 <main+0xec>)
 80008a4:	f006 f9c4 	bl	8006c30 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim3);
 80008a8:	480c      	ldr	r0, [pc, #48]	; (80008dc <main+0xf0>)
 80008aa:	f009 feff 	bl	800a6ac <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 80008ae:	480c      	ldr	r0, [pc, #48]	; (80008e0 <main+0xf4>)
 80008b0:	f009 fefc 	bl	800a6ac <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim15);
 80008b4:	480b      	ldr	r0, [pc, #44]	; (80008e4 <main+0xf8>)
 80008b6:	f009 fef9 	bl	800a6ac <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80008ba:	480b      	ldr	r0, [pc, #44]	; (80008e8 <main+0xfc>)
 80008bc:	f009 fef6 	bl	800a6ac <HAL_TIM_Base_Start_IT>

  LCD_init();
 80008c0:	f000 fd2a 	bl	8001318 <LCD_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		requestT();
 80008c4:	f000 fc26 	bl	8001114 <requestT>
		get_value();
 80008c8:	f000 fc46 	bl	8001158 <get_value>
		Update_check_Value();
 80008cc:	f000 fc68 	bl	80011a0 <Update_check_Value>
		requestT();
 80008d0:	e7f8      	b.n	80008c4 <main+0xd8>
 80008d2:	bf00      	nop
 80008d4:	58024400 	.word	0x58024400
 80008d8:	58020c00 	.word	0x58020c00
 80008dc:	240542d8 	.word	0x240542d8
 80008e0:	2405428c 	.word	0x2405428c
 80008e4:	24053e38 	.word	0x24053e38
 80008e8:	240543ac 	.word	0x240543ac

080008ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b09c      	sub	sp, #112	; 0x70
 80008f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f6:	224c      	movs	r2, #76	; 0x4c
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f00b ff08 	bl	800c710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	2220      	movs	r2, #32
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f00b ff02 	bl	800c710 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800090c:	2004      	movs	r0, #4
 800090e:	f006 fb1f 	bl	8006f50 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000912:	2300      	movs	r3, #0
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	4b35      	ldr	r3, [pc, #212]	; (80009ec <SystemClock_Config+0x100>)
 8000918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800091a:	4a34      	ldr	r2, [pc, #208]	; (80009ec <SystemClock_Config+0x100>)
 800091c:	f023 0301 	bic.w	r3, r3, #1
 8000920:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000922:	4b32      	ldr	r3, [pc, #200]	; (80009ec <SystemClock_Config+0x100>)
 8000924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	4b30      	ldr	r3, [pc, #192]	; (80009f0 <SystemClock_Config+0x104>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000934:	4a2e      	ldr	r2, [pc, #184]	; (80009f0 <SystemClock_Config+0x104>)
 8000936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b2c      	ldr	r3, [pc, #176]	; (80009f0 <SystemClock_Config+0x104>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000948:	bf00      	nop
 800094a:	4b29      	ldr	r3, [pc, #164]	; (80009f0 <SystemClock_Config+0x104>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000956:	d1f8      	bne.n	800094a <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000958:	4b26      	ldr	r3, [pc, #152]	; (80009f4 <SystemClock_Config+0x108>)
 800095a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800095c:	f023 0303 	bic.w	r3, r3, #3
 8000960:	4a24      	ldr	r2, [pc, #144]	; (80009f4 <SystemClock_Config+0x108>)
 8000962:	f043 0302 	orr.w	r3, r3, #2
 8000966:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000968:	2301      	movs	r3, #1
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800096c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000972:	2302      	movs	r3, #2
 8000974:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000976:	2302      	movs	r3, #2
 8000978:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800097a:	2301      	movs	r3, #1
 800097c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 800097e:	2319      	movs	r3, #25
 8000980:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000982:	2302      	movs	r3, #2
 8000984:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000986:	2302      	movs	r3, #2
 8000988:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800098a:	2302      	movs	r3, #2
 800098c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800098e:	230c      	movs	r3, #12
 8000990:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000992:	2300      	movs	r3, #0
 8000994:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099e:	4618      	mov	r0, r3
 80009a0:	f006 fb40 	bl	8007024 <HAL_RCC_OscConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009aa:	f002 fa69 	bl	8002e80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ae:	233f      	movs	r3, #63	; 0x3f
 80009b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b2:	2303      	movs	r3, #3
 80009b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009be:	2340      	movs	r3, #64	; 0x40
 80009c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009c2:	2340      	movs	r3, #64	; 0x40
 80009c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009cc:	2340      	movs	r3, #64	; 0x40
 80009ce:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2102      	movs	r1, #2
 80009d4:	4618      	mov	r0, r3
 80009d6:	f006 ff51 	bl	800787c <HAL_RCC_ClockConfig>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80009e0:	f002 fa4e 	bl	8002e80 <Error_Handler>
  }
}
 80009e4:	bf00      	nop
 80009e6:	3770      	adds	r7, #112	; 0x70
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	58000400 	.word	0x58000400
 80009f0:	58024800 	.word	0x58024800
 80009f4:	58024400 	.word	0x58024400

080009f8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009fc:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <MX_ETH_Init+0x80>)
 80009fe:	4a1f      	ldr	r2, [pc, #124]	; (8000a7c <MX_ETH_Init+0x84>)
 8000a00:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a02:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <MX_ETH_Init+0x88>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a08:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <MX_ETH_Init+0x88>)
 8000a0a:	2280      	movs	r2, #128	; 0x80
 8000a0c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <MX_ETH_Init+0x88>)
 8000a10:	22e1      	movs	r2, #225	; 0xe1
 8000a12:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a14:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <MX_ETH_Init+0x88>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a1a:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <MX_ETH_Init+0x88>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a20:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <MX_ETH_Init+0x88>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_ETH_Init+0x80>)
 8000a28:	4a15      	ldr	r2, [pc, #84]	; (8000a80 <MX_ETH_Init+0x88>)
 8000a2a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <MX_ETH_Init+0x80>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_ETH_Init+0x80>)
 8000a34:	4a13      	ldr	r2, [pc, #76]	; (8000a84 <MX_ETH_Init+0x8c>)
 8000a36:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <MX_ETH_Init+0x80>)
 8000a3a:	4a13      	ldr	r2, [pc, #76]	; (8000a88 <MX_ETH_Init+0x90>)
 8000a3c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_ETH_Init+0x80>)
 8000a40:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a44:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a46:	480c      	ldr	r0, [pc, #48]	; (8000a78 <MX_ETH_Init+0x80>)
 8000a48:	f005 fb14 	bl	8006074 <HAL_ETH_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000a52:	f002 fa15 	bl	8002e80 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a56:	2234      	movs	r2, #52	; 0x34
 8000a58:	2100      	movs	r1, #0
 8000a5a:	480c      	ldr	r0, [pc, #48]	; (8000a8c <MX_ETH_Init+0x94>)
 8000a5c:	f00b fe58 	bl	800c710 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a60:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <MX_ETH_Init+0x94>)
 8000a62:	2221      	movs	r2, #33	; 0x21
 8000a64:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_ETH_Init+0x94>)
 8000a68:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a6c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a6e:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <MX_ETH_Init+0x94>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	240543f8 	.word	0x240543f8
 8000a7c:	40028000 	.word	0x40028000
 8000a80:	24053d94 	.word	0x24053d94
 8000a84:	24047c68 	.word	0x24047c68
 8000a88:	24047c08 	.word	0x24047c08
 8000a8c:	24054480 	.word	0x24054480

08000a90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a94:	4b28      	ldr	r3, [pc, #160]	; (8000b38 <MX_SPI1_Init+0xa8>)
 8000a96:	4a29      	ldr	r2, [pc, #164]	; (8000b3c <MX_SPI1_Init+0xac>)
 8000a98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a9a:	4b27      	ldr	r3, [pc, #156]	; (8000b38 <MX_SPI1_Init+0xa8>)
 8000a9c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000aa0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000aa2:	4b25      	ldr	r3, [pc, #148]	; (8000b38 <MX_SPI1_Init+0xa8>)
 8000aa4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000aa8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aaa:	4b23      	ldr	r3, [pc, #140]	; (8000b38 <MX_SPI1_Init+0xa8>)
 8000aac:	2207      	movs	r2, #7
 8000aae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ab0:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <MX_SPI1_Init+0xa8>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ab6:	4b20      	ldr	r3, [pc, #128]	; (8000b38 <MX_SPI1_Init+0xa8>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000abc:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <MX_SPI1_Init+0xa8>)
 8000abe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000ac2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ac4:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <MX_SPI1_Init+0xa8>)
 8000ac6:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000aca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000acc:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <MX_SPI1_Init+0xa8>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ad2:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <MX_SPI1_Init+0xa8>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ad8:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <MX_SPI1_Init+0xa8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000ade:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <MX_SPI1_Init+0xa8>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ae4:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <MX_SPI1_Init+0xa8>)
 8000ae6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aea:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <MX_SPI1_Init+0xa8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_SPI1_Init+0xa8>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_SPI1_Init+0xa8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_SPI1_Init+0xa8>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <MX_SPI1_Init+0xa8>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <MX_SPI1_Init+0xa8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_SPI1_Init+0xa8>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <MX_SPI1_Init+0xa8>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_SPI1_Init+0xa8>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_SPI1_Init+0xa8>)
 8000b24:	f008 fd98 	bl	8009658 <HAL_SPI_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000b2e:	f002 f9a7 	bl	8002e80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	24054324 	.word	0x24054324
 8000b3c:	40013000 	.word	0x40013000

08000b40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b46:	f107 0310 	add.w	r3, r7, #16
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b5e:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <MX_TIM2_Init+0x94>)
 8000b60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000b66:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <MX_TIM2_Init+0x94>)
 8000b68:	2263      	movs	r2, #99	; 0x63
 8000b6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6c:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <MX_TIM2_Init+0x94>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999999;
 8000b72:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <MX_TIM2_Init+0x94>)
 8000b74:	4a18      	ldr	r2, [pc, #96]	; (8000bd8 <MX_TIM2_Init+0x98>)
 8000b76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b78:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <MX_TIM2_Init+0x94>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <MX_TIM2_Init+0x94>)
 8000b80:	2280      	movs	r2, #128	; 0x80
 8000b82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b84:	4813      	ldr	r0, [pc, #76]	; (8000bd4 <MX_TIM2_Init+0x94>)
 8000b86:	f009 fd12 	bl	800a5ae <HAL_TIM_Base_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b90:	f002 f976 	bl	8002e80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b9a:	f107 0310 	add.w	r3, r7, #16
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <MX_TIM2_Init+0x94>)
 8000ba2:	f009 ff1b 	bl	800a9dc <HAL_TIM_ConfigClockSource>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000bac:	f002 f968 	bl	8002e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_TIM2_Init+0x94>)
 8000bbe:	f00a f965 	bl	800ae8c <HAL_TIMEx_MasterConfigSynchronization>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000bc8:	f002 f95a 	bl	8002e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	3720      	adds	r7, #32
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	240543ac 	.word	0x240543ac
 8000bd8:	0098967f 	.word	0x0098967f

08000bdc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be2:	f107 0310 	add.w	r3, r7, #16
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <MX_TIM3_Init+0x94>)
 8000bfc:	4a1d      	ldr	r2, [pc, #116]	; (8000c74 <MX_TIM3_Init+0x98>)
 8000bfe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8000c00:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <MX_TIM3_Init+0x94>)
 8000c02:	2263      	movs	r2, #99	; 0x63
 8000c04:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c06:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <MX_TIM3_Init+0x94>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000c0c:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <MX_TIM3_Init+0x94>)
 8000c0e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c14:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <MX_TIM3_Init+0x94>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <MX_TIM3_Init+0x94>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c20:	4813      	ldr	r0, [pc, #76]	; (8000c70 <MX_TIM3_Init+0x94>)
 8000c22:	f009 fcc4 	bl	800a5ae <HAL_TIM_Base_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000c2c:	f002 f928 	bl	8002e80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c36:	f107 0310 	add.w	r3, r7, #16
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480c      	ldr	r0, [pc, #48]	; (8000c70 <MX_TIM3_Init+0x94>)
 8000c3e:	f009 fecd 	bl	800a9dc <HAL_TIM_ConfigClockSource>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000c48:	f002 f91a 	bl	8002e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_TIM3_Init+0x94>)
 8000c5a:	f00a f917 	bl	800ae8c <HAL_TIMEx_MasterConfigSynchronization>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000c64:	f002 f90c 	bl	8002e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	3720      	adds	r7, #32
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	240542d8 	.word	0x240542d8
 8000c74:	40000400 	.word	0x40000400

08000c78 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c7e:	f107 0310 	add.w	r3, r7, #16
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c96:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <MX_TIM5_Init+0x94>)
 8000c98:	4a1d      	ldr	r2, [pc, #116]	; (8000d10 <MX_TIM5_Init+0x98>)
 8000c9a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <MX_TIM5_Init+0x94>)
 8000c9e:	2263      	movs	r2, #99	; 0x63
 8000ca0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <MX_TIM5_Init+0x94>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000ca8:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <MX_TIM5_Init+0x94>)
 8000caa:	f04f 32ff 	mov.w	r2, #4294967295
 8000cae:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb0:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <MX_TIM5_Init+0x94>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <MX_TIM5_Init+0x94>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000cbc:	4813      	ldr	r0, [pc, #76]	; (8000d0c <MX_TIM5_Init+0x94>)
 8000cbe:	f009 fc76 	bl	800a5ae <HAL_TIM_Base_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000cc8:	f002 f8da 	bl	8002e80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000cd2:	f107 0310 	add.w	r3, r7, #16
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	480c      	ldr	r0, [pc, #48]	; (8000d0c <MX_TIM5_Init+0x94>)
 8000cda:	f009 fe7f 	bl	800a9dc <HAL_TIM_ConfigClockSource>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000ce4:	f002 f8cc 	bl	8002e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	; (8000d0c <MX_TIM5_Init+0x94>)
 8000cf6:	f00a f8c9 	bl	800ae8c <HAL_TIMEx_MasterConfigSynchronization>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000d00:	f002 f8be 	bl	8002e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000d04:	bf00      	nop
 8000d06:	3720      	adds	r7, #32
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	2405428c 	.word	0x2405428c
 8000d10:	40000c00 	.word	0x40000c00

08000d14 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d1a:	f107 0310 	add.w	r3, r7, #16
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000d32:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <MX_TIM15_Init+0x98>)
 8000d34:	4a1e      	ldr	r2, [pc, #120]	; (8000db0 <MX_TIM15_Init+0x9c>)
 8000d36:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 99;
 8000d38:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <MX_TIM15_Init+0x98>)
 8000d3a:	2263      	movs	r2, #99	; 0x63
 8000d3c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3e:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <MX_TIM15_Init+0x98>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 40;
 8000d44:	4b19      	ldr	r3, [pc, #100]	; (8000dac <MX_TIM15_Init+0x98>)
 8000d46:	2228      	movs	r2, #40	; 0x28
 8000d48:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4a:	4b18      	ldr	r3, [pc, #96]	; (8000dac <MX_TIM15_Init+0x98>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000d50:	4b16      	ldr	r3, [pc, #88]	; (8000dac <MX_TIM15_Init+0x98>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <MX_TIM15_Init+0x98>)
 8000d58:	2280      	movs	r2, #128	; 0x80
 8000d5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000d5c:	4813      	ldr	r0, [pc, #76]	; (8000dac <MX_TIM15_Init+0x98>)
 8000d5e:	f009 fc26 	bl	800a5ae <HAL_TIM_Base_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8000d68:	f002 f88a 	bl	8002e80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000d72:	f107 0310 	add.w	r3, r7, #16
 8000d76:	4619      	mov	r1, r3
 8000d78:	480c      	ldr	r0, [pc, #48]	; (8000dac <MX_TIM15_Init+0x98>)
 8000d7a:	f009 fe2f 	bl	800a9dc <HAL_TIM_ConfigClockSource>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8000d84:	f002 f87c 	bl	8002e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_TIM15_Init+0x98>)
 8000d96:	f00a f879 	bl	800ae8c <HAL_TIMEx_MasterConfigSynchronization>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8000da0:	f002 f86e 	bl	8002e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000da4:	bf00      	nop
 8000da6:	3720      	adds	r7, #32
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	24053e38 	.word	0x24053e38
 8000db0:	40014000 	.word	0x40014000

08000db4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000db8:	4b22      	ldr	r3, [pc, #136]	; (8000e44 <MX_USART3_UART_Init+0x90>)
 8000dba:	4a23      	ldr	r2, [pc, #140]	; (8000e48 <MX_USART3_UART_Init+0x94>)
 8000dbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dbe:	4b21      	ldr	r3, [pc, #132]	; (8000e44 <MX_USART3_UART_Init+0x90>)
 8000dc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc6:	4b1f      	ldr	r3, [pc, #124]	; (8000e44 <MX_USART3_UART_Init+0x90>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dcc:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <MX_USART3_UART_Init+0x90>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <MX_USART3_UART_Init+0x90>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dd8:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <MX_USART3_UART_Init+0x90>)
 8000dda:	220c      	movs	r2, #12
 8000ddc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dde:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <MX_USART3_UART_Init+0x90>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de4:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <MX_USART3_UART_Init+0x90>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dea:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <MX_USART3_UART_Init+0x90>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000df0:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <MX_USART3_UART_Init+0x90>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000df6:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <MX_USART3_UART_Init+0x90>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dfc:	4811      	ldr	r0, [pc, #68]	; (8000e44 <MX_USART3_UART_Init+0x90>)
 8000dfe:	f00a f8f1 	bl	800afe4 <HAL_UART_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e08:	f002 f83a 	bl	8002e80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	480d      	ldr	r0, [pc, #52]	; (8000e44 <MX_USART3_UART_Init+0x90>)
 8000e10:	f00b f886 	bl	800bf20 <HAL_UARTEx_SetTxFifoThreshold>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e1a:	f002 f831 	bl	8002e80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4808      	ldr	r0, [pc, #32]	; (8000e44 <MX_USART3_UART_Init+0x90>)
 8000e22:	f00b f8bb 	bl	800bf9c <HAL_UARTEx_SetRxFifoThreshold>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e2c:	f002 f828 	bl	8002e80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e30:	4804      	ldr	r0, [pc, #16]	; (8000e44 <MX_USART3_UART_Init+0x90>)
 8000e32:	f00b f83c 	bl	800beae <HAL_UARTEx_DisableFifoMode>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e3c:	f002 f820 	bl	8002e80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	24053da8 	.word	0x24053da8
 8000e48:	40004800 	.word	0x40004800

08000e4c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e50:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e52:	4a16      	ldr	r2, [pc, #88]	; (8000eac <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000e54:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000e56:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e58:	2209      	movs	r2, #9
 8000e5a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e5e:	2202      	movs	r2, #2
 8000e60:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e62:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e68:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e86:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e92:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e94:	f005 ff14 	bl	8006cc0 <HAL_PCD_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000e9e:	f001 ffef 	bl	8002e80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	24053e84 	.word	0x24053e84
 8000eac:	40080000 	.word	0x40080000

08000eb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <MX_DMA_Init+0x3c>)
 8000eb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ebc:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <MX_DMA_Init+0x3c>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <MX_DMA_Init+0x3c>)
 8000ec8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	200b      	movs	r0, #11
 8000eda:	f002 fd6e 	bl	80039ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ede:	200b      	movs	r0, #11
 8000ee0:	f002 fd85 	bl	80039ee <HAL_NVIC_EnableIRQ>

}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	58024400 	.word	0x58024400

08000ef0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08c      	sub	sp, #48	; 0x30
 8000ef4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f06:	4b4d      	ldr	r3, [pc, #308]	; (800103c <MX_GPIO_Init+0x14c>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0c:	4a4b      	ldr	r2, [pc, #300]	; (800103c <MX_GPIO_Init+0x14c>)
 8000f0e:	f043 0304 	orr.w	r3, r3, #4
 8000f12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f16:	4b49      	ldr	r3, [pc, #292]	; (800103c <MX_GPIO_Init+0x14c>)
 8000f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1c:	f003 0304 	and.w	r3, r3, #4
 8000f20:	61bb      	str	r3, [r7, #24]
 8000f22:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f24:	4b45      	ldr	r3, [pc, #276]	; (800103c <MX_GPIO_Init+0x14c>)
 8000f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2a:	4a44      	ldr	r2, [pc, #272]	; (800103c <MX_GPIO_Init+0x14c>)
 8000f2c:	f043 0320 	orr.w	r3, r3, #32
 8000f30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f34:	4b41      	ldr	r3, [pc, #260]	; (800103c <MX_GPIO_Init+0x14c>)
 8000f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3a:	f003 0320 	and.w	r3, r3, #32
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f42:	4b3e      	ldr	r3, [pc, #248]	; (800103c <MX_GPIO_Init+0x14c>)
 8000f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f48:	4a3c      	ldr	r2, [pc, #240]	; (800103c <MX_GPIO_Init+0x14c>)
 8000f4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f52:	4b3a      	ldr	r3, [pc, #232]	; (800103c <MX_GPIO_Init+0x14c>)
 8000f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f60:	4b36      	ldr	r3, [pc, #216]	; (800103c <MX_GPIO_Init+0x14c>)
 8000f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f66:	4a35      	ldr	r2, [pc, #212]	; (800103c <MX_GPIO_Init+0x14c>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f70:	4b32      	ldr	r3, [pc, #200]	; (800103c <MX_GPIO_Init+0x14c>)
 8000f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	4b2f      	ldr	r3, [pc, #188]	; (800103c <MX_GPIO_Init+0x14c>)
 8000f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f84:	4a2d      	ldr	r2, [pc, #180]	; (800103c <MX_GPIO_Init+0x14c>)
 8000f86:	f043 0302 	orr.w	r3, r3, #2
 8000f8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f8e:	4b2b      	ldr	r3, [pc, #172]	; (800103c <MX_GPIO_Init+0x14c>)
 8000f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f9c:	4b27      	ldr	r3, [pc, #156]	; (800103c <MX_GPIO_Init+0x14c>)
 8000f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa2:	4a26      	ldr	r2, [pc, #152]	; (800103c <MX_GPIO_Init+0x14c>)
 8000fa4:	f043 0308 	orr.w	r3, r3, #8
 8000fa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fac:	4b23      	ldr	r3, [pc, #140]	; (800103c <MX_GPIO_Init+0x14c>)
 8000fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb2:	f003 0308 	and.w	r3, r3, #8
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fba:	4b20      	ldr	r3, [pc, #128]	; (800103c <MX_GPIO_Init+0x14c>)
 8000fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc0:	4a1e      	ldr	r2, [pc, #120]	; (800103c <MX_GPIO_Init+0x14c>)
 8000fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fca:	4b1c      	ldr	r3, [pc, #112]	; (800103c <MX_GPIO_Init+0x14c>)
 8000fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fd4:	603b      	str	r3, [r7, #0]
 8000fd6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2180      	movs	r1, #128	; 0x80
 8000fdc:	4818      	ldr	r0, [pc, #96]	; (8001040 <MX_GPIO_Init+0x150>)
 8000fde:	f005 fe27 	bl	8006c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_SET);
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fe8:	4815      	ldr	r0, [pc, #84]	; (8001040 <MX_GPIO_Init+0x150>)
 8000fea:	f005 fe21 	bl	8006c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	2102      	movs	r1, #2
 8000ff2:	4814      	ldr	r0, [pc, #80]	; (8001044 <MX_GPIO_Init+0x154>)
 8000ff4:	f005 fe1c 	bl	8006c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF7 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000ff8:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000ffc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffe:	2301      	movs	r3, #1
 8001000:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	4619      	mov	r1, r3
 8001010:	480b      	ldr	r0, [pc, #44]	; (8001040 <MX_GPIO_Init+0x150>)
 8001012:	f005 fc45 	bl	80068a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001016:	2302      	movs	r3, #2
 8001018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800101a:	2311      	movs	r3, #17
 800101c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001022:	2303      	movs	r3, #3
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	4619      	mov	r1, r3
 800102c:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_GPIO_Init+0x154>)
 800102e:	f005 fc37 	bl	80068a0 <HAL_GPIO_Init>

}
 8001032:	bf00      	nop
 8001034:	3730      	adds	r7, #48	; 0x30
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	58024400 	.word	0x58024400
 8001040:	58021400 	.word	0x58021400
 8001044:	58020c00 	.word	0x58020c00

08001048 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a27      	ldr	r2, [pc, #156]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d10c      	bne.n	8001074 <HAL_TIM_PeriodElapsedCallback+0x2c>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 1);
 800105a:	2201      	movs	r2, #1
 800105c:	2102      	movs	r1, #2
 800105e:	4826      	ldr	r0, [pc, #152]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001060:	f005 fde6 	bl	8006c30 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop(&htim3);
 8001064:	4823      	ldr	r0, [pc, #140]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001066:	f009 faf9 	bl	800a65c <HAL_TIM_Base_Stop>
		htim3.Instance->CNT=0;
 800106a:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2200      	movs	r2, #0
 8001070:	625a      	str	r2, [r3, #36]	; 0x24
		htim15.Instance->CNT=0;
	}else if(htim==&htim2){
		flag=1;
	}

}
 8001072:	e039      	b.n	80010e8 <HAL_TIM_PeriodElapsedCallback+0xa0>
	}else if(htim== &htim5){
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a21      	ldr	r2, [pc, #132]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d10a      	bne.n	8001092 <HAL_TIM_PeriodElapsedCallback+0x4a>
		_micross=_micross+4294967295;
 800107c:	4b20      	ldr	r3, [pc, #128]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800107e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001082:	f112 38ff 	adds.w	r8, r2, #4294967295
 8001086:	f143 0900 	adc.w	r9, r3, #0
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800108c:	e9c3 8900 	strd	r8, r9, [r3]
}
 8001090:	e02a      	b.n	80010e8 <HAL_TIM_PeriodElapsedCallback+0xa0>
	}else if(htim==&htim15){
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a1b      	ldr	r2, [pc, #108]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d11f      	bne.n	80010da <HAL_TIM_PeriodElapsedCallback+0x92>
		value=(value<<1)|HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
 800109a:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	eb12 0a02 	adds.w	sl, r2, r2
 80010a4:	eb43 0b03 	adc.w	fp, r3, r3
 80010a8:	46d0      	mov	r8, sl
 80010aa:	46d9      	mov	r9, fp
 80010ac:	2102      	movs	r1, #2
 80010ae:	4812      	ldr	r0, [pc, #72]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80010b0:	f005 fda6 	bl	8006c00 <HAL_GPIO_ReadPin>
 80010b4:	4603      	mov	r3, r0
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	f04f 0300 	mov.w	r3, #0
 80010bc:	ea48 0402 	orr.w	r4, r8, r2
 80010c0:	ea49 0503 	orr.w	r5, r9, r3
 80010c4:	4b10      	ldr	r3, [pc, #64]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80010c6:	e9c3 4500 	strd	r4, r5, [r3]
		HAL_TIM_Base_Stop(&htim15);
 80010ca:	480e      	ldr	r0, [pc, #56]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80010cc:	f009 fac6 	bl	800a65c <HAL_TIM_Base_Stop>
		htim15.Instance->CNT=0;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2200      	movs	r2, #0
 80010d6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80010d8:	e006      	b.n	80010e8 <HAL_TIM_PeriodElapsedCallback+0xa0>
	}else if(htim==&htim2){
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a0b      	ldr	r2, [pc, #44]	; (800110c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d102      	bne.n	80010e8 <HAL_TIM_PeriodElapsedCallback+0xa0>
		flag=1;
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80010f2:	bf00      	nop
 80010f4:	240542d8 	.word	0x240542d8
 80010f8:	58020c00 	.word	0x58020c00
 80010fc:	2405428c 	.word	0x2405428c
 8001100:	24047cf8 	.word	0x24047cf8
 8001104:	24053e38 	.word	0x24053e38
 8001108:	24047ce8 	.word	0x24047ce8
 800110c:	240543ac 	.word	0x240543ac
 8001110:	24047ce4 	.word	0x24047ce4

08001114 <requestT>:





void requestT(){
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	if(flag){
 8001118:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <requestT+0x34>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d011      	beq.n	8001144 <requestT+0x30>
		value=0;
 8001120:	490a      	ldr	r1, [pc, #40]	; (800114c <requestT+0x38>)
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	f04f 0300 	mov.w	r3, #0
 800112a:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2102      	movs	r1, #2
 8001132:	4807      	ldr	r0, [pc, #28]	; (8001150 <requestT+0x3c>)
 8001134:	f005 fd7c 	bl	8006c30 <HAL_GPIO_WritePin>
//		htim3.Instance->CNT=0;
		HAL_TIM_Base_Start_IT(&htim3);
 8001138:	4806      	ldr	r0, [pc, #24]	; (8001154 <requestT+0x40>)
 800113a:	f009 fab7 	bl	800a6ac <HAL_TIM_Base_Start_IT>
		flag=0;
 800113e:	4b02      	ldr	r3, [pc, #8]	; (8001148 <requestT+0x34>)
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
	}
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	24047ce4 	.word	0x24047ce4
 800114c:	24047ce8 	.word	0x24047ce8
 8001150:	58020c00 	.word	0x58020c00
 8001154:	240542d8 	.word	0x240542d8

08001158 <get_value>:

void get_value(){
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	now=HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
 800115c:	2102      	movs	r1, #2
 800115e:	480c      	ldr	r0, [pc, #48]	; (8001190 <get_value+0x38>)
 8001160:	f005 fd4e 	bl	8006c00 <HAL_GPIO_ReadPin>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <get_value+0x3c>)
 800116a:	701a      	strb	r2, [r3, #0]
	if(pre==0 && now==1){
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <get_value+0x40>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d106      	bne.n	8001182 <get_value+0x2a>
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <get_value+0x3c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d102      	bne.n	8001182 <get_value+0x2a>
//	  startT=micross();
//	  htim15.Instance->CNT=0;
	  HAL_TIM_Base_Start_IT(&htim15);
 800117c:	4807      	ldr	r0, [pc, #28]	; (800119c <get_value+0x44>)
 800117e:	f009 fa95 	bl	800a6ac <HAL_TIM_Base_Start_IT>
//	  flagT=1;
	}
	pre=now;
 8001182:	4b04      	ldr	r3, [pc, #16]	; (8001194 <get_value+0x3c>)
 8001184:	781a      	ldrb	r2, [r3, #0]
 8001186:	4b04      	ldr	r3, [pc, #16]	; (8001198 <get_value+0x40>)
 8001188:	701a      	strb	r2, [r3, #0]
//	if(micross()-startT >=35 && flagT==1){
//	  value=(value<<1)|HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
//	  flagT=0;
//	}
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	58020c00 	.word	0x58020c00
 8001194:	24000008 	.word	0x24000008
 8001198:	24047cf0 	.word	0x24047cf0
 800119c:	24053e38 	.word	0x24053e38

080011a0 <Update_check_Value>:
uint16_t temp=0;
uint8_t sum=0;
uint8_t realsum=0;
float realtemp=0;
float realhumidity=0;
void Update_check_Value(){
 80011a0:	b5b0      	push	{r4, r5, r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	if(value>=0b100000000000000000000000000000000000000000){
 80011a4:	4954      	ldr	r1, [pc, #336]	; (80012f8 <Update_check_Value+0x158>)
 80011a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011aa:	f04f 34ff 	mov.w	r4, #4294967295
 80011ae:	f240 15ff 	movw	r5, #511	; 0x1ff
 80011b2:	428d      	cmp	r5, r1
 80011b4:	bf08      	it	eq
 80011b6:	4284      	cmpeq	r4, r0
 80011b8:	f080 809c 	bcs.w	80012f4 <Update_check_Value+0x154>
		value=value&0b01111111111111111111111111111111111111110;
 80011bc:	494e      	ldr	r1, [pc, #312]	; (80012f8 <Update_check_Value+0x158>)
 80011be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011c2:	f06f 0401 	mvn.w	r4, #1
 80011c6:	f04f 05ff 	mov.w	r5, #255	; 0xff
 80011ca:	ea00 0204 	and.w	r2, r0, r4
 80011ce:	ea01 0305 	and.w	r3, r1, r5
 80011d2:	4949      	ldr	r1, [pc, #292]	; (80012f8 <Update_check_Value+0x158>)
 80011d4:	e9c1 2300 	strd	r2, r3, [r1]
		value=value>>1;
 80011d8:	4b47      	ldr	r3, [pc, #284]	; (80012f8 <Update_check_Value+0x158>)
 80011da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	f04f 0300 	mov.w	r3, #0
 80011e6:	0842      	lsrs	r2, r0, #1
 80011e8:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80011ec:	084b      	lsrs	r3, r1, #1
 80011ee:	4942      	ldr	r1, [pc, #264]	; (80012f8 <Update_check_Value+0x158>)
 80011f0:	e9c1 2300 	strd	r2, r3, [r1]
		sum=value&0b11111111;
 80011f4:	4b40      	ldr	r3, [pc, #256]	; (80012f8 <Update_check_Value+0x158>)
 80011f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	4b3f      	ldr	r3, [pc, #252]	; (80012fc <Update_check_Value+0x15c>)
 80011fe:	701a      	strb	r2, [r3, #0]
		temp=(value>>8)&0b1111111111111111;
 8001200:	4b3d      	ldr	r3, [pc, #244]	; (80012f8 <Update_check_Value+0x158>)
 8001202:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	f04f 0300 	mov.w	r3, #0
 800120e:	0a02      	lsrs	r2, r0, #8
 8001210:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001214:	0a0b      	lsrs	r3, r1, #8
 8001216:	b292      	uxth	r2, r2
 8001218:	4b39      	ldr	r3, [pc, #228]	; (8001300 <Update_check_Value+0x160>)
 800121a:	801a      	strh	r2, [r3, #0]
		humidity=(value>>24)&0b1111111111111111;
 800121c:	4b36      	ldr	r3, [pc, #216]	; (80012f8 <Update_check_Value+0x158>)
 800121e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	f04f 0300 	mov.w	r3, #0
 800122a:	0e02      	lsrs	r2, r0, #24
 800122c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001230:	0e0b      	lsrs	r3, r1, #24
 8001232:	b292      	uxth	r2, r2
 8001234:	4b33      	ldr	r3, [pc, #204]	; (8001304 <Update_check_Value+0x164>)
 8001236:	801a      	strh	r2, [r3, #0]
		value=0;
 8001238:	492f      	ldr	r1, [pc, #188]	; (80012f8 <Update_check_Value+0x158>)
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	f04f 0300 	mov.w	r3, #0
 8001242:	e9c1 2300 	strd	r2, r3, [r1]
		//check sum
		realsum=((humidity>>8)&0b11111111) + (humidity&0b11111111) +((temp>>8)&0b11111111) + (temp&0b11111111);
 8001246:	4b2f      	ldr	r3, [pc, #188]	; (8001304 <Update_check_Value+0x164>)
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	0a1b      	lsrs	r3, r3, #8
 800124c:	b29b      	uxth	r3, r3
 800124e:	b2da      	uxtb	r2, r3
 8001250:	4b2c      	ldr	r3, [pc, #176]	; (8001304 <Update_check_Value+0x164>)
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	4413      	add	r3, r2
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4b29      	ldr	r3, [pc, #164]	; (8001300 <Update_check_Value+0x160>)
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	0a1b      	lsrs	r3, r3, #8
 8001260:	b29b      	uxth	r3, r3
 8001262:	b2db      	uxtb	r3, r3
 8001264:	4413      	add	r3, r2
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b25      	ldr	r3, [pc, #148]	; (8001300 <Update_check_Value+0x160>)
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	b2db      	uxtb	r3, r3
 800126e:	4413      	add	r3, r2
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4b25      	ldr	r3, [pc, #148]	; (8001308 <Update_check_Value+0x168>)
 8001274:	701a      	strb	r2, [r3, #0]
		if(sum!=realsum){
 8001276:	4b21      	ldr	r3, [pc, #132]	; (80012fc <Update_check_Value+0x15c>)
 8001278:	781a      	ldrb	r2, [r3, #0]
 800127a:	4b23      	ldr	r3, [pc, #140]	; (8001308 <Update_check_Value+0x168>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	429a      	cmp	r2, r3
 8001280:	d003      	beq.n	800128a <Update_check_Value+0xea>
			flag=1;  //request again
 8001282:	4b22      	ldr	r3, [pc, #136]	; (800130c <Update_check_Value+0x16c>)
 8001284:	2201      	movs	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]
				realtemp=temp/(10.00);//update value
			}
			Updatescreen();
		}
	}
}
 8001288:	e034      	b.n	80012f4 <Update_check_Value+0x154>
			realhumidity=humidity/10.0;//update value
 800128a:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <Update_check_Value+0x164>)
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	ee07 3a90 	vmov	s15, r3
 8001292:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001296:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800129a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800129e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012a2:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <Update_check_Value+0x170>)
 80012a4:	edc3 7a00 	vstr	s15, [r3]
			if(temp>0b1000000000000000){
 80012a8:	4b15      	ldr	r3, [pc, #84]	; (8001300 <Update_check_Value+0x160>)
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012b0:	d90f      	bls.n	80012d2 <Update_check_Value+0x132>
				realtemp=temp/(-10.00); //update value
 80012b2:	4b13      	ldr	r3, [pc, #76]	; (8001300 <Update_check_Value+0x160>)
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	ee07 3a90 	vmov	s15, r3
 80012ba:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80012be:	eeba 5b04 	vmov.f64	d5, #164	; 0xc1200000 -10.0
 80012c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012ca:	4b12      	ldr	r3, [pc, #72]	; (8001314 <Update_check_Value+0x174>)
 80012cc:	edc3 7a00 	vstr	s15, [r3]
 80012d0:	e00e      	b.n	80012f0 <Update_check_Value+0x150>
				realtemp=temp/(10.00);//update value
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <Update_check_Value+0x160>)
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	ee07 3a90 	vmov	s15, r3
 80012da:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80012de:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80012e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012ea:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <Update_check_Value+0x174>)
 80012ec:	edc3 7a00 	vstr	s15, [r3]
			Updatescreen();
 80012f0:	f001 fda0 	bl	8002e34 <Updatescreen>
}
 80012f4:	bf00      	nop
 80012f6:	bdb0      	pop	{r4, r5, r7, pc}
 80012f8:	24047ce8 	.word	0x24047ce8
 80012fc:	24053d84 	.word	0x24053d84
 8001300:	24053d82 	.word	0x24053d82
 8001304:	24053d80 	.word	0x24053d80
 8001308:	24053d85 	.word	0x24053d85
 800130c:	24047ce4 	.word	0x24047ce4
 8001310:	24053d8c 	.word	0x24053d8c
 8001314:	24053d88 	.word	0x24053d88

08001318 <LCD_init>:





void LCD_init(){
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0


	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,0);	//ss pin
 800131c:	2200      	movs	r2, #0
 800131e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001322:	482f      	ldr	r0, [pc, #188]	; (80013e0 <LCD_init+0xc8>)
 8001324:	f005 fc84 	bl	8006c30 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,0);
 8001328:	2200      	movs	r2, #0
 800132a:	2180      	movs	r1, #128	; 0x80
 800132c:	482c      	ldr	r0, [pc, #176]	; (80013e0 <LCD_init+0xc8>)
 800132e:	f005 fc7f 	bl	8006c30 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, LCDsetup, 4, 1000);
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	2204      	movs	r2, #4
 8001338:	492a      	ldr	r1, [pc, #168]	; (80013e4 <LCD_init+0xcc>)
 800133a:	482b      	ldr	r0, [pc, #172]	; (80013e8 <LCD_init+0xd0>)
 800133c:	f008 fa92 	bl	8009864 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,1);
 8001340:	2201      	movs	r2, #1
 8001342:	2180      	movs	r1, #128	; 0x80
 8001344:	4826      	ldr	r0, [pc, #152]	; (80013e0 <LCD_init+0xc8>)
 8001346:	f005 fc73 	bl	8006c30 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &LCDsetup[4], 1, 1000);
 800134a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134e:	2201      	movs	r2, #1
 8001350:	4926      	ldr	r1, [pc, #152]	; (80013ec <LCD_init+0xd4>)
 8001352:	4825      	ldr	r0, [pc, #148]	; (80013e8 <LCD_init+0xd0>)
 8001354:	f008 fa86 	bl	8009864 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,0);
 8001358:	2200      	movs	r2, #0
 800135a:	2180      	movs	r1, #128	; 0x80
 800135c:	4820      	ldr	r0, [pc, #128]	; (80013e0 <LCD_init+0xc8>)
 800135e:	f005 fc67 	bl	8006c30 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &LCDsetup[5], 1, 1000);
 8001362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001366:	2201      	movs	r2, #1
 8001368:	4921      	ldr	r1, [pc, #132]	; (80013f0 <LCD_init+0xd8>)
 800136a:	481f      	ldr	r0, [pc, #124]	; (80013e8 <LCD_init+0xd0>)
 800136c:	f008 fa7a 	bl	8009864 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,1);
 8001370:	2201      	movs	r2, #1
 8001372:	2180      	movs	r1, #128	; 0x80
 8001374:	481a      	ldr	r0, [pc, #104]	; (80013e0 <LCD_init+0xc8>)
 8001376:	f005 fc5b 	bl	8006c30 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &LCDsetup[6], 4, 1000);
 800137a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137e:	2204      	movs	r2, #4
 8001380:	491c      	ldr	r1, [pc, #112]	; (80013f4 <LCD_init+0xdc>)
 8001382:	4819      	ldr	r0, [pc, #100]	; (80013e8 <LCD_init+0xd0>)
 8001384:	f008 fa6e 	bl	8009864 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,0);
 8001388:	2200      	movs	r2, #0
 800138a:	2180      	movs	r1, #128	; 0x80
 800138c:	4814      	ldr	r0, [pc, #80]	; (80013e0 <LCD_init+0xc8>)
 800138e:	f005 fc4f 	bl	8006c30 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &LCDsetup[10], 1, 1000);
 8001392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001396:	2201      	movs	r2, #1
 8001398:	4917      	ldr	r1, [pc, #92]	; (80013f8 <LCD_init+0xe0>)
 800139a:	4813      	ldr	r0, [pc, #76]	; (80013e8 <LCD_init+0xd0>)
 800139c:	f008 fa62 	bl	8009864 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,1);
 80013a0:	2201      	movs	r2, #1
 80013a2:	2180      	movs	r1, #128	; 0x80
 80013a4:	480e      	ldr	r0, [pc, #56]	; (80013e0 <LCD_init+0xc8>)
 80013a6:	f005 fc43 	bl	8006c30 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &LCDsetup[11], 4, 1000);
 80013aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ae:	2204      	movs	r2, #4
 80013b0:	4912      	ldr	r1, [pc, #72]	; (80013fc <LCD_init+0xe4>)
 80013b2:	480d      	ldr	r0, [pc, #52]	; (80013e8 <LCD_init+0xd0>)
 80013b4:	f008 fa56 	bl	8009864 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,0);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2180      	movs	r1, #128	; 0x80
 80013bc:	4808      	ldr	r0, [pc, #32]	; (80013e0 <LCD_init+0xc8>)
 80013be:	f005 fc37 	bl	8006c30 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &LCDsetup[15], 1, 1000);
 80013c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c6:	2201      	movs	r2, #1
 80013c8:	490d      	ldr	r1, [pc, #52]	; (8001400 <LCD_init+0xe8>)
 80013ca:	4807      	ldr	r0, [pc, #28]	; (80013e8 <LCD_init+0xd0>)
 80013cc:	f008 fa4a 	bl	8009864 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,1);
 80013d0:	2201      	movs	r2, #1
 80013d2:	2180      	movs	r1, #128	; 0x80
 80013d4:	4802      	ldr	r0, [pc, #8]	; (80013e0 <LCD_init+0xc8>)
 80013d6:	f005 fc2b 	bl	8006c30 <HAL_GPIO_WritePin>


}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	58021400 	.word	0x58021400
 80013e4:	2400000c 	.word	0x2400000c
 80013e8:	24054324 	.word	0x24054324
 80013ec:	24000010 	.word	0x24000010
 80013f0:	24000011 	.word	0x24000011
 80013f4:	24000012 	.word	0x24000012
 80013f8:	24000016 	.word	0x24000016
 80013fc:	24000017 	.word	0x24000017
 8001400:	2400001b 	.word	0x2400001b

08001404 <abss>:
//	 htim4.Instance->CNT=0;
//	 HAL_TIM_Base_Start_IT(&htim4);
// }
//}

uint64_t abss(double q){
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	ed87 0b00 	vstr	d0, [r7]
	if(q<0){
 800140e:	ed97 7b00 	vldr	d7, [r7]
 8001412:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141a:	d505      	bpl.n	8001428 <abss+0x24>
		q=-1*q;
 800141c:	ed97 7b00 	vldr	d7, [r7]
 8001420:	eeb1 7b47 	vneg.f64	d7, d7
 8001424:	ed87 7b00 	vstr	d7, [r7]
	}else{
		q=q;
	}
	return q;
 8001428:	e9d7 0100 	ldrd	r0, r1, [r7]
 800142c:	f7fe ffc0 	bl	80003b0 <__aeabi_d2ulz>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
}
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <sortt>:
//uint16_t Tt=0;
//uint16_t RH=0;
uint8_t flagMinus=0;

void sortt(double T,double RH){
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	ed87 0b02 	vstr	d0, [r7, #8]
 800144a:	ed87 1b00 	vstr	d1, [r7]
	uint16_t Tt=0;
 800144e:	2300      	movs	r3, #0
 8001450:	82fb      	strh	r3, [r7, #22]
	uint16_t RHH=0;
 8001452:	2300      	movs	r3, #0
 8001454:	82bb      	strh	r3, [r7, #20]
	if(T<0){
 8001456:	ed97 7b02 	vldr	d7, [r7, #8]
 800145a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800145e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001462:	d503      	bpl.n	800146c <sortt+0x2c>
		flagMinus=1;
 8001464:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <sortt+0xa0>)
 8001466:	2201      	movs	r2, #1
 8001468:	701a      	strb	r2, [r3, #0]
 800146a:	e002      	b.n	8001472 <sortt+0x32>
	}else{
		flagMinus=0;
 800146c:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <sortt+0xa0>)
 800146e:	2200      	movs	r2, #0
 8001470:	701a      	strb	r2, [r3, #0]
	}
	T=T*100;
 8001472:	ed97 7b02 	vldr	d7, [r7, #8]
 8001476:	ed9f 6b18 	vldr	d6, [pc, #96]	; 80014d8 <sortt+0x98>
 800147a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800147e:	ed87 7b02 	vstr	d7, [r7, #8]
	Tt=(int)abss(T)/1;
 8001482:	ed97 0b02 	vldr	d0, [r7, #8]
 8001486:	f7ff ffbd 	bl	8001404 <abss>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4613      	mov	r3, r2
 8001490:	82fb      	strh	r3, [r7, #22]
	RH=RH*100;
 8001492:	ed97 7b00 	vldr	d7, [r7]
 8001496:	ed9f 6b10 	vldr	d6, [pc, #64]	; 80014d8 <sortt+0x98>
 800149a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800149e:	ed87 7b00 	vstr	d7, [r7]
	RHH=(int)abss(RH)/1;
 80014a2:	ed97 0b00 	vldr	d0, [r7]
 80014a6:	f7ff ffad 	bl	8001404 <abss>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4613      	mov	r3, r2
 80014b0:	82bb      	strh	r3, [r7, #20]
	sprintf(bufferT,"%d",Tt);
 80014b2:	8afb      	ldrh	r3, [r7, #22]
 80014b4:	461a      	mov	r2, r3
 80014b6:	490b      	ldr	r1, [pc, #44]	; (80014e4 <sortt+0xa4>)
 80014b8:	480b      	ldr	r0, [pc, #44]	; (80014e8 <sortt+0xa8>)
 80014ba:	f00b f931 	bl	800c720 <siprintf>
	sprintf(bufferRH,"%d",RHH);
 80014be:	8abb      	ldrh	r3, [r7, #20]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4908      	ldr	r1, [pc, #32]	; (80014e4 <sortt+0xa4>)
 80014c4:	4809      	ldr	r0, [pc, #36]	; (80014ec <sortt+0xac>)
 80014c6:	f00b f92b 	bl	800c720 <siprintf>
}
 80014ca:	bf00      	nop
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	f3af 8000 	nop.w
 80014d8:	00000000 	.word	0x00000000
 80014dc:	40590000 	.word	0x40590000
 80014e0:	24053d90 	.word	0x24053d90
 80014e4:	0800cf94 	.word	0x0800cf94
 80014e8:	24053d00 	.word	0x24053d00
 80014ec:	24053d40 	.word	0x24053d40

080014f0 <makeImg>:

uint8_t Cno=0;

void makeImg(){
 80014f0:	b480      	push	{r7}
 80014f2:	b0d3      	sub	sp, #332	; 0x14c
 80014f4:	af00      	add	r7, sp, #0

	if(flagMinus){
 80014f6:	4bb9      	ldr	r3, [pc, #740]	; (80017dc <makeImg+0x2ec>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d01f      	beq.n	800153e <makeImg+0x4e>
		for(int j=0;j<=5760;j++){
 80014fe:	2300      	movs	r3, #0
 8001500:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001504:	e016      	b.n	8001534 <makeImg+0x44>
			if(minusT[j]!=0x3f){
 8001506:	4ab6      	ldr	r2, [pc, #728]	; (80017e0 <makeImg+0x2f0>)
 8001508:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800150c:	4413      	add	r3, r2
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b3f      	cmp	r3, #63	; 0x3f
 8001512:	d00a      	beq.n	800152a <makeImg+0x3a>
				 Frame[23040+j]=minusT[j];
 8001514:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001518:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 800151c:	49b0      	ldr	r1, [pc, #704]	; (80017e0 <makeImg+0x2f0>)
 800151e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001522:	440a      	add	r2, r1
 8001524:	7811      	ldrb	r1, [r2, #0]
 8001526:	4aaf      	ldr	r2, [pc, #700]	; (80017e4 <makeImg+0x2f4>)
 8001528:	54d1      	strb	r1, [r2, r3]
		for(int j=0;j<=5760;j++){
 800152a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800152e:	3301      	adds	r3, #1
 8001530:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001534:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001538:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 800153c:	dde3      	ble.n	8001506 <makeImg+0x16>

		}
	}


	Cno=bufferRH[3];
 800153e:	4baa      	ldr	r3, [pc, #680]	; (80017e8 <makeImg+0x2f8>)
 8001540:	78da      	ldrb	r2, [r3, #3]
 8001542:	4baa      	ldr	r3, [pc, #680]	; (80017ec <makeImg+0x2fc>)
 8001544:	701a      	strb	r2, [r3, #0]
	switch (Cno) {
 8001546:	4ba9      	ldr	r3, [pc, #676]	; (80017ec <makeImg+0x2fc>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	3b30      	subs	r3, #48	; 0x30
 800154c:	2b09      	cmp	r3, #9
 800154e:	f200 817e 	bhi.w	800184e <makeImg+0x35e>
 8001552:	a201      	add	r2, pc, #4	; (adr r2, 8001558 <makeImg+0x68>)
 8001554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001558:	08001581 	.word	0x08001581
 800155c:	080015c3 	.word	0x080015c3
 8001560:	08001605 	.word	0x08001605
 8001564:	08001647 	.word	0x08001647
 8001568:	08001689 	.word	0x08001689
 800156c:	080016cb 	.word	0x080016cb
 8001570:	0800170d 	.word	0x0800170d
 8001574:	0800174f 	.word	0x0800174f
 8001578:	08001791 	.word	0x08001791
 800157c:	080017d3 	.word	0x080017d3
		case 48:
			for(int j=0;j<=5760;j++){
 8001580:	2300      	movs	r3, #0
 8001582:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001586:	e016      	b.n	80015b6 <makeImg+0xc6>
				if(RH_Zero[j]!=0x3f){
 8001588:	4a99      	ldr	r2, [pc, #612]	; (80017f0 <makeImg+0x300>)
 800158a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800158e:	4413      	add	r3, r2
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b3f      	cmp	r3, #63	; 0x3f
 8001594:	d00a      	beq.n	80015ac <makeImg+0xbc>
					 Frame[23040+j]=RH_Zero[j];
 8001596:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800159a:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 800159e:	4994      	ldr	r1, [pc, #592]	; (80017f0 <makeImg+0x300>)
 80015a0:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80015a4:	440a      	add	r2, r1
 80015a6:	7811      	ldrb	r1, [r2, #0]
 80015a8:	4a8e      	ldr	r2, [pc, #568]	; (80017e4 <makeImg+0x2f4>)
 80015aa:	54d1      	strb	r1, [r2, r3]
			for(int j=0;j<=5760;j++){
 80015ac:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80015b0:	3301      	adds	r3, #1
 80015b2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80015b6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80015ba:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80015be:	dde3      	ble.n	8001588 <makeImg+0x98>
				}

			}
		break;
 80015c0:	e145      	b.n	800184e <makeImg+0x35e>
		case 49:
			for(int j=0;j<=5760;j++){
 80015c2:	2300      	movs	r3, #0
 80015c4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80015c8:	e016      	b.n	80015f8 <makeImg+0x108>
				if(RH_One[j]!=0x3f){
 80015ca:	4a8a      	ldr	r2, [pc, #552]	; (80017f4 <makeImg+0x304>)
 80015cc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80015d0:	4413      	add	r3, r2
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b3f      	cmp	r3, #63	; 0x3f
 80015d6:	d00a      	beq.n	80015ee <makeImg+0xfe>
				  Frame[23040+j]=RH_One[j];
 80015d8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80015dc:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 80015e0:	4984      	ldr	r1, [pc, #528]	; (80017f4 <makeImg+0x304>)
 80015e2:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80015e6:	440a      	add	r2, r1
 80015e8:	7811      	ldrb	r1, [r2, #0]
 80015ea:	4a7e      	ldr	r2, [pc, #504]	; (80017e4 <makeImg+0x2f4>)
 80015ec:	54d1      	strb	r1, [r2, r3]
			for(int j=0;j<=5760;j++){
 80015ee:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80015f2:	3301      	adds	r3, #1
 80015f4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80015f8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80015fc:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001600:	dde3      	ble.n	80015ca <makeImg+0xda>
				}
			}
		break;
 8001602:	e124      	b.n	800184e <makeImg+0x35e>
		case 50:
			for(int j=0;j<=5760;j++){
 8001604:	2300      	movs	r3, #0
 8001606:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800160a:	e016      	b.n	800163a <makeImg+0x14a>
				if(RH_Two[j]!=0x3f){
 800160c:	4a7a      	ldr	r2, [pc, #488]	; (80017f8 <makeImg+0x308>)
 800160e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001612:	4413      	add	r3, r2
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b3f      	cmp	r3, #63	; 0x3f
 8001618:	d00a      	beq.n	8001630 <makeImg+0x140>
				  Frame[23040+j]=RH_Two[j];
 800161a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800161e:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 8001622:	4975      	ldr	r1, [pc, #468]	; (80017f8 <makeImg+0x308>)
 8001624:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001628:	440a      	add	r2, r1
 800162a:	7811      	ldrb	r1, [r2, #0]
 800162c:	4a6d      	ldr	r2, [pc, #436]	; (80017e4 <makeImg+0x2f4>)
 800162e:	54d1      	strb	r1, [r2, r3]
			for(int j=0;j<=5760;j++){
 8001630:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001634:	3301      	adds	r3, #1
 8001636:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800163a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800163e:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001642:	dde3      	ble.n	800160c <makeImg+0x11c>
				}
			}
		break;
 8001644:	e103      	b.n	800184e <makeImg+0x35e>
		case 51:
			for(int j=0;j<=5760;j++){
 8001646:	2300      	movs	r3, #0
 8001648:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800164c:	e016      	b.n	800167c <makeImg+0x18c>
				if(RH_Three[j]!=0x3f){
 800164e:	4a6b      	ldr	r2, [pc, #428]	; (80017fc <makeImg+0x30c>)
 8001650:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001654:	4413      	add	r3, r2
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b3f      	cmp	r3, #63	; 0x3f
 800165a:	d00a      	beq.n	8001672 <makeImg+0x182>
				  Frame[23040+j]=RH_Three[j];
 800165c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001660:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 8001664:	4965      	ldr	r1, [pc, #404]	; (80017fc <makeImg+0x30c>)
 8001666:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800166a:	440a      	add	r2, r1
 800166c:	7811      	ldrb	r1, [r2, #0]
 800166e:	4a5d      	ldr	r2, [pc, #372]	; (80017e4 <makeImg+0x2f4>)
 8001670:	54d1      	strb	r1, [r2, r3]
			for(int j=0;j<=5760;j++){
 8001672:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001676:	3301      	adds	r3, #1
 8001678:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800167c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001680:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001684:	dde3      	ble.n	800164e <makeImg+0x15e>
				}
			}
		break;
 8001686:	e0e2      	b.n	800184e <makeImg+0x35e>
		case 52:
			for(int j=0;j<=5760;j++){
 8001688:	2300      	movs	r3, #0
 800168a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800168e:	e016      	b.n	80016be <makeImg+0x1ce>
				if(RH_Four[j]!=0x3f){
 8001690:	4a5b      	ldr	r2, [pc, #364]	; (8001800 <makeImg+0x310>)
 8001692:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001696:	4413      	add	r3, r2
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b3f      	cmp	r3, #63	; 0x3f
 800169c:	d00a      	beq.n	80016b4 <makeImg+0x1c4>
				  Frame[23040+j]=RH_Four[j];
 800169e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80016a2:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 80016a6:	4956      	ldr	r1, [pc, #344]	; (8001800 <makeImg+0x310>)
 80016a8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80016ac:	440a      	add	r2, r1
 80016ae:	7811      	ldrb	r1, [r2, #0]
 80016b0:	4a4c      	ldr	r2, [pc, #304]	; (80017e4 <makeImg+0x2f4>)
 80016b2:	54d1      	strb	r1, [r2, r3]
			for(int j=0;j<=5760;j++){
 80016b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80016b8:	3301      	adds	r3, #1
 80016ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80016be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80016c2:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80016c6:	dde3      	ble.n	8001690 <makeImg+0x1a0>
				}
			}
		break;
 80016c8:	e0c1      	b.n	800184e <makeImg+0x35e>
		case 53:
			for(int j=0;j<=5760;j++){
 80016ca:	2300      	movs	r3, #0
 80016cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80016d0:	e016      	b.n	8001700 <makeImg+0x210>
				if(RH_Five[j]!=0x3f){
 80016d2:	4a4c      	ldr	r2, [pc, #304]	; (8001804 <makeImg+0x314>)
 80016d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80016d8:	4413      	add	r3, r2
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b3f      	cmp	r3, #63	; 0x3f
 80016de:	d00a      	beq.n	80016f6 <makeImg+0x206>
				  Frame[23040+j]=RH_Five[j];
 80016e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80016e4:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 80016e8:	4946      	ldr	r1, [pc, #280]	; (8001804 <makeImg+0x314>)
 80016ea:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80016ee:	440a      	add	r2, r1
 80016f0:	7811      	ldrb	r1, [r2, #0]
 80016f2:	4a3c      	ldr	r2, [pc, #240]	; (80017e4 <makeImg+0x2f4>)
 80016f4:	54d1      	strb	r1, [r2, r3]
			for(int j=0;j<=5760;j++){
 80016f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80016fa:	3301      	adds	r3, #1
 80016fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001700:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001704:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001708:	dde3      	ble.n	80016d2 <makeImg+0x1e2>
				}
			}
		break;
 800170a:	e0a0      	b.n	800184e <makeImg+0x35e>
		case 54:
			for(int j=0;j<=5760;j++){
 800170c:	2300      	movs	r3, #0
 800170e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001712:	e016      	b.n	8001742 <makeImg+0x252>
				if(RH_Six[j]!=0x3f){
 8001714:	4a3c      	ldr	r2, [pc, #240]	; (8001808 <makeImg+0x318>)
 8001716:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800171a:	4413      	add	r3, r2
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b3f      	cmp	r3, #63	; 0x3f
 8001720:	d00a      	beq.n	8001738 <makeImg+0x248>
				  Frame[23040+j]=RH_Six[j];
 8001722:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001726:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 800172a:	4937      	ldr	r1, [pc, #220]	; (8001808 <makeImg+0x318>)
 800172c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8001730:	440a      	add	r2, r1
 8001732:	7811      	ldrb	r1, [r2, #0]
 8001734:	4a2b      	ldr	r2, [pc, #172]	; (80017e4 <makeImg+0x2f4>)
 8001736:	54d1      	strb	r1, [r2, r3]
			for(int j=0;j<=5760;j++){
 8001738:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800173c:	3301      	adds	r3, #1
 800173e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001742:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001746:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 800174a:	dde3      	ble.n	8001714 <makeImg+0x224>
				}
			}
		break;
 800174c:	e07f      	b.n	800184e <makeImg+0x35e>
		case 55:
			for(int j=0;j<=5760;j++){
 800174e:	2300      	movs	r3, #0
 8001750:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001754:	e016      	b.n	8001784 <makeImg+0x294>
				if(RH_Seven[j]!=0x3f){
 8001756:	4a2d      	ldr	r2, [pc, #180]	; (800180c <makeImg+0x31c>)
 8001758:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800175c:	4413      	add	r3, r2
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b3f      	cmp	r3, #63	; 0x3f
 8001762:	d00a      	beq.n	800177a <makeImg+0x28a>
				  Frame[23040+j]=RH_Seven[j];
 8001764:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001768:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 800176c:	4927      	ldr	r1, [pc, #156]	; (800180c <makeImg+0x31c>)
 800176e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001772:	440a      	add	r2, r1
 8001774:	7811      	ldrb	r1, [r2, #0]
 8001776:	4a1b      	ldr	r2, [pc, #108]	; (80017e4 <makeImg+0x2f4>)
 8001778:	54d1      	strb	r1, [r2, r3]
			for(int j=0;j<=5760;j++){
 800177a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800177e:	3301      	adds	r3, #1
 8001780:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001784:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001788:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 800178c:	dde3      	ble.n	8001756 <makeImg+0x266>
				}
			}
		break;
 800178e:	e05e      	b.n	800184e <makeImg+0x35e>
		case 56:
			for(int j=0;j<=5760;j++){
 8001790:	2300      	movs	r3, #0
 8001792:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001796:	e016      	b.n	80017c6 <makeImg+0x2d6>
				if(RH_Egg[j]!=0x3f){
 8001798:	4a1d      	ldr	r2, [pc, #116]	; (8001810 <makeImg+0x320>)
 800179a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800179e:	4413      	add	r3, r2
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b3f      	cmp	r3, #63	; 0x3f
 80017a4:	d00a      	beq.n	80017bc <makeImg+0x2cc>
				  Frame[23040+j]=RH_Egg[j];
 80017a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80017aa:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 80017ae:	4918      	ldr	r1, [pc, #96]	; (8001810 <makeImg+0x320>)
 80017b0:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80017b4:	440a      	add	r2, r1
 80017b6:	7811      	ldrb	r1, [r2, #0]
 80017b8:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <makeImg+0x2f4>)
 80017ba:	54d1      	strb	r1, [r2, r3]
			for(int j=0;j<=5760;j++){
 80017bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80017c0:	3301      	adds	r3, #1
 80017c2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80017c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80017ca:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80017ce:	dde3      	ble.n	8001798 <makeImg+0x2a8>
				}
			}
		break;
 80017d0:	e03d      	b.n	800184e <makeImg+0x35e>
		case 57:
			for(int j=0;j<=5760;j++){
 80017d2:	2300      	movs	r3, #0
 80017d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80017d8:	e033      	b.n	8001842 <makeImg+0x352>
 80017da:	bf00      	nop
 80017dc:	24053d90 	.word	0x24053d90
 80017e0:	2404651c 	.word	0x2404651c
 80017e4:	24047d00 	.word	0x24047d00
 80017e8:	24053d40 	.word	0x24053d40
 80017ec:	24053d91 	.word	0x24053d91
 80017f0:	2403841c 	.word	0x2403841c
 80017f4:	24039a9c 	.word	0x24039a9c
 80017f8:	2403b11c 	.word	0x2403b11c
 80017fc:	2403c79c 	.word	0x2403c79c
 8001800:	2403de1c 	.word	0x2403de1c
 8001804:	2403f49c 	.word	0x2403f49c
 8001808:	24040b1c 	.word	0x24040b1c
 800180c:	2404219c 	.word	0x2404219c
 8001810:	2404381c 	.word	0x2404381c
				if(RH_Nine[j]!=0x3f){
 8001814:	4ab5      	ldr	r2, [pc, #724]	; (8001aec <makeImg+0x5fc>)
 8001816:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800181a:	4413      	add	r3, r2
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b3f      	cmp	r3, #63	; 0x3f
 8001820:	d00a      	beq.n	8001838 <makeImg+0x348>
				  Frame[23040+j]=RH_Nine[j];
 8001822:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001826:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 800182a:	49b0      	ldr	r1, [pc, #704]	; (8001aec <makeImg+0x5fc>)
 800182c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001830:	440a      	add	r2, r1
 8001832:	7811      	ldrb	r1, [r2, #0]
 8001834:	4aae      	ldr	r2, [pc, #696]	; (8001af0 <makeImg+0x600>)
 8001836:	54d1      	strb	r1, [r2, r3]
			for(int j=0;j<=5760;j++){
 8001838:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800183c:	3301      	adds	r3, #1
 800183e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001842:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001846:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 800184a:	dde3      	ble.n	8001814 <makeImg+0x324>
				}
			}
		break;
 800184c:	bf00      	nop
	 }
	Cno=bufferRH[2];
 800184e:	4ba9      	ldr	r3, [pc, #676]	; (8001af4 <makeImg+0x604>)
 8001850:	789a      	ldrb	r2, [r3, #2]
 8001852:	4ba9      	ldr	r3, [pc, #676]	; (8001af8 <makeImg+0x608>)
 8001854:	701a      	strb	r2, [r3, #0]
		switch (Cno) {
 8001856:	4ba8      	ldr	r3, [pc, #672]	; (8001af8 <makeImg+0x608>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	3b30      	subs	r3, #48	; 0x30
 800185c:	2b09      	cmp	r3, #9
 800185e:	f200 817c 	bhi.w	8001b5a <makeImg+0x66a>
 8001862:	a201      	add	r2, pc, #4	; (adr r2, 8001868 <makeImg+0x378>)
 8001864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001868:	08001891 	.word	0x08001891
 800186c:	080018d3 	.word	0x080018d3
 8001870:	08001915 	.word	0x08001915
 8001874:	08001957 	.word	0x08001957
 8001878:	08001999 	.word	0x08001999
 800187c:	080019db 	.word	0x080019db
 8001880:	08001a1d 	.word	0x08001a1d
 8001884:	08001a5f 	.word	0x08001a5f
 8001888:	08001aa1 	.word	0x08001aa1
 800188c:	08001ae3 	.word	0x08001ae3
			case 48:
				for(int j=0;j<=5760;j++){
 8001890:	2300      	movs	r3, #0
 8001892:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001896:	e016      	b.n	80018c6 <makeImg+0x3d6>
					if(dot_Zero[j]!=0x3f){
 8001898:	4a98      	ldr	r2, [pc, #608]	; (8001afc <makeImg+0x60c>)
 800189a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800189e:	4413      	add	r3, r2
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b3f      	cmp	r3, #63	; 0x3f
 80018a4:	d00a      	beq.n	80018bc <makeImg+0x3cc>
						 Frame[23040+j]=dot_Zero[j];
 80018a6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80018aa:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 80018ae:	4993      	ldr	r1, [pc, #588]	; (8001afc <makeImg+0x60c>)
 80018b0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80018b4:	440a      	add	r2, r1
 80018b6:	7811      	ldrb	r1, [r2, #0]
 80018b8:	4a8d      	ldr	r2, [pc, #564]	; (8001af0 <makeImg+0x600>)
 80018ba:	54d1      	strb	r1, [r2, r3]
				for(int j=0;j<=5760;j++){
 80018bc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80018c0:	3301      	adds	r3, #1
 80018c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80018c6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80018ca:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80018ce:	dde3      	ble.n	8001898 <makeImg+0x3a8>
					}

				}
			break;
 80018d0:	e143      	b.n	8001b5a <makeImg+0x66a>
			case 49:
				for(int j=0;j<=5760;j++){
 80018d2:	2300      	movs	r3, #0
 80018d4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80018d8:	e016      	b.n	8001908 <makeImg+0x418>
					if(dot_One[j]!=0x3f){
 80018da:	4a89      	ldr	r2, [pc, #548]	; (8001b00 <makeImg+0x610>)
 80018dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018e0:	4413      	add	r3, r2
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b3f      	cmp	r3, #63	; 0x3f
 80018e6:	d00a      	beq.n	80018fe <makeImg+0x40e>
					  Frame[23040+j]=dot_One[j];
 80018e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018ec:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 80018f0:	4983      	ldr	r1, [pc, #524]	; (8001b00 <makeImg+0x610>)
 80018f2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80018f6:	440a      	add	r2, r1
 80018f8:	7811      	ldrb	r1, [r2, #0]
 80018fa:	4a7d      	ldr	r2, [pc, #500]	; (8001af0 <makeImg+0x600>)
 80018fc:	54d1      	strb	r1, [r2, r3]
				for(int j=0;j<=5760;j++){
 80018fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001902:	3301      	adds	r3, #1
 8001904:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800190c:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001910:	dde3      	ble.n	80018da <makeImg+0x3ea>
					}
				}
			break;
 8001912:	e122      	b.n	8001b5a <makeImg+0x66a>
			case 50:
				for(int j=0;j<=5760;j++){
 8001914:	2300      	movs	r3, #0
 8001916:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800191a:	e016      	b.n	800194a <makeImg+0x45a>
					if(dot_Two[j]!=0x3f){
 800191c:	4a79      	ldr	r2, [pc, #484]	; (8001b04 <makeImg+0x614>)
 800191e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001922:	4413      	add	r3, r2
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b3f      	cmp	r3, #63	; 0x3f
 8001928:	d00a      	beq.n	8001940 <makeImg+0x450>
					  Frame[23040+j]=dot_Two[j];
 800192a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800192e:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 8001932:	4974      	ldr	r1, [pc, #464]	; (8001b04 <makeImg+0x614>)
 8001934:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001938:	440a      	add	r2, r1
 800193a:	7811      	ldrb	r1, [r2, #0]
 800193c:	4a6c      	ldr	r2, [pc, #432]	; (8001af0 <makeImg+0x600>)
 800193e:	54d1      	strb	r1, [r2, r3]
				for(int j=0;j<=5760;j++){
 8001940:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001944:	3301      	adds	r3, #1
 8001946:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800194a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800194e:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001952:	dde3      	ble.n	800191c <makeImg+0x42c>
					}
				}
			break;
 8001954:	e101      	b.n	8001b5a <makeImg+0x66a>
			case 51:
				for(int j=0;j<=5760;j++){
 8001956:	2300      	movs	r3, #0
 8001958:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800195c:	e016      	b.n	800198c <makeImg+0x49c>
					if(dot_Three[j]!=0x3f){
 800195e:	4a6a      	ldr	r2, [pc, #424]	; (8001b08 <makeImg+0x618>)
 8001960:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001964:	4413      	add	r3, r2
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b3f      	cmp	r3, #63	; 0x3f
 800196a:	d00a      	beq.n	8001982 <makeImg+0x492>
					  Frame[23040+j]=dot_Three[j];
 800196c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001970:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 8001974:	4964      	ldr	r1, [pc, #400]	; (8001b08 <makeImg+0x618>)
 8001976:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800197a:	440a      	add	r2, r1
 800197c:	7811      	ldrb	r1, [r2, #0]
 800197e:	4a5c      	ldr	r2, [pc, #368]	; (8001af0 <makeImg+0x600>)
 8001980:	54d1      	strb	r1, [r2, r3]
				for(int j=0;j<=5760;j++){
 8001982:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001986:	3301      	adds	r3, #1
 8001988:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800198c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001990:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001994:	dde3      	ble.n	800195e <makeImg+0x46e>
					}
				}
			break;
 8001996:	e0e0      	b.n	8001b5a <makeImg+0x66a>
			case 52:
				for(int j=0;j<=5760;j++){
 8001998:	2300      	movs	r3, #0
 800199a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800199e:	e016      	b.n	80019ce <makeImg+0x4de>
					if(dot_Four[j]!=0x3f){
 80019a0:	4a5a      	ldr	r2, [pc, #360]	; (8001b0c <makeImg+0x61c>)
 80019a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80019a6:	4413      	add	r3, r2
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b3f      	cmp	r3, #63	; 0x3f
 80019ac:	d00a      	beq.n	80019c4 <makeImg+0x4d4>
					  Frame[23040+j]=dot_Four[j];
 80019ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80019b2:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 80019b6:	4955      	ldr	r1, [pc, #340]	; (8001b0c <makeImg+0x61c>)
 80019b8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80019bc:	440a      	add	r2, r1
 80019be:	7811      	ldrb	r1, [r2, #0]
 80019c0:	4a4b      	ldr	r2, [pc, #300]	; (8001af0 <makeImg+0x600>)
 80019c2:	54d1      	strb	r1, [r2, r3]
				for(int j=0;j<=5760;j++){
 80019c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80019c8:	3301      	adds	r3, #1
 80019ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80019ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80019d2:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80019d6:	dde3      	ble.n	80019a0 <makeImg+0x4b0>
					}
				}
			break;
 80019d8:	e0bf      	b.n	8001b5a <makeImg+0x66a>
			case 53:
				for(int j=0;j<=5760;j++){
 80019da:	2300      	movs	r3, #0
 80019dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80019e0:	e016      	b.n	8001a10 <makeImg+0x520>
					if(dot_Five[j]!=0x3f){
 80019e2:	4a4b      	ldr	r2, [pc, #300]	; (8001b10 <makeImg+0x620>)
 80019e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80019e8:	4413      	add	r3, r2
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b3f      	cmp	r3, #63	; 0x3f
 80019ee:	d00a      	beq.n	8001a06 <makeImg+0x516>
					  Frame[23040+j]=dot_Five[j];
 80019f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80019f4:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 80019f8:	4945      	ldr	r1, [pc, #276]	; (8001b10 <makeImg+0x620>)
 80019fa:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80019fe:	440a      	add	r2, r1
 8001a00:	7811      	ldrb	r1, [r2, #0]
 8001a02:	4a3b      	ldr	r2, [pc, #236]	; (8001af0 <makeImg+0x600>)
 8001a04:	54d1      	strb	r1, [r2, r3]
				for(int j=0;j<=5760;j++){
 8001a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001a14:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001a18:	dde3      	ble.n	80019e2 <makeImg+0x4f2>
					}
				}
			break;
 8001a1a:	e09e      	b.n	8001b5a <makeImg+0x66a>
			case 54:
				for(int j=0;j<=5760;j++){
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001a22:	e016      	b.n	8001a52 <makeImg+0x562>
					if(dot_Six[j]!=0x3f){
 8001a24:	4a3b      	ldr	r2, [pc, #236]	; (8001b14 <makeImg+0x624>)
 8001a26:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001a2a:	4413      	add	r3, r2
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b3f      	cmp	r3, #63	; 0x3f
 8001a30:	d00a      	beq.n	8001a48 <makeImg+0x558>
					  Frame[23040+j]=dot_Six[j];
 8001a32:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001a36:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 8001a3a:	4936      	ldr	r1, [pc, #216]	; (8001b14 <makeImg+0x624>)
 8001a3c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001a40:	440a      	add	r2, r1
 8001a42:	7811      	ldrb	r1, [r2, #0]
 8001a44:	4a2a      	ldr	r2, [pc, #168]	; (8001af0 <makeImg+0x600>)
 8001a46:	54d1      	strb	r1, [r2, r3]
				for(int j=0;j<=5760;j++){
 8001a48:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001a52:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001a56:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001a5a:	dde3      	ble.n	8001a24 <makeImg+0x534>
					}
				}
			break;
 8001a5c:	e07d      	b.n	8001b5a <makeImg+0x66a>
			case 55:
				for(int j=0;j<=5760;j++){
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001a64:	e016      	b.n	8001a94 <makeImg+0x5a4>
					if(dot_Seven[j]!=0x3f){
 8001a66:	4a2c      	ldr	r2, [pc, #176]	; (8001b18 <makeImg+0x628>)
 8001a68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a6c:	4413      	add	r3, r2
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b3f      	cmp	r3, #63	; 0x3f
 8001a72:	d00a      	beq.n	8001a8a <makeImg+0x59a>
					  Frame[23040+j]=dot_Seven[j];
 8001a74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a78:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 8001a7c:	4926      	ldr	r1, [pc, #152]	; (8001b18 <makeImg+0x628>)
 8001a7e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001a82:	440a      	add	r2, r1
 8001a84:	7811      	ldrb	r1, [r2, #0]
 8001a86:	4a1a      	ldr	r2, [pc, #104]	; (8001af0 <makeImg+0x600>)
 8001a88:	54d1      	strb	r1, [r2, r3]
				for(int j=0;j<=5760;j++){
 8001a8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a8e:	3301      	adds	r3, #1
 8001a90:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a98:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001a9c:	dde3      	ble.n	8001a66 <makeImg+0x576>
					}
				}
			break;
 8001a9e:	e05c      	b.n	8001b5a <makeImg+0x66a>
			case 56:
				for(int j=0;j<=5760;j++){
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001aa6:	e016      	b.n	8001ad6 <makeImg+0x5e6>
					if(dot_Egg[j]!=0x3f){
 8001aa8:	4a1c      	ldr	r2, [pc, #112]	; (8001b1c <makeImg+0x62c>)
 8001aaa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001aae:	4413      	add	r3, r2
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b3f      	cmp	r3, #63	; 0x3f
 8001ab4:	d00a      	beq.n	8001acc <makeImg+0x5dc>
					  Frame[23040+j]=dot_Egg[j];
 8001ab6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001aba:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 8001abe:	4917      	ldr	r1, [pc, #92]	; (8001b1c <makeImg+0x62c>)
 8001ac0:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8001ac4:	440a      	add	r2, r1
 8001ac6:	7811      	ldrb	r1, [r2, #0]
 8001ac8:	4a09      	ldr	r2, [pc, #36]	; (8001af0 <makeImg+0x600>)
 8001aca:	54d1      	strb	r1, [r2, r3]
				for(int j=0;j<=5760;j++){
 8001acc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001ad6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001ada:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001ade:	dde3      	ble.n	8001aa8 <makeImg+0x5b8>
					}
				}
			break;
 8001ae0:	e03b      	b.n	8001b5a <makeImg+0x66a>
			case 57:
				for(int j=0;j<=5760;j++){
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001ae8:	e031      	b.n	8001b4e <makeImg+0x65e>
 8001aea:	bf00      	nop
 8001aec:	24044e9c 	.word	0x24044e9c
 8001af0:	24047d00 	.word	0x24047d00
 8001af4:	24053d40 	.word	0x24053d40
 8001af8:	24053d91 	.word	0x24053d91
 8001afc:	2401c21c 	.word	0x2401c21c
 8001b00:	2401d89c 	.word	0x2401d89c
 8001b04:	2401ef1c 	.word	0x2401ef1c
 8001b08:	2402059c 	.word	0x2402059c
 8001b0c:	24021c1c 	.word	0x24021c1c
 8001b10:	2402329c 	.word	0x2402329c
 8001b14:	2402491c 	.word	0x2402491c
 8001b18:	24025f9c 	.word	0x24025f9c
 8001b1c:	2402761c 	.word	0x2402761c
					if(dot_Nine[j]!=0x3f){
 8001b20:	4ab6      	ldr	r2, [pc, #728]	; (8001dfc <makeImg+0x90c>)
 8001b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b26:	4413      	add	r3, r2
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b3f      	cmp	r3, #63	; 0x3f
 8001b2c:	d00a      	beq.n	8001b44 <makeImg+0x654>
					  Frame[23040+j]=dot_Nine[j];
 8001b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b32:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 8001b36:	49b1      	ldr	r1, [pc, #708]	; (8001dfc <makeImg+0x90c>)
 8001b38:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001b3c:	440a      	add	r2, r1
 8001b3e:	7811      	ldrb	r1, [r2, #0]
 8001b40:	4aaf      	ldr	r2, [pc, #700]	; (8001e00 <makeImg+0x910>)
 8001b42:	54d1      	strb	r1, [r2, r3]
				for(int j=0;j<=5760;j++){
 8001b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b48:	3301      	adds	r3, #1
 8001b4a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b52:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001b56:	dde3      	ble.n	8001b20 <makeImg+0x630>
					}
				}
			break;
 8001b58:	bf00      	nop
		 }
		Cno=bufferRH[1];
 8001b5a:	4baa      	ldr	r3, [pc, #680]	; (8001e04 <makeImg+0x914>)
 8001b5c:	785a      	ldrb	r2, [r3, #1]
 8001b5e:	4baa      	ldr	r3, [pc, #680]	; (8001e08 <makeImg+0x918>)
 8001b60:	701a      	strb	r2, [r3, #0]
				switch (Cno) {
 8001b62:	4ba9      	ldr	r3, [pc, #676]	; (8001e08 <makeImg+0x918>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	3b30      	subs	r3, #48	; 0x30
 8001b68:	2b09      	cmp	r3, #9
 8001b6a:	f200 817f 	bhi.w	8001e6c <makeImg+0x97c>
 8001b6e:	a201      	add	r2, pc, #4	; (adr r2, 8001b74 <makeImg+0x684>)
 8001b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b74:	08001b9d 	.word	0x08001b9d
 8001b78:	08001be5 	.word	0x08001be5
 8001b7c:	08001c27 	.word	0x08001c27
 8001b80:	08001c69 	.word	0x08001c69
 8001b84:	08001cab 	.word	0x08001cab
 8001b88:	08001ced 	.word	0x08001ced
 8001b8c:	08001d2f 	.word	0x08001d2f
 8001b90:	08001d71 	.word	0x08001d71
 8001b94:	08001db3 	.word	0x08001db3
 8001b98:	08001df5 	.word	0x08001df5
					case 48:
						for(int j=0;j<=5760;j++){
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001ba2:	e019      	b.n	8001bd8 <makeImg+0x6e8>
							if(Zero_sf[j]!=0x3f){
 8001ba4:	4a99      	ldr	r2, [pc, #612]	; (8001e0c <makeImg+0x91c>)
 8001ba6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001baa:	4413      	add	r3, r2
 8001bac:	f993 3000 	ldrsb.w	r3, [r3]
 8001bb0:	2b3f      	cmp	r3, #63	; 0x3f
 8001bb2:	d00c      	beq.n	8001bce <makeImg+0x6de>
								 Frame[23040+j]=Zero_sf[j];
 8001bb4:	4a95      	ldr	r2, [pc, #596]	; (8001e0c <makeImg+0x91c>)
 8001bb6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001bba:	4413      	add	r3, r2
 8001bbc:	f993 2000 	ldrsb.w	r2, [r3]
 8001bc0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001bc4:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 8001bc8:	b2d1      	uxtb	r1, r2
 8001bca:	4a8d      	ldr	r2, [pc, #564]	; (8001e00 <makeImg+0x910>)
 8001bcc:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8001bce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001bd8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001bdc:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001be0:	dde0      	ble.n	8001ba4 <makeImg+0x6b4>
							}

						}
					break;
 8001be2:	e143      	b.n	8001e6c <makeImg+0x97c>
					case 49:
						for(int j=0;j<=5760;j++){
 8001be4:	2300      	movs	r3, #0
 8001be6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001bea:	e016      	b.n	8001c1a <makeImg+0x72a>
							if(One_sf[j]!=0x3f){
 8001bec:	4a88      	ldr	r2, [pc, #544]	; (8001e10 <makeImg+0x920>)
 8001bee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001bf2:	4413      	add	r3, r2
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b3f      	cmp	r3, #63	; 0x3f
 8001bf8:	d00a      	beq.n	8001c10 <makeImg+0x720>
							  Frame[23040+j]=One_sf[j];
 8001bfa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001bfe:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 8001c02:	4983      	ldr	r1, [pc, #524]	; (8001e10 <makeImg+0x920>)
 8001c04:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001c08:	440a      	add	r2, r1
 8001c0a:	7811      	ldrb	r1, [r2, #0]
 8001c0c:	4a7c      	ldr	r2, [pc, #496]	; (8001e00 <makeImg+0x910>)
 8001c0e:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8001c10:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001c14:	3301      	adds	r3, #1
 8001c16:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001c1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001c1e:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001c22:	dde3      	ble.n	8001bec <makeImg+0x6fc>
							}
						}
					break;
 8001c24:	e122      	b.n	8001e6c <makeImg+0x97c>
					case 50:
						for(int j=0;j<=5760;j++){
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001c2c:	e016      	b.n	8001c5c <makeImg+0x76c>
							if(Two_sf[j]!=0x3f){
 8001c2e:	4a79      	ldr	r2, [pc, #484]	; (8001e14 <makeImg+0x924>)
 8001c30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001c34:	4413      	add	r3, r2
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b3f      	cmp	r3, #63	; 0x3f
 8001c3a:	d00a      	beq.n	8001c52 <makeImg+0x762>
							  Frame[23040+j]=Two_sf[j];
 8001c3c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001c40:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 8001c44:	4973      	ldr	r1, [pc, #460]	; (8001e14 <makeImg+0x924>)
 8001c46:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8001c4a:	440a      	add	r2, r1
 8001c4c:	7811      	ldrb	r1, [r2, #0]
 8001c4e:	4a6c      	ldr	r2, [pc, #432]	; (8001e00 <makeImg+0x910>)
 8001c50:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8001c52:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001c56:	3301      	adds	r3, #1
 8001c58:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001c5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001c60:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001c64:	dde3      	ble.n	8001c2e <makeImg+0x73e>
							}
						}
					break;
 8001c66:	e101      	b.n	8001e6c <makeImg+0x97c>
					case 51:
						for(int j=0;j<=5760;j++){
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001c6e:	e016      	b.n	8001c9e <makeImg+0x7ae>
							if(Three_sf[j]!=0x3f){
 8001c70:	4a69      	ldr	r2, [pc, #420]	; (8001e18 <makeImg+0x928>)
 8001c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c76:	4413      	add	r3, r2
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b3f      	cmp	r3, #63	; 0x3f
 8001c7c:	d00a      	beq.n	8001c94 <makeImg+0x7a4>
							  Frame[23040+j]=Three_sf[j];
 8001c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c82:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 8001c86:	4964      	ldr	r1, [pc, #400]	; (8001e18 <makeImg+0x928>)
 8001c88:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001c8c:	440a      	add	r2, r1
 8001c8e:	7811      	ldrb	r1, [r2, #0]
 8001c90:	4a5b      	ldr	r2, [pc, #364]	; (8001e00 <makeImg+0x910>)
 8001c92:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8001c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c98:	3301      	adds	r3, #1
 8001c9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ca2:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001ca6:	dde3      	ble.n	8001c70 <makeImg+0x780>
							}
						}
					break;
 8001ca8:	e0e0      	b.n	8001e6c <makeImg+0x97c>
					case 52:
						for(int j=0;j<=5760;j++){
 8001caa:	2300      	movs	r3, #0
 8001cac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001cb0:	e016      	b.n	8001ce0 <makeImg+0x7f0>
							if(Four_sf[j]!=0x3f){
 8001cb2:	4a5a      	ldr	r2, [pc, #360]	; (8001e1c <makeImg+0x92c>)
 8001cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001cb8:	4413      	add	r3, r2
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b3f      	cmp	r3, #63	; 0x3f
 8001cbe:	d00a      	beq.n	8001cd6 <makeImg+0x7e6>
							  Frame[23040+j]=Four_sf[j];
 8001cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001cc4:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 8001cc8:	4954      	ldr	r1, [pc, #336]	; (8001e1c <makeImg+0x92c>)
 8001cca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001cce:	440a      	add	r2, r1
 8001cd0:	7811      	ldrb	r1, [r2, #0]
 8001cd2:	4a4b      	ldr	r2, [pc, #300]	; (8001e00 <makeImg+0x910>)
 8001cd4:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8001cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001cda:	3301      	adds	r3, #1
 8001cdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ce4:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001ce8:	dde3      	ble.n	8001cb2 <makeImg+0x7c2>
							}
						}
					break;
 8001cea:	e0bf      	b.n	8001e6c <makeImg+0x97c>
					case 53:
						for(int j=0;j<=5760;j++){
 8001cec:	2300      	movs	r3, #0
 8001cee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001cf2:	e016      	b.n	8001d22 <makeImg+0x832>
							if(Five_sf[j]!=0x3f){
 8001cf4:	4a4a      	ldr	r2, [pc, #296]	; (8001e20 <makeImg+0x930>)
 8001cf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001cfa:	4413      	add	r3, r2
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b3f      	cmp	r3, #63	; 0x3f
 8001d00:	d00a      	beq.n	8001d18 <makeImg+0x828>
							  Frame[23040+j]=Five_sf[j];
 8001d02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d06:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 8001d0a:	4945      	ldr	r1, [pc, #276]	; (8001e20 <makeImg+0x930>)
 8001d0c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001d10:	440a      	add	r2, r1
 8001d12:	7811      	ldrb	r1, [r2, #0]
 8001d14:	4a3a      	ldr	r2, [pc, #232]	; (8001e00 <makeImg+0x910>)
 8001d16:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8001d18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001d22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d26:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001d2a:	dde3      	ble.n	8001cf4 <makeImg+0x804>
							}
						}
					break;
 8001d2c:	e09e      	b.n	8001e6c <makeImg+0x97c>
					case 54:
						for(int j=0;j<=5760;j++){
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001d34:	e016      	b.n	8001d64 <makeImg+0x874>
							if(six_sf[j]!=0x3f){
 8001d36:	4a3b      	ldr	r2, [pc, #236]	; (8001e24 <makeImg+0x934>)
 8001d38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d3c:	4413      	add	r3, r2
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b3f      	cmp	r3, #63	; 0x3f
 8001d42:	d00a      	beq.n	8001d5a <makeImg+0x86a>
							  Frame[23040+j]=six_sf[j];
 8001d44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d48:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 8001d4c:	4935      	ldr	r1, [pc, #212]	; (8001e24 <makeImg+0x934>)
 8001d4e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001d52:	440a      	add	r2, r1
 8001d54:	7811      	ldrb	r1, [r2, #0]
 8001d56:	4a2a      	ldr	r2, [pc, #168]	; (8001e00 <makeImg+0x910>)
 8001d58:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8001d5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d5e:	3301      	adds	r3, #1
 8001d60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001d64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d68:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001d6c:	dde3      	ble.n	8001d36 <makeImg+0x846>
							}
						}
					break;
 8001d6e:	e07d      	b.n	8001e6c <makeImg+0x97c>
					case 55:
						for(int j=0;j<=5760;j++){
 8001d70:	2300      	movs	r3, #0
 8001d72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001d76:	e016      	b.n	8001da6 <makeImg+0x8b6>
							if(seven_sf[j]!=0x3f){
 8001d78:	4a2b      	ldr	r2, [pc, #172]	; (8001e28 <makeImg+0x938>)
 8001d7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001d7e:	4413      	add	r3, r2
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b3f      	cmp	r3, #63	; 0x3f
 8001d84:	d00a      	beq.n	8001d9c <makeImg+0x8ac>
							  Frame[23040+j]=seven_sf[j];
 8001d86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001d8a:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 8001d8e:	4926      	ldr	r1, [pc, #152]	; (8001e28 <makeImg+0x938>)
 8001d90:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001d94:	440a      	add	r2, r1
 8001d96:	7811      	ldrb	r1, [r2, #0]
 8001d98:	4a19      	ldr	r2, [pc, #100]	; (8001e00 <makeImg+0x910>)
 8001d9a:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8001d9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001da0:	3301      	adds	r3, #1
 8001da2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001da6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001daa:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001dae:	dde3      	ble.n	8001d78 <makeImg+0x888>
							}
						}
					break;
 8001db0:	e05c      	b.n	8001e6c <makeImg+0x97c>
					case 56:
						for(int j=0;j<=5760;j++){
 8001db2:	2300      	movs	r3, #0
 8001db4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001db8:	e016      	b.n	8001de8 <makeImg+0x8f8>
							if(egg_sf[j]!=0x3f){
 8001dba:	4a1c      	ldr	r2, [pc, #112]	; (8001e2c <makeImg+0x93c>)
 8001dbc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001dc0:	4413      	add	r3, r2
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b3f      	cmp	r3, #63	; 0x3f
 8001dc6:	d00a      	beq.n	8001dde <makeImg+0x8ee>
							  Frame[23040+j]=egg_sf[j];
 8001dc8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001dcc:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 8001dd0:	4916      	ldr	r1, [pc, #88]	; (8001e2c <makeImg+0x93c>)
 8001dd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001dd6:	440a      	add	r2, r1
 8001dd8:	7811      	ldrb	r1, [r2, #0]
 8001dda:	4a09      	ldr	r2, [pc, #36]	; (8001e00 <makeImg+0x910>)
 8001ddc:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8001dde:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001de2:	3301      	adds	r3, #1
 8001de4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001de8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001dec:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001df0:	dde3      	ble.n	8001dba <makeImg+0x8ca>
							}
						}
					break;
 8001df2:	e03b      	b.n	8001e6c <makeImg+0x97c>
					case 57:
						for(int j=0;j<=5760;j++){
 8001df4:	2300      	movs	r3, #0
 8001df6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001dfa:	e031      	b.n	8001e60 <makeImg+0x970>
 8001dfc:	24028c9c 	.word	0x24028c9c
 8001e00:	24047d00 	.word	0x24047d00
 8001e04:	24053d40 	.word	0x24053d40
 8001e08:	24053d91 	.word	0x24053d91
 8001e0c:	2400e11c 	.word	0x2400e11c
 8001e10:	2400f79c 	.word	0x2400f79c
 8001e14:	24010e1c 	.word	0x24010e1c
 8001e18:	2401249c 	.word	0x2401249c
 8001e1c:	24013b1c 	.word	0x24013b1c
 8001e20:	2401519c 	.word	0x2401519c
 8001e24:	2401681c 	.word	0x2401681c
 8001e28:	24017e9c 	.word	0x24017e9c
 8001e2c:	2401951c 	.word	0x2401951c
							if(nine_sf[j]!=0x3f){
 8001e30:	4ab6      	ldr	r2, [pc, #728]	; (800210c <makeImg+0xc1c>)
 8001e32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e36:	4413      	add	r3, r2
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b3f      	cmp	r3, #63	; 0x3f
 8001e3c:	d00b      	beq.n	8001e56 <makeImg+0x966>
							  Frame[37020+j]=nine_sf[j];
 8001e3e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001e42:	f249 039c 	movw	r3, #37020	; 0x909c
 8001e46:	4413      	add	r3, r2
 8001e48:	49b0      	ldr	r1, [pc, #704]	; (800210c <makeImg+0xc1c>)
 8001e4a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001e4e:	440a      	add	r2, r1
 8001e50:	7811      	ldrb	r1, [r2, #0]
 8001e52:	4aaf      	ldr	r2, [pc, #700]	; (8002110 <makeImg+0xc20>)
 8001e54:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8001e56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001e60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e64:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001e68:	dde2      	ble.n	8001e30 <makeImg+0x940>
							}
						}
					break;
 8001e6a:	bf00      	nop
				 }

				Cno=bufferRH[0];
 8001e6c:	4ba9      	ldr	r3, [pc, #676]	; (8002114 <makeImg+0xc24>)
 8001e6e:	781a      	ldrb	r2, [r3, #0]
 8001e70:	4ba9      	ldr	r3, [pc, #676]	; (8002118 <makeImg+0xc28>)
 8001e72:	701a      	strb	r2, [r3, #0]
				switch (Cno) {
 8001e74:	4ba8      	ldr	r3, [pc, #672]	; (8002118 <makeImg+0xc28>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	3b30      	subs	r3, #48	; 0x30
 8001e7a:	2b09      	cmp	r3, #9
 8001e7c:	f200 817d 	bhi.w	800217a <makeImg+0xc8a>
 8001e80:	a201      	add	r2, pc, #4	; (adr r2, 8001e88 <makeImg+0x998>)
 8001e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e86:	bf00      	nop
 8001e88:	08001eb1 	.word	0x08001eb1
 8001e8c:	08001ef3 	.word	0x08001ef3
 8001e90:	08001f35 	.word	0x08001f35
 8001e94:	08001f77 	.word	0x08001f77
 8001e98:	08001fb9 	.word	0x08001fb9
 8001e9c:	08001ffb 	.word	0x08001ffb
 8001ea0:	0800203d 	.word	0x0800203d
 8001ea4:	0800207f 	.word	0x0800207f
 8001ea8:	080020c1 	.word	0x080020c1
 8001eac:	08002103 	.word	0x08002103
					case 48:
						for(int j=0;j<=5760;j++){
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001eb6:	e016      	b.n	8001ee6 <makeImg+0x9f6>
							if(Zero_mf[j]!=0x3f){
 8001eb8:	4a98      	ldr	r2, [pc, #608]	; (800211c <makeImg+0xc2c>)
 8001eba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ebe:	4413      	add	r3, r2
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b3f      	cmp	r3, #63	; 0x3f
 8001ec4:	d00a      	beq.n	8001edc <makeImg+0x9ec>
								 Frame[23040+j]=Zero_mf[j];
 8001ec6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001eca:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 8001ece:	4993      	ldr	r1, [pc, #588]	; (800211c <makeImg+0xc2c>)
 8001ed0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001ed4:	440a      	add	r2, r1
 8001ed6:	7811      	ldrb	r1, [r2, #0]
 8001ed8:	4a8d      	ldr	r2, [pc, #564]	; (8002110 <makeImg+0xc20>)
 8001eda:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8001edc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001ee6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001eea:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001eee:	dde3      	ble.n	8001eb8 <makeImg+0x9c8>
							}

						}
					break;
 8001ef0:	e143      	b.n	800217a <makeImg+0xc8a>
					case 49:
						for(int j=0;j<=5760;j++){
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001ef8:	e016      	b.n	8001f28 <makeImg+0xa38>
							if(One_mf[j]!=0x3f){
 8001efa:	4a89      	ldr	r2, [pc, #548]	; (8002120 <makeImg+0xc30>)
 8001efc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f00:	4413      	add	r3, r2
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b3f      	cmp	r3, #63	; 0x3f
 8001f06:	d00a      	beq.n	8001f1e <makeImg+0xa2e>
							  Frame[23040+j]=One_mf[j];
 8001f08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f0c:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 8001f10:	4983      	ldr	r1, [pc, #524]	; (8002120 <makeImg+0xc30>)
 8001f12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001f16:	440a      	add	r2, r1
 8001f18:	7811      	ldrb	r1, [r2, #0]
 8001f1a:	4a7d      	ldr	r2, [pc, #500]	; (8002110 <makeImg+0xc20>)
 8001f1c:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8001f1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f22:	3301      	adds	r3, #1
 8001f24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001f28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f2c:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001f30:	dde3      	ble.n	8001efa <makeImg+0xa0a>
							}
						}
					break;
 8001f32:	e122      	b.n	800217a <makeImg+0xc8a>
					case 50:
						for(int j=0;j<=5760;j++){
 8001f34:	2300      	movs	r3, #0
 8001f36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001f3a:	e016      	b.n	8001f6a <makeImg+0xa7a>
							if(Two_mf[j]!=0x3f){
 8001f3c:	4a79      	ldr	r2, [pc, #484]	; (8002124 <makeImg+0xc34>)
 8001f3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f42:	4413      	add	r3, r2
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b3f      	cmp	r3, #63	; 0x3f
 8001f48:	d00a      	beq.n	8001f60 <makeImg+0xa70>
							  Frame[23040+j]=Two_mf[j];
 8001f4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f4e:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 8001f52:	4974      	ldr	r1, [pc, #464]	; (8002124 <makeImg+0xc34>)
 8001f54:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001f58:	440a      	add	r2, r1
 8001f5a:	7811      	ldrb	r1, [r2, #0]
 8001f5c:	4a6c      	ldr	r2, [pc, #432]	; (8002110 <makeImg+0xc20>)
 8001f5e:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8001f60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f64:	3301      	adds	r3, #1
 8001f66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001f6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f6e:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001f72:	dde3      	ble.n	8001f3c <makeImg+0xa4c>
							}
						}
					break;
 8001f74:	e101      	b.n	800217a <makeImg+0xc8a>
					case 51:
						for(int j=0;j<=5760;j++){
 8001f76:	2300      	movs	r3, #0
 8001f78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001f7c:	e016      	b.n	8001fac <makeImg+0xabc>
							if(Three_mf[j]!=0x3f){
 8001f7e:	4a6a      	ldr	r2, [pc, #424]	; (8002128 <makeImg+0xc38>)
 8001f80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f84:	4413      	add	r3, r2
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b3f      	cmp	r3, #63	; 0x3f
 8001f8a:	d00a      	beq.n	8001fa2 <makeImg+0xab2>
							  Frame[23040+j]=Three_mf[j];
 8001f8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f90:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 8001f94:	4964      	ldr	r1, [pc, #400]	; (8002128 <makeImg+0xc38>)
 8001f96:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f9a:	440a      	add	r2, r1
 8001f9c:	7811      	ldrb	r1, [r2, #0]
 8001f9e:	4a5c      	ldr	r2, [pc, #368]	; (8002110 <makeImg+0xc20>)
 8001fa0:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8001fa2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001fac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001fb0:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001fb4:	dde3      	ble.n	8001f7e <makeImg+0xa8e>
							}
						}
					break;
 8001fb6:	e0e0      	b.n	800217a <makeImg+0xc8a>
					case 52:
						for(int j=0;j<=5760;j++){
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001fbe:	e016      	b.n	8001fee <makeImg+0xafe>
							if(Four_mf[j]!=0x3f){
 8001fc0:	4a5a      	ldr	r2, [pc, #360]	; (800212c <makeImg+0xc3c>)
 8001fc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001fc6:	4413      	add	r3, r2
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b3f      	cmp	r3, #63	; 0x3f
 8001fcc:	d00a      	beq.n	8001fe4 <makeImg+0xaf4>
							  Frame[23040+j]=Four_mf[j];
 8001fce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001fd2:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 8001fd6:	4955      	ldr	r1, [pc, #340]	; (800212c <makeImg+0xc3c>)
 8001fd8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001fdc:	440a      	add	r2, r1
 8001fde:	7811      	ldrb	r1, [r2, #0]
 8001fe0:	4a4b      	ldr	r2, [pc, #300]	; (8002110 <makeImg+0xc20>)
 8001fe2:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8001fe4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001fe8:	3301      	adds	r3, #1
 8001fea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001fee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ff2:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001ff6:	dde3      	ble.n	8001fc0 <makeImg+0xad0>
							}
						}
					break;
 8001ff8:	e0bf      	b.n	800217a <makeImg+0xc8a>
					case 53:
						for(int j=0;j<=5760;j++){
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002000:	e016      	b.n	8002030 <makeImg+0xb40>
							if(Five_mf[j]!=0x3f){
 8002002:	4a4b      	ldr	r2, [pc, #300]	; (8002130 <makeImg+0xc40>)
 8002004:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002008:	4413      	add	r3, r2
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b3f      	cmp	r3, #63	; 0x3f
 800200e:	d00a      	beq.n	8002026 <makeImg+0xb36>
							  Frame[23040+j]=Five_mf[j];
 8002010:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002014:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 8002018:	4945      	ldr	r1, [pc, #276]	; (8002130 <makeImg+0xc40>)
 800201a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800201e:	440a      	add	r2, r1
 8002020:	7811      	ldrb	r1, [r2, #0]
 8002022:	4a3b      	ldr	r2, [pc, #236]	; (8002110 <makeImg+0xc20>)
 8002024:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8002026:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800202a:	3301      	adds	r3, #1
 800202c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002030:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002034:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002038:	dde3      	ble.n	8002002 <makeImg+0xb12>
							}
						}
					break;
 800203a:	e09e      	b.n	800217a <makeImg+0xc8a>
					case 54:
						for(int j=0;j<=5760;j++){
 800203c:	2300      	movs	r3, #0
 800203e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002042:	e016      	b.n	8002072 <makeImg+0xb82>
							if(six_mf[j]!=0x3f){
 8002044:	4a3b      	ldr	r2, [pc, #236]	; (8002134 <makeImg+0xc44>)
 8002046:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800204a:	4413      	add	r3, r2
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b3f      	cmp	r3, #63	; 0x3f
 8002050:	d00a      	beq.n	8002068 <makeImg+0xb78>
							  Frame[23040+j]=six_mf[j];
 8002052:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002056:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 800205a:	4936      	ldr	r1, [pc, #216]	; (8002134 <makeImg+0xc44>)
 800205c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002060:	440a      	add	r2, r1
 8002062:	7811      	ldrb	r1, [r2, #0]
 8002064:	4a2a      	ldr	r2, [pc, #168]	; (8002110 <makeImg+0xc20>)
 8002066:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8002068:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800206c:	3301      	adds	r3, #1
 800206e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002072:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002076:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 800207a:	dde3      	ble.n	8002044 <makeImg+0xb54>
							}
						}
					break;
 800207c:	e07d      	b.n	800217a <makeImg+0xc8a>
					case 55:
						for(int j=0;j<=5760;j++){
 800207e:	2300      	movs	r3, #0
 8002080:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002084:	e016      	b.n	80020b4 <makeImg+0xbc4>
							if(seven_mf[j]!=0x3f){
 8002086:	4a2c      	ldr	r2, [pc, #176]	; (8002138 <makeImg+0xc48>)
 8002088:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800208c:	4413      	add	r3, r2
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b3f      	cmp	r3, #63	; 0x3f
 8002092:	d00a      	beq.n	80020aa <makeImg+0xbba>
							  Frame[23040+j]=seven_mf[j];
 8002094:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002098:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 800209c:	4926      	ldr	r1, [pc, #152]	; (8002138 <makeImg+0xc48>)
 800209e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80020a2:	440a      	add	r2, r1
 80020a4:	7811      	ldrb	r1, [r2, #0]
 80020a6:	4a1a      	ldr	r2, [pc, #104]	; (8002110 <makeImg+0xc20>)
 80020a8:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 80020aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020ae:	3301      	adds	r3, #1
 80020b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80020b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020b8:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80020bc:	dde3      	ble.n	8002086 <makeImg+0xb96>
							}
						}
					break;
 80020be:	e05c      	b.n	800217a <makeImg+0xc8a>
					case 56:
						for(int j=0;j<=5760;j++){
 80020c0:	2300      	movs	r3, #0
 80020c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80020c6:	e016      	b.n	80020f6 <makeImg+0xc06>
							if(egg_mf[j]!=0x3f){
 80020c8:	4a1c      	ldr	r2, [pc, #112]	; (800213c <makeImg+0xc4c>)
 80020ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020ce:	4413      	add	r3, r2
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b3f      	cmp	r3, #63	; 0x3f
 80020d4:	d00a      	beq.n	80020ec <makeImg+0xbfc>
							  Frame[23040+j]=egg_mf[j];
 80020d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020da:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 80020de:	4917      	ldr	r1, [pc, #92]	; (800213c <makeImg+0xc4c>)
 80020e0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80020e4:	440a      	add	r2, r1
 80020e6:	7811      	ldrb	r1, [r2, #0]
 80020e8:	4a09      	ldr	r2, [pc, #36]	; (8002110 <makeImg+0xc20>)
 80020ea:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 80020ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020f0:	3301      	adds	r3, #1
 80020f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80020f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020fa:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80020fe:	dde3      	ble.n	80020c8 <makeImg+0xbd8>
							}
						}
					break;
 8002100:	e03b      	b.n	800217a <makeImg+0xc8a>
					case 57:
						for(int j=0;j<=5760;j++){
 8002102:	2300      	movs	r3, #0
 8002104:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002108:	e031      	b.n	800216e <makeImg+0xc7e>
 800210a:	bf00      	nop
 800210c:	2401ab9c 	.word	0x2401ab9c
 8002110:	24047d00 	.word	0x24047d00
 8002114:	24053d40 	.word	0x24053d40
 8002118:	24053d91 	.word	0x24053d91
 800211c:	2400001c 	.word	0x2400001c
 8002120:	2400169c 	.word	0x2400169c
 8002124:	24002d1c 	.word	0x24002d1c
 8002128:	2400439c 	.word	0x2400439c
 800212c:	24005a1c 	.word	0x24005a1c
 8002130:	2400709c 	.word	0x2400709c
 8002134:	2400871c 	.word	0x2400871c
 8002138:	24009d9c 	.word	0x24009d9c
 800213c:	2400b41c 	.word	0x2400b41c
							if(nine_mf[j]!=0x3f){
 8002140:	4ab4      	ldr	r2, [pc, #720]	; (8002414 <makeImg+0xf24>)
 8002142:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002146:	4413      	add	r3, r2
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b3f      	cmp	r3, #63	; 0x3f
 800214c:	d00a      	beq.n	8002164 <makeImg+0xc74>
							  Frame[23040+j]=nine_mf[j];
 800214e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002152:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 8002156:	49af      	ldr	r1, [pc, #700]	; (8002414 <makeImg+0xf24>)
 8002158:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800215c:	440a      	add	r2, r1
 800215e:	7811      	ldrb	r1, [r2, #0]
 8002160:	4aad      	ldr	r2, [pc, #692]	; (8002418 <makeImg+0xf28>)
 8002162:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<=5760;j++){
 8002164:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002168:	3301      	adds	r3, #1
 800216a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800216e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002172:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002176:	dde3      	ble.n	8002140 <makeImg+0xc50>
							}
						}
					break;
 8002178:	bf00      	nop





				Cno=bufferT[3];
 800217a:	4ba8      	ldr	r3, [pc, #672]	; (800241c <makeImg+0xf2c>)
 800217c:	78da      	ldrb	r2, [r3, #3]
 800217e:	4ba8      	ldr	r3, [pc, #672]	; (8002420 <makeImg+0xf30>)
 8002180:	701a      	strb	r2, [r3, #0]
					switch (Cno) {
 8002182:	4ba7      	ldr	r3, [pc, #668]	; (8002420 <makeImg+0xf30>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	3b30      	subs	r3, #48	; 0x30
 8002188:	2b09      	cmp	r3, #9
 800218a:	f200 8174 	bhi.w	8002476 <makeImg+0xf86>
 800218e:	a201      	add	r2, pc, #4	; (adr r2, 8002194 <makeImg+0xca4>)
 8002190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002194:	080021bd 	.word	0x080021bd
 8002198:	080021ff 	.word	0x080021ff
 800219c:	08002241 	.word	0x08002241
 80021a0:	08002283 	.word	0x08002283
 80021a4:	080022c5 	.word	0x080022c5
 80021a8:	08002307 	.word	0x08002307
 80021ac:	08002349 	.word	0x08002349
 80021b0:	0800238b 	.word	0x0800238b
 80021b4:	080023cd 	.word	0x080023cd
 80021b8:	0800240f 	.word	0x0800240f
						case 48:
							for(int j=0;j<=5760;j++){
 80021bc:	2300      	movs	r3, #0
 80021be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80021c2:	e016      	b.n	80021f2 <makeImg+0xd02>
								if(C_Zero[j]!=0x3f){
 80021c4:	4a97      	ldr	r2, [pc, #604]	; (8002424 <makeImg+0xf34>)
 80021c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80021ca:	4413      	add	r3, r2
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b3f      	cmp	r3, #63	; 0x3f
 80021d0:	d00a      	beq.n	80021e8 <makeImg+0xcf8>
									 Frame[7680+j]=C_Zero[j];
 80021d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80021d6:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80021da:	4992      	ldr	r1, [pc, #584]	; (8002424 <makeImg+0xf34>)
 80021dc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80021e0:	440a      	add	r2, r1
 80021e2:	7811      	ldrb	r1, [r2, #0]
 80021e4:	4a8c      	ldr	r2, [pc, #560]	; (8002418 <makeImg+0xf28>)
 80021e6:	54d1      	strb	r1, [r2, r3]
							for(int j=0;j<=5760;j++){
 80021e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80021ec:	3301      	adds	r3, #1
 80021ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80021f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80021f6:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80021fa:	dde3      	ble.n	80021c4 <makeImg+0xcd4>
								}

							}
						break;
 80021fc:	e13b      	b.n	8002476 <makeImg+0xf86>
						case 49:
							for(int j=0;j<=5760;j++){
 80021fe:	2300      	movs	r3, #0
 8002200:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002204:	e016      	b.n	8002234 <makeImg+0xd44>
								if(C_One[j]!=0x3f){
 8002206:	4a88      	ldr	r2, [pc, #544]	; (8002428 <makeImg+0xf38>)
 8002208:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800220c:	4413      	add	r3, r2
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b3f      	cmp	r3, #63	; 0x3f
 8002212:	d00a      	beq.n	800222a <makeImg+0xd3a>
								  Frame[7680+j]=C_One[j];
 8002214:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002218:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800221c:	4982      	ldr	r1, [pc, #520]	; (8002428 <makeImg+0xf38>)
 800221e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002222:	440a      	add	r2, r1
 8002224:	7811      	ldrb	r1, [r2, #0]
 8002226:	4a7c      	ldr	r2, [pc, #496]	; (8002418 <makeImg+0xf28>)
 8002228:	54d1      	strb	r1, [r2, r3]
							for(int j=0;j<=5760;j++){
 800222a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800222e:	3301      	adds	r3, #1
 8002230:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002234:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002238:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 800223c:	dde3      	ble.n	8002206 <makeImg+0xd16>
								}
							}
						break;
 800223e:	e11a      	b.n	8002476 <makeImg+0xf86>
						case 50:
							for(int j=0;j<=5760;j++){
 8002240:	2300      	movs	r3, #0
 8002242:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002246:	e016      	b.n	8002276 <makeImg+0xd86>
								if(C_Two[j]!=0x3f){
 8002248:	4a78      	ldr	r2, [pc, #480]	; (800242c <makeImg+0xf3c>)
 800224a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800224e:	4413      	add	r3, r2
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b3f      	cmp	r3, #63	; 0x3f
 8002254:	d00a      	beq.n	800226c <makeImg+0xd7c>
								  Frame[7680+j]=C_Two[j];
 8002256:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800225a:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800225e:	4973      	ldr	r1, [pc, #460]	; (800242c <makeImg+0xf3c>)
 8002260:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002264:	440a      	add	r2, r1
 8002266:	7811      	ldrb	r1, [r2, #0]
 8002268:	4a6b      	ldr	r2, [pc, #428]	; (8002418 <makeImg+0xf28>)
 800226a:	54d1      	strb	r1, [r2, r3]
							for(int j=0;j<=5760;j++){
 800226c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002270:	3301      	adds	r3, #1
 8002272:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002276:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800227a:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 800227e:	dde3      	ble.n	8002248 <makeImg+0xd58>
								}
							}
						break;
 8002280:	e0f9      	b.n	8002476 <makeImg+0xf86>
						case 51:
							for(int j=0;j<=5760;j++){
 8002282:	2300      	movs	r3, #0
 8002284:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002288:	e016      	b.n	80022b8 <makeImg+0xdc8>
								if(C_Three[j]!=0x3f){
 800228a:	4a69      	ldr	r2, [pc, #420]	; (8002430 <makeImg+0xf40>)
 800228c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002290:	4413      	add	r3, r2
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b3f      	cmp	r3, #63	; 0x3f
 8002296:	d00a      	beq.n	80022ae <makeImg+0xdbe>
								  Frame[7680+j]=C_Three[j];
 8002298:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800229c:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80022a0:	4963      	ldr	r1, [pc, #396]	; (8002430 <makeImg+0xf40>)
 80022a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80022a6:	440a      	add	r2, r1
 80022a8:	7811      	ldrb	r1, [r2, #0]
 80022aa:	4a5b      	ldr	r2, [pc, #364]	; (8002418 <makeImg+0xf28>)
 80022ac:	54d1      	strb	r1, [r2, r3]
							for(int j=0;j<=5760;j++){
 80022ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022b2:	3301      	adds	r3, #1
 80022b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80022b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022bc:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80022c0:	dde3      	ble.n	800228a <makeImg+0xd9a>
								}
							}
						break;
 80022c2:	e0d8      	b.n	8002476 <makeImg+0xf86>
						case 52:
							for(int j=0;j<=5760;j++){
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80022ca:	e016      	b.n	80022fa <makeImg+0xe0a>
								if(C_Four[j]!=0x3f){
 80022cc:	4a59      	ldr	r2, [pc, #356]	; (8002434 <makeImg+0xf44>)
 80022ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022d2:	4413      	add	r3, r2
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b3f      	cmp	r3, #63	; 0x3f
 80022d8:	d00a      	beq.n	80022f0 <makeImg+0xe00>
								  Frame[7680+j]=C_Four[j];
 80022da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022de:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80022e2:	4954      	ldr	r1, [pc, #336]	; (8002434 <makeImg+0xf44>)
 80022e4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80022e8:	440a      	add	r2, r1
 80022ea:	7811      	ldrb	r1, [r2, #0]
 80022ec:	4a4a      	ldr	r2, [pc, #296]	; (8002418 <makeImg+0xf28>)
 80022ee:	54d1      	strb	r1, [r2, r3]
							for(int j=0;j<=5760;j++){
 80022f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022f4:	3301      	adds	r3, #1
 80022f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80022fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022fe:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002302:	dde3      	ble.n	80022cc <makeImg+0xddc>
								}
							}
						break;
 8002304:	e0b7      	b.n	8002476 <makeImg+0xf86>
						case 53:
							for(int j=0;j<=5760;j++){
 8002306:	2300      	movs	r3, #0
 8002308:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800230c:	e016      	b.n	800233c <makeImg+0xe4c>
								if(C_Five[j]!=0x3f){
 800230e:	4a4a      	ldr	r2, [pc, #296]	; (8002438 <makeImg+0xf48>)
 8002310:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002314:	4413      	add	r3, r2
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b3f      	cmp	r3, #63	; 0x3f
 800231a:	d00a      	beq.n	8002332 <makeImg+0xe42>
								  Frame[7680+j]=C_Five[j];
 800231c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002320:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002324:	4944      	ldr	r1, [pc, #272]	; (8002438 <makeImg+0xf48>)
 8002326:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800232a:	440a      	add	r2, r1
 800232c:	7811      	ldrb	r1, [r2, #0]
 800232e:	4a3a      	ldr	r2, [pc, #232]	; (8002418 <makeImg+0xf28>)
 8002330:	54d1      	strb	r1, [r2, r3]
							for(int j=0;j<=5760;j++){
 8002332:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002336:	3301      	adds	r3, #1
 8002338:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800233c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002340:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002344:	dde3      	ble.n	800230e <makeImg+0xe1e>
								}
							}
						break;
 8002346:	e096      	b.n	8002476 <makeImg+0xf86>
						case 54:
							for(int j=0;j<=5760;j++){
 8002348:	2300      	movs	r3, #0
 800234a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800234e:	e016      	b.n	800237e <makeImg+0xe8e>
								if(C_Six[j]!=0x3f){
 8002350:	4a3a      	ldr	r2, [pc, #232]	; (800243c <makeImg+0xf4c>)
 8002352:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002356:	4413      	add	r3, r2
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b3f      	cmp	r3, #63	; 0x3f
 800235c:	d00a      	beq.n	8002374 <makeImg+0xe84>
								  Frame[7680+j]=C_Six[j];
 800235e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002362:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002366:	4935      	ldr	r1, [pc, #212]	; (800243c <makeImg+0xf4c>)
 8002368:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800236c:	440a      	add	r2, r1
 800236e:	7811      	ldrb	r1, [r2, #0]
 8002370:	4a29      	ldr	r2, [pc, #164]	; (8002418 <makeImg+0xf28>)
 8002372:	54d1      	strb	r1, [r2, r3]
							for(int j=0;j<=5760;j++){
 8002374:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002378:	3301      	adds	r3, #1
 800237a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800237e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002382:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002386:	dde3      	ble.n	8002350 <makeImg+0xe60>
								}
							}
						break;
 8002388:	e075      	b.n	8002476 <makeImg+0xf86>
						case 55:
							for(int j=0;j<=5760;j++){
 800238a:	2300      	movs	r3, #0
 800238c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002390:	e016      	b.n	80023c0 <makeImg+0xed0>
								if(C_Seven[j]!=0x3f){
 8002392:	4a2b      	ldr	r2, [pc, #172]	; (8002440 <makeImg+0xf50>)
 8002394:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002398:	4413      	add	r3, r2
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b3f      	cmp	r3, #63	; 0x3f
 800239e:	d00a      	beq.n	80023b6 <makeImg+0xec6>
								  Frame[7680+j]=C_Seven[j];
 80023a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023a4:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80023a8:	4925      	ldr	r1, [pc, #148]	; (8002440 <makeImg+0xf50>)
 80023aa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80023ae:	440a      	add	r2, r1
 80023b0:	7811      	ldrb	r1, [r2, #0]
 80023b2:	4a19      	ldr	r2, [pc, #100]	; (8002418 <makeImg+0xf28>)
 80023b4:	54d1      	strb	r1, [r2, r3]
							for(int j=0;j<=5760;j++){
 80023b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023ba:	3301      	adds	r3, #1
 80023bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80023c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023c4:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80023c8:	dde3      	ble.n	8002392 <makeImg+0xea2>
								}
							}
						break;
 80023ca:	e054      	b.n	8002476 <makeImg+0xf86>
						case 56:
							for(int j=0;j<=5760;j++){
 80023cc:	2300      	movs	r3, #0
 80023ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023d2:	e016      	b.n	8002402 <makeImg+0xf12>
								if(C_Egg[j]!=0x3f){
 80023d4:	4a1b      	ldr	r2, [pc, #108]	; (8002444 <makeImg+0xf54>)
 80023d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023da:	4413      	add	r3, r2
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b3f      	cmp	r3, #63	; 0x3f
 80023e0:	d00a      	beq.n	80023f8 <makeImg+0xf08>
								  Frame[7680+j]=C_Egg[j];
 80023e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023e6:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80023ea:	4916      	ldr	r1, [pc, #88]	; (8002444 <makeImg+0xf54>)
 80023ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80023f0:	440a      	add	r2, r1
 80023f2:	7811      	ldrb	r1, [r2, #0]
 80023f4:	4a08      	ldr	r2, [pc, #32]	; (8002418 <makeImg+0xf28>)
 80023f6:	54d1      	strb	r1, [r2, r3]
							for(int j=0;j<=5760;j++){
 80023f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023fc:	3301      	adds	r3, #1
 80023fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002402:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002406:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 800240a:	dde3      	ble.n	80023d4 <makeImg+0xee4>
								}
							}
						break;
 800240c:	e033      	b.n	8002476 <makeImg+0xf86>
						case 57:
							for(int j=0;j<=5760;j++){
 800240e:	2300      	movs	r3, #0
 8002410:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002412:	e02b      	b.n	800246c <makeImg+0xf7c>
 8002414:	2400ca9c 	.word	0x2400ca9c
 8002418:	24047d00 	.word	0x24047d00
 800241c:	24053d00 	.word	0x24053d00
 8002420:	24053d91 	.word	0x24053d91
 8002424:	2402a31c 	.word	0x2402a31c
 8002428:	2402b99c 	.word	0x2402b99c
 800242c:	2402d01c 	.word	0x2402d01c
 8002430:	2402e69c 	.word	0x2402e69c
 8002434:	2402fd1c 	.word	0x2402fd1c
 8002438:	2403139c 	.word	0x2403139c
 800243c:	24032a1c 	.word	0x24032a1c
 8002440:	2403409c 	.word	0x2403409c
 8002444:	2403571c 	.word	0x2403571c
								if(C_Nine[j]!=0x3f){
 8002448:	4a92      	ldr	r2, [pc, #584]	; (8002694 <makeImg+0x11a4>)
 800244a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800244c:	4413      	add	r3, r2
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b3f      	cmp	r3, #63	; 0x3f
 8002452:	d008      	beq.n	8002466 <makeImg+0xf76>
								  Frame[7680+j]=C_Nine[j];
 8002454:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002456:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800245a:	498e      	ldr	r1, [pc, #568]	; (8002694 <makeImg+0x11a4>)
 800245c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800245e:	440a      	add	r2, r1
 8002460:	7811      	ldrb	r1, [r2, #0]
 8002462:	4a8d      	ldr	r2, [pc, #564]	; (8002698 <makeImg+0x11a8>)
 8002464:	54d1      	strb	r1, [r2, r3]
							for(int j=0;j<=5760;j++){
 8002466:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002468:	3301      	adds	r3, #1
 800246a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800246c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800246e:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002472:	dde9      	ble.n	8002448 <makeImg+0xf58>
								}
							}
						break;
 8002474:	bf00      	nop
					 }
					Cno=bufferT[2];
 8002476:	4b89      	ldr	r3, [pc, #548]	; (800269c <makeImg+0x11ac>)
 8002478:	789a      	ldrb	r2, [r3, #2]
 800247a:	4b89      	ldr	r3, [pc, #548]	; (80026a0 <makeImg+0x11b0>)
 800247c:	701a      	strb	r2, [r3, #0]
						switch (Cno) {
 800247e:	4b88      	ldr	r3, [pc, #544]	; (80026a0 <makeImg+0x11b0>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	3b30      	subs	r3, #48	; 0x30
 8002484:	2b09      	cmp	r3, #9
 8002486:	f200 8136 	bhi.w	80026f6 <makeImg+0x1206>
 800248a:	a201      	add	r2, pc, #4	; (adr r2, 8002490 <makeImg+0xfa0>)
 800248c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002490:	080024b9 	.word	0x080024b9
 8002494:	080024ed 	.word	0x080024ed
 8002498:	08002521 	.word	0x08002521
 800249c:	08002555 	.word	0x08002555
 80024a0:	08002589 	.word	0x08002589
 80024a4:	080025bd 	.word	0x080025bd
 80024a8:	080025f1 	.word	0x080025f1
 80024ac:	08002625 	.word	0x08002625
 80024b0:	08002659 	.word	0x08002659
 80024b4:	0800268d 	.word	0x0800268d
							case 48:
								for(int j=0;j<=5760;j++){
 80024b8:	2300      	movs	r3, #0
 80024ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80024bc:	e011      	b.n	80024e2 <makeImg+0xff2>
									if(dot_Zero[j]!=0x3f){
 80024be:	4a79      	ldr	r2, [pc, #484]	; (80026a4 <makeImg+0x11b4>)
 80024c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024c2:	4413      	add	r3, r2
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b3f      	cmp	r3, #63	; 0x3f
 80024c8:	d008      	beq.n	80024dc <makeImg+0xfec>
										 Frame[7680+j]=dot_Zero[j];
 80024ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024cc:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80024d0:	4974      	ldr	r1, [pc, #464]	; (80026a4 <makeImg+0x11b4>)
 80024d2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80024d4:	440a      	add	r2, r1
 80024d6:	7811      	ldrb	r1, [r2, #0]
 80024d8:	4a6f      	ldr	r2, [pc, #444]	; (8002698 <makeImg+0x11a8>)
 80024da:	54d1      	strb	r1, [r2, r3]
								for(int j=0;j<=5760;j++){
 80024dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024de:	3301      	adds	r3, #1
 80024e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80024e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024e4:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80024e8:	dde9      	ble.n	80024be <makeImg+0xfce>
									}

								}
							break;
 80024ea:	e104      	b.n	80026f6 <makeImg+0x1206>
							case 49:
								for(int j=0;j<=5760;j++){
 80024ec:	2300      	movs	r3, #0
 80024ee:	677b      	str	r3, [r7, #116]	; 0x74
 80024f0:	e011      	b.n	8002516 <makeImg+0x1026>
									if(dot_One[j]!=0x3f){
 80024f2:	4a6d      	ldr	r2, [pc, #436]	; (80026a8 <makeImg+0x11b8>)
 80024f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024f6:	4413      	add	r3, r2
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b3f      	cmp	r3, #63	; 0x3f
 80024fc:	d008      	beq.n	8002510 <makeImg+0x1020>
									  Frame[7680+j]=dot_One[j];
 80024fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002500:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002504:	4968      	ldr	r1, [pc, #416]	; (80026a8 <makeImg+0x11b8>)
 8002506:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002508:	440a      	add	r2, r1
 800250a:	7811      	ldrb	r1, [r2, #0]
 800250c:	4a62      	ldr	r2, [pc, #392]	; (8002698 <makeImg+0x11a8>)
 800250e:	54d1      	strb	r1, [r2, r3]
								for(int j=0;j<=5760;j++){
 8002510:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002512:	3301      	adds	r3, #1
 8002514:	677b      	str	r3, [r7, #116]	; 0x74
 8002516:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002518:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 800251c:	dde9      	ble.n	80024f2 <makeImg+0x1002>
									}
								}
							break;
 800251e:	e0ea      	b.n	80026f6 <makeImg+0x1206>
							case 50:
								for(int j=0;j<=5760;j++){
 8002520:	2300      	movs	r3, #0
 8002522:	673b      	str	r3, [r7, #112]	; 0x70
 8002524:	e011      	b.n	800254a <makeImg+0x105a>
									if(dot_Two[j]!=0x3f){
 8002526:	4a61      	ldr	r2, [pc, #388]	; (80026ac <makeImg+0x11bc>)
 8002528:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800252a:	4413      	add	r3, r2
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b3f      	cmp	r3, #63	; 0x3f
 8002530:	d008      	beq.n	8002544 <makeImg+0x1054>
									  Frame[7680+j]=dot_Two[j];
 8002532:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002534:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002538:	495c      	ldr	r1, [pc, #368]	; (80026ac <makeImg+0x11bc>)
 800253a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800253c:	440a      	add	r2, r1
 800253e:	7811      	ldrb	r1, [r2, #0]
 8002540:	4a55      	ldr	r2, [pc, #340]	; (8002698 <makeImg+0x11a8>)
 8002542:	54d1      	strb	r1, [r2, r3]
								for(int j=0;j<=5760;j++){
 8002544:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002546:	3301      	adds	r3, #1
 8002548:	673b      	str	r3, [r7, #112]	; 0x70
 800254a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800254c:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002550:	dde9      	ble.n	8002526 <makeImg+0x1036>
									}
								}
							break;
 8002552:	e0d0      	b.n	80026f6 <makeImg+0x1206>
							case 51:
								for(int j=0;j<=5760;j++){
 8002554:	2300      	movs	r3, #0
 8002556:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002558:	e011      	b.n	800257e <makeImg+0x108e>
									if(dot_Three[j]!=0x3f){
 800255a:	4a55      	ldr	r2, [pc, #340]	; (80026b0 <makeImg+0x11c0>)
 800255c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800255e:	4413      	add	r3, r2
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b3f      	cmp	r3, #63	; 0x3f
 8002564:	d008      	beq.n	8002578 <makeImg+0x1088>
									  Frame[7680+j]=dot_Three[j];
 8002566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002568:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800256c:	4950      	ldr	r1, [pc, #320]	; (80026b0 <makeImg+0x11c0>)
 800256e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002570:	440a      	add	r2, r1
 8002572:	7811      	ldrb	r1, [r2, #0]
 8002574:	4a48      	ldr	r2, [pc, #288]	; (8002698 <makeImg+0x11a8>)
 8002576:	54d1      	strb	r1, [r2, r3]
								for(int j=0;j<=5760;j++){
 8002578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800257a:	3301      	adds	r3, #1
 800257c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800257e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002580:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002584:	dde9      	ble.n	800255a <makeImg+0x106a>
									}
								}
							break;
 8002586:	e0b6      	b.n	80026f6 <makeImg+0x1206>
							case 52:
								for(int j=0;j<=5760;j++){
 8002588:	2300      	movs	r3, #0
 800258a:	66bb      	str	r3, [r7, #104]	; 0x68
 800258c:	e011      	b.n	80025b2 <makeImg+0x10c2>
									if(dot_Four[j]!=0x3f){
 800258e:	4a49      	ldr	r2, [pc, #292]	; (80026b4 <makeImg+0x11c4>)
 8002590:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002592:	4413      	add	r3, r2
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b3f      	cmp	r3, #63	; 0x3f
 8002598:	d008      	beq.n	80025ac <makeImg+0x10bc>
									  Frame[7680+j]=dot_Four[j];
 800259a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800259c:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80025a0:	4944      	ldr	r1, [pc, #272]	; (80026b4 <makeImg+0x11c4>)
 80025a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80025a4:	440a      	add	r2, r1
 80025a6:	7811      	ldrb	r1, [r2, #0]
 80025a8:	4a3b      	ldr	r2, [pc, #236]	; (8002698 <makeImg+0x11a8>)
 80025aa:	54d1      	strb	r1, [r2, r3]
								for(int j=0;j<=5760;j++){
 80025ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025ae:	3301      	adds	r3, #1
 80025b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80025b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025b4:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80025b8:	dde9      	ble.n	800258e <makeImg+0x109e>
									}
								}
							break;
 80025ba:	e09c      	b.n	80026f6 <makeImg+0x1206>
							case 53:
								for(int j=0;j<=5760;j++){
 80025bc:	2300      	movs	r3, #0
 80025be:	667b      	str	r3, [r7, #100]	; 0x64
 80025c0:	e011      	b.n	80025e6 <makeImg+0x10f6>
									if(dot_Five[j]!=0x3f){
 80025c2:	4a3d      	ldr	r2, [pc, #244]	; (80026b8 <makeImg+0x11c8>)
 80025c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025c6:	4413      	add	r3, r2
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b3f      	cmp	r3, #63	; 0x3f
 80025cc:	d008      	beq.n	80025e0 <makeImg+0x10f0>
									  Frame[7680+j]=dot_Five[j];
 80025ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025d0:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80025d4:	4938      	ldr	r1, [pc, #224]	; (80026b8 <makeImg+0x11c8>)
 80025d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80025d8:	440a      	add	r2, r1
 80025da:	7811      	ldrb	r1, [r2, #0]
 80025dc:	4a2e      	ldr	r2, [pc, #184]	; (8002698 <makeImg+0x11a8>)
 80025de:	54d1      	strb	r1, [r2, r3]
								for(int j=0;j<=5760;j++){
 80025e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025e2:	3301      	adds	r3, #1
 80025e4:	667b      	str	r3, [r7, #100]	; 0x64
 80025e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025e8:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80025ec:	dde9      	ble.n	80025c2 <makeImg+0x10d2>
									}
								}
							break;
 80025ee:	e082      	b.n	80026f6 <makeImg+0x1206>
							case 54:
								for(int j=0;j<=5760;j++){
 80025f0:	2300      	movs	r3, #0
 80025f2:	663b      	str	r3, [r7, #96]	; 0x60
 80025f4:	e011      	b.n	800261a <makeImg+0x112a>
									if(dot_Six[j]!=0x3f){
 80025f6:	4a31      	ldr	r2, [pc, #196]	; (80026bc <makeImg+0x11cc>)
 80025f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025fa:	4413      	add	r3, r2
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b3f      	cmp	r3, #63	; 0x3f
 8002600:	d008      	beq.n	8002614 <makeImg+0x1124>
									  Frame[7680+j]=dot_Six[j];
 8002602:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002604:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002608:	492c      	ldr	r1, [pc, #176]	; (80026bc <makeImg+0x11cc>)
 800260a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800260c:	440a      	add	r2, r1
 800260e:	7811      	ldrb	r1, [r2, #0]
 8002610:	4a21      	ldr	r2, [pc, #132]	; (8002698 <makeImg+0x11a8>)
 8002612:	54d1      	strb	r1, [r2, r3]
								for(int j=0;j<=5760;j++){
 8002614:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002616:	3301      	adds	r3, #1
 8002618:	663b      	str	r3, [r7, #96]	; 0x60
 800261a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800261c:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002620:	dde9      	ble.n	80025f6 <makeImg+0x1106>
									}
								}
							break;
 8002622:	e068      	b.n	80026f6 <makeImg+0x1206>
							case 55:
								for(int j=0;j<=5760;j++){
 8002624:	2300      	movs	r3, #0
 8002626:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002628:	e011      	b.n	800264e <makeImg+0x115e>
									if(dot_Seven[j]!=0x3f){
 800262a:	4a25      	ldr	r2, [pc, #148]	; (80026c0 <makeImg+0x11d0>)
 800262c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800262e:	4413      	add	r3, r2
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b3f      	cmp	r3, #63	; 0x3f
 8002634:	d008      	beq.n	8002648 <makeImg+0x1158>
									  Frame[7680+j]=dot_Seven[j];
 8002636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002638:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800263c:	4920      	ldr	r1, [pc, #128]	; (80026c0 <makeImg+0x11d0>)
 800263e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002640:	440a      	add	r2, r1
 8002642:	7811      	ldrb	r1, [r2, #0]
 8002644:	4a14      	ldr	r2, [pc, #80]	; (8002698 <makeImg+0x11a8>)
 8002646:	54d1      	strb	r1, [r2, r3]
								for(int j=0;j<=5760;j++){
 8002648:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800264a:	3301      	adds	r3, #1
 800264c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800264e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002650:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002654:	dde9      	ble.n	800262a <makeImg+0x113a>
									}
								}
							break;
 8002656:	e04e      	b.n	80026f6 <makeImg+0x1206>
							case 56:
								for(int j=0;j<=5760;j++){
 8002658:	2300      	movs	r3, #0
 800265a:	65bb      	str	r3, [r7, #88]	; 0x58
 800265c:	e011      	b.n	8002682 <makeImg+0x1192>
									if(dot_Egg[j]!=0x3f){
 800265e:	4a19      	ldr	r2, [pc, #100]	; (80026c4 <makeImg+0x11d4>)
 8002660:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002662:	4413      	add	r3, r2
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b3f      	cmp	r3, #63	; 0x3f
 8002668:	d008      	beq.n	800267c <makeImg+0x118c>
									  Frame[7680+j]=dot_Egg[j];
 800266a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800266c:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002670:	4914      	ldr	r1, [pc, #80]	; (80026c4 <makeImg+0x11d4>)
 8002672:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002674:	440a      	add	r2, r1
 8002676:	7811      	ldrb	r1, [r2, #0]
 8002678:	4a07      	ldr	r2, [pc, #28]	; (8002698 <makeImg+0x11a8>)
 800267a:	54d1      	strb	r1, [r2, r3]
								for(int j=0;j<=5760;j++){
 800267c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800267e:	3301      	adds	r3, #1
 8002680:	65bb      	str	r3, [r7, #88]	; 0x58
 8002682:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002684:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002688:	dde9      	ble.n	800265e <makeImg+0x116e>
									}
								}
							break;
 800268a:	e034      	b.n	80026f6 <makeImg+0x1206>
							case 57:
								for(int j=0;j<=5760;j++){
 800268c:	2300      	movs	r3, #0
 800268e:	657b      	str	r3, [r7, #84]	; 0x54
 8002690:	e02c      	b.n	80026ec <makeImg+0x11fc>
 8002692:	bf00      	nop
 8002694:	24036d9c 	.word	0x24036d9c
 8002698:	24047d00 	.word	0x24047d00
 800269c:	24053d00 	.word	0x24053d00
 80026a0:	24053d91 	.word	0x24053d91
 80026a4:	2401c21c 	.word	0x2401c21c
 80026a8:	2401d89c 	.word	0x2401d89c
 80026ac:	2401ef1c 	.word	0x2401ef1c
 80026b0:	2402059c 	.word	0x2402059c
 80026b4:	24021c1c 	.word	0x24021c1c
 80026b8:	2402329c 	.word	0x2402329c
 80026bc:	2402491c 	.word	0x2402491c
 80026c0:	24025f9c 	.word	0x24025f9c
 80026c4:	2402761c 	.word	0x2402761c
									if(dot_Nine[j]!=0x3f){
 80026c8:	4ab1      	ldr	r2, [pc, #708]	; (8002990 <makeImg+0x14a0>)
 80026ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026cc:	4413      	add	r3, r2
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b3f      	cmp	r3, #63	; 0x3f
 80026d2:	d008      	beq.n	80026e6 <makeImg+0x11f6>
									  Frame[7680+j]=dot_Nine[j];
 80026d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d6:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80026da:	49ad      	ldr	r1, [pc, #692]	; (8002990 <makeImg+0x14a0>)
 80026dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80026de:	440a      	add	r2, r1
 80026e0:	7811      	ldrb	r1, [r2, #0]
 80026e2:	4aac      	ldr	r2, [pc, #688]	; (8002994 <makeImg+0x14a4>)
 80026e4:	54d1      	strb	r1, [r2, r3]
								for(int j=0;j<=5760;j++){
 80026e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e8:	3301      	adds	r3, #1
 80026ea:	657b      	str	r3, [r7, #84]	; 0x54
 80026ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ee:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80026f2:	dde9      	ble.n	80026c8 <makeImg+0x11d8>
									}
								}
							break;
 80026f4:	bf00      	nop
						 }
						Cno=bufferT[1];
 80026f6:	4ba8      	ldr	r3, [pc, #672]	; (8002998 <makeImg+0x14a8>)
 80026f8:	785a      	ldrb	r2, [r3, #1]
 80026fa:	4ba8      	ldr	r3, [pc, #672]	; (800299c <makeImg+0x14ac>)
 80026fc:	701a      	strb	r2, [r3, #0]
								switch (Cno) {
 80026fe:	4ba7      	ldr	r3, [pc, #668]	; (800299c <makeImg+0x14ac>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	3b30      	subs	r3, #48	; 0x30
 8002704:	2b09      	cmp	r3, #9
 8002706:	f200 81a6 	bhi.w	8002a56 <makeImg+0x1566>
 800270a:	a201      	add	r2, pc, #4	; (adr r2, 8002710 <makeImg+0x1220>)
 800270c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002710:	08002739 	.word	0x08002739
 8002714:	08002773 	.word	0x08002773
 8002718:	080027a7 	.word	0x080027a7
 800271c:	080027f7 	.word	0x080027f7
 8002720:	08002847 	.word	0x08002847
 8002724:	08002897 	.word	0x08002897
 8002728:	080028e7 	.word	0x080028e7
 800272c:	08002937 	.word	0x08002937
 8002730:	08002987 	.word	0x08002987
 8002734:	08002a07 	.word	0x08002a07
									case 48:
										for(int j=0;j<=5760;j++){
 8002738:	2300      	movs	r3, #0
 800273a:	653b      	str	r3, [r7, #80]	; 0x50
 800273c:	e014      	b.n	8002768 <makeImg+0x1278>
											if(Zero_sf[j]!=0x3f){
 800273e:	4a98      	ldr	r2, [pc, #608]	; (80029a0 <makeImg+0x14b0>)
 8002740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002742:	4413      	add	r3, r2
 8002744:	f993 3000 	ldrsb.w	r3, [r3]
 8002748:	2b3f      	cmp	r3, #63	; 0x3f
 800274a:	d00a      	beq.n	8002762 <makeImg+0x1272>
												 Frame[7680+j]=Zero_sf[j];
 800274c:	4a94      	ldr	r2, [pc, #592]	; (80029a0 <makeImg+0x14b0>)
 800274e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002750:	4413      	add	r3, r2
 8002752:	f993 2000 	ldrsb.w	r2, [r3]
 8002756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002758:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800275c:	b2d1      	uxtb	r1, r2
 800275e:	4a8d      	ldr	r2, [pc, #564]	; (8002994 <makeImg+0x14a4>)
 8002760:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 8002762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002764:	3301      	adds	r3, #1
 8002766:	653b      	str	r3, [r7, #80]	; 0x50
 8002768:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800276a:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 800276e:	dde6      	ble.n	800273e <makeImg+0x124e>
											}

										}
									break;
 8002770:	e171      	b.n	8002a56 <makeImg+0x1566>
									case 49:
										for(int j=0;j<=5760;j++){
 8002772:	2300      	movs	r3, #0
 8002774:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002776:	e011      	b.n	800279c <makeImg+0x12ac>
											if(One_sf[j]!=0x3f){
 8002778:	4a8a      	ldr	r2, [pc, #552]	; (80029a4 <makeImg+0x14b4>)
 800277a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800277c:	4413      	add	r3, r2
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b3f      	cmp	r3, #63	; 0x3f
 8002782:	d008      	beq.n	8002796 <makeImg+0x12a6>
											  Frame[7680+j]=One_sf[j];
 8002784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002786:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800278a:	4986      	ldr	r1, [pc, #536]	; (80029a4 <makeImg+0x14b4>)
 800278c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800278e:	440a      	add	r2, r1
 8002790:	7811      	ldrb	r1, [r2, #0]
 8002792:	4a80      	ldr	r2, [pc, #512]	; (8002994 <makeImg+0x14a4>)
 8002794:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 8002796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002798:	3301      	adds	r3, #1
 800279a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800279c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800279e:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80027a2:	dde9      	ble.n	8002778 <makeImg+0x1288>
											}
										}
									break;
 80027a4:	e157      	b.n	8002a56 <makeImg+0x1566>
									case 50:
										for(int j=0;j<=5760;j++){
 80027a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	e01b      	b.n	80027e8 <makeImg+0x12f8>
											if(Two_sf[j]!=0x3f){
 80027b0:	4a7d      	ldr	r2, [pc, #500]	; (80029a8 <makeImg+0x14b8>)
 80027b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4413      	add	r3, r2
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b3f      	cmp	r3, #63	; 0x3f
 80027be:	d00c      	beq.n	80027da <makeImg+0x12ea>
											  Frame[7680+j]=Two_sf[j];
 80027c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80027ca:	4977      	ldr	r1, [pc, #476]	; (80029a8 <makeImg+0x14b8>)
 80027cc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80027d0:	6812      	ldr	r2, [r2, #0]
 80027d2:	440a      	add	r2, r1
 80027d4:	7811      	ldrb	r1, [r2, #0]
 80027d6:	4a6f      	ldr	r2, [pc, #444]	; (8002994 <makeImg+0x14a4>)
 80027d8:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 80027da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027de:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	3201      	adds	r2, #1
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80027f2:	dddd      	ble.n	80027b0 <makeImg+0x12c0>
											}
										}
									break;
 80027f4:	e12f      	b.n	8002a56 <makeImg+0x1566>
									case 51:
										for(int j=0;j<=5760;j++){
 80027f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	e01b      	b.n	8002838 <makeImg+0x1348>
											if(Three_sf[j]!=0x3f){
 8002800:	4a6a      	ldr	r2, [pc, #424]	; (80029ac <makeImg+0x14bc>)
 8002802:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4413      	add	r3, r2
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b3f      	cmp	r3, #63	; 0x3f
 800280e:	d00c      	beq.n	800282a <makeImg+0x133a>
											  Frame[7680+j]=Three_sf[j];
 8002810:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800281a:	4964      	ldr	r1, [pc, #400]	; (80029ac <makeImg+0x14bc>)
 800281c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002820:	6812      	ldr	r2, [r2, #0]
 8002822:	440a      	add	r2, r1
 8002824:	7811      	ldrb	r1, [r2, #0]
 8002826:	4a5b      	ldr	r2, [pc, #364]	; (8002994 <makeImg+0x14a4>)
 8002828:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 800282a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800282e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	3201      	adds	r2, #1
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002842:	dddd      	ble.n	8002800 <makeImg+0x1310>
											}
										}
									break;
 8002844:	e107      	b.n	8002a56 <makeImg+0x1566>
									case 52:
										for(int j=0;j<=5760;j++){
 8002846:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	e01b      	b.n	8002888 <makeImg+0x1398>
											if(Four_sf[j]!=0x3f){
 8002850:	4a57      	ldr	r2, [pc, #348]	; (80029b0 <makeImg+0x14c0>)
 8002852:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4413      	add	r3, r2
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b3f      	cmp	r3, #63	; 0x3f
 800285e:	d00c      	beq.n	800287a <makeImg+0x138a>
											  Frame[7680+j]=Four_sf[j];
 8002860:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800286a:	4951      	ldr	r1, [pc, #324]	; (80029b0 <makeImg+0x14c0>)
 800286c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	440a      	add	r2, r1
 8002874:	7811      	ldrb	r1, [r2, #0]
 8002876:	4a47      	ldr	r2, [pc, #284]	; (8002994 <makeImg+0x14a4>)
 8002878:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 800287a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800287e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002882:	6812      	ldr	r2, [r2, #0]
 8002884:	3201      	adds	r2, #1
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002892:	dddd      	ble.n	8002850 <makeImg+0x1360>
											}
										}
									break;
 8002894:	e0df      	b.n	8002a56 <makeImg+0x1566>
									case 53:
										for(int j=0;j<=5760;j++){
 8002896:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	e01b      	b.n	80028d8 <makeImg+0x13e8>
											if(Five_sf[j]!=0x3f){
 80028a0:	4a44      	ldr	r2, [pc, #272]	; (80029b4 <makeImg+0x14c4>)
 80028a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4413      	add	r3, r2
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b3f      	cmp	r3, #63	; 0x3f
 80028ae:	d00c      	beq.n	80028ca <makeImg+0x13da>
											  Frame[7680+j]=Five_sf[j];
 80028b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80028ba:	493e      	ldr	r1, [pc, #248]	; (80029b4 <makeImg+0x14c4>)
 80028bc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80028c0:	6812      	ldr	r2, [r2, #0]
 80028c2:	440a      	add	r2, r1
 80028c4:	7811      	ldrb	r1, [r2, #0]
 80028c6:	4a33      	ldr	r2, [pc, #204]	; (8002994 <makeImg+0x14a4>)
 80028c8:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 80028ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028ce:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80028d2:	6812      	ldr	r2, [r2, #0]
 80028d4:	3201      	adds	r2, #1
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80028e2:	dddd      	ble.n	80028a0 <makeImg+0x13b0>
											}
										}
									break;
 80028e4:	e0b7      	b.n	8002a56 <makeImg+0x1566>
									case 54:
										for(int j=0;j<=5760;j++){
 80028e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	e01b      	b.n	8002928 <makeImg+0x1438>
											if(six_sf[j]!=0x3f){
 80028f0:	4a31      	ldr	r2, [pc, #196]	; (80029b8 <makeImg+0x14c8>)
 80028f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4413      	add	r3, r2
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b3f      	cmp	r3, #63	; 0x3f
 80028fe:	d00c      	beq.n	800291a <makeImg+0x142a>
											  Frame[7680+j]=six_sf[j];
 8002900:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800290a:	492b      	ldr	r1, [pc, #172]	; (80029b8 <makeImg+0x14c8>)
 800290c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002910:	6812      	ldr	r2, [r2, #0]
 8002912:	440a      	add	r2, r1
 8002914:	7811      	ldrb	r1, [r2, #0]
 8002916:	4a1f      	ldr	r2, [pc, #124]	; (8002994 <makeImg+0x14a4>)
 8002918:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 800291a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800291e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	3201      	adds	r2, #1
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002932:	dddd      	ble.n	80028f0 <makeImg+0x1400>
											}
										}
									break;
 8002934:	e08f      	b.n	8002a56 <makeImg+0x1566>
									case 55:
										for(int j=0;j<=5760;j++){
 8002936:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	e01b      	b.n	8002978 <makeImg+0x1488>
											if(seven_sf[j]!=0x3f){
 8002940:	4a1e      	ldr	r2, [pc, #120]	; (80029bc <makeImg+0x14cc>)
 8002942:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4413      	add	r3, r2
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b3f      	cmp	r3, #63	; 0x3f
 800294e:	d00c      	beq.n	800296a <makeImg+0x147a>
											  Frame[7680+j]=seven_sf[j];
 8002950:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800295a:	4918      	ldr	r1, [pc, #96]	; (80029bc <makeImg+0x14cc>)
 800295c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002960:	6812      	ldr	r2, [r2, #0]
 8002962:	440a      	add	r2, r1
 8002964:	7811      	ldrb	r1, [r2, #0]
 8002966:	4a0b      	ldr	r2, [pc, #44]	; (8002994 <makeImg+0x14a4>)
 8002968:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 800296a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800296e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002972:	6812      	ldr	r2, [r2, #0]
 8002974:	3201      	adds	r2, #1
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002982:	dddd      	ble.n	8002940 <makeImg+0x1450>
											}
										}
									break;
 8002984:	e067      	b.n	8002a56 <makeImg+0x1566>
									case 56:
										for(int j=0;j<=5760;j++){
 8002986:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	e033      	b.n	80029f8 <makeImg+0x1508>
 8002990:	24028c9c 	.word	0x24028c9c
 8002994:	24047d00 	.word	0x24047d00
 8002998:	24053d00 	.word	0x24053d00
 800299c:	24053d91 	.word	0x24053d91
 80029a0:	2400e11c 	.word	0x2400e11c
 80029a4:	2400f79c 	.word	0x2400f79c
 80029a8:	24010e1c 	.word	0x24010e1c
 80029ac:	2401249c 	.word	0x2401249c
 80029b0:	24013b1c 	.word	0x24013b1c
 80029b4:	2401519c 	.word	0x2401519c
 80029b8:	2401681c 	.word	0x2401681c
 80029bc:	24017e9c 	.word	0x24017e9c
											if(egg_sf[j]!=0x3f){
 80029c0:	4ab0      	ldr	r2, [pc, #704]	; (8002c84 <makeImg+0x1794>)
 80029c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4413      	add	r3, r2
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b3f      	cmp	r3, #63	; 0x3f
 80029ce:	d00c      	beq.n	80029ea <makeImg+0x14fa>
											  Frame[7680+j]=egg_sf[j];
 80029d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80029da:	49aa      	ldr	r1, [pc, #680]	; (8002c84 <makeImg+0x1794>)
 80029dc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80029e0:	6812      	ldr	r2, [r2, #0]
 80029e2:	440a      	add	r2, r1
 80029e4:	7811      	ldrb	r1, [r2, #0]
 80029e6:	4aa8      	ldr	r2, [pc, #672]	; (8002c88 <makeImg+0x1798>)
 80029e8:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 80029ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80029f2:	6812      	ldr	r2, [r2, #0]
 80029f4:	3201      	adds	r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002a02:	dddd      	ble.n	80029c0 <makeImg+0x14d0>
											}
										}
									break;
 8002a04:	e027      	b.n	8002a56 <makeImg+0x1566>
									case 57:
										for(int j=0;j<=5760;j++){
 8002a06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	e01b      	b.n	8002a48 <makeImg+0x1558>
											if(nine_sf[j]!=0x3f){
 8002a10:	4a9e      	ldr	r2, [pc, #632]	; (8002c8c <makeImg+0x179c>)
 8002a12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4413      	add	r3, r2
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b3f      	cmp	r3, #63	; 0x3f
 8002a1e:	d00c      	beq.n	8002a3a <makeImg+0x154a>
											  Frame[7680+j]=nine_sf[j];
 8002a20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002a2a:	4998      	ldr	r1, [pc, #608]	; (8002c8c <makeImg+0x179c>)
 8002a2c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002a30:	6812      	ldr	r2, [r2, #0]
 8002a32:	440a      	add	r2, r1
 8002a34:	7811      	ldrb	r1, [r2, #0]
 8002a36:	4a94      	ldr	r2, [pc, #592]	; (8002c88 <makeImg+0x1798>)
 8002a38:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 8002a3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a3e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002a42:	6812      	ldr	r2, [r2, #0]
 8002a44:	3201      	adds	r2, #1
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002a52:	dddd      	ble.n	8002a10 <makeImg+0x1520>
											}
										}
									break;
 8002a54:	bf00      	nop
								 }

								Cno=bufferT[0];
 8002a56:	4b8e      	ldr	r3, [pc, #568]	; (8002c90 <makeImg+0x17a0>)
 8002a58:	781a      	ldrb	r2, [r3, #0]
 8002a5a:	4b8e      	ldr	r3, [pc, #568]	; (8002c94 <makeImg+0x17a4>)
 8002a5c:	701a      	strb	r2, [r3, #0]
								switch (Cno) {
 8002a5e:	4b8d      	ldr	r3, [pc, #564]	; (8002c94 <makeImg+0x17a4>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	3b30      	subs	r3, #48	; 0x30
 8002a64:	2b09      	cmp	r3, #9
 8002a66:	f200 81b7 	bhi.w	8002dd8 <makeImg+0x18e8>
 8002a6a:	a201      	add	r2, pc, #4	; (adr r2, 8002a70 <makeImg+0x1580>)
 8002a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a70:	08002a99 	.word	0x08002a99
 8002a74:	08002ae9 	.word	0x08002ae9
 8002a78:	08002b39 	.word	0x08002b39
 8002a7c:	08002b89 	.word	0x08002b89
 8002a80:	08002bd9 	.word	0x08002bd9
 8002a84:	08002c29 	.word	0x08002c29
 8002a88:	08002c79 	.word	0x08002c79
 8002a8c:	08002cf7 	.word	0x08002cf7
 8002a90:	08002d47 	.word	0x08002d47
 8002a94:	08002d97 	.word	0x08002d97
									case 48:
										for(int j=0;j<=5760;j++){
 8002a98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	e01b      	b.n	8002ada <makeImg+0x15ea>
											if(Zero_mf[j]!=0x3f){
 8002aa2:	4a7d      	ldr	r2, [pc, #500]	; (8002c98 <makeImg+0x17a8>)
 8002aa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4413      	add	r3, r2
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b3f      	cmp	r3, #63	; 0x3f
 8002ab0:	d00c      	beq.n	8002acc <makeImg+0x15dc>
												 Frame[7680+j]=Zero_mf[j];
 8002ab2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002abc:	4976      	ldr	r1, [pc, #472]	; (8002c98 <makeImg+0x17a8>)
 8002abe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ac2:	6812      	ldr	r2, [r2, #0]
 8002ac4:	440a      	add	r2, r1
 8002ac6:	7811      	ldrb	r1, [r2, #0]
 8002ac8:	4a6f      	ldr	r2, [pc, #444]	; (8002c88 <makeImg+0x1798>)
 8002aca:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 8002acc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ad0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ad4:	6812      	ldr	r2, [r2, #0]
 8002ad6:	3201      	adds	r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002ae4:	dddd      	ble.n	8002aa2 <makeImg+0x15b2>
											}

										}
									break;
 8002ae6:	e177      	b.n	8002dd8 <makeImg+0x18e8>
									case 49:
										for(int j=0;j<=5760;j++){
 8002ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	e01b      	b.n	8002b2a <makeImg+0x163a>
											if(One_mf[j]!=0x3f){
 8002af2:	4a6a      	ldr	r2, [pc, #424]	; (8002c9c <makeImg+0x17ac>)
 8002af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4413      	add	r3, r2
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b3f      	cmp	r3, #63	; 0x3f
 8002b00:	d00c      	beq.n	8002b1c <makeImg+0x162c>
											  Frame[7680+j]=One_mf[j];
 8002b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002b0c:	4963      	ldr	r1, [pc, #396]	; (8002c9c <makeImg+0x17ac>)
 8002b0e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002b12:	6812      	ldr	r2, [r2, #0]
 8002b14:	440a      	add	r2, r1
 8002b16:	7811      	ldrb	r1, [r2, #0]
 8002b18:	4a5b      	ldr	r2, [pc, #364]	; (8002c88 <makeImg+0x1798>)
 8002b1a:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 8002b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b20:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002b24:	6812      	ldr	r2, [r2, #0]
 8002b26:	3201      	adds	r2, #1
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002b34:	dddd      	ble.n	8002af2 <makeImg+0x1602>
											}
										}
									break;
 8002b36:	e14f      	b.n	8002dd8 <makeImg+0x18e8>
									case 50:
										for(int j=0;j<=5760;j++){
 8002b38:	f107 0320 	add.w	r3, r7, #32
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	e01b      	b.n	8002b7a <makeImg+0x168a>
											if(Two_mf[j]!=0x3f){
 8002b42:	4a57      	ldr	r2, [pc, #348]	; (8002ca0 <makeImg+0x17b0>)
 8002b44:	f107 0320 	add.w	r3, r7, #32
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b3f      	cmp	r3, #63	; 0x3f
 8002b50:	d00c      	beq.n	8002b6c <makeImg+0x167c>
											  Frame[7680+j]=Two_mf[j];
 8002b52:	f107 0320 	add.w	r3, r7, #32
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002b5c:	4950      	ldr	r1, [pc, #320]	; (8002ca0 <makeImg+0x17b0>)
 8002b5e:	f107 0220 	add.w	r2, r7, #32
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	440a      	add	r2, r1
 8002b66:	7811      	ldrb	r1, [r2, #0]
 8002b68:	4a47      	ldr	r2, [pc, #284]	; (8002c88 <makeImg+0x1798>)
 8002b6a:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 8002b6c:	f107 0320 	add.w	r3, r7, #32
 8002b70:	f107 0220 	add.w	r2, r7, #32
 8002b74:	6812      	ldr	r2, [r2, #0]
 8002b76:	3201      	adds	r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	f107 0320 	add.w	r3, r7, #32
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002b84:	dddd      	ble.n	8002b42 <makeImg+0x1652>
											}
										}
									break;
 8002b86:	e127      	b.n	8002dd8 <makeImg+0x18e8>
									case 51:
										for(int j=0;j<=5760;j++){
 8002b88:	f107 031c 	add.w	r3, r7, #28
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	e01b      	b.n	8002bca <makeImg+0x16da>
											if(Three_mf[j]!=0x3f){
 8002b92:	4a44      	ldr	r2, [pc, #272]	; (8002ca4 <makeImg+0x17b4>)
 8002b94:	f107 031c 	add.w	r3, r7, #28
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b3f      	cmp	r3, #63	; 0x3f
 8002ba0:	d00c      	beq.n	8002bbc <makeImg+0x16cc>
											  Frame[7680+j]=Three_mf[j];
 8002ba2:	f107 031c 	add.w	r3, r7, #28
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002bac:	493d      	ldr	r1, [pc, #244]	; (8002ca4 <makeImg+0x17b4>)
 8002bae:	f107 021c 	add.w	r2, r7, #28
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	440a      	add	r2, r1
 8002bb6:	7811      	ldrb	r1, [r2, #0]
 8002bb8:	4a33      	ldr	r2, [pc, #204]	; (8002c88 <makeImg+0x1798>)
 8002bba:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 8002bbc:	f107 031c 	add.w	r3, r7, #28
 8002bc0:	f107 021c 	add.w	r2, r7, #28
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	3201      	adds	r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	f107 031c 	add.w	r3, r7, #28
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002bd4:	dddd      	ble.n	8002b92 <makeImg+0x16a2>
											}
										}
									break;
 8002bd6:	e0ff      	b.n	8002dd8 <makeImg+0x18e8>
									case 52:
										for(int j=0;j<=5760;j++){
 8002bd8:	f107 0318 	add.w	r3, r7, #24
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	e01b      	b.n	8002c1a <makeImg+0x172a>
											if(Four_mf[j]!=0x3f){
 8002be2:	4a31      	ldr	r2, [pc, #196]	; (8002ca8 <makeImg+0x17b8>)
 8002be4:	f107 0318 	add.w	r3, r7, #24
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4413      	add	r3, r2
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b3f      	cmp	r3, #63	; 0x3f
 8002bf0:	d00c      	beq.n	8002c0c <makeImg+0x171c>
											  Frame[7680+j]=Four_mf[j];
 8002bf2:	f107 0318 	add.w	r3, r7, #24
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002bfc:	492a      	ldr	r1, [pc, #168]	; (8002ca8 <makeImg+0x17b8>)
 8002bfe:	f107 0218 	add.w	r2, r7, #24
 8002c02:	6812      	ldr	r2, [r2, #0]
 8002c04:	440a      	add	r2, r1
 8002c06:	7811      	ldrb	r1, [r2, #0]
 8002c08:	4a1f      	ldr	r2, [pc, #124]	; (8002c88 <makeImg+0x1798>)
 8002c0a:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 8002c0c:	f107 0318 	add.w	r3, r7, #24
 8002c10:	f107 0218 	add.w	r2, r7, #24
 8002c14:	6812      	ldr	r2, [r2, #0]
 8002c16:	3201      	adds	r2, #1
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	f107 0318 	add.w	r3, r7, #24
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002c24:	dddd      	ble.n	8002be2 <makeImg+0x16f2>
											}
										}
									break;
 8002c26:	e0d7      	b.n	8002dd8 <makeImg+0x18e8>
									case 53:
										for(int j=0;j<=5760;j++){
 8002c28:	f107 0314 	add.w	r3, r7, #20
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	e01b      	b.n	8002c6a <makeImg+0x177a>
											if(Five_mf[j]!=0x3f){
 8002c32:	4a1e      	ldr	r2, [pc, #120]	; (8002cac <makeImg+0x17bc>)
 8002c34:	f107 0314 	add.w	r3, r7, #20
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b3f      	cmp	r3, #63	; 0x3f
 8002c40:	d00c      	beq.n	8002c5c <makeImg+0x176c>
											  Frame[7680+j]=Five_mf[j];
 8002c42:	f107 0314 	add.w	r3, r7, #20
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002c4c:	4917      	ldr	r1, [pc, #92]	; (8002cac <makeImg+0x17bc>)
 8002c4e:	f107 0214 	add.w	r2, r7, #20
 8002c52:	6812      	ldr	r2, [r2, #0]
 8002c54:	440a      	add	r2, r1
 8002c56:	7811      	ldrb	r1, [r2, #0]
 8002c58:	4a0b      	ldr	r2, [pc, #44]	; (8002c88 <makeImg+0x1798>)
 8002c5a:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 8002c5c:	f107 0314 	add.w	r3, r7, #20
 8002c60:	f107 0214 	add.w	r2, r7, #20
 8002c64:	6812      	ldr	r2, [r2, #0]
 8002c66:	3201      	adds	r2, #1
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	f107 0314 	add.w	r3, r7, #20
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002c74:	dddd      	ble.n	8002c32 <makeImg+0x1742>
											}
										}
									break;
 8002c76:	e0af      	b.n	8002dd8 <makeImg+0x18e8>
									case 54:
										for(int j=0;j<=5760;j++){
 8002c78:	f107 0310 	add.w	r3, r7, #16
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	e032      	b.n	8002ce8 <makeImg+0x17f8>
 8002c82:	bf00      	nop
 8002c84:	2401951c 	.word	0x2401951c
 8002c88:	24047d00 	.word	0x24047d00
 8002c8c:	2401ab9c 	.word	0x2401ab9c
 8002c90:	24053d00 	.word	0x24053d00
 8002c94:	24053d91 	.word	0x24053d91
 8002c98:	2400001c 	.word	0x2400001c
 8002c9c:	2400169c 	.word	0x2400169c
 8002ca0:	24002d1c 	.word	0x24002d1c
 8002ca4:	2400439c 	.word	0x2400439c
 8002ca8:	24005a1c 	.word	0x24005a1c
 8002cac:	2400709c 	.word	0x2400709c
											if(six_mf[j]!=0x3f){
 8002cb0:	4a4d      	ldr	r2, [pc, #308]	; (8002de8 <makeImg+0x18f8>)
 8002cb2:	f107 0310 	add.w	r3, r7, #16
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4413      	add	r3, r2
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b3f      	cmp	r3, #63	; 0x3f
 8002cbe:	d00c      	beq.n	8002cda <makeImg+0x17ea>
											  Frame[7680+j]=six_mf[j];
 8002cc0:	f107 0310 	add.w	r3, r7, #16
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002cca:	4947      	ldr	r1, [pc, #284]	; (8002de8 <makeImg+0x18f8>)
 8002ccc:	f107 0210 	add.w	r2, r7, #16
 8002cd0:	6812      	ldr	r2, [r2, #0]
 8002cd2:	440a      	add	r2, r1
 8002cd4:	7811      	ldrb	r1, [r2, #0]
 8002cd6:	4a45      	ldr	r2, [pc, #276]	; (8002dec <makeImg+0x18fc>)
 8002cd8:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 8002cda:	f107 0310 	add.w	r3, r7, #16
 8002cde:	f107 0210 	add.w	r2, r7, #16
 8002ce2:	6812      	ldr	r2, [r2, #0]
 8002ce4:	3201      	adds	r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	f107 0310 	add.w	r3, r7, #16
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002cf2:	dddd      	ble.n	8002cb0 <makeImg+0x17c0>
											}
										}
									break;
 8002cf4:	e070      	b.n	8002dd8 <makeImg+0x18e8>
									case 55:
										for(int j=0;j<=5760;j++){
 8002cf6:	f107 030c 	add.w	r3, r7, #12
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	e01b      	b.n	8002d38 <makeImg+0x1848>
											if(seven_mf[j]!=0x3f){
 8002d00:	4a3b      	ldr	r2, [pc, #236]	; (8002df0 <makeImg+0x1900>)
 8002d02:	f107 030c 	add.w	r3, r7, #12
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4413      	add	r3, r2
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b3f      	cmp	r3, #63	; 0x3f
 8002d0e:	d00c      	beq.n	8002d2a <makeImg+0x183a>
											  Frame[7680+j]=seven_mf[j];
 8002d10:	f107 030c 	add.w	r3, r7, #12
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002d1a:	4935      	ldr	r1, [pc, #212]	; (8002df0 <makeImg+0x1900>)
 8002d1c:	f107 020c 	add.w	r2, r7, #12
 8002d20:	6812      	ldr	r2, [r2, #0]
 8002d22:	440a      	add	r2, r1
 8002d24:	7811      	ldrb	r1, [r2, #0]
 8002d26:	4a31      	ldr	r2, [pc, #196]	; (8002dec <makeImg+0x18fc>)
 8002d28:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 8002d2a:	f107 030c 	add.w	r3, r7, #12
 8002d2e:	f107 020c 	add.w	r2, r7, #12
 8002d32:	6812      	ldr	r2, [r2, #0]
 8002d34:	3201      	adds	r2, #1
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	f107 030c 	add.w	r3, r7, #12
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002d42:	dddd      	ble.n	8002d00 <makeImg+0x1810>
											}
										}
									break;
 8002d44:	e048      	b.n	8002dd8 <makeImg+0x18e8>
									case 56:
										for(int j=0;j<=5760;j++){
 8002d46:	f107 0308 	add.w	r3, r7, #8
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	e01b      	b.n	8002d88 <makeImg+0x1898>
											if(egg_mf[j]!=0x3f){
 8002d50:	4a28      	ldr	r2, [pc, #160]	; (8002df4 <makeImg+0x1904>)
 8002d52:	f107 0308 	add.w	r3, r7, #8
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4413      	add	r3, r2
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b3f      	cmp	r3, #63	; 0x3f
 8002d5e:	d00c      	beq.n	8002d7a <makeImg+0x188a>
											  Frame[7680+j]=egg_mf[j];
 8002d60:	f107 0308 	add.w	r3, r7, #8
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002d6a:	4922      	ldr	r1, [pc, #136]	; (8002df4 <makeImg+0x1904>)
 8002d6c:	f107 0208 	add.w	r2, r7, #8
 8002d70:	6812      	ldr	r2, [r2, #0]
 8002d72:	440a      	add	r2, r1
 8002d74:	7811      	ldrb	r1, [r2, #0]
 8002d76:	4a1d      	ldr	r2, [pc, #116]	; (8002dec <makeImg+0x18fc>)
 8002d78:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 8002d7a:	f107 0308 	add.w	r3, r7, #8
 8002d7e:	f107 0208 	add.w	r2, r7, #8
 8002d82:	6812      	ldr	r2, [r2, #0]
 8002d84:	3201      	adds	r2, #1
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	f107 0308 	add.w	r3, r7, #8
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002d92:	dddd      	ble.n	8002d50 <makeImg+0x1860>
											}
										}
									break;
 8002d94:	e020      	b.n	8002dd8 <makeImg+0x18e8>
									case 57:
										for(int j=0;j<=5760;j++){
 8002d96:	1d3b      	adds	r3, r7, #4
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	e016      	b.n	8002dcc <makeImg+0x18dc>
											if(nine_mf[j]!=0x3f){
 8002d9e:	4a16      	ldr	r2, [pc, #88]	; (8002df8 <makeImg+0x1908>)
 8002da0:	1d3b      	adds	r3, r7, #4
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4413      	add	r3, r2
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b3f      	cmp	r3, #63	; 0x3f
 8002daa:	d00a      	beq.n	8002dc2 <makeImg+0x18d2>
											  Frame[7680+j]=nine_mf[j];
 8002dac:	1d3b      	adds	r3, r7, #4
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002db4:	4910      	ldr	r1, [pc, #64]	; (8002df8 <makeImg+0x1908>)
 8002db6:	1d3a      	adds	r2, r7, #4
 8002db8:	6812      	ldr	r2, [r2, #0]
 8002dba:	440a      	add	r2, r1
 8002dbc:	7811      	ldrb	r1, [r2, #0]
 8002dbe:	4a0b      	ldr	r2, [pc, #44]	; (8002dec <makeImg+0x18fc>)
 8002dc0:	54d1      	strb	r1, [r2, r3]
										for(int j=0;j<=5760;j++){
 8002dc2:	1d3b      	adds	r3, r7, #4
 8002dc4:	1d3a      	adds	r2, r7, #4
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	3201      	adds	r2, #1
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	1d3b      	adds	r3, r7, #4
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8002dd4:	dde3      	ble.n	8002d9e <makeImg+0x18ae>
											}
										}
									break;
 8002dd6:	bf00      	nop





}
 8002dd8:	bf00      	nop
 8002dda:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	2400871c 	.word	0x2400871c
 8002dec:	24047d00 	.word	0x24047d00
 8002df0:	24009d9c 	.word	0x24009d9c
 8002df4:	2400b41c 	.word	0x2400b41c
 8002df8:	2400ca9c 	.word	0x2400ca9c

08002dfc <fillFrame>:





void fillFrame(){
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
	for(int i=0;i<49152;i++){
 8002e02:	2300      	movs	r3, #0
 8002e04:	607b      	str	r3, [r7, #4]
 8002e06:	e007      	b.n	8002e18 <fillFrame+0x1c>
		Frame[i]=0x3f;
 8002e08:	4a09      	ldr	r2, [pc, #36]	; (8002e30 <fillFrame+0x34>)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	223f      	movs	r2, #63	; 0x3f
 8002e10:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<49152;i++){
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3301      	adds	r3, #1
 8002e16:	607b      	str	r3, [r7, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002e1e:	dbf3      	blt.n	8002e08 <fillFrame+0xc>
	}
}
 8002e20:	bf00      	nop
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	24047d00 	.word	0x24047d00

08002e34 <Updatescreen>:





void Updatescreen(){
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
	fillFrame();
 8002e38:	f7ff ffe0 	bl	8002dfc <fillFrame>
//	sortt(26.42,42.26);
	sortt(realtemp,realhumidity);
 8002e3c:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <Updatescreen+0x3c>)
 8002e3e:	edd3 7a00 	vldr	s15, [r3]
 8002e42:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e46:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <Updatescreen+0x40>)
 8002e48:	edd3 6a00 	vldr	s13, [r3]
 8002e4c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002e50:	eeb0 1b46 	vmov.f64	d1, d6
 8002e54:	eeb0 0b47 	vmov.f64	d0, d7
 8002e58:	f7fe faf2 	bl	8001440 <sortt>
	makeImg();
 8002e5c:	f7fe fb48 	bl	80014f0 <makeImg>
	HAL_SPI_Transmit_DMA(&hspi1, Frame, 49152);
 8002e60:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002e64:	4904      	ldr	r1, [pc, #16]	; (8002e78 <Updatescreen+0x44>)
 8002e66:	4805      	ldr	r0, [pc, #20]	; (8002e7c <Updatescreen+0x48>)
 8002e68:	f006 feee 	bl	8009c48 <HAL_SPI_Transmit_DMA>
}
 8002e6c:	bf00      	nop
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	24053d88 	.word	0x24053d88
 8002e74:	24053d8c 	.word	0x24053d8c
 8002e78:	24047d00 	.word	0x24047d00
 8002e7c:	24054324 	.word	0x24054324

08002e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e84:	b672      	cpsid	i
}
 8002e86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e88:	e7fe      	b.n	8002e88 <Error_Handler+0x8>
	...

08002e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e92:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <HAL_MspInit+0x30>)
 8002e94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e98:	4a08      	ldr	r2, [pc, #32]	; (8002ebc <HAL_MspInit+0x30>)
 8002e9a:	f043 0302 	orr.w	r3, r3, #2
 8002e9e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002ea2:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <HAL_MspInit+0x30>)
 8002ea4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	607b      	str	r3, [r7, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	58024400 	.word	0x58024400

08002ec0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08e      	sub	sp, #56	; 0x38
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
 8002ed2:	609a      	str	r2, [r3, #8]
 8002ed4:	60da      	str	r2, [r3, #12]
 8002ed6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a59      	ldr	r2, [pc, #356]	; (8003044 <HAL_ETH_MspInit+0x184>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	f040 80ab 	bne.w	800303a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8002ee4:	4b58      	ldr	r3, [pc, #352]	; (8003048 <HAL_ETH_MspInit+0x188>)
 8002ee6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002eea:	4a57      	ldr	r2, [pc, #348]	; (8003048 <HAL_ETH_MspInit+0x188>)
 8002eec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ef0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002ef4:	4b54      	ldr	r3, [pc, #336]	; (8003048 <HAL_ETH_MspInit+0x188>)
 8002ef6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002efa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002efe:	623b      	str	r3, [r7, #32]
 8002f00:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8002f02:	4b51      	ldr	r3, [pc, #324]	; (8003048 <HAL_ETH_MspInit+0x188>)
 8002f04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f08:	4a4f      	ldr	r2, [pc, #316]	; (8003048 <HAL_ETH_MspInit+0x188>)
 8002f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f0e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002f12:	4b4d      	ldr	r3, [pc, #308]	; (8003048 <HAL_ETH_MspInit+0x188>)
 8002f14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f1c:	61fb      	str	r3, [r7, #28]
 8002f1e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002f20:	4b49      	ldr	r3, [pc, #292]	; (8003048 <HAL_ETH_MspInit+0x188>)
 8002f22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f26:	4a48      	ldr	r2, [pc, #288]	; (8003048 <HAL_ETH_MspInit+0x188>)
 8002f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f2c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002f30:	4b45      	ldr	r3, [pc, #276]	; (8003048 <HAL_ETH_MspInit+0x188>)
 8002f32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3a:	61bb      	str	r3, [r7, #24]
 8002f3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f3e:	4b42      	ldr	r3, [pc, #264]	; (8003048 <HAL_ETH_MspInit+0x188>)
 8002f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f44:	4a40      	ldr	r2, [pc, #256]	; (8003048 <HAL_ETH_MspInit+0x188>)
 8002f46:	f043 0304 	orr.w	r3, r3, #4
 8002f4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f4e:	4b3e      	ldr	r3, [pc, #248]	; (8003048 <HAL_ETH_MspInit+0x188>)
 8002f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f5c:	4b3a      	ldr	r3, [pc, #232]	; (8003048 <HAL_ETH_MspInit+0x188>)
 8002f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f62:	4a39      	ldr	r2, [pc, #228]	; (8003048 <HAL_ETH_MspInit+0x188>)
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f6c:	4b36      	ldr	r3, [pc, #216]	; (8003048 <HAL_ETH_MspInit+0x188>)
 8002f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	613b      	str	r3, [r7, #16]
 8002f78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f7a:	4b33      	ldr	r3, [pc, #204]	; (8003048 <HAL_ETH_MspInit+0x188>)
 8002f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f80:	4a31      	ldr	r2, [pc, #196]	; (8003048 <HAL_ETH_MspInit+0x188>)
 8002f82:	f043 0302 	orr.w	r3, r3, #2
 8002f86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f8a:	4b2f      	ldr	r3, [pc, #188]	; (8003048 <HAL_ETH_MspInit+0x188>)
 8002f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f98:	4b2b      	ldr	r3, [pc, #172]	; (8003048 <HAL_ETH_MspInit+0x188>)
 8002f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f9e:	4a2a      	ldr	r2, [pc, #168]	; (8003048 <HAL_ETH_MspInit+0x188>)
 8002fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fa8:	4b27      	ldr	r3, [pc, #156]	; (8003048 <HAL_ETH_MspInit+0x188>)
 8002faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb2:	60bb      	str	r3, [r7, #8]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002fb6:	2332      	movs	r3, #50	; 0x32
 8002fb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fba:	2302      	movs	r3, #2
 8002fbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002fc6:	230b      	movs	r3, #11
 8002fc8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fce:	4619      	mov	r1, r3
 8002fd0:	481e      	ldr	r0, [pc, #120]	; (800304c <HAL_ETH_MspInit+0x18c>)
 8002fd2:	f003 fc65 	bl	80068a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002fd6:	2386      	movs	r3, #134	; 0x86
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002fe6:	230b      	movs	r3, #11
 8002fe8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4817      	ldr	r0, [pc, #92]	; (8003050 <HAL_ETH_MspInit+0x190>)
 8002ff2:	f003 fc55 	bl	80068a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002ff6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ffa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003000:	2300      	movs	r3, #0
 8003002:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003004:	2300      	movs	r3, #0
 8003006:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003008:	230b      	movs	r3, #11
 800300a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800300c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003010:	4619      	mov	r1, r3
 8003012:	4810      	ldr	r0, [pc, #64]	; (8003054 <HAL_ETH_MspInit+0x194>)
 8003014:	f003 fc44 	bl	80068a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8003018:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800301c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301e:	2302      	movs	r3, #2
 8003020:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003022:	2300      	movs	r3, #0
 8003024:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003026:	2300      	movs	r3, #0
 8003028:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800302a:	230b      	movs	r3, #11
 800302c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800302e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003032:	4619      	mov	r1, r3
 8003034:	4808      	ldr	r0, [pc, #32]	; (8003058 <HAL_ETH_MspInit+0x198>)
 8003036:	f003 fc33 	bl	80068a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800303a:	bf00      	nop
 800303c:	3738      	adds	r7, #56	; 0x38
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40028000 	.word	0x40028000
 8003048:	58024400 	.word	0x58024400
 800304c:	58020800 	.word	0x58020800
 8003050:	58020000 	.word	0x58020000
 8003054:	58020400 	.word	0x58020400
 8003058:	58021800 	.word	0x58021800

0800305c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b0ba      	sub	sp, #232	; 0xe8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003064:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	60da      	str	r2, [r3, #12]
 8003072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003074:	f107 0318 	add.w	r3, r7, #24
 8003078:	22bc      	movs	r2, #188	; 0xbc
 800307a:	2100      	movs	r1, #0
 800307c:	4618      	mov	r0, r3
 800307e:	f009 fb47 	bl	800c710 <memset>
  if(hspi->Instance==SPI1)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a51      	ldr	r2, [pc, #324]	; (80031cc <HAL_SPI_MspInit+0x170>)
 8003088:	4293      	cmp	r3, r2
 800308a:	f040 809b 	bne.w	80031c4 <HAL_SPI_MspInit+0x168>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800308e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003092:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003094:	2300      	movs	r3, #0
 8003096:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003098:	f107 0318 	add.w	r3, r7, #24
 800309c:	4618      	mov	r0, r3
 800309e:	f004 ff79 	bl	8007f94 <HAL_RCCEx_PeriphCLKConfig>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 80030a8:	f7ff feea 	bl	8002e80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030ac:	4b48      	ldr	r3, [pc, #288]	; (80031d0 <HAL_SPI_MspInit+0x174>)
 80030ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030b2:	4a47      	ldr	r2, [pc, #284]	; (80031d0 <HAL_SPI_MspInit+0x174>)
 80030b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030b8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80030bc:	4b44      	ldr	r3, [pc, #272]	; (80031d0 <HAL_SPI_MspInit+0x174>)
 80030be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ca:	4b41      	ldr	r3, [pc, #260]	; (80031d0 <HAL_SPI_MspInit+0x174>)
 80030cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030d0:	4a3f      	ldr	r2, [pc, #252]	; (80031d0 <HAL_SPI_MspInit+0x174>)
 80030d2:	f043 0301 	orr.w	r3, r3, #1
 80030d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030da:	4b3d      	ldr	r3, [pc, #244]	; (80031d0 <HAL_SPI_MspInit+0x174>)
 80030dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030e8:	4b39      	ldr	r3, [pc, #228]	; (80031d0 <HAL_SPI_MspInit+0x174>)
 80030ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ee:	4a38      	ldr	r2, [pc, #224]	; (80031d0 <HAL_SPI_MspInit+0x174>)
 80030f0:	f043 0308 	orr.w	r3, r3, #8
 80030f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030f8:	4b35      	ldr	r3, [pc, #212]	; (80031d0 <HAL_SPI_MspInit+0x174>)
 80030fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003106:	2320      	movs	r3, #32
 8003108:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310c:	2302      	movs	r3, #2
 800310e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003112:	2300      	movs	r3, #0
 8003114:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003118:	2300      	movs	r3, #0
 800311a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800311e:	2305      	movs	r3, #5
 8003120:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003124:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003128:	4619      	mov	r1, r3
 800312a:	482a      	ldr	r0, [pc, #168]	; (80031d4 <HAL_SPI_MspInit+0x178>)
 800312c:	f003 fbb8 	bl	80068a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003130:	2380      	movs	r3, #128	; 0x80
 8003132:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003136:	2302      	movs	r3, #2
 8003138:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313c:	2300      	movs	r3, #0
 800313e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003142:	2300      	movs	r3, #0
 8003144:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003148:	2305      	movs	r3, #5
 800314a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800314e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003152:	4619      	mov	r1, r3
 8003154:	4820      	ldr	r0, [pc, #128]	; (80031d8 <HAL_SPI_MspInit+0x17c>)
 8003156:	f003 fba3 	bl	80068a0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 800315a:	4b20      	ldr	r3, [pc, #128]	; (80031dc <HAL_SPI_MspInit+0x180>)
 800315c:	4a20      	ldr	r2, [pc, #128]	; (80031e0 <HAL_SPI_MspInit+0x184>)
 800315e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8003160:	4b1e      	ldr	r3, [pc, #120]	; (80031dc <HAL_SPI_MspInit+0x180>)
 8003162:	2226      	movs	r2, #38	; 0x26
 8003164:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003166:	4b1d      	ldr	r3, [pc, #116]	; (80031dc <HAL_SPI_MspInit+0x180>)
 8003168:	2240      	movs	r2, #64	; 0x40
 800316a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800316c:	4b1b      	ldr	r3, [pc, #108]	; (80031dc <HAL_SPI_MspInit+0x180>)
 800316e:	2200      	movs	r2, #0
 8003170:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003172:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <HAL_SPI_MspInit+0x180>)
 8003174:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003178:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800317a:	4b18      	ldr	r3, [pc, #96]	; (80031dc <HAL_SPI_MspInit+0x180>)
 800317c:	2200      	movs	r2, #0
 800317e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003180:	4b16      	ldr	r3, [pc, #88]	; (80031dc <HAL_SPI_MspInit+0x180>)
 8003182:	2200      	movs	r2, #0
 8003184:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003186:	4b15      	ldr	r3, [pc, #84]	; (80031dc <HAL_SPI_MspInit+0x180>)
 8003188:	2200      	movs	r2, #0
 800318a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800318c:	4b13      	ldr	r3, [pc, #76]	; (80031dc <HAL_SPI_MspInit+0x180>)
 800318e:	2200      	movs	r2, #0
 8003190:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003192:	4b12      	ldr	r3, [pc, #72]	; (80031dc <HAL_SPI_MspInit+0x180>)
 8003194:	2200      	movs	r2, #0
 8003196:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003198:	4810      	ldr	r0, [pc, #64]	; (80031dc <HAL_SPI_MspInit+0x180>)
 800319a:	f000 fc43 	bl	8003a24 <HAL_DMA_Init>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <HAL_SPI_MspInit+0x14c>
    {
      Error_Handler();
 80031a4:	f7ff fe6c 	bl	8002e80 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a0c      	ldr	r2, [pc, #48]	; (80031dc <HAL_SPI_MspInit+0x180>)
 80031ac:	679a      	str	r2, [r3, #120]	; 0x78
 80031ae:	4a0b      	ldr	r2, [pc, #44]	; (80031dc <HAL_SPI_MspInit+0x180>)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80031b4:	2200      	movs	r2, #0
 80031b6:	2100      	movs	r1, #0
 80031b8:	2023      	movs	r0, #35	; 0x23
 80031ba:	f000 fbfe 	bl	80039ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80031be:	2023      	movs	r0, #35	; 0x23
 80031c0:	f000 fc15 	bl	80039ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80031c4:	bf00      	nop
 80031c6:	37e8      	adds	r7, #232	; 0xe8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40013000 	.word	0x40013000
 80031d0:	58024400 	.word	0x58024400
 80031d4:	58020000 	.word	0x58020000
 80031d8:	58020c00 	.word	0x58020c00
 80031dc:	240544b4 	.word	0x240544b4
 80031e0:	40020010 	.word	0x40020010

080031e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f4:	d117      	bne.n	8003226 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031f6:	4b39      	ldr	r3, [pc, #228]	; (80032dc <HAL_TIM_Base_MspInit+0xf8>)
 80031f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031fc:	4a37      	ldr	r2, [pc, #220]	; (80032dc <HAL_TIM_Base_MspInit+0xf8>)
 80031fe:	f043 0301 	orr.w	r3, r3, #1
 8003202:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003206:	4b35      	ldr	r3, [pc, #212]	; (80032dc <HAL_TIM_Base_MspInit+0xf8>)
 8003208:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	617b      	str	r3, [r7, #20]
 8003212:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003214:	2200      	movs	r2, #0
 8003216:	2100      	movs	r1, #0
 8003218:	201c      	movs	r0, #28
 800321a:	f000 fbce 	bl	80039ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800321e:	201c      	movs	r0, #28
 8003220:	f000 fbe5 	bl	80039ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003224:	e055      	b.n	80032d2 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM3)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a2d      	ldr	r2, [pc, #180]	; (80032e0 <HAL_TIM_Base_MspInit+0xfc>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d117      	bne.n	8003260 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003230:	4b2a      	ldr	r3, [pc, #168]	; (80032dc <HAL_TIM_Base_MspInit+0xf8>)
 8003232:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003236:	4a29      	ldr	r2, [pc, #164]	; (80032dc <HAL_TIM_Base_MspInit+0xf8>)
 8003238:	f043 0302 	orr.w	r3, r3, #2
 800323c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003240:	4b26      	ldr	r3, [pc, #152]	; (80032dc <HAL_TIM_Base_MspInit+0xf8>)
 8003242:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800324e:	2200      	movs	r2, #0
 8003250:	2100      	movs	r1, #0
 8003252:	201d      	movs	r0, #29
 8003254:	f000 fbb1 	bl	80039ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003258:	201d      	movs	r0, #29
 800325a:	f000 fbc8 	bl	80039ee <HAL_NVIC_EnableIRQ>
}
 800325e:	e038      	b.n	80032d2 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM5)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a1f      	ldr	r2, [pc, #124]	; (80032e4 <HAL_TIM_Base_MspInit+0x100>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d117      	bne.n	800329a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800326a:	4b1c      	ldr	r3, [pc, #112]	; (80032dc <HAL_TIM_Base_MspInit+0xf8>)
 800326c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003270:	4a1a      	ldr	r2, [pc, #104]	; (80032dc <HAL_TIM_Base_MspInit+0xf8>)
 8003272:	f043 0308 	orr.w	r3, r3, #8
 8003276:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800327a:	4b18      	ldr	r3, [pc, #96]	; (80032dc <HAL_TIM_Base_MspInit+0xf8>)
 800327c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003288:	2200      	movs	r2, #0
 800328a:	2100      	movs	r1, #0
 800328c:	2032      	movs	r0, #50	; 0x32
 800328e:	f000 fb94 	bl	80039ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003292:	2032      	movs	r0, #50	; 0x32
 8003294:	f000 fbab 	bl	80039ee <HAL_NVIC_EnableIRQ>
}
 8003298:	e01b      	b.n	80032d2 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM15)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a12      	ldr	r2, [pc, #72]	; (80032e8 <HAL_TIM_Base_MspInit+0x104>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d116      	bne.n	80032d2 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80032a4:	4b0d      	ldr	r3, [pc, #52]	; (80032dc <HAL_TIM_Base_MspInit+0xf8>)
 80032a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032aa:	4a0c      	ldr	r2, [pc, #48]	; (80032dc <HAL_TIM_Base_MspInit+0xf8>)
 80032ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80032b4:	4b09      	ldr	r3, [pc, #36]	; (80032dc <HAL_TIM_Base_MspInit+0xf8>)
 80032b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032be:	60bb      	str	r3, [r7, #8]
 80032c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80032c2:	2200      	movs	r2, #0
 80032c4:	2100      	movs	r1, #0
 80032c6:	2074      	movs	r0, #116	; 0x74
 80032c8:	f000 fb77 	bl	80039ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80032cc:	2074      	movs	r0, #116	; 0x74
 80032ce:	f000 fb8e 	bl	80039ee <HAL_NVIC_EnableIRQ>
}
 80032d2:	bf00      	nop
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	58024400 	.word	0x58024400
 80032e0:	40000400 	.word	0x40000400
 80032e4:	40000c00 	.word	0x40000c00
 80032e8:	40014000 	.word	0x40014000

080032ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b0b8      	sub	sp, #224	; 0xe0
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	605a      	str	r2, [r3, #4]
 80032fe:	609a      	str	r2, [r3, #8]
 8003300:	60da      	str	r2, [r3, #12]
 8003302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003304:	f107 0310 	add.w	r3, r7, #16
 8003308:	22bc      	movs	r2, #188	; 0xbc
 800330a:	2100      	movs	r1, #0
 800330c:	4618      	mov	r0, r3
 800330e:	f009 f9ff 	bl	800c710 <memset>
  if(huart->Instance==USART3)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a25      	ldr	r2, [pc, #148]	; (80033ac <HAL_UART_MspInit+0xc0>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d142      	bne.n	80033a2 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800331c:	2302      	movs	r3, #2
 800331e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003320:	2300      	movs	r3, #0
 8003322:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003326:	f107 0310 	add.w	r3, r7, #16
 800332a:	4618      	mov	r0, r3
 800332c:	f004 fe32 	bl	8007f94 <HAL_RCCEx_PeriphCLKConfig>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003336:	f7ff fda3 	bl	8002e80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800333a:	4b1d      	ldr	r3, [pc, #116]	; (80033b0 <HAL_UART_MspInit+0xc4>)
 800333c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003340:	4a1b      	ldr	r2, [pc, #108]	; (80033b0 <HAL_UART_MspInit+0xc4>)
 8003342:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003346:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800334a:	4b19      	ldr	r3, [pc, #100]	; (80033b0 <HAL_UART_MspInit+0xc4>)
 800334c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003350:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003358:	4b15      	ldr	r3, [pc, #84]	; (80033b0 <HAL_UART_MspInit+0xc4>)
 800335a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800335e:	4a14      	ldr	r2, [pc, #80]	; (80033b0 <HAL_UART_MspInit+0xc4>)
 8003360:	f043 0308 	orr.w	r3, r3, #8
 8003364:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003368:	4b11      	ldr	r3, [pc, #68]	; (80033b0 <HAL_UART_MspInit+0xc4>)
 800336a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	60bb      	str	r3, [r7, #8]
 8003374:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003376:	f44f 7340 	mov.w	r3, #768	; 0x300
 800337a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337e:	2302      	movs	r3, #2
 8003380:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003384:	2300      	movs	r3, #0
 8003386:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338a:	2300      	movs	r3, #0
 800338c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003390:	2307      	movs	r3, #7
 8003392:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003396:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800339a:	4619      	mov	r1, r3
 800339c:	4805      	ldr	r0, [pc, #20]	; (80033b4 <HAL_UART_MspInit+0xc8>)
 800339e:	f003 fa7f 	bl	80068a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80033a2:	bf00      	nop
 80033a4:	37e0      	adds	r7, #224	; 0xe0
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40004800 	.word	0x40004800
 80033b0:	58024400 	.word	0x58024400
 80033b4:	58020c00 	.word	0x58020c00

080033b8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b0b8      	sub	sp, #224	; 0xe0
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	609a      	str	r2, [r3, #8]
 80033cc:	60da      	str	r2, [r3, #12]
 80033ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033d0:	f107 0310 	add.w	r3, r7, #16
 80033d4:	22bc      	movs	r2, #188	; 0xbc
 80033d6:	2100      	movs	r1, #0
 80033d8:	4618      	mov	r0, r3
 80033da:	f009 f999 	bl	800c710 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a37      	ldr	r2, [pc, #220]	; (80034c0 <HAL_PCD_MspInit+0x108>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d166      	bne.n	80034b6 <HAL_PCD_MspInit+0xfe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80033e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80033ec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80033ee:	2301      	movs	r3, #1
 80033f0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80033f2:	2312      	movs	r3, #18
 80033f4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80033f6:	2302      	movs	r3, #2
 80033f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80033fa:	2303      	movs	r3, #3
 80033fc:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80033fe:	2302      	movs	r3, #2
 8003400:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8003402:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003406:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8003408:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800340c:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800340e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003412:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003416:	f107 0310 	add.w	r3, r7, #16
 800341a:	4618      	mov	r0, r3
 800341c:	f004 fdba 	bl	8007f94 <HAL_RCCEx_PeriphCLKConfig>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8003426:	f7ff fd2b 	bl	8002e80 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800342a:	f003 fdeb 	bl	8007004 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800342e:	4b25      	ldr	r3, [pc, #148]	; (80034c4 <HAL_PCD_MspInit+0x10c>)
 8003430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003434:	4a23      	ldr	r2, [pc, #140]	; (80034c4 <HAL_PCD_MspInit+0x10c>)
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800343e:	4b21      	ldr	r3, [pc, #132]	; (80034c4 <HAL_PCD_MspInit+0x10c>)
 8003440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800344c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003450:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003454:	2302      	movs	r3, #2
 8003456:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345a:	2300      	movs	r3, #0
 800345c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003460:	2300      	movs	r3, #0
 8003462:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8003466:	230a      	movs	r3, #10
 8003468:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800346c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003470:	4619      	mov	r1, r3
 8003472:	4815      	ldr	r0, [pc, #84]	; (80034c8 <HAL_PCD_MspInit+0x110>)
 8003474:	f003 fa14 	bl	80068a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003478:	f44f 7300 	mov.w	r3, #512	; 0x200
 800347c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003480:	2300      	movs	r3, #0
 8003482:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003486:	2300      	movs	r3, #0
 8003488:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800348c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003490:	4619      	mov	r1, r3
 8003492:	480d      	ldr	r0, [pc, #52]	; (80034c8 <HAL_PCD_MspInit+0x110>)
 8003494:	f003 fa04 	bl	80068a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003498:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <HAL_PCD_MspInit+0x10c>)
 800349a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800349e:	4a09      	ldr	r2, [pc, #36]	; (80034c4 <HAL_PCD_MspInit+0x10c>)
 80034a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034a4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80034a8:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <HAL_PCD_MspInit+0x10c>)
 80034aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80034ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034b2:	60bb      	str	r3, [r7, #8]
 80034b4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80034b6:	bf00      	nop
 80034b8:	37e0      	adds	r7, #224	; 0xe0
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40080000 	.word	0x40080000
 80034c4:	58024400 	.word	0x58024400
 80034c8:	58020000 	.word	0x58020000

080034cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034d0:	e7fe      	b.n	80034d0 <NMI_Handler+0x4>

080034d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034d2:	b480      	push	{r7}
 80034d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034d6:	e7fe      	b.n	80034d6 <HardFault_Handler+0x4>

080034d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034dc:	e7fe      	b.n	80034dc <MemManage_Handler+0x4>

080034de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034de:	b480      	push	{r7}
 80034e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034e2:	e7fe      	b.n	80034e2 <BusFault_Handler+0x4>

080034e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034e8:	e7fe      	b.n	80034e8 <UsageFault_Handler+0x4>

080034ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034ea:	b480      	push	{r7}
 80034ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034ee:	bf00      	nop
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034fc:	bf00      	nop
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003506:	b480      	push	{r7}
 8003508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800350a:	bf00      	nop
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003518:	f000 f910 	bl	800373c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800351c:	bf00      	nop
 800351e:	bd80      	pop	{r7, pc}

08003520 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003524:	4802      	ldr	r0, [pc, #8]	; (8003530 <DMA1_Stream0_IRQHandler+0x10>)
 8003526:	f001 fa87 	bl	8004a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800352a:	bf00      	nop
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	240544b4 	.word	0x240544b4

08003534 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003538:	4802      	ldr	r0, [pc, #8]	; (8003544 <TIM2_IRQHandler+0x10>)
 800353a:	f007 f92f 	bl	800a79c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800353e:	bf00      	nop
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	240543ac 	.word	0x240543ac

08003548 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800354c:	4802      	ldr	r0, [pc, #8]	; (8003558 <TIM3_IRQHandler+0x10>)
 800354e:	f007 f925 	bl	800a79c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003552:	bf00      	nop
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	240542d8 	.word	0x240542d8

0800355c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003560:	4802      	ldr	r0, [pc, #8]	; (800356c <SPI1_IRQHandler+0x10>)
 8003562:	f006 fcbb 	bl	8009edc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003566:	bf00      	nop
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	24054324 	.word	0x24054324

08003570 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003574:	4802      	ldr	r0, [pc, #8]	; (8003580 <TIM5_IRQHandler+0x10>)
 8003576:	f007 f911 	bl	800a79c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800357a:	bf00      	nop
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	2405428c 	.word	0x2405428c

08003584 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8003588:	4802      	ldr	r0, [pc, #8]	; (8003594 <TIM15_IRQHandler+0x10>)
 800358a:	f007 f907 	bl	800a79c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 800358e:	bf00      	nop
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	24053e38 	.word	0x24053e38

08003598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035a0:	4a14      	ldr	r2, [pc, #80]	; (80035f4 <_sbrk+0x5c>)
 80035a2:	4b15      	ldr	r3, [pc, #84]	; (80035f8 <_sbrk+0x60>)
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035ac:	4b13      	ldr	r3, [pc, #76]	; (80035fc <_sbrk+0x64>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d102      	bne.n	80035ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035b4:	4b11      	ldr	r3, [pc, #68]	; (80035fc <_sbrk+0x64>)
 80035b6:	4a12      	ldr	r2, [pc, #72]	; (8003600 <_sbrk+0x68>)
 80035b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035ba:	4b10      	ldr	r3, [pc, #64]	; (80035fc <_sbrk+0x64>)
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4413      	add	r3, r2
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d207      	bcs.n	80035d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035c8:	f009 f878 	bl	800c6bc <__errno>
 80035cc:	4603      	mov	r3, r0
 80035ce:	220c      	movs	r2, #12
 80035d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035d2:	f04f 33ff 	mov.w	r3, #4294967295
 80035d6:	e009      	b.n	80035ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035d8:	4b08      	ldr	r3, [pc, #32]	; (80035fc <_sbrk+0x64>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035de:	4b07      	ldr	r3, [pc, #28]	; (80035fc <_sbrk+0x64>)
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4413      	add	r3, r2
 80035e6:	4a05      	ldr	r2, [pc, #20]	; (80035fc <_sbrk+0x64>)
 80035e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035ea:	68fb      	ldr	r3, [r7, #12]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3718      	adds	r7, #24
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	24080000 	.word	0x24080000
 80035f8:	00000400 	.word	0x00000400
 80035fc:	24053d9c 	.word	0x24053d9c
 8003600:	24054540 	.word	0x24054540

08003604 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003604:	f8df d034 	ldr.w	sp, [pc, #52]	; 800363c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003608:	f7fd f856 	bl	80006b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800360c:	480c      	ldr	r0, [pc, #48]	; (8003640 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800360e:	490d      	ldr	r1, [pc, #52]	; (8003644 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003610:	4a0d      	ldr	r2, [pc, #52]	; (8003648 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003614:	e002      	b.n	800361c <LoopCopyDataInit>

08003616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800361a:	3304      	adds	r3, #4

0800361c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800361c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800361e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003620:	d3f9      	bcc.n	8003616 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003622:	4a0a      	ldr	r2, [pc, #40]	; (800364c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003624:	4c0a      	ldr	r4, [pc, #40]	; (8003650 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003628:	e001      	b.n	800362e <LoopFillZerobss>

0800362a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800362a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800362c:	3204      	adds	r2, #4

0800362e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800362e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003630:	d3fb      	bcc.n	800362a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003632:	f009 f849 	bl	800c6c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003636:	f7fd f8d9 	bl	80007ec <main>
  bx  lr
 800363a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800363c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003640:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003644:	24047c08 	.word	0x24047c08
  ldr r2, =_sidata
 8003648:	0800d01c 	.word	0x0800d01c
  ldr r2, =_sbss
 800364c:	24047cc8 	.word	0x24047cc8
  ldr r4, =_ebss
 8003650:	24054540 	.word	0x24054540

08003654 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003654:	e7fe      	b.n	8003654 <ADC3_IRQHandler>
	...

08003658 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800365e:	2003      	movs	r0, #3
 8003660:	f000 f9a0 	bl	80039a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003664:	f004 fac0 	bl	8007be8 <HAL_RCC_GetSysClockFreq>
 8003668:	4602      	mov	r2, r0
 800366a:	4b15      	ldr	r3, [pc, #84]	; (80036c0 <HAL_Init+0x68>)
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	0a1b      	lsrs	r3, r3, #8
 8003670:	f003 030f 	and.w	r3, r3, #15
 8003674:	4913      	ldr	r1, [pc, #76]	; (80036c4 <HAL_Init+0x6c>)
 8003676:	5ccb      	ldrb	r3, [r1, r3]
 8003678:	f003 031f 	and.w	r3, r3, #31
 800367c:	fa22 f303 	lsr.w	r3, r2, r3
 8003680:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003682:	4b0f      	ldr	r3, [pc, #60]	; (80036c0 <HAL_Init+0x68>)
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	4a0e      	ldr	r2, [pc, #56]	; (80036c4 <HAL_Init+0x6c>)
 800368c:	5cd3      	ldrb	r3, [r2, r3]
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	fa22 f303 	lsr.w	r3, r2, r3
 8003698:	4a0b      	ldr	r2, [pc, #44]	; (80036c8 <HAL_Init+0x70>)
 800369a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800369c:	4a0b      	ldr	r2, [pc, #44]	; (80036cc <HAL_Init+0x74>)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036a2:	2000      	movs	r0, #0
 80036a4:	f000 f814 	bl	80036d0 <HAL_InitTick>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e002      	b.n	80036b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80036b2:	f7ff fbeb 	bl	8002e8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	58024400 	.word	0x58024400
 80036c4:	0800cf98 	.word	0x0800cf98
 80036c8:	24000004 	.word	0x24000004
 80036cc:	24000000 	.word	0x24000000

080036d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80036d8:	4b15      	ldr	r3, [pc, #84]	; (8003730 <HAL_InitTick+0x60>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e021      	b.n	8003728 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80036e4:	4b13      	ldr	r3, [pc, #76]	; (8003734 <HAL_InitTick+0x64>)
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	4b11      	ldr	r3, [pc, #68]	; (8003730 <HAL_InitTick+0x60>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	4619      	mov	r1, r3
 80036ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80036f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 f985 	bl	8003a0a <HAL_SYSTICK_Config>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e00e      	b.n	8003728 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b0f      	cmp	r3, #15
 800370e:	d80a      	bhi.n	8003726 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003710:	2200      	movs	r2, #0
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	f04f 30ff 	mov.w	r0, #4294967295
 8003718:	f000 f94f 	bl	80039ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800371c:	4a06      	ldr	r2, [pc, #24]	; (8003738 <HAL_InitTick+0x68>)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003722:	2300      	movs	r3, #0
 8003724:	e000      	b.n	8003728 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
}
 8003728:	4618      	mov	r0, r3
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	24047ba0 	.word	0x24047ba0
 8003734:	24000000 	.word	0x24000000
 8003738:	24047b9c 	.word	0x24047b9c

0800373c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003740:	4b06      	ldr	r3, [pc, #24]	; (800375c <HAL_IncTick+0x20>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	461a      	mov	r2, r3
 8003746:	4b06      	ldr	r3, [pc, #24]	; (8003760 <HAL_IncTick+0x24>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4413      	add	r3, r2
 800374c:	4a04      	ldr	r2, [pc, #16]	; (8003760 <HAL_IncTick+0x24>)
 800374e:	6013      	str	r3, [r2, #0]
}
 8003750:	bf00      	nop
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	24047ba0 	.word	0x24047ba0
 8003760:	2405452c 	.word	0x2405452c

08003764 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  return uwTick;
 8003768:	4b03      	ldr	r3, [pc, #12]	; (8003778 <HAL_GetTick+0x14>)
 800376a:	681b      	ldr	r3, [r3, #0]
}
 800376c:	4618      	mov	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	2405452c 	.word	0x2405452c

0800377c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003784:	f7ff ffee 	bl	8003764 <HAL_GetTick>
 8003788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003794:	d005      	beq.n	80037a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003796:	4b0a      	ldr	r3, [pc, #40]	; (80037c0 <HAL_Delay+0x44>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4413      	add	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037a2:	bf00      	nop
 80037a4:	f7ff ffde 	bl	8003764 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d8f7      	bhi.n	80037a4 <HAL_Delay+0x28>
  {
  }
}
 80037b4:	bf00      	nop
 80037b6:	bf00      	nop
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	24047ba0 	.word	0x24047ba0

080037c4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80037c8:	4b03      	ldr	r3, [pc, #12]	; (80037d8 <HAL_GetREVID+0x14>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	0c1b      	lsrs	r3, r3, #16
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	5c001000 	.word	0x5c001000

080037dc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80037e4:	4b06      	ldr	r3, [pc, #24]	; (8003800 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80037ec:	4904      	ldr	r1, [pc, #16]	; (8003800 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	604b      	str	r3, [r1, #4]
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	58000400 	.word	0x58000400

08003804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003814:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <__NVIC_SetPriorityGrouping+0x40>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003820:	4013      	ands	r3, r2
 8003822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800382c:	4b06      	ldr	r3, [pc, #24]	; (8003848 <__NVIC_SetPriorityGrouping+0x44>)
 800382e:	4313      	orrs	r3, r2
 8003830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003832:	4a04      	ldr	r2, [pc, #16]	; (8003844 <__NVIC_SetPriorityGrouping+0x40>)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	60d3      	str	r3, [r2, #12]
}
 8003838:	bf00      	nop
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	e000ed00 	.word	0xe000ed00
 8003848:	05fa0000 	.word	0x05fa0000

0800384c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003850:	4b04      	ldr	r3, [pc, #16]	; (8003864 <__NVIC_GetPriorityGrouping+0x18>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	0a1b      	lsrs	r3, r3, #8
 8003856:	f003 0307 	and.w	r3, r3, #7
}
 800385a:	4618      	mov	r0, r3
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	e000ed00 	.word	0xe000ed00

08003868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	4603      	mov	r3, r0
 8003870:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003872:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003876:	2b00      	cmp	r3, #0
 8003878:	db0b      	blt.n	8003892 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800387a:	88fb      	ldrh	r3, [r7, #6]
 800387c:	f003 021f 	and.w	r2, r3, #31
 8003880:	4907      	ldr	r1, [pc, #28]	; (80038a0 <__NVIC_EnableIRQ+0x38>)
 8003882:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	2001      	movs	r0, #1
 800388a:	fa00 f202 	lsl.w	r2, r0, r2
 800388e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	e000e100 	.word	0xe000e100

080038a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	4603      	mov	r3, r0
 80038ac:	6039      	str	r1, [r7, #0]
 80038ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80038b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	db0a      	blt.n	80038ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	490c      	ldr	r1, [pc, #48]	; (80038f0 <__NVIC_SetPriority+0x4c>)
 80038be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038c2:	0112      	lsls	r2, r2, #4
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	440b      	add	r3, r1
 80038c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038cc:	e00a      	b.n	80038e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	4908      	ldr	r1, [pc, #32]	; (80038f4 <__NVIC_SetPriority+0x50>)
 80038d4:	88fb      	ldrh	r3, [r7, #6]
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	3b04      	subs	r3, #4
 80038dc:	0112      	lsls	r2, r2, #4
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	440b      	add	r3, r1
 80038e2:	761a      	strb	r2, [r3, #24]
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	e000e100 	.word	0xe000e100
 80038f4:	e000ed00 	.word	0xe000ed00

080038f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b089      	sub	sp, #36	; 0x24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f1c3 0307 	rsb	r3, r3, #7
 8003912:	2b04      	cmp	r3, #4
 8003914:	bf28      	it	cs
 8003916:	2304      	movcs	r3, #4
 8003918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	3304      	adds	r3, #4
 800391e:	2b06      	cmp	r3, #6
 8003920:	d902      	bls.n	8003928 <NVIC_EncodePriority+0x30>
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	3b03      	subs	r3, #3
 8003926:	e000      	b.n	800392a <NVIC_EncodePriority+0x32>
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800392c:	f04f 32ff 	mov.w	r2, #4294967295
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	43da      	mvns	r2, r3
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	401a      	ands	r2, r3
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003940:	f04f 31ff 	mov.w	r1, #4294967295
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	fa01 f303 	lsl.w	r3, r1, r3
 800394a:	43d9      	mvns	r1, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003950:	4313      	orrs	r3, r2
         );
}
 8003952:	4618      	mov	r0, r3
 8003954:	3724      	adds	r7, #36	; 0x24
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
	...

08003960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3b01      	subs	r3, #1
 800396c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003970:	d301      	bcc.n	8003976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003972:	2301      	movs	r3, #1
 8003974:	e00f      	b.n	8003996 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003976:	4a0a      	ldr	r2, [pc, #40]	; (80039a0 <SysTick_Config+0x40>)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3b01      	subs	r3, #1
 800397c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800397e:	210f      	movs	r1, #15
 8003980:	f04f 30ff 	mov.w	r0, #4294967295
 8003984:	f7ff ff8e 	bl	80038a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003988:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <SysTick_Config+0x40>)
 800398a:	2200      	movs	r2, #0
 800398c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800398e:	4b04      	ldr	r3, [pc, #16]	; (80039a0 <SysTick_Config+0x40>)
 8003990:	2207      	movs	r2, #7
 8003992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	e000e010 	.word	0xe000e010

080039a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff ff29 	bl	8003804 <__NVIC_SetPriorityGrouping>
}
 80039b2:	bf00      	nop
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b086      	sub	sp, #24
 80039be:	af00      	add	r7, sp, #0
 80039c0:	4603      	mov	r3, r0
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	607a      	str	r2, [r7, #4]
 80039c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039c8:	f7ff ff40 	bl	800384c <__NVIC_GetPriorityGrouping>
 80039cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68b9      	ldr	r1, [r7, #8]
 80039d2:	6978      	ldr	r0, [r7, #20]
 80039d4:	f7ff ff90 	bl	80038f8 <NVIC_EncodePriority>
 80039d8:	4602      	mov	r2, r0
 80039da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039de:	4611      	mov	r1, r2
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff ff5f 	bl	80038a4 <__NVIC_SetPriority>
}
 80039e6:	bf00      	nop
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b082      	sub	sp, #8
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	4603      	mov	r3, r0
 80039f6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff ff33 	bl	8003868 <__NVIC_EnableIRQ>
}
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b082      	sub	sp, #8
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff ffa4 	bl	8003960 <SysTick_Config>
 8003a18:	4603      	mov	r3, r0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003a2c:	f7ff fe9a 	bl	8003764 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e316      	b.n	800406a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a66      	ldr	r2, [pc, #408]	; (8003bdc <HAL_DMA_Init+0x1b8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d04a      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a65      	ldr	r2, [pc, #404]	; (8003be0 <HAL_DMA_Init+0x1bc>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d045      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a63      	ldr	r2, [pc, #396]	; (8003be4 <HAL_DMA_Init+0x1c0>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d040      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a62      	ldr	r2, [pc, #392]	; (8003be8 <HAL_DMA_Init+0x1c4>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d03b      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a60      	ldr	r2, [pc, #384]	; (8003bec <HAL_DMA_Init+0x1c8>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d036      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a5f      	ldr	r2, [pc, #380]	; (8003bf0 <HAL_DMA_Init+0x1cc>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d031      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a5d      	ldr	r2, [pc, #372]	; (8003bf4 <HAL_DMA_Init+0x1d0>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d02c      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a5c      	ldr	r2, [pc, #368]	; (8003bf8 <HAL_DMA_Init+0x1d4>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d027      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a5a      	ldr	r2, [pc, #360]	; (8003bfc <HAL_DMA_Init+0x1d8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d022      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a59      	ldr	r2, [pc, #356]	; (8003c00 <HAL_DMA_Init+0x1dc>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d01d      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a57      	ldr	r2, [pc, #348]	; (8003c04 <HAL_DMA_Init+0x1e0>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d018      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a56      	ldr	r2, [pc, #344]	; (8003c08 <HAL_DMA_Init+0x1e4>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d013      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a54      	ldr	r2, [pc, #336]	; (8003c0c <HAL_DMA_Init+0x1e8>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00e      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a53      	ldr	r2, [pc, #332]	; (8003c10 <HAL_DMA_Init+0x1ec>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d009      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a51      	ldr	r2, [pc, #324]	; (8003c14 <HAL_DMA_Init+0x1f0>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d004      	beq.n	8003adc <HAL_DMA_Init+0xb8>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a50      	ldr	r2, [pc, #320]	; (8003c18 <HAL_DMA_Init+0x1f4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d101      	bne.n	8003ae0 <HAL_DMA_Init+0xbc>
 8003adc:	2301      	movs	r3, #1
 8003ade:	e000      	b.n	8003ae2 <HAL_DMA_Init+0xbe>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 813b 	beq.w	8003d5e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a37      	ldr	r2, [pc, #220]	; (8003bdc <HAL_DMA_Init+0x1b8>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d04a      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a36      	ldr	r2, [pc, #216]	; (8003be0 <HAL_DMA_Init+0x1bc>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d045      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a34      	ldr	r2, [pc, #208]	; (8003be4 <HAL_DMA_Init+0x1c0>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d040      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a33      	ldr	r2, [pc, #204]	; (8003be8 <HAL_DMA_Init+0x1c4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d03b      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a31      	ldr	r2, [pc, #196]	; (8003bec <HAL_DMA_Init+0x1c8>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d036      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a30      	ldr	r2, [pc, #192]	; (8003bf0 <HAL_DMA_Init+0x1cc>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d031      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a2e      	ldr	r2, [pc, #184]	; (8003bf4 <HAL_DMA_Init+0x1d0>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d02c      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a2d      	ldr	r2, [pc, #180]	; (8003bf8 <HAL_DMA_Init+0x1d4>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d027      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a2b      	ldr	r2, [pc, #172]	; (8003bfc <HAL_DMA_Init+0x1d8>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d022      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a2a      	ldr	r2, [pc, #168]	; (8003c00 <HAL_DMA_Init+0x1dc>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d01d      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a28      	ldr	r2, [pc, #160]	; (8003c04 <HAL_DMA_Init+0x1e0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d018      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a27      	ldr	r2, [pc, #156]	; (8003c08 <HAL_DMA_Init+0x1e4>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d013      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a25      	ldr	r2, [pc, #148]	; (8003c0c <HAL_DMA_Init+0x1e8>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00e      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a24      	ldr	r2, [pc, #144]	; (8003c10 <HAL_DMA_Init+0x1ec>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d009      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a22      	ldr	r2, [pc, #136]	; (8003c14 <HAL_DMA_Init+0x1f0>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d004      	beq.n	8003b98 <HAL_DMA_Init+0x174>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a21      	ldr	r2, [pc, #132]	; (8003c18 <HAL_DMA_Init+0x1f4>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d108      	bne.n	8003baa <HAL_DMA_Init+0x186>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0201 	bic.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	e007      	b.n	8003bba <HAL_DMA_Init+0x196>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0201 	bic.w	r2, r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003bba:	e02f      	b.n	8003c1c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bbc:	f7ff fdd2 	bl	8003764 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b05      	cmp	r3, #5
 8003bc8:	d928      	bls.n	8003c1c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2203      	movs	r2, #3
 8003bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e246      	b.n	800406a <HAL_DMA_Init+0x646>
 8003bdc:	40020010 	.word	0x40020010
 8003be0:	40020028 	.word	0x40020028
 8003be4:	40020040 	.word	0x40020040
 8003be8:	40020058 	.word	0x40020058
 8003bec:	40020070 	.word	0x40020070
 8003bf0:	40020088 	.word	0x40020088
 8003bf4:	400200a0 	.word	0x400200a0
 8003bf8:	400200b8 	.word	0x400200b8
 8003bfc:	40020410 	.word	0x40020410
 8003c00:	40020428 	.word	0x40020428
 8003c04:	40020440 	.word	0x40020440
 8003c08:	40020458 	.word	0x40020458
 8003c0c:	40020470 	.word	0x40020470
 8003c10:	40020488 	.word	0x40020488
 8003c14:	400204a0 	.word	0x400204a0
 8003c18:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1c8      	bne.n	8003bbc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	4b83      	ldr	r3, [pc, #524]	; (8003e44 <HAL_DMA_Init+0x420>)
 8003c36:	4013      	ands	r3, r2
 8003c38:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003c42:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c4e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c5a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	2b04      	cmp	r3, #4
 8003c6e:	d107      	bne.n	8003c80 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003c80:	4b71      	ldr	r3, [pc, #452]	; (8003e48 <HAL_DMA_Init+0x424>)
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	4b71      	ldr	r3, [pc, #452]	; (8003e4c <HAL_DMA_Init+0x428>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c8c:	d328      	bcc.n	8003ce0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b28      	cmp	r3, #40	; 0x28
 8003c94:	d903      	bls.n	8003c9e <HAL_DMA_Init+0x27a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2b2e      	cmp	r3, #46	; 0x2e
 8003c9c:	d917      	bls.n	8003cce <HAL_DMA_Init+0x2aa>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b3e      	cmp	r3, #62	; 0x3e
 8003ca4:	d903      	bls.n	8003cae <HAL_DMA_Init+0x28a>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b42      	cmp	r3, #66	; 0x42
 8003cac:	d90f      	bls.n	8003cce <HAL_DMA_Init+0x2aa>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b46      	cmp	r3, #70	; 0x46
 8003cb4:	d903      	bls.n	8003cbe <HAL_DMA_Init+0x29a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b48      	cmp	r3, #72	; 0x48
 8003cbc:	d907      	bls.n	8003cce <HAL_DMA_Init+0x2aa>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b4e      	cmp	r3, #78	; 0x4e
 8003cc4:	d905      	bls.n	8003cd2 <HAL_DMA_Init+0x2ae>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b52      	cmp	r3, #82	; 0x52
 8003ccc:	d801      	bhi.n	8003cd2 <HAL_DMA_Init+0x2ae>
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e000      	b.n	8003cd4 <HAL_DMA_Init+0x2b0>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d003      	beq.n	8003ce0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cde:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f023 0307 	bic.w	r3, r3, #7
 8003cf6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d117      	bne.n	8003d3a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00e      	beq.n	8003d3a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f002 f81f 	bl	8005d60 <DMA_CheckFifoParam>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2240      	movs	r2, #64	; 0x40
 8003d2c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e197      	b.n	800406a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f001 ff5a 	bl	8005bfc <DMA_CalcBaseAndBitshift>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d50:	f003 031f 	and.w	r3, r3, #31
 8003d54:	223f      	movs	r2, #63	; 0x3f
 8003d56:	409a      	lsls	r2, r3
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	609a      	str	r2, [r3, #8]
 8003d5c:	e0cd      	b.n	8003efa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a3b      	ldr	r2, [pc, #236]	; (8003e50 <HAL_DMA_Init+0x42c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d022      	beq.n	8003dae <HAL_DMA_Init+0x38a>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a39      	ldr	r2, [pc, #228]	; (8003e54 <HAL_DMA_Init+0x430>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d01d      	beq.n	8003dae <HAL_DMA_Init+0x38a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a38      	ldr	r2, [pc, #224]	; (8003e58 <HAL_DMA_Init+0x434>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d018      	beq.n	8003dae <HAL_DMA_Init+0x38a>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a36      	ldr	r2, [pc, #216]	; (8003e5c <HAL_DMA_Init+0x438>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d013      	beq.n	8003dae <HAL_DMA_Init+0x38a>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a35      	ldr	r2, [pc, #212]	; (8003e60 <HAL_DMA_Init+0x43c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d00e      	beq.n	8003dae <HAL_DMA_Init+0x38a>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a33      	ldr	r2, [pc, #204]	; (8003e64 <HAL_DMA_Init+0x440>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d009      	beq.n	8003dae <HAL_DMA_Init+0x38a>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a32      	ldr	r2, [pc, #200]	; (8003e68 <HAL_DMA_Init+0x444>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d004      	beq.n	8003dae <HAL_DMA_Init+0x38a>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a30      	ldr	r2, [pc, #192]	; (8003e6c <HAL_DMA_Init+0x448>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d101      	bne.n	8003db2 <HAL_DMA_Init+0x38e>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e000      	b.n	8003db4 <HAL_DMA_Init+0x390>
 8003db2:	2300      	movs	r3, #0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 8097 	beq.w	8003ee8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a24      	ldr	r2, [pc, #144]	; (8003e50 <HAL_DMA_Init+0x42c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d021      	beq.n	8003e08 <HAL_DMA_Init+0x3e4>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a22      	ldr	r2, [pc, #136]	; (8003e54 <HAL_DMA_Init+0x430>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d01c      	beq.n	8003e08 <HAL_DMA_Init+0x3e4>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a21      	ldr	r2, [pc, #132]	; (8003e58 <HAL_DMA_Init+0x434>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d017      	beq.n	8003e08 <HAL_DMA_Init+0x3e4>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a1f      	ldr	r2, [pc, #124]	; (8003e5c <HAL_DMA_Init+0x438>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d012      	beq.n	8003e08 <HAL_DMA_Init+0x3e4>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a1e      	ldr	r2, [pc, #120]	; (8003e60 <HAL_DMA_Init+0x43c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d00d      	beq.n	8003e08 <HAL_DMA_Init+0x3e4>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a1c      	ldr	r2, [pc, #112]	; (8003e64 <HAL_DMA_Init+0x440>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d008      	beq.n	8003e08 <HAL_DMA_Init+0x3e4>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a1b      	ldr	r2, [pc, #108]	; (8003e68 <HAL_DMA_Init+0x444>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d003      	beq.n	8003e08 <HAL_DMA_Init+0x3e4>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a19      	ldr	r2, [pc, #100]	; (8003e6c <HAL_DMA_Init+0x448>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	4b12      	ldr	r3, [pc, #72]	; (8003e70 <HAL_DMA_Init+0x44c>)
 8003e26:	4013      	ands	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	2b40      	cmp	r3, #64	; 0x40
 8003e30:	d020      	beq.n	8003e74 <HAL_DMA_Init+0x450>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	2b80      	cmp	r3, #128	; 0x80
 8003e38:	d102      	bne.n	8003e40 <HAL_DMA_Init+0x41c>
 8003e3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e3e:	e01a      	b.n	8003e76 <HAL_DMA_Init+0x452>
 8003e40:	2300      	movs	r3, #0
 8003e42:	e018      	b.n	8003e76 <HAL_DMA_Init+0x452>
 8003e44:	fe10803f 	.word	0xfe10803f
 8003e48:	5c001000 	.word	0x5c001000
 8003e4c:	ffff0000 	.word	0xffff0000
 8003e50:	58025408 	.word	0x58025408
 8003e54:	5802541c 	.word	0x5802541c
 8003e58:	58025430 	.word	0x58025430
 8003e5c:	58025444 	.word	0x58025444
 8003e60:	58025458 	.word	0x58025458
 8003e64:	5802546c 	.word	0x5802546c
 8003e68:	58025480 	.word	0x58025480
 8003e6c:	58025494 	.word	0x58025494
 8003e70:	fffe000f 	.word	0xfffe000f
 8003e74:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	68d2      	ldr	r2, [r2, #12]
 8003e7a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003ea4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	4b6e      	ldr	r3, [pc, #440]	; (8004074 <HAL_DMA_Init+0x650>)
 8003ebc:	4413      	add	r3, r2
 8003ebe:	4a6e      	ldr	r2, [pc, #440]	; (8004078 <HAL_DMA_Init+0x654>)
 8003ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec4:	091b      	lsrs	r3, r3, #4
 8003ec6:	009a      	lsls	r2, r3, #2
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f001 fe95 	bl	8005bfc <DMA_CalcBaseAndBitshift>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eda:	f003 031f 	and.w	r3, r3, #31
 8003ede:	2201      	movs	r2, #1
 8003ee0:	409a      	lsls	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	605a      	str	r2, [r3, #4]
 8003ee6:	e008      	b.n	8003efa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2240      	movs	r2, #64	; 0x40
 8003eec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e0b7      	b.n	800406a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a5f      	ldr	r2, [pc, #380]	; (800407c <HAL_DMA_Init+0x658>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d072      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a5d      	ldr	r2, [pc, #372]	; (8004080 <HAL_DMA_Init+0x65c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d06d      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a5c      	ldr	r2, [pc, #368]	; (8004084 <HAL_DMA_Init+0x660>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d068      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a5a      	ldr	r2, [pc, #360]	; (8004088 <HAL_DMA_Init+0x664>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d063      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a59      	ldr	r2, [pc, #356]	; (800408c <HAL_DMA_Init+0x668>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d05e      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a57      	ldr	r2, [pc, #348]	; (8004090 <HAL_DMA_Init+0x66c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d059      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a56      	ldr	r2, [pc, #344]	; (8004094 <HAL_DMA_Init+0x670>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d054      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a54      	ldr	r2, [pc, #336]	; (8004098 <HAL_DMA_Init+0x674>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d04f      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a53      	ldr	r2, [pc, #332]	; (800409c <HAL_DMA_Init+0x678>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d04a      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a51      	ldr	r2, [pc, #324]	; (80040a0 <HAL_DMA_Init+0x67c>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d045      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a50      	ldr	r2, [pc, #320]	; (80040a4 <HAL_DMA_Init+0x680>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d040      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a4e      	ldr	r2, [pc, #312]	; (80040a8 <HAL_DMA_Init+0x684>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d03b      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a4d      	ldr	r2, [pc, #308]	; (80040ac <HAL_DMA_Init+0x688>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d036      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a4b      	ldr	r2, [pc, #300]	; (80040b0 <HAL_DMA_Init+0x68c>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d031      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a4a      	ldr	r2, [pc, #296]	; (80040b4 <HAL_DMA_Init+0x690>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d02c      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a48      	ldr	r2, [pc, #288]	; (80040b8 <HAL_DMA_Init+0x694>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d027      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a47      	ldr	r2, [pc, #284]	; (80040bc <HAL_DMA_Init+0x698>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d022      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a45      	ldr	r2, [pc, #276]	; (80040c0 <HAL_DMA_Init+0x69c>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d01d      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a44      	ldr	r2, [pc, #272]	; (80040c4 <HAL_DMA_Init+0x6a0>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d018      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a42      	ldr	r2, [pc, #264]	; (80040c8 <HAL_DMA_Init+0x6a4>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d013      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a41      	ldr	r2, [pc, #260]	; (80040cc <HAL_DMA_Init+0x6a8>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d00e      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a3f      	ldr	r2, [pc, #252]	; (80040d0 <HAL_DMA_Init+0x6ac>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d009      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a3e      	ldr	r2, [pc, #248]	; (80040d4 <HAL_DMA_Init+0x6b0>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d004      	beq.n	8003fea <HAL_DMA_Init+0x5c6>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a3c      	ldr	r2, [pc, #240]	; (80040d8 <HAL_DMA_Init+0x6b4>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d101      	bne.n	8003fee <HAL_DMA_Init+0x5ca>
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <HAL_DMA_Init+0x5cc>
 8003fee:	2300      	movs	r3, #0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d032      	beq.n	800405a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f001 ff2f 	bl	8005e58 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	2b80      	cmp	r3, #128	; 0x80
 8004000:	d102      	bne.n	8004008 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004010:	b2d2      	uxtb	r2, r2
 8004012:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800401c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d010      	beq.n	8004048 <HAL_DMA_Init+0x624>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b08      	cmp	r3, #8
 800402c:	d80c      	bhi.n	8004048 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f001 ffac 	bl	8005f8c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004044:	605a      	str	r2, [r3, #4]
 8004046:	e008      	b.n	800405a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	a7fdabf8 	.word	0xa7fdabf8
 8004078:	cccccccd 	.word	0xcccccccd
 800407c:	40020010 	.word	0x40020010
 8004080:	40020028 	.word	0x40020028
 8004084:	40020040 	.word	0x40020040
 8004088:	40020058 	.word	0x40020058
 800408c:	40020070 	.word	0x40020070
 8004090:	40020088 	.word	0x40020088
 8004094:	400200a0 	.word	0x400200a0
 8004098:	400200b8 	.word	0x400200b8
 800409c:	40020410 	.word	0x40020410
 80040a0:	40020428 	.word	0x40020428
 80040a4:	40020440 	.word	0x40020440
 80040a8:	40020458 	.word	0x40020458
 80040ac:	40020470 	.word	0x40020470
 80040b0:	40020488 	.word	0x40020488
 80040b4:	400204a0 	.word	0x400204a0
 80040b8:	400204b8 	.word	0x400204b8
 80040bc:	58025408 	.word	0x58025408
 80040c0:	5802541c 	.word	0x5802541c
 80040c4:	58025430 	.word	0x58025430
 80040c8:	58025444 	.word	0x58025444
 80040cc:	58025458 	.word	0x58025458
 80040d0:	5802546c 	.word	0x5802546c
 80040d4:	58025480 	.word	0x58025480
 80040d8:	58025494 	.word	0x58025494

080040dc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
 80040e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040ea:	2300      	movs	r3, #0
 80040ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e226      	b.n	8004546 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d101      	bne.n	8004106 <HAL_DMA_Start_IT+0x2a>
 8004102:	2302      	movs	r3, #2
 8004104:	e21f      	b.n	8004546 <HAL_DMA_Start_IT+0x46a>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b01      	cmp	r3, #1
 8004118:	f040 820a 	bne.w	8004530 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a68      	ldr	r2, [pc, #416]	; (80042d0 <HAL_DMA_Start_IT+0x1f4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d04a      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a66      	ldr	r2, [pc, #408]	; (80042d4 <HAL_DMA_Start_IT+0x1f8>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d045      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a65      	ldr	r2, [pc, #404]	; (80042d8 <HAL_DMA_Start_IT+0x1fc>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d040      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a63      	ldr	r2, [pc, #396]	; (80042dc <HAL_DMA_Start_IT+0x200>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d03b      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a62      	ldr	r2, [pc, #392]	; (80042e0 <HAL_DMA_Start_IT+0x204>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d036      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a60      	ldr	r2, [pc, #384]	; (80042e4 <HAL_DMA_Start_IT+0x208>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d031      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a5f      	ldr	r2, [pc, #380]	; (80042e8 <HAL_DMA_Start_IT+0x20c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d02c      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a5d      	ldr	r2, [pc, #372]	; (80042ec <HAL_DMA_Start_IT+0x210>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d027      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a5c      	ldr	r2, [pc, #368]	; (80042f0 <HAL_DMA_Start_IT+0x214>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d022      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a5a      	ldr	r2, [pc, #360]	; (80042f4 <HAL_DMA_Start_IT+0x218>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d01d      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a59      	ldr	r2, [pc, #356]	; (80042f8 <HAL_DMA_Start_IT+0x21c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d018      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a57      	ldr	r2, [pc, #348]	; (80042fc <HAL_DMA_Start_IT+0x220>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d013      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a56      	ldr	r2, [pc, #344]	; (8004300 <HAL_DMA_Start_IT+0x224>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d00e      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a54      	ldr	r2, [pc, #336]	; (8004304 <HAL_DMA_Start_IT+0x228>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d009      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a53      	ldr	r2, [pc, #332]	; (8004308 <HAL_DMA_Start_IT+0x22c>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d004      	beq.n	80041ca <HAL_DMA_Start_IT+0xee>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a51      	ldr	r2, [pc, #324]	; (800430c <HAL_DMA_Start_IT+0x230>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d108      	bne.n	80041dc <HAL_DMA_Start_IT+0x100>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0201 	bic.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	e007      	b.n	80041ec <HAL_DMA_Start_IT+0x110>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0201 	bic.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	68b9      	ldr	r1, [r7, #8]
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f001 fb56 	bl	80058a4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a34      	ldr	r2, [pc, #208]	; (80042d0 <HAL_DMA_Start_IT+0x1f4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d04a      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a33      	ldr	r2, [pc, #204]	; (80042d4 <HAL_DMA_Start_IT+0x1f8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d045      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a31      	ldr	r2, [pc, #196]	; (80042d8 <HAL_DMA_Start_IT+0x1fc>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d040      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a30      	ldr	r2, [pc, #192]	; (80042dc <HAL_DMA_Start_IT+0x200>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d03b      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a2e      	ldr	r2, [pc, #184]	; (80042e0 <HAL_DMA_Start_IT+0x204>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d036      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a2d      	ldr	r2, [pc, #180]	; (80042e4 <HAL_DMA_Start_IT+0x208>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d031      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a2b      	ldr	r2, [pc, #172]	; (80042e8 <HAL_DMA_Start_IT+0x20c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d02c      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a2a      	ldr	r2, [pc, #168]	; (80042ec <HAL_DMA_Start_IT+0x210>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d027      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a28      	ldr	r2, [pc, #160]	; (80042f0 <HAL_DMA_Start_IT+0x214>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d022      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a27      	ldr	r2, [pc, #156]	; (80042f4 <HAL_DMA_Start_IT+0x218>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d01d      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a25      	ldr	r2, [pc, #148]	; (80042f8 <HAL_DMA_Start_IT+0x21c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d018      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a24      	ldr	r2, [pc, #144]	; (80042fc <HAL_DMA_Start_IT+0x220>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d013      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a22      	ldr	r2, [pc, #136]	; (8004300 <HAL_DMA_Start_IT+0x224>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00e      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a21      	ldr	r2, [pc, #132]	; (8004304 <HAL_DMA_Start_IT+0x228>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d009      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a1f      	ldr	r2, [pc, #124]	; (8004308 <HAL_DMA_Start_IT+0x22c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d004      	beq.n	8004298 <HAL_DMA_Start_IT+0x1bc>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a1e      	ldr	r2, [pc, #120]	; (800430c <HAL_DMA_Start_IT+0x230>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d101      	bne.n	800429c <HAL_DMA_Start_IT+0x1c0>
 8004298:	2301      	movs	r3, #1
 800429a:	e000      	b.n	800429e <HAL_DMA_Start_IT+0x1c2>
 800429c:	2300      	movs	r3, #0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d036      	beq.n	8004310 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f023 021e 	bic.w	r2, r3, #30
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0216 	orr.w	r2, r2, #22
 80042b4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d03e      	beq.n	800433c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f042 0208 	orr.w	r2, r2, #8
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	e035      	b.n	800433c <HAL_DMA_Start_IT+0x260>
 80042d0:	40020010 	.word	0x40020010
 80042d4:	40020028 	.word	0x40020028
 80042d8:	40020040 	.word	0x40020040
 80042dc:	40020058 	.word	0x40020058
 80042e0:	40020070 	.word	0x40020070
 80042e4:	40020088 	.word	0x40020088
 80042e8:	400200a0 	.word	0x400200a0
 80042ec:	400200b8 	.word	0x400200b8
 80042f0:	40020410 	.word	0x40020410
 80042f4:	40020428 	.word	0x40020428
 80042f8:	40020440 	.word	0x40020440
 80042fc:	40020458 	.word	0x40020458
 8004300:	40020470 	.word	0x40020470
 8004304:	40020488 	.word	0x40020488
 8004308:	400204a0 	.word	0x400204a0
 800430c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f023 020e 	bic.w	r2, r3, #14
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 020a 	orr.w	r2, r2, #10
 8004322:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004328:	2b00      	cmp	r3, #0
 800432a:	d007      	beq.n	800433c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f042 0204 	orr.w	r2, r2, #4
 800433a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a83      	ldr	r2, [pc, #524]	; (8004550 <HAL_DMA_Start_IT+0x474>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d072      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a82      	ldr	r2, [pc, #520]	; (8004554 <HAL_DMA_Start_IT+0x478>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d06d      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a80      	ldr	r2, [pc, #512]	; (8004558 <HAL_DMA_Start_IT+0x47c>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d068      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a7f      	ldr	r2, [pc, #508]	; (800455c <HAL_DMA_Start_IT+0x480>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d063      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a7d      	ldr	r2, [pc, #500]	; (8004560 <HAL_DMA_Start_IT+0x484>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d05e      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a7c      	ldr	r2, [pc, #496]	; (8004564 <HAL_DMA_Start_IT+0x488>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d059      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a7a      	ldr	r2, [pc, #488]	; (8004568 <HAL_DMA_Start_IT+0x48c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d054      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a79      	ldr	r2, [pc, #484]	; (800456c <HAL_DMA_Start_IT+0x490>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d04f      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a77      	ldr	r2, [pc, #476]	; (8004570 <HAL_DMA_Start_IT+0x494>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d04a      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a76      	ldr	r2, [pc, #472]	; (8004574 <HAL_DMA_Start_IT+0x498>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d045      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a74      	ldr	r2, [pc, #464]	; (8004578 <HAL_DMA_Start_IT+0x49c>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d040      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a73      	ldr	r2, [pc, #460]	; (800457c <HAL_DMA_Start_IT+0x4a0>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d03b      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a71      	ldr	r2, [pc, #452]	; (8004580 <HAL_DMA_Start_IT+0x4a4>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d036      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a70      	ldr	r2, [pc, #448]	; (8004584 <HAL_DMA_Start_IT+0x4a8>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d031      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a6e      	ldr	r2, [pc, #440]	; (8004588 <HAL_DMA_Start_IT+0x4ac>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d02c      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a6d      	ldr	r2, [pc, #436]	; (800458c <HAL_DMA_Start_IT+0x4b0>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d027      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a6b      	ldr	r2, [pc, #428]	; (8004590 <HAL_DMA_Start_IT+0x4b4>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d022      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a6a      	ldr	r2, [pc, #424]	; (8004594 <HAL_DMA_Start_IT+0x4b8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d01d      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a68      	ldr	r2, [pc, #416]	; (8004598 <HAL_DMA_Start_IT+0x4bc>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d018      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a67      	ldr	r2, [pc, #412]	; (800459c <HAL_DMA_Start_IT+0x4c0>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d013      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a65      	ldr	r2, [pc, #404]	; (80045a0 <HAL_DMA_Start_IT+0x4c4>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00e      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a64      	ldr	r2, [pc, #400]	; (80045a4 <HAL_DMA_Start_IT+0x4c8>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d009      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a62      	ldr	r2, [pc, #392]	; (80045a8 <HAL_DMA_Start_IT+0x4cc>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d004      	beq.n	800442c <HAL_DMA_Start_IT+0x350>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a61      	ldr	r2, [pc, #388]	; (80045ac <HAL_DMA_Start_IT+0x4d0>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d101      	bne.n	8004430 <HAL_DMA_Start_IT+0x354>
 800442c:	2301      	movs	r3, #1
 800442e:	e000      	b.n	8004432 <HAL_DMA_Start_IT+0x356>
 8004430:	2300      	movs	r3, #0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d01a      	beq.n	800446c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d007      	beq.n	8004454 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800444e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004452:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004458:	2b00      	cmp	r3, #0
 800445a:	d007      	beq.n	800446c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004466:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800446a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a37      	ldr	r2, [pc, #220]	; (8004550 <HAL_DMA_Start_IT+0x474>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d04a      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a36      	ldr	r2, [pc, #216]	; (8004554 <HAL_DMA_Start_IT+0x478>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d045      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a34      	ldr	r2, [pc, #208]	; (8004558 <HAL_DMA_Start_IT+0x47c>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d040      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a33      	ldr	r2, [pc, #204]	; (800455c <HAL_DMA_Start_IT+0x480>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d03b      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a31      	ldr	r2, [pc, #196]	; (8004560 <HAL_DMA_Start_IT+0x484>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d036      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a30      	ldr	r2, [pc, #192]	; (8004564 <HAL_DMA_Start_IT+0x488>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d031      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a2e      	ldr	r2, [pc, #184]	; (8004568 <HAL_DMA_Start_IT+0x48c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d02c      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a2d      	ldr	r2, [pc, #180]	; (800456c <HAL_DMA_Start_IT+0x490>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d027      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a2b      	ldr	r2, [pc, #172]	; (8004570 <HAL_DMA_Start_IT+0x494>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d022      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a2a      	ldr	r2, [pc, #168]	; (8004574 <HAL_DMA_Start_IT+0x498>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d01d      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a28      	ldr	r2, [pc, #160]	; (8004578 <HAL_DMA_Start_IT+0x49c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d018      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a27      	ldr	r2, [pc, #156]	; (800457c <HAL_DMA_Start_IT+0x4a0>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d013      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a25      	ldr	r2, [pc, #148]	; (8004580 <HAL_DMA_Start_IT+0x4a4>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d00e      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a24      	ldr	r2, [pc, #144]	; (8004584 <HAL_DMA_Start_IT+0x4a8>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d009      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a22      	ldr	r2, [pc, #136]	; (8004588 <HAL_DMA_Start_IT+0x4ac>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d004      	beq.n	800450c <HAL_DMA_Start_IT+0x430>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a21      	ldr	r2, [pc, #132]	; (800458c <HAL_DMA_Start_IT+0x4b0>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d108      	bne.n	800451e <HAL_DMA_Start_IT+0x442>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0201 	orr.w	r2, r2, #1
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	e012      	b.n	8004544 <HAL_DMA_Start_IT+0x468>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f042 0201 	orr.w	r2, r2, #1
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	e009      	b.n	8004544 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004536:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004544:	7dfb      	ldrb	r3, [r7, #23]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3718      	adds	r7, #24
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	40020010 	.word	0x40020010
 8004554:	40020028 	.word	0x40020028
 8004558:	40020040 	.word	0x40020040
 800455c:	40020058 	.word	0x40020058
 8004560:	40020070 	.word	0x40020070
 8004564:	40020088 	.word	0x40020088
 8004568:	400200a0 	.word	0x400200a0
 800456c:	400200b8 	.word	0x400200b8
 8004570:	40020410 	.word	0x40020410
 8004574:	40020428 	.word	0x40020428
 8004578:	40020440 	.word	0x40020440
 800457c:	40020458 	.word	0x40020458
 8004580:	40020470 	.word	0x40020470
 8004584:	40020488 	.word	0x40020488
 8004588:	400204a0 	.word	0x400204a0
 800458c:	400204b8 	.word	0x400204b8
 8004590:	58025408 	.word	0x58025408
 8004594:	5802541c 	.word	0x5802541c
 8004598:	58025430 	.word	0x58025430
 800459c:	58025444 	.word	0x58025444
 80045a0:	58025458 	.word	0x58025458
 80045a4:	5802546c 	.word	0x5802546c
 80045a8:	58025480 	.word	0x58025480
 80045ac:	58025494 	.word	0x58025494

080045b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e205      	b.n	80049ce <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d004      	beq.n	80045d8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2280      	movs	r2, #128	; 0x80
 80045d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e1fa      	b.n	80049ce <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a8c      	ldr	r2, [pc, #560]	; (8004810 <HAL_DMA_Abort_IT+0x260>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d04a      	beq.n	8004678 <HAL_DMA_Abort_IT+0xc8>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a8b      	ldr	r2, [pc, #556]	; (8004814 <HAL_DMA_Abort_IT+0x264>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d045      	beq.n	8004678 <HAL_DMA_Abort_IT+0xc8>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a89      	ldr	r2, [pc, #548]	; (8004818 <HAL_DMA_Abort_IT+0x268>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d040      	beq.n	8004678 <HAL_DMA_Abort_IT+0xc8>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a88      	ldr	r2, [pc, #544]	; (800481c <HAL_DMA_Abort_IT+0x26c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d03b      	beq.n	8004678 <HAL_DMA_Abort_IT+0xc8>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a86      	ldr	r2, [pc, #536]	; (8004820 <HAL_DMA_Abort_IT+0x270>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d036      	beq.n	8004678 <HAL_DMA_Abort_IT+0xc8>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a85      	ldr	r2, [pc, #532]	; (8004824 <HAL_DMA_Abort_IT+0x274>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d031      	beq.n	8004678 <HAL_DMA_Abort_IT+0xc8>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a83      	ldr	r2, [pc, #524]	; (8004828 <HAL_DMA_Abort_IT+0x278>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d02c      	beq.n	8004678 <HAL_DMA_Abort_IT+0xc8>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a82      	ldr	r2, [pc, #520]	; (800482c <HAL_DMA_Abort_IT+0x27c>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d027      	beq.n	8004678 <HAL_DMA_Abort_IT+0xc8>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a80      	ldr	r2, [pc, #512]	; (8004830 <HAL_DMA_Abort_IT+0x280>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d022      	beq.n	8004678 <HAL_DMA_Abort_IT+0xc8>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a7f      	ldr	r2, [pc, #508]	; (8004834 <HAL_DMA_Abort_IT+0x284>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d01d      	beq.n	8004678 <HAL_DMA_Abort_IT+0xc8>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a7d      	ldr	r2, [pc, #500]	; (8004838 <HAL_DMA_Abort_IT+0x288>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d018      	beq.n	8004678 <HAL_DMA_Abort_IT+0xc8>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a7c      	ldr	r2, [pc, #496]	; (800483c <HAL_DMA_Abort_IT+0x28c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d013      	beq.n	8004678 <HAL_DMA_Abort_IT+0xc8>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a7a      	ldr	r2, [pc, #488]	; (8004840 <HAL_DMA_Abort_IT+0x290>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d00e      	beq.n	8004678 <HAL_DMA_Abort_IT+0xc8>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a79      	ldr	r2, [pc, #484]	; (8004844 <HAL_DMA_Abort_IT+0x294>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d009      	beq.n	8004678 <HAL_DMA_Abort_IT+0xc8>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a77      	ldr	r2, [pc, #476]	; (8004848 <HAL_DMA_Abort_IT+0x298>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d004      	beq.n	8004678 <HAL_DMA_Abort_IT+0xc8>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a76      	ldr	r2, [pc, #472]	; (800484c <HAL_DMA_Abort_IT+0x29c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d101      	bne.n	800467c <HAL_DMA_Abort_IT+0xcc>
 8004678:	2301      	movs	r3, #1
 800467a:	e000      	b.n	800467e <HAL_DMA_Abort_IT+0xce>
 800467c:	2300      	movs	r3, #0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d065      	beq.n	800474e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2204      	movs	r2, #4
 8004686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a60      	ldr	r2, [pc, #384]	; (8004810 <HAL_DMA_Abort_IT+0x260>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d04a      	beq.n	800472a <HAL_DMA_Abort_IT+0x17a>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a5e      	ldr	r2, [pc, #376]	; (8004814 <HAL_DMA_Abort_IT+0x264>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d045      	beq.n	800472a <HAL_DMA_Abort_IT+0x17a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a5d      	ldr	r2, [pc, #372]	; (8004818 <HAL_DMA_Abort_IT+0x268>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d040      	beq.n	800472a <HAL_DMA_Abort_IT+0x17a>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a5b      	ldr	r2, [pc, #364]	; (800481c <HAL_DMA_Abort_IT+0x26c>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d03b      	beq.n	800472a <HAL_DMA_Abort_IT+0x17a>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a5a      	ldr	r2, [pc, #360]	; (8004820 <HAL_DMA_Abort_IT+0x270>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d036      	beq.n	800472a <HAL_DMA_Abort_IT+0x17a>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a58      	ldr	r2, [pc, #352]	; (8004824 <HAL_DMA_Abort_IT+0x274>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d031      	beq.n	800472a <HAL_DMA_Abort_IT+0x17a>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a57      	ldr	r2, [pc, #348]	; (8004828 <HAL_DMA_Abort_IT+0x278>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d02c      	beq.n	800472a <HAL_DMA_Abort_IT+0x17a>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a55      	ldr	r2, [pc, #340]	; (800482c <HAL_DMA_Abort_IT+0x27c>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d027      	beq.n	800472a <HAL_DMA_Abort_IT+0x17a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a54      	ldr	r2, [pc, #336]	; (8004830 <HAL_DMA_Abort_IT+0x280>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d022      	beq.n	800472a <HAL_DMA_Abort_IT+0x17a>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a52      	ldr	r2, [pc, #328]	; (8004834 <HAL_DMA_Abort_IT+0x284>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d01d      	beq.n	800472a <HAL_DMA_Abort_IT+0x17a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a51      	ldr	r2, [pc, #324]	; (8004838 <HAL_DMA_Abort_IT+0x288>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d018      	beq.n	800472a <HAL_DMA_Abort_IT+0x17a>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a4f      	ldr	r2, [pc, #316]	; (800483c <HAL_DMA_Abort_IT+0x28c>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d013      	beq.n	800472a <HAL_DMA_Abort_IT+0x17a>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a4e      	ldr	r2, [pc, #312]	; (8004840 <HAL_DMA_Abort_IT+0x290>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d00e      	beq.n	800472a <HAL_DMA_Abort_IT+0x17a>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a4c      	ldr	r2, [pc, #304]	; (8004844 <HAL_DMA_Abort_IT+0x294>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d009      	beq.n	800472a <HAL_DMA_Abort_IT+0x17a>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a4b      	ldr	r2, [pc, #300]	; (8004848 <HAL_DMA_Abort_IT+0x298>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d004      	beq.n	800472a <HAL_DMA_Abort_IT+0x17a>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a49      	ldr	r2, [pc, #292]	; (800484c <HAL_DMA_Abort_IT+0x29c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d108      	bne.n	800473c <HAL_DMA_Abort_IT+0x18c>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0201 	bic.w	r2, r2, #1
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	e147      	b.n	80049cc <HAL_DMA_Abort_IT+0x41c>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0201 	bic.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	e13e      	b.n	80049cc <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 020e 	bic.w	r2, r2, #14
 800475c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a2b      	ldr	r2, [pc, #172]	; (8004810 <HAL_DMA_Abort_IT+0x260>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d04a      	beq.n	80047fe <HAL_DMA_Abort_IT+0x24e>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a29      	ldr	r2, [pc, #164]	; (8004814 <HAL_DMA_Abort_IT+0x264>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d045      	beq.n	80047fe <HAL_DMA_Abort_IT+0x24e>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a28      	ldr	r2, [pc, #160]	; (8004818 <HAL_DMA_Abort_IT+0x268>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d040      	beq.n	80047fe <HAL_DMA_Abort_IT+0x24e>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a26      	ldr	r2, [pc, #152]	; (800481c <HAL_DMA_Abort_IT+0x26c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d03b      	beq.n	80047fe <HAL_DMA_Abort_IT+0x24e>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a25      	ldr	r2, [pc, #148]	; (8004820 <HAL_DMA_Abort_IT+0x270>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d036      	beq.n	80047fe <HAL_DMA_Abort_IT+0x24e>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a23      	ldr	r2, [pc, #140]	; (8004824 <HAL_DMA_Abort_IT+0x274>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d031      	beq.n	80047fe <HAL_DMA_Abort_IT+0x24e>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a22      	ldr	r2, [pc, #136]	; (8004828 <HAL_DMA_Abort_IT+0x278>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d02c      	beq.n	80047fe <HAL_DMA_Abort_IT+0x24e>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a20      	ldr	r2, [pc, #128]	; (800482c <HAL_DMA_Abort_IT+0x27c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d027      	beq.n	80047fe <HAL_DMA_Abort_IT+0x24e>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a1f      	ldr	r2, [pc, #124]	; (8004830 <HAL_DMA_Abort_IT+0x280>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d022      	beq.n	80047fe <HAL_DMA_Abort_IT+0x24e>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a1d      	ldr	r2, [pc, #116]	; (8004834 <HAL_DMA_Abort_IT+0x284>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d01d      	beq.n	80047fe <HAL_DMA_Abort_IT+0x24e>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a1c      	ldr	r2, [pc, #112]	; (8004838 <HAL_DMA_Abort_IT+0x288>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d018      	beq.n	80047fe <HAL_DMA_Abort_IT+0x24e>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a1a      	ldr	r2, [pc, #104]	; (800483c <HAL_DMA_Abort_IT+0x28c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d013      	beq.n	80047fe <HAL_DMA_Abort_IT+0x24e>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a19      	ldr	r2, [pc, #100]	; (8004840 <HAL_DMA_Abort_IT+0x290>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d00e      	beq.n	80047fe <HAL_DMA_Abort_IT+0x24e>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a17      	ldr	r2, [pc, #92]	; (8004844 <HAL_DMA_Abort_IT+0x294>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d009      	beq.n	80047fe <HAL_DMA_Abort_IT+0x24e>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a16      	ldr	r2, [pc, #88]	; (8004848 <HAL_DMA_Abort_IT+0x298>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d004      	beq.n	80047fe <HAL_DMA_Abort_IT+0x24e>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a14      	ldr	r2, [pc, #80]	; (800484c <HAL_DMA_Abort_IT+0x29c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d128      	bne.n	8004850 <HAL_DMA_Abort_IT+0x2a0>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0201 	bic.w	r2, r2, #1
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	e027      	b.n	8004860 <HAL_DMA_Abort_IT+0x2b0>
 8004810:	40020010 	.word	0x40020010
 8004814:	40020028 	.word	0x40020028
 8004818:	40020040 	.word	0x40020040
 800481c:	40020058 	.word	0x40020058
 8004820:	40020070 	.word	0x40020070
 8004824:	40020088 	.word	0x40020088
 8004828:	400200a0 	.word	0x400200a0
 800482c:	400200b8 	.word	0x400200b8
 8004830:	40020410 	.word	0x40020410
 8004834:	40020428 	.word	0x40020428
 8004838:	40020440 	.word	0x40020440
 800483c:	40020458 	.word	0x40020458
 8004840:	40020470 	.word	0x40020470
 8004844:	40020488 	.word	0x40020488
 8004848:	400204a0 	.word	0x400204a0
 800484c:	400204b8 	.word	0x400204b8
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0201 	bic.w	r2, r2, #1
 800485e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a5c      	ldr	r2, [pc, #368]	; (80049d8 <HAL_DMA_Abort_IT+0x428>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d072      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a5b      	ldr	r2, [pc, #364]	; (80049dc <HAL_DMA_Abort_IT+0x42c>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d06d      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a59      	ldr	r2, [pc, #356]	; (80049e0 <HAL_DMA_Abort_IT+0x430>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d068      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a58      	ldr	r2, [pc, #352]	; (80049e4 <HAL_DMA_Abort_IT+0x434>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d063      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a56      	ldr	r2, [pc, #344]	; (80049e8 <HAL_DMA_Abort_IT+0x438>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d05e      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a55      	ldr	r2, [pc, #340]	; (80049ec <HAL_DMA_Abort_IT+0x43c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d059      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a53      	ldr	r2, [pc, #332]	; (80049f0 <HAL_DMA_Abort_IT+0x440>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d054      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a52      	ldr	r2, [pc, #328]	; (80049f4 <HAL_DMA_Abort_IT+0x444>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d04f      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a50      	ldr	r2, [pc, #320]	; (80049f8 <HAL_DMA_Abort_IT+0x448>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d04a      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a4f      	ldr	r2, [pc, #316]	; (80049fc <HAL_DMA_Abort_IT+0x44c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d045      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a4d      	ldr	r2, [pc, #308]	; (8004a00 <HAL_DMA_Abort_IT+0x450>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d040      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a4c      	ldr	r2, [pc, #304]	; (8004a04 <HAL_DMA_Abort_IT+0x454>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d03b      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a4a      	ldr	r2, [pc, #296]	; (8004a08 <HAL_DMA_Abort_IT+0x458>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d036      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a49      	ldr	r2, [pc, #292]	; (8004a0c <HAL_DMA_Abort_IT+0x45c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d031      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a47      	ldr	r2, [pc, #284]	; (8004a10 <HAL_DMA_Abort_IT+0x460>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d02c      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a46      	ldr	r2, [pc, #280]	; (8004a14 <HAL_DMA_Abort_IT+0x464>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d027      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a44      	ldr	r2, [pc, #272]	; (8004a18 <HAL_DMA_Abort_IT+0x468>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d022      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a43      	ldr	r2, [pc, #268]	; (8004a1c <HAL_DMA_Abort_IT+0x46c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d01d      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a41      	ldr	r2, [pc, #260]	; (8004a20 <HAL_DMA_Abort_IT+0x470>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d018      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a40      	ldr	r2, [pc, #256]	; (8004a24 <HAL_DMA_Abort_IT+0x474>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d013      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a3e      	ldr	r2, [pc, #248]	; (8004a28 <HAL_DMA_Abort_IT+0x478>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d00e      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a3d      	ldr	r2, [pc, #244]	; (8004a2c <HAL_DMA_Abort_IT+0x47c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d009      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a3b      	ldr	r2, [pc, #236]	; (8004a30 <HAL_DMA_Abort_IT+0x480>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d004      	beq.n	8004950 <HAL_DMA_Abort_IT+0x3a0>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a3a      	ldr	r2, [pc, #232]	; (8004a34 <HAL_DMA_Abort_IT+0x484>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d101      	bne.n	8004954 <HAL_DMA_Abort_IT+0x3a4>
 8004950:	2301      	movs	r3, #1
 8004952:	e000      	b.n	8004956 <HAL_DMA_Abort_IT+0x3a6>
 8004954:	2300      	movs	r3, #0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d028      	beq.n	80049ac <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004964:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004968:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004974:	f003 031f 	and.w	r3, r3, #31
 8004978:	2201      	movs	r2, #1
 800497a:	409a      	lsls	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004988:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00c      	beq.n	80049ac <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800499c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049a0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80049aa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	40020010 	.word	0x40020010
 80049dc:	40020028 	.word	0x40020028
 80049e0:	40020040 	.word	0x40020040
 80049e4:	40020058 	.word	0x40020058
 80049e8:	40020070 	.word	0x40020070
 80049ec:	40020088 	.word	0x40020088
 80049f0:	400200a0 	.word	0x400200a0
 80049f4:	400200b8 	.word	0x400200b8
 80049f8:	40020410 	.word	0x40020410
 80049fc:	40020428 	.word	0x40020428
 8004a00:	40020440 	.word	0x40020440
 8004a04:	40020458 	.word	0x40020458
 8004a08:	40020470 	.word	0x40020470
 8004a0c:	40020488 	.word	0x40020488
 8004a10:	400204a0 	.word	0x400204a0
 8004a14:	400204b8 	.word	0x400204b8
 8004a18:	58025408 	.word	0x58025408
 8004a1c:	5802541c 	.word	0x5802541c
 8004a20:	58025430 	.word	0x58025430
 8004a24:	58025444 	.word	0x58025444
 8004a28:	58025458 	.word	0x58025458
 8004a2c:	5802546c 	.word	0x5802546c
 8004a30:	58025480 	.word	0x58025480
 8004a34:	58025494 	.word	0x58025494

08004a38 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b08a      	sub	sp, #40	; 0x28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a44:	4b67      	ldr	r3, [pc, #412]	; (8004be4 <HAL_DMA_IRQHandler+0x1ac>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a67      	ldr	r2, [pc, #412]	; (8004be8 <HAL_DMA_IRQHandler+0x1b0>)
 8004a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4e:	0a9b      	lsrs	r3, r3, #10
 8004a50:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a56:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004a5e:	6a3b      	ldr	r3, [r7, #32]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a5f      	ldr	r2, [pc, #380]	; (8004bec <HAL_DMA_IRQHandler+0x1b4>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d04a      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a5d      	ldr	r2, [pc, #372]	; (8004bf0 <HAL_DMA_IRQHandler+0x1b8>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d045      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a5c      	ldr	r2, [pc, #368]	; (8004bf4 <HAL_DMA_IRQHandler+0x1bc>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d040      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a5a      	ldr	r2, [pc, #360]	; (8004bf8 <HAL_DMA_IRQHandler+0x1c0>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d03b      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a59      	ldr	r2, [pc, #356]	; (8004bfc <HAL_DMA_IRQHandler+0x1c4>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d036      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a57      	ldr	r2, [pc, #348]	; (8004c00 <HAL_DMA_IRQHandler+0x1c8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d031      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a56      	ldr	r2, [pc, #344]	; (8004c04 <HAL_DMA_IRQHandler+0x1cc>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d02c      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a54      	ldr	r2, [pc, #336]	; (8004c08 <HAL_DMA_IRQHandler+0x1d0>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d027      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a53      	ldr	r2, [pc, #332]	; (8004c0c <HAL_DMA_IRQHandler+0x1d4>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d022      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a51      	ldr	r2, [pc, #324]	; (8004c10 <HAL_DMA_IRQHandler+0x1d8>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d01d      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a50      	ldr	r2, [pc, #320]	; (8004c14 <HAL_DMA_IRQHandler+0x1dc>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d018      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a4e      	ldr	r2, [pc, #312]	; (8004c18 <HAL_DMA_IRQHandler+0x1e0>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d013      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a4d      	ldr	r2, [pc, #308]	; (8004c1c <HAL_DMA_IRQHandler+0x1e4>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d00e      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a4b      	ldr	r2, [pc, #300]	; (8004c20 <HAL_DMA_IRQHandler+0x1e8>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d009      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a4a      	ldr	r2, [pc, #296]	; (8004c24 <HAL_DMA_IRQHandler+0x1ec>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d004      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a48      	ldr	r2, [pc, #288]	; (8004c28 <HAL_DMA_IRQHandler+0x1f0>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d101      	bne.n	8004b0e <HAL_DMA_IRQHandler+0xd6>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e000      	b.n	8004b10 <HAL_DMA_IRQHandler+0xd8>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 842b 	beq.w	800536c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b1a:	f003 031f 	and.w	r3, r3, #31
 8004b1e:	2208      	movs	r2, #8
 8004b20:	409a      	lsls	r2, r3
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	4013      	ands	r3, r2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 80a2 	beq.w	8004c70 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a2e      	ldr	r2, [pc, #184]	; (8004bec <HAL_DMA_IRQHandler+0x1b4>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d04a      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a2d      	ldr	r2, [pc, #180]	; (8004bf0 <HAL_DMA_IRQHandler+0x1b8>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d045      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a2b      	ldr	r2, [pc, #172]	; (8004bf4 <HAL_DMA_IRQHandler+0x1bc>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d040      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a2a      	ldr	r2, [pc, #168]	; (8004bf8 <HAL_DMA_IRQHandler+0x1c0>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d03b      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a28      	ldr	r2, [pc, #160]	; (8004bfc <HAL_DMA_IRQHandler+0x1c4>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d036      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a27      	ldr	r2, [pc, #156]	; (8004c00 <HAL_DMA_IRQHandler+0x1c8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d031      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a25      	ldr	r2, [pc, #148]	; (8004c04 <HAL_DMA_IRQHandler+0x1cc>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d02c      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a24      	ldr	r2, [pc, #144]	; (8004c08 <HAL_DMA_IRQHandler+0x1d0>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d027      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a22      	ldr	r2, [pc, #136]	; (8004c0c <HAL_DMA_IRQHandler+0x1d4>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d022      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a21      	ldr	r2, [pc, #132]	; (8004c10 <HAL_DMA_IRQHandler+0x1d8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d01d      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a1f      	ldr	r2, [pc, #124]	; (8004c14 <HAL_DMA_IRQHandler+0x1dc>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d018      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a1e      	ldr	r2, [pc, #120]	; (8004c18 <HAL_DMA_IRQHandler+0x1e0>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d013      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a1c      	ldr	r2, [pc, #112]	; (8004c1c <HAL_DMA_IRQHandler+0x1e4>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d00e      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a1b      	ldr	r2, [pc, #108]	; (8004c20 <HAL_DMA_IRQHandler+0x1e8>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d009      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a19      	ldr	r2, [pc, #100]	; (8004c24 <HAL_DMA_IRQHandler+0x1ec>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d004      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a18      	ldr	r2, [pc, #96]	; (8004c28 <HAL_DMA_IRQHandler+0x1f0>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d12f      	bne.n	8004c2c <HAL_DMA_IRQHandler+0x1f4>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0304 	and.w	r3, r3, #4
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	bf14      	ite	ne
 8004bda:	2301      	movne	r3, #1
 8004bdc:	2300      	moveq	r3, #0
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	e02e      	b.n	8004c40 <HAL_DMA_IRQHandler+0x208>
 8004be2:	bf00      	nop
 8004be4:	24000000 	.word	0x24000000
 8004be8:	1b4e81b5 	.word	0x1b4e81b5
 8004bec:	40020010 	.word	0x40020010
 8004bf0:	40020028 	.word	0x40020028
 8004bf4:	40020040 	.word	0x40020040
 8004bf8:	40020058 	.word	0x40020058
 8004bfc:	40020070 	.word	0x40020070
 8004c00:	40020088 	.word	0x40020088
 8004c04:	400200a0 	.word	0x400200a0
 8004c08:	400200b8 	.word	0x400200b8
 8004c0c:	40020410 	.word	0x40020410
 8004c10:	40020428 	.word	0x40020428
 8004c14:	40020440 	.word	0x40020440
 8004c18:	40020458 	.word	0x40020458
 8004c1c:	40020470 	.word	0x40020470
 8004c20:	40020488 	.word	0x40020488
 8004c24:	400204a0 	.word	0x400204a0
 8004c28:	400204b8 	.word	0x400204b8
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	bf14      	ite	ne
 8004c3a:	2301      	movne	r3, #1
 8004c3c:	2300      	moveq	r3, #0
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d015      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0204 	bic.w	r2, r2, #4
 8004c52:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c58:	f003 031f 	and.w	r3, r3, #31
 8004c5c:	2208      	movs	r2, #8
 8004c5e:	409a      	lsls	r2, r3
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c68:	f043 0201 	orr.w	r2, r3, #1
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c74:	f003 031f 	and.w	r3, r3, #31
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d06e      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a69      	ldr	r2, [pc, #420]	; (8004e30 <HAL_DMA_IRQHandler+0x3f8>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d04a      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a67      	ldr	r2, [pc, #412]	; (8004e34 <HAL_DMA_IRQHandler+0x3fc>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d045      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a66      	ldr	r2, [pc, #408]	; (8004e38 <HAL_DMA_IRQHandler+0x400>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d040      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a64      	ldr	r2, [pc, #400]	; (8004e3c <HAL_DMA_IRQHandler+0x404>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d03b      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a63      	ldr	r2, [pc, #396]	; (8004e40 <HAL_DMA_IRQHandler+0x408>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d036      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a61      	ldr	r2, [pc, #388]	; (8004e44 <HAL_DMA_IRQHandler+0x40c>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d031      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a60      	ldr	r2, [pc, #384]	; (8004e48 <HAL_DMA_IRQHandler+0x410>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d02c      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a5e      	ldr	r2, [pc, #376]	; (8004e4c <HAL_DMA_IRQHandler+0x414>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d027      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a5d      	ldr	r2, [pc, #372]	; (8004e50 <HAL_DMA_IRQHandler+0x418>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d022      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a5b      	ldr	r2, [pc, #364]	; (8004e54 <HAL_DMA_IRQHandler+0x41c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d01d      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a5a      	ldr	r2, [pc, #360]	; (8004e58 <HAL_DMA_IRQHandler+0x420>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d018      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a58      	ldr	r2, [pc, #352]	; (8004e5c <HAL_DMA_IRQHandler+0x424>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d013      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a57      	ldr	r2, [pc, #348]	; (8004e60 <HAL_DMA_IRQHandler+0x428>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d00e      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a55      	ldr	r2, [pc, #340]	; (8004e64 <HAL_DMA_IRQHandler+0x42c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d009      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a54      	ldr	r2, [pc, #336]	; (8004e68 <HAL_DMA_IRQHandler+0x430>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d004      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a52      	ldr	r2, [pc, #328]	; (8004e6c <HAL_DMA_IRQHandler+0x434>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d10a      	bne.n	8004d3c <HAL_DMA_IRQHandler+0x304>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	bf14      	ite	ne
 8004d34:	2301      	movne	r3, #1
 8004d36:	2300      	moveq	r3, #0
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	e003      	b.n	8004d44 <HAL_DMA_IRQHandler+0x30c>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2300      	movs	r3, #0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00d      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d4c:	f003 031f 	and.w	r3, r3, #31
 8004d50:	2201      	movs	r2, #1
 8004d52:	409a      	lsls	r2, r3
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5c:	f043 0202 	orr.w	r2, r3, #2
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d68:	f003 031f 	and.w	r3, r3, #31
 8004d6c:	2204      	movs	r2, #4
 8004d6e:	409a      	lsls	r2, r3
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	4013      	ands	r3, r2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 808f 	beq.w	8004e98 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a2c      	ldr	r2, [pc, #176]	; (8004e30 <HAL_DMA_IRQHandler+0x3f8>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d04a      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a2a      	ldr	r2, [pc, #168]	; (8004e34 <HAL_DMA_IRQHandler+0x3fc>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d045      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a29      	ldr	r2, [pc, #164]	; (8004e38 <HAL_DMA_IRQHandler+0x400>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d040      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a27      	ldr	r2, [pc, #156]	; (8004e3c <HAL_DMA_IRQHandler+0x404>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d03b      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a26      	ldr	r2, [pc, #152]	; (8004e40 <HAL_DMA_IRQHandler+0x408>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d036      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a24      	ldr	r2, [pc, #144]	; (8004e44 <HAL_DMA_IRQHandler+0x40c>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d031      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a23      	ldr	r2, [pc, #140]	; (8004e48 <HAL_DMA_IRQHandler+0x410>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d02c      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a21      	ldr	r2, [pc, #132]	; (8004e4c <HAL_DMA_IRQHandler+0x414>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d027      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a20      	ldr	r2, [pc, #128]	; (8004e50 <HAL_DMA_IRQHandler+0x418>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d022      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a1e      	ldr	r2, [pc, #120]	; (8004e54 <HAL_DMA_IRQHandler+0x41c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d01d      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a1d      	ldr	r2, [pc, #116]	; (8004e58 <HAL_DMA_IRQHandler+0x420>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d018      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a1b      	ldr	r2, [pc, #108]	; (8004e5c <HAL_DMA_IRQHandler+0x424>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d013      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a1a      	ldr	r2, [pc, #104]	; (8004e60 <HAL_DMA_IRQHandler+0x428>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d00e      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a18      	ldr	r2, [pc, #96]	; (8004e64 <HAL_DMA_IRQHandler+0x42c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d009      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a17      	ldr	r2, [pc, #92]	; (8004e68 <HAL_DMA_IRQHandler+0x430>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d004      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a15      	ldr	r2, [pc, #84]	; (8004e6c <HAL_DMA_IRQHandler+0x434>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d12a      	bne.n	8004e70 <HAL_DMA_IRQHandler+0x438>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	bf14      	ite	ne
 8004e28:	2301      	movne	r3, #1
 8004e2a:	2300      	moveq	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	e023      	b.n	8004e78 <HAL_DMA_IRQHandler+0x440>
 8004e30:	40020010 	.word	0x40020010
 8004e34:	40020028 	.word	0x40020028
 8004e38:	40020040 	.word	0x40020040
 8004e3c:	40020058 	.word	0x40020058
 8004e40:	40020070 	.word	0x40020070
 8004e44:	40020088 	.word	0x40020088
 8004e48:	400200a0 	.word	0x400200a0
 8004e4c:	400200b8 	.word	0x400200b8
 8004e50:	40020410 	.word	0x40020410
 8004e54:	40020428 	.word	0x40020428
 8004e58:	40020440 	.word	0x40020440
 8004e5c:	40020458 	.word	0x40020458
 8004e60:	40020470 	.word	0x40020470
 8004e64:	40020488 	.word	0x40020488
 8004e68:	400204a0 	.word	0x400204a0
 8004e6c:	400204b8 	.word	0x400204b8
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2300      	movs	r3, #0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00d      	beq.n	8004e98 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e80:	f003 031f 	and.w	r3, r3, #31
 8004e84:	2204      	movs	r2, #4
 8004e86:	409a      	lsls	r2, r3
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e90:	f043 0204 	orr.w	r2, r3, #4
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e9c:	f003 031f 	and.w	r3, r3, #31
 8004ea0:	2210      	movs	r2, #16
 8004ea2:	409a      	lsls	r2, r3
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 80a6 	beq.w	8004ffa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a85      	ldr	r2, [pc, #532]	; (80050c8 <HAL_DMA_IRQHandler+0x690>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d04a      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a83      	ldr	r2, [pc, #524]	; (80050cc <HAL_DMA_IRQHandler+0x694>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d045      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a82      	ldr	r2, [pc, #520]	; (80050d0 <HAL_DMA_IRQHandler+0x698>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d040      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a80      	ldr	r2, [pc, #512]	; (80050d4 <HAL_DMA_IRQHandler+0x69c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d03b      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a7f      	ldr	r2, [pc, #508]	; (80050d8 <HAL_DMA_IRQHandler+0x6a0>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d036      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a7d      	ldr	r2, [pc, #500]	; (80050dc <HAL_DMA_IRQHandler+0x6a4>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d031      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a7c      	ldr	r2, [pc, #496]	; (80050e0 <HAL_DMA_IRQHandler+0x6a8>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d02c      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a7a      	ldr	r2, [pc, #488]	; (80050e4 <HAL_DMA_IRQHandler+0x6ac>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d027      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a79      	ldr	r2, [pc, #484]	; (80050e8 <HAL_DMA_IRQHandler+0x6b0>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d022      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a77      	ldr	r2, [pc, #476]	; (80050ec <HAL_DMA_IRQHandler+0x6b4>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d01d      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a76      	ldr	r2, [pc, #472]	; (80050f0 <HAL_DMA_IRQHandler+0x6b8>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d018      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a74      	ldr	r2, [pc, #464]	; (80050f4 <HAL_DMA_IRQHandler+0x6bc>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d013      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a73      	ldr	r2, [pc, #460]	; (80050f8 <HAL_DMA_IRQHandler+0x6c0>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d00e      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a71      	ldr	r2, [pc, #452]	; (80050fc <HAL_DMA_IRQHandler+0x6c4>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d009      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a70      	ldr	r2, [pc, #448]	; (8005100 <HAL_DMA_IRQHandler+0x6c8>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d004      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a6e      	ldr	r2, [pc, #440]	; (8005104 <HAL_DMA_IRQHandler+0x6cc>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d10a      	bne.n	8004f64 <HAL_DMA_IRQHandler+0x52c>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0308 	and.w	r3, r3, #8
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	bf14      	ite	ne
 8004f5c:	2301      	movne	r3, #1
 8004f5e:	2300      	moveq	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	e009      	b.n	8004f78 <HAL_DMA_IRQHandler+0x540>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0304 	and.w	r3, r3, #4
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	bf14      	ite	ne
 8004f72:	2301      	movne	r3, #1
 8004f74:	2300      	moveq	r3, #0
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d03e      	beq.n	8004ffa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f80:	f003 031f 	and.w	r3, r3, #31
 8004f84:	2210      	movs	r2, #16
 8004f86:	409a      	lsls	r2, r3
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d018      	beq.n	8004fcc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d108      	bne.n	8004fba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d024      	beq.n	8004ffa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	4798      	blx	r3
 8004fb8:	e01f      	b.n	8004ffa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d01b      	beq.n	8004ffa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	4798      	blx	r3
 8004fca:	e016      	b.n	8004ffa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d107      	bne.n	8004fea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 0208 	bic.w	r2, r2, #8
 8004fe8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ffe:	f003 031f 	and.w	r3, r3, #31
 8005002:	2220      	movs	r2, #32
 8005004:	409a      	lsls	r2, r3
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	4013      	ands	r3, r2
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 8110 	beq.w	8005230 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a2c      	ldr	r2, [pc, #176]	; (80050c8 <HAL_DMA_IRQHandler+0x690>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d04a      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a2b      	ldr	r2, [pc, #172]	; (80050cc <HAL_DMA_IRQHandler+0x694>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d045      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a29      	ldr	r2, [pc, #164]	; (80050d0 <HAL_DMA_IRQHandler+0x698>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d040      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a28      	ldr	r2, [pc, #160]	; (80050d4 <HAL_DMA_IRQHandler+0x69c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d03b      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a26      	ldr	r2, [pc, #152]	; (80050d8 <HAL_DMA_IRQHandler+0x6a0>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d036      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a25      	ldr	r2, [pc, #148]	; (80050dc <HAL_DMA_IRQHandler+0x6a4>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d031      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a23      	ldr	r2, [pc, #140]	; (80050e0 <HAL_DMA_IRQHandler+0x6a8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d02c      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a22      	ldr	r2, [pc, #136]	; (80050e4 <HAL_DMA_IRQHandler+0x6ac>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d027      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a20      	ldr	r2, [pc, #128]	; (80050e8 <HAL_DMA_IRQHandler+0x6b0>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d022      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a1f      	ldr	r2, [pc, #124]	; (80050ec <HAL_DMA_IRQHandler+0x6b4>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d01d      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a1d      	ldr	r2, [pc, #116]	; (80050f0 <HAL_DMA_IRQHandler+0x6b8>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d018      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a1c      	ldr	r2, [pc, #112]	; (80050f4 <HAL_DMA_IRQHandler+0x6bc>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d013      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a1a      	ldr	r2, [pc, #104]	; (80050f8 <HAL_DMA_IRQHandler+0x6c0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d00e      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a19      	ldr	r2, [pc, #100]	; (80050fc <HAL_DMA_IRQHandler+0x6c4>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d009      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a17      	ldr	r2, [pc, #92]	; (8005100 <HAL_DMA_IRQHandler+0x6c8>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d004      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a16      	ldr	r2, [pc, #88]	; (8005104 <HAL_DMA_IRQHandler+0x6cc>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d12b      	bne.n	8005108 <HAL_DMA_IRQHandler+0x6d0>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0310 	and.w	r3, r3, #16
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	bf14      	ite	ne
 80050be:	2301      	movne	r3, #1
 80050c0:	2300      	moveq	r3, #0
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	e02a      	b.n	800511c <HAL_DMA_IRQHandler+0x6e4>
 80050c6:	bf00      	nop
 80050c8:	40020010 	.word	0x40020010
 80050cc:	40020028 	.word	0x40020028
 80050d0:	40020040 	.word	0x40020040
 80050d4:	40020058 	.word	0x40020058
 80050d8:	40020070 	.word	0x40020070
 80050dc:	40020088 	.word	0x40020088
 80050e0:	400200a0 	.word	0x400200a0
 80050e4:	400200b8 	.word	0x400200b8
 80050e8:	40020410 	.word	0x40020410
 80050ec:	40020428 	.word	0x40020428
 80050f0:	40020440 	.word	0x40020440
 80050f4:	40020458 	.word	0x40020458
 80050f8:	40020470 	.word	0x40020470
 80050fc:	40020488 	.word	0x40020488
 8005100:	400204a0 	.word	0x400204a0
 8005104:	400204b8 	.word	0x400204b8
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	bf14      	ite	ne
 8005116:	2301      	movne	r3, #1
 8005118:	2300      	moveq	r3, #0
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 8087 	beq.w	8005230 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005126:	f003 031f 	and.w	r3, r3, #31
 800512a:	2220      	movs	r2, #32
 800512c:	409a      	lsls	r2, r3
 800512e:	6a3b      	ldr	r3, [r7, #32]
 8005130:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b04      	cmp	r3, #4
 800513c:	d139      	bne.n	80051b2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0216 	bic.w	r2, r2, #22
 800514c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695a      	ldr	r2, [r3, #20]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800515c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	2b00      	cmp	r3, #0
 8005164:	d103      	bne.n	800516e <HAL_DMA_IRQHandler+0x736>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800516a:	2b00      	cmp	r3, #0
 800516c:	d007      	beq.n	800517e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 0208 	bic.w	r2, r2, #8
 800517c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005182:	f003 031f 	and.w	r3, r3, #31
 8005186:	223f      	movs	r2, #63	; 0x3f
 8005188:	409a      	lsls	r2, r3
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f000 834a 	beq.w	800583c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	4798      	blx	r3
          }
          return;
 80051b0:	e344      	b.n	800583c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d018      	beq.n	80051f2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d108      	bne.n	80051e0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d02c      	beq.n	8005230 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	4798      	blx	r3
 80051de:	e027      	b.n	8005230 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d023      	beq.n	8005230 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	4798      	blx	r3
 80051f0:	e01e      	b.n	8005230 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10f      	bne.n	8005220 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0210 	bic.w	r2, r2, #16
 800520e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 8306 	beq.w	8005846 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b00      	cmp	r3, #0
 8005244:	f000 8088 	beq.w	8005358 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2204      	movs	r2, #4
 800524c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a7a      	ldr	r2, [pc, #488]	; (8005440 <HAL_DMA_IRQHandler+0xa08>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d04a      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a79      	ldr	r2, [pc, #484]	; (8005444 <HAL_DMA_IRQHandler+0xa0c>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d045      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a77      	ldr	r2, [pc, #476]	; (8005448 <HAL_DMA_IRQHandler+0xa10>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d040      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a76      	ldr	r2, [pc, #472]	; (800544c <HAL_DMA_IRQHandler+0xa14>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d03b      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a74      	ldr	r2, [pc, #464]	; (8005450 <HAL_DMA_IRQHandler+0xa18>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d036      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a73      	ldr	r2, [pc, #460]	; (8005454 <HAL_DMA_IRQHandler+0xa1c>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d031      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a71      	ldr	r2, [pc, #452]	; (8005458 <HAL_DMA_IRQHandler+0xa20>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d02c      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a70      	ldr	r2, [pc, #448]	; (800545c <HAL_DMA_IRQHandler+0xa24>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d027      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a6e      	ldr	r2, [pc, #440]	; (8005460 <HAL_DMA_IRQHandler+0xa28>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d022      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a6d      	ldr	r2, [pc, #436]	; (8005464 <HAL_DMA_IRQHandler+0xa2c>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d01d      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a6b      	ldr	r2, [pc, #428]	; (8005468 <HAL_DMA_IRQHandler+0xa30>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d018      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a6a      	ldr	r2, [pc, #424]	; (800546c <HAL_DMA_IRQHandler+0xa34>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d013      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a68      	ldr	r2, [pc, #416]	; (8005470 <HAL_DMA_IRQHandler+0xa38>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d00e      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a67      	ldr	r2, [pc, #412]	; (8005474 <HAL_DMA_IRQHandler+0xa3c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d009      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a65      	ldr	r2, [pc, #404]	; (8005478 <HAL_DMA_IRQHandler+0xa40>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d004      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a64      	ldr	r2, [pc, #400]	; (800547c <HAL_DMA_IRQHandler+0xa44>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d108      	bne.n	8005302 <HAL_DMA_IRQHandler+0x8ca>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0201 	bic.w	r2, r2, #1
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	e007      	b.n	8005312 <HAL_DMA_IRQHandler+0x8da>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0201 	bic.w	r2, r2, #1
 8005310:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	3301      	adds	r3, #1
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800531a:	429a      	cmp	r2, r3
 800531c:	d307      	bcc.n	800532e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1f2      	bne.n	8005312 <HAL_DMA_IRQHandler+0x8da>
 800532c:	e000      	b.n	8005330 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800532e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d004      	beq.n	8005348 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2203      	movs	r2, #3
 8005342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005346:	e003      	b.n	8005350 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 8272 	beq.w	8005846 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	4798      	blx	r3
 800536a:	e26c      	b.n	8005846 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a43      	ldr	r2, [pc, #268]	; (8005480 <HAL_DMA_IRQHandler+0xa48>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d022      	beq.n	80053bc <HAL_DMA_IRQHandler+0x984>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a42      	ldr	r2, [pc, #264]	; (8005484 <HAL_DMA_IRQHandler+0xa4c>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d01d      	beq.n	80053bc <HAL_DMA_IRQHandler+0x984>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a40      	ldr	r2, [pc, #256]	; (8005488 <HAL_DMA_IRQHandler+0xa50>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d018      	beq.n	80053bc <HAL_DMA_IRQHandler+0x984>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a3f      	ldr	r2, [pc, #252]	; (800548c <HAL_DMA_IRQHandler+0xa54>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d013      	beq.n	80053bc <HAL_DMA_IRQHandler+0x984>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a3d      	ldr	r2, [pc, #244]	; (8005490 <HAL_DMA_IRQHandler+0xa58>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d00e      	beq.n	80053bc <HAL_DMA_IRQHandler+0x984>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a3c      	ldr	r2, [pc, #240]	; (8005494 <HAL_DMA_IRQHandler+0xa5c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d009      	beq.n	80053bc <HAL_DMA_IRQHandler+0x984>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a3a      	ldr	r2, [pc, #232]	; (8005498 <HAL_DMA_IRQHandler+0xa60>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d004      	beq.n	80053bc <HAL_DMA_IRQHandler+0x984>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a39      	ldr	r2, [pc, #228]	; (800549c <HAL_DMA_IRQHandler+0xa64>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d101      	bne.n	80053c0 <HAL_DMA_IRQHandler+0x988>
 80053bc:	2301      	movs	r3, #1
 80053be:	e000      	b.n	80053c2 <HAL_DMA_IRQHandler+0x98a>
 80053c0:	2300      	movs	r3, #0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 823f 	beq.w	8005846 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d4:	f003 031f 	and.w	r3, r3, #31
 80053d8:	2204      	movs	r2, #4
 80053da:	409a      	lsls	r2, r3
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	4013      	ands	r3, r2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f000 80cd 	beq.w	8005580 <HAL_DMA_IRQHandler+0xb48>
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	f003 0304 	and.w	r3, r3, #4
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 80c7 	beq.w	8005580 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f6:	f003 031f 	and.w	r3, r3, #31
 80053fa:	2204      	movs	r2, #4
 80053fc:	409a      	lsls	r2, r3
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d049      	beq.n	80054a0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d109      	bne.n	800542a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800541a:	2b00      	cmp	r3, #0
 800541c:	f000 8210 	beq.w	8005840 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005428:	e20a      	b.n	8005840 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	2b00      	cmp	r3, #0
 8005430:	f000 8206 	beq.w	8005840 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800543c:	e200      	b.n	8005840 <HAL_DMA_IRQHandler+0xe08>
 800543e:	bf00      	nop
 8005440:	40020010 	.word	0x40020010
 8005444:	40020028 	.word	0x40020028
 8005448:	40020040 	.word	0x40020040
 800544c:	40020058 	.word	0x40020058
 8005450:	40020070 	.word	0x40020070
 8005454:	40020088 	.word	0x40020088
 8005458:	400200a0 	.word	0x400200a0
 800545c:	400200b8 	.word	0x400200b8
 8005460:	40020410 	.word	0x40020410
 8005464:	40020428 	.word	0x40020428
 8005468:	40020440 	.word	0x40020440
 800546c:	40020458 	.word	0x40020458
 8005470:	40020470 	.word	0x40020470
 8005474:	40020488 	.word	0x40020488
 8005478:	400204a0 	.word	0x400204a0
 800547c:	400204b8 	.word	0x400204b8
 8005480:	58025408 	.word	0x58025408
 8005484:	5802541c 	.word	0x5802541c
 8005488:	58025430 	.word	0x58025430
 800548c:	58025444 	.word	0x58025444
 8005490:	58025458 	.word	0x58025458
 8005494:	5802546c 	.word	0x5802546c
 8005498:	58025480 	.word	0x58025480
 800549c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	f003 0320 	and.w	r3, r3, #32
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d160      	bne.n	800556c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a8c      	ldr	r2, [pc, #560]	; (80056e0 <HAL_DMA_IRQHandler+0xca8>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d04a      	beq.n	800554a <HAL_DMA_IRQHandler+0xb12>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a8a      	ldr	r2, [pc, #552]	; (80056e4 <HAL_DMA_IRQHandler+0xcac>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d045      	beq.n	800554a <HAL_DMA_IRQHandler+0xb12>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a89      	ldr	r2, [pc, #548]	; (80056e8 <HAL_DMA_IRQHandler+0xcb0>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d040      	beq.n	800554a <HAL_DMA_IRQHandler+0xb12>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a87      	ldr	r2, [pc, #540]	; (80056ec <HAL_DMA_IRQHandler+0xcb4>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d03b      	beq.n	800554a <HAL_DMA_IRQHandler+0xb12>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a86      	ldr	r2, [pc, #536]	; (80056f0 <HAL_DMA_IRQHandler+0xcb8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d036      	beq.n	800554a <HAL_DMA_IRQHandler+0xb12>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a84      	ldr	r2, [pc, #528]	; (80056f4 <HAL_DMA_IRQHandler+0xcbc>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d031      	beq.n	800554a <HAL_DMA_IRQHandler+0xb12>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a83      	ldr	r2, [pc, #524]	; (80056f8 <HAL_DMA_IRQHandler+0xcc0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d02c      	beq.n	800554a <HAL_DMA_IRQHandler+0xb12>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a81      	ldr	r2, [pc, #516]	; (80056fc <HAL_DMA_IRQHandler+0xcc4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d027      	beq.n	800554a <HAL_DMA_IRQHandler+0xb12>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a80      	ldr	r2, [pc, #512]	; (8005700 <HAL_DMA_IRQHandler+0xcc8>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d022      	beq.n	800554a <HAL_DMA_IRQHandler+0xb12>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a7e      	ldr	r2, [pc, #504]	; (8005704 <HAL_DMA_IRQHandler+0xccc>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d01d      	beq.n	800554a <HAL_DMA_IRQHandler+0xb12>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a7d      	ldr	r2, [pc, #500]	; (8005708 <HAL_DMA_IRQHandler+0xcd0>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d018      	beq.n	800554a <HAL_DMA_IRQHandler+0xb12>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a7b      	ldr	r2, [pc, #492]	; (800570c <HAL_DMA_IRQHandler+0xcd4>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d013      	beq.n	800554a <HAL_DMA_IRQHandler+0xb12>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a7a      	ldr	r2, [pc, #488]	; (8005710 <HAL_DMA_IRQHandler+0xcd8>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d00e      	beq.n	800554a <HAL_DMA_IRQHandler+0xb12>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a78      	ldr	r2, [pc, #480]	; (8005714 <HAL_DMA_IRQHandler+0xcdc>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d009      	beq.n	800554a <HAL_DMA_IRQHandler+0xb12>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a77      	ldr	r2, [pc, #476]	; (8005718 <HAL_DMA_IRQHandler+0xce0>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d004      	beq.n	800554a <HAL_DMA_IRQHandler+0xb12>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a75      	ldr	r2, [pc, #468]	; (800571c <HAL_DMA_IRQHandler+0xce4>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d108      	bne.n	800555c <HAL_DMA_IRQHandler+0xb24>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 0208 	bic.w	r2, r2, #8
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	e007      	b.n	800556c <HAL_DMA_IRQHandler+0xb34>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 0204 	bic.w	r2, r2, #4
 800556a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 8165 	beq.w	8005840 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800557e:	e15f      	b.n	8005840 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005584:	f003 031f 	and.w	r3, r3, #31
 8005588:	2202      	movs	r2, #2
 800558a:	409a      	lsls	r2, r3
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	4013      	ands	r3, r2
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 80c5 	beq.w	8005720 <HAL_DMA_IRQHandler+0xce8>
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 80bf 	beq.w	8005720 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a6:	f003 031f 	and.w	r3, r3, #31
 80055aa:	2202      	movs	r2, #2
 80055ac:	409a      	lsls	r2, r3
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d018      	beq.n	80055ee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d109      	bne.n	80055da <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f000 813a 	beq.w	8005844 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055d8:	e134      	b.n	8005844 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f000 8130 	beq.w	8005844 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055ec:	e12a      	b.n	8005844 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	f003 0320 	and.w	r3, r3, #32
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d168      	bne.n	80056ca <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a38      	ldr	r2, [pc, #224]	; (80056e0 <HAL_DMA_IRQHandler+0xca8>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d04a      	beq.n	8005698 <HAL_DMA_IRQHandler+0xc60>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a37      	ldr	r2, [pc, #220]	; (80056e4 <HAL_DMA_IRQHandler+0xcac>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d045      	beq.n	8005698 <HAL_DMA_IRQHandler+0xc60>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a35      	ldr	r2, [pc, #212]	; (80056e8 <HAL_DMA_IRQHandler+0xcb0>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d040      	beq.n	8005698 <HAL_DMA_IRQHandler+0xc60>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a34      	ldr	r2, [pc, #208]	; (80056ec <HAL_DMA_IRQHandler+0xcb4>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d03b      	beq.n	8005698 <HAL_DMA_IRQHandler+0xc60>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a32      	ldr	r2, [pc, #200]	; (80056f0 <HAL_DMA_IRQHandler+0xcb8>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d036      	beq.n	8005698 <HAL_DMA_IRQHandler+0xc60>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a31      	ldr	r2, [pc, #196]	; (80056f4 <HAL_DMA_IRQHandler+0xcbc>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d031      	beq.n	8005698 <HAL_DMA_IRQHandler+0xc60>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a2f      	ldr	r2, [pc, #188]	; (80056f8 <HAL_DMA_IRQHandler+0xcc0>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d02c      	beq.n	8005698 <HAL_DMA_IRQHandler+0xc60>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a2e      	ldr	r2, [pc, #184]	; (80056fc <HAL_DMA_IRQHandler+0xcc4>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d027      	beq.n	8005698 <HAL_DMA_IRQHandler+0xc60>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a2c      	ldr	r2, [pc, #176]	; (8005700 <HAL_DMA_IRQHandler+0xcc8>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d022      	beq.n	8005698 <HAL_DMA_IRQHandler+0xc60>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a2b      	ldr	r2, [pc, #172]	; (8005704 <HAL_DMA_IRQHandler+0xccc>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d01d      	beq.n	8005698 <HAL_DMA_IRQHandler+0xc60>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a29      	ldr	r2, [pc, #164]	; (8005708 <HAL_DMA_IRQHandler+0xcd0>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d018      	beq.n	8005698 <HAL_DMA_IRQHandler+0xc60>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a28      	ldr	r2, [pc, #160]	; (800570c <HAL_DMA_IRQHandler+0xcd4>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d013      	beq.n	8005698 <HAL_DMA_IRQHandler+0xc60>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a26      	ldr	r2, [pc, #152]	; (8005710 <HAL_DMA_IRQHandler+0xcd8>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d00e      	beq.n	8005698 <HAL_DMA_IRQHandler+0xc60>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a25      	ldr	r2, [pc, #148]	; (8005714 <HAL_DMA_IRQHandler+0xcdc>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d009      	beq.n	8005698 <HAL_DMA_IRQHandler+0xc60>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a23      	ldr	r2, [pc, #140]	; (8005718 <HAL_DMA_IRQHandler+0xce0>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d004      	beq.n	8005698 <HAL_DMA_IRQHandler+0xc60>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a22      	ldr	r2, [pc, #136]	; (800571c <HAL_DMA_IRQHandler+0xce4>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d108      	bne.n	80056aa <HAL_DMA_IRQHandler+0xc72>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 0214 	bic.w	r2, r2, #20
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	e007      	b.n	80056ba <HAL_DMA_IRQHandler+0xc82>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 020a 	bic.w	r2, r2, #10
 80056b8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 80b8 	beq.w	8005844 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056dc:	e0b2      	b.n	8005844 <HAL_DMA_IRQHandler+0xe0c>
 80056de:	bf00      	nop
 80056e0:	40020010 	.word	0x40020010
 80056e4:	40020028 	.word	0x40020028
 80056e8:	40020040 	.word	0x40020040
 80056ec:	40020058 	.word	0x40020058
 80056f0:	40020070 	.word	0x40020070
 80056f4:	40020088 	.word	0x40020088
 80056f8:	400200a0 	.word	0x400200a0
 80056fc:	400200b8 	.word	0x400200b8
 8005700:	40020410 	.word	0x40020410
 8005704:	40020428 	.word	0x40020428
 8005708:	40020440 	.word	0x40020440
 800570c:	40020458 	.word	0x40020458
 8005710:	40020470 	.word	0x40020470
 8005714:	40020488 	.word	0x40020488
 8005718:	400204a0 	.word	0x400204a0
 800571c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005724:	f003 031f 	and.w	r3, r3, #31
 8005728:	2208      	movs	r2, #8
 800572a:	409a      	lsls	r2, r3
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	4013      	ands	r3, r2
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 8088 	beq.w	8005846 <HAL_DMA_IRQHandler+0xe0e>
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	f003 0308 	and.w	r3, r3, #8
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 8082 	beq.w	8005846 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a41      	ldr	r2, [pc, #260]	; (800584c <HAL_DMA_IRQHandler+0xe14>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d04a      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xdaa>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a3f      	ldr	r2, [pc, #252]	; (8005850 <HAL_DMA_IRQHandler+0xe18>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d045      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xdaa>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a3e      	ldr	r2, [pc, #248]	; (8005854 <HAL_DMA_IRQHandler+0xe1c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d040      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xdaa>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a3c      	ldr	r2, [pc, #240]	; (8005858 <HAL_DMA_IRQHandler+0xe20>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d03b      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xdaa>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a3b      	ldr	r2, [pc, #236]	; (800585c <HAL_DMA_IRQHandler+0xe24>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d036      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xdaa>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a39      	ldr	r2, [pc, #228]	; (8005860 <HAL_DMA_IRQHandler+0xe28>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d031      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xdaa>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a38      	ldr	r2, [pc, #224]	; (8005864 <HAL_DMA_IRQHandler+0xe2c>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d02c      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xdaa>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a36      	ldr	r2, [pc, #216]	; (8005868 <HAL_DMA_IRQHandler+0xe30>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d027      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xdaa>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a35      	ldr	r2, [pc, #212]	; (800586c <HAL_DMA_IRQHandler+0xe34>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d022      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xdaa>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a33      	ldr	r2, [pc, #204]	; (8005870 <HAL_DMA_IRQHandler+0xe38>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d01d      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xdaa>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a32      	ldr	r2, [pc, #200]	; (8005874 <HAL_DMA_IRQHandler+0xe3c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d018      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xdaa>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a30      	ldr	r2, [pc, #192]	; (8005878 <HAL_DMA_IRQHandler+0xe40>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d013      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xdaa>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a2f      	ldr	r2, [pc, #188]	; (800587c <HAL_DMA_IRQHandler+0xe44>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d00e      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xdaa>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a2d      	ldr	r2, [pc, #180]	; (8005880 <HAL_DMA_IRQHandler+0xe48>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d009      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xdaa>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a2c      	ldr	r2, [pc, #176]	; (8005884 <HAL_DMA_IRQHandler+0xe4c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d004      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xdaa>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a2a      	ldr	r2, [pc, #168]	; (8005888 <HAL_DMA_IRQHandler+0xe50>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d108      	bne.n	80057f4 <HAL_DMA_IRQHandler+0xdbc>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 021c 	bic.w	r2, r2, #28
 80057f0:	601a      	str	r2, [r3, #0]
 80057f2:	e007      	b.n	8005804 <HAL_DMA_IRQHandler+0xdcc>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 020e 	bic.w	r2, r2, #14
 8005802:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005808:	f003 031f 	and.w	r3, r3, #31
 800580c:	2201      	movs	r2, #1
 800580e:	409a      	lsls	r2, r3
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800582e:	2b00      	cmp	r3, #0
 8005830:	d009      	beq.n	8005846 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	4798      	blx	r3
 800583a:	e004      	b.n	8005846 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800583c:	bf00      	nop
 800583e:	e002      	b.n	8005846 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005840:	bf00      	nop
 8005842:	e000      	b.n	8005846 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005844:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005846:	3728      	adds	r7, #40	; 0x28
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	40020010 	.word	0x40020010
 8005850:	40020028 	.word	0x40020028
 8005854:	40020040 	.word	0x40020040
 8005858:	40020058 	.word	0x40020058
 800585c:	40020070 	.word	0x40020070
 8005860:	40020088 	.word	0x40020088
 8005864:	400200a0 	.word	0x400200a0
 8005868:	400200b8 	.word	0x400200b8
 800586c:	40020410 	.word	0x40020410
 8005870:	40020428 	.word	0x40020428
 8005874:	40020440 	.word	0x40020440
 8005878:	40020458 	.word	0x40020458
 800587c:	40020470 	.word	0x40020470
 8005880:	40020488 	.word	0x40020488
 8005884:	400204a0 	.word	0x400204a0
 8005888:	400204b8 	.word	0x400204b8

0800588c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005898:	4618      	mov	r0, r3
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
 80058b0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058bc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a84      	ldr	r2, [pc, #528]	; (8005ad4 <DMA_SetConfig+0x230>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d072      	beq.n	80059ae <DMA_SetConfig+0x10a>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a82      	ldr	r2, [pc, #520]	; (8005ad8 <DMA_SetConfig+0x234>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d06d      	beq.n	80059ae <DMA_SetConfig+0x10a>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a81      	ldr	r2, [pc, #516]	; (8005adc <DMA_SetConfig+0x238>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d068      	beq.n	80059ae <DMA_SetConfig+0x10a>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a7f      	ldr	r2, [pc, #508]	; (8005ae0 <DMA_SetConfig+0x23c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d063      	beq.n	80059ae <DMA_SetConfig+0x10a>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a7e      	ldr	r2, [pc, #504]	; (8005ae4 <DMA_SetConfig+0x240>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d05e      	beq.n	80059ae <DMA_SetConfig+0x10a>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a7c      	ldr	r2, [pc, #496]	; (8005ae8 <DMA_SetConfig+0x244>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d059      	beq.n	80059ae <DMA_SetConfig+0x10a>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a7b      	ldr	r2, [pc, #492]	; (8005aec <DMA_SetConfig+0x248>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d054      	beq.n	80059ae <DMA_SetConfig+0x10a>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a79      	ldr	r2, [pc, #484]	; (8005af0 <DMA_SetConfig+0x24c>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d04f      	beq.n	80059ae <DMA_SetConfig+0x10a>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a78      	ldr	r2, [pc, #480]	; (8005af4 <DMA_SetConfig+0x250>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d04a      	beq.n	80059ae <DMA_SetConfig+0x10a>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a76      	ldr	r2, [pc, #472]	; (8005af8 <DMA_SetConfig+0x254>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d045      	beq.n	80059ae <DMA_SetConfig+0x10a>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a75      	ldr	r2, [pc, #468]	; (8005afc <DMA_SetConfig+0x258>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d040      	beq.n	80059ae <DMA_SetConfig+0x10a>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a73      	ldr	r2, [pc, #460]	; (8005b00 <DMA_SetConfig+0x25c>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d03b      	beq.n	80059ae <DMA_SetConfig+0x10a>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a72      	ldr	r2, [pc, #456]	; (8005b04 <DMA_SetConfig+0x260>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d036      	beq.n	80059ae <DMA_SetConfig+0x10a>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a70      	ldr	r2, [pc, #448]	; (8005b08 <DMA_SetConfig+0x264>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d031      	beq.n	80059ae <DMA_SetConfig+0x10a>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a6f      	ldr	r2, [pc, #444]	; (8005b0c <DMA_SetConfig+0x268>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d02c      	beq.n	80059ae <DMA_SetConfig+0x10a>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a6d      	ldr	r2, [pc, #436]	; (8005b10 <DMA_SetConfig+0x26c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d027      	beq.n	80059ae <DMA_SetConfig+0x10a>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a6c      	ldr	r2, [pc, #432]	; (8005b14 <DMA_SetConfig+0x270>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d022      	beq.n	80059ae <DMA_SetConfig+0x10a>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a6a      	ldr	r2, [pc, #424]	; (8005b18 <DMA_SetConfig+0x274>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d01d      	beq.n	80059ae <DMA_SetConfig+0x10a>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a69      	ldr	r2, [pc, #420]	; (8005b1c <DMA_SetConfig+0x278>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d018      	beq.n	80059ae <DMA_SetConfig+0x10a>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a67      	ldr	r2, [pc, #412]	; (8005b20 <DMA_SetConfig+0x27c>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d013      	beq.n	80059ae <DMA_SetConfig+0x10a>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a66      	ldr	r2, [pc, #408]	; (8005b24 <DMA_SetConfig+0x280>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d00e      	beq.n	80059ae <DMA_SetConfig+0x10a>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a64      	ldr	r2, [pc, #400]	; (8005b28 <DMA_SetConfig+0x284>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d009      	beq.n	80059ae <DMA_SetConfig+0x10a>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a63      	ldr	r2, [pc, #396]	; (8005b2c <DMA_SetConfig+0x288>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d004      	beq.n	80059ae <DMA_SetConfig+0x10a>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a61      	ldr	r2, [pc, #388]	; (8005b30 <DMA_SetConfig+0x28c>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d101      	bne.n	80059b2 <DMA_SetConfig+0x10e>
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <DMA_SetConfig+0x110>
 80059b2:	2300      	movs	r3, #0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00d      	beq.n	80059d4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80059c0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d004      	beq.n	80059d4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80059d2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a3e      	ldr	r2, [pc, #248]	; (8005ad4 <DMA_SetConfig+0x230>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d04a      	beq.n	8005a74 <DMA_SetConfig+0x1d0>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a3d      	ldr	r2, [pc, #244]	; (8005ad8 <DMA_SetConfig+0x234>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d045      	beq.n	8005a74 <DMA_SetConfig+0x1d0>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a3b      	ldr	r2, [pc, #236]	; (8005adc <DMA_SetConfig+0x238>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d040      	beq.n	8005a74 <DMA_SetConfig+0x1d0>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a3a      	ldr	r2, [pc, #232]	; (8005ae0 <DMA_SetConfig+0x23c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d03b      	beq.n	8005a74 <DMA_SetConfig+0x1d0>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a38      	ldr	r2, [pc, #224]	; (8005ae4 <DMA_SetConfig+0x240>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d036      	beq.n	8005a74 <DMA_SetConfig+0x1d0>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a37      	ldr	r2, [pc, #220]	; (8005ae8 <DMA_SetConfig+0x244>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d031      	beq.n	8005a74 <DMA_SetConfig+0x1d0>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a35      	ldr	r2, [pc, #212]	; (8005aec <DMA_SetConfig+0x248>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d02c      	beq.n	8005a74 <DMA_SetConfig+0x1d0>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a34      	ldr	r2, [pc, #208]	; (8005af0 <DMA_SetConfig+0x24c>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d027      	beq.n	8005a74 <DMA_SetConfig+0x1d0>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a32      	ldr	r2, [pc, #200]	; (8005af4 <DMA_SetConfig+0x250>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d022      	beq.n	8005a74 <DMA_SetConfig+0x1d0>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a31      	ldr	r2, [pc, #196]	; (8005af8 <DMA_SetConfig+0x254>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d01d      	beq.n	8005a74 <DMA_SetConfig+0x1d0>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a2f      	ldr	r2, [pc, #188]	; (8005afc <DMA_SetConfig+0x258>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d018      	beq.n	8005a74 <DMA_SetConfig+0x1d0>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a2e      	ldr	r2, [pc, #184]	; (8005b00 <DMA_SetConfig+0x25c>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d013      	beq.n	8005a74 <DMA_SetConfig+0x1d0>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a2c      	ldr	r2, [pc, #176]	; (8005b04 <DMA_SetConfig+0x260>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d00e      	beq.n	8005a74 <DMA_SetConfig+0x1d0>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a2b      	ldr	r2, [pc, #172]	; (8005b08 <DMA_SetConfig+0x264>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d009      	beq.n	8005a74 <DMA_SetConfig+0x1d0>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a29      	ldr	r2, [pc, #164]	; (8005b0c <DMA_SetConfig+0x268>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d004      	beq.n	8005a74 <DMA_SetConfig+0x1d0>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a28      	ldr	r2, [pc, #160]	; (8005b10 <DMA_SetConfig+0x26c>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d101      	bne.n	8005a78 <DMA_SetConfig+0x1d4>
 8005a74:	2301      	movs	r3, #1
 8005a76:	e000      	b.n	8005a7a <DMA_SetConfig+0x1d6>
 8005a78:	2300      	movs	r3, #0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d05a      	beq.n	8005b34 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a82:	f003 031f 	and.w	r3, r3, #31
 8005a86:	223f      	movs	r2, #63	; 0x3f
 8005a88:	409a      	lsls	r2, r3
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a9c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	683a      	ldr	r2, [r7, #0]
 8005aa4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	2b40      	cmp	r3, #64	; 0x40
 8005aac:	d108      	bne.n	8005ac0 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005abe:	e087      	b.n	8005bd0 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	60da      	str	r2, [r3, #12]
}
 8005ad0:	e07e      	b.n	8005bd0 <DMA_SetConfig+0x32c>
 8005ad2:	bf00      	nop
 8005ad4:	40020010 	.word	0x40020010
 8005ad8:	40020028 	.word	0x40020028
 8005adc:	40020040 	.word	0x40020040
 8005ae0:	40020058 	.word	0x40020058
 8005ae4:	40020070 	.word	0x40020070
 8005ae8:	40020088 	.word	0x40020088
 8005aec:	400200a0 	.word	0x400200a0
 8005af0:	400200b8 	.word	0x400200b8
 8005af4:	40020410 	.word	0x40020410
 8005af8:	40020428 	.word	0x40020428
 8005afc:	40020440 	.word	0x40020440
 8005b00:	40020458 	.word	0x40020458
 8005b04:	40020470 	.word	0x40020470
 8005b08:	40020488 	.word	0x40020488
 8005b0c:	400204a0 	.word	0x400204a0
 8005b10:	400204b8 	.word	0x400204b8
 8005b14:	58025408 	.word	0x58025408
 8005b18:	5802541c 	.word	0x5802541c
 8005b1c:	58025430 	.word	0x58025430
 8005b20:	58025444 	.word	0x58025444
 8005b24:	58025458 	.word	0x58025458
 8005b28:	5802546c 	.word	0x5802546c
 8005b2c:	58025480 	.word	0x58025480
 8005b30:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a28      	ldr	r2, [pc, #160]	; (8005bdc <DMA_SetConfig+0x338>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d022      	beq.n	8005b84 <DMA_SetConfig+0x2e0>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a27      	ldr	r2, [pc, #156]	; (8005be0 <DMA_SetConfig+0x33c>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d01d      	beq.n	8005b84 <DMA_SetConfig+0x2e0>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a25      	ldr	r2, [pc, #148]	; (8005be4 <DMA_SetConfig+0x340>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d018      	beq.n	8005b84 <DMA_SetConfig+0x2e0>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a24      	ldr	r2, [pc, #144]	; (8005be8 <DMA_SetConfig+0x344>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d013      	beq.n	8005b84 <DMA_SetConfig+0x2e0>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a22      	ldr	r2, [pc, #136]	; (8005bec <DMA_SetConfig+0x348>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d00e      	beq.n	8005b84 <DMA_SetConfig+0x2e0>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a21      	ldr	r2, [pc, #132]	; (8005bf0 <DMA_SetConfig+0x34c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d009      	beq.n	8005b84 <DMA_SetConfig+0x2e0>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a1f      	ldr	r2, [pc, #124]	; (8005bf4 <DMA_SetConfig+0x350>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d004      	beq.n	8005b84 <DMA_SetConfig+0x2e0>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a1e      	ldr	r2, [pc, #120]	; (8005bf8 <DMA_SetConfig+0x354>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d101      	bne.n	8005b88 <DMA_SetConfig+0x2e4>
 8005b84:	2301      	movs	r3, #1
 8005b86:	e000      	b.n	8005b8a <DMA_SetConfig+0x2e6>
 8005b88:	2300      	movs	r3, #0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d020      	beq.n	8005bd0 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b92:	f003 031f 	and.w	r3, r3, #31
 8005b96:	2201      	movs	r2, #1
 8005b98:	409a      	lsls	r2, r3
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	2b40      	cmp	r3, #64	; 0x40
 8005bac:	d108      	bne.n	8005bc0 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	60da      	str	r2, [r3, #12]
}
 8005bbe:	e007      	b.n	8005bd0 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	60da      	str	r2, [r3, #12]
}
 8005bd0:	bf00      	nop
 8005bd2:	371c      	adds	r7, #28
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	58025408 	.word	0x58025408
 8005be0:	5802541c 	.word	0x5802541c
 8005be4:	58025430 	.word	0x58025430
 8005be8:	58025444 	.word	0x58025444
 8005bec:	58025458 	.word	0x58025458
 8005bf0:	5802546c 	.word	0x5802546c
 8005bf4:	58025480 	.word	0x58025480
 8005bf8:	58025494 	.word	0x58025494

08005bfc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a42      	ldr	r2, [pc, #264]	; (8005d14 <DMA_CalcBaseAndBitshift+0x118>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d04a      	beq.n	8005ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a41      	ldr	r2, [pc, #260]	; (8005d18 <DMA_CalcBaseAndBitshift+0x11c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d045      	beq.n	8005ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a3f      	ldr	r2, [pc, #252]	; (8005d1c <DMA_CalcBaseAndBitshift+0x120>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d040      	beq.n	8005ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a3e      	ldr	r2, [pc, #248]	; (8005d20 <DMA_CalcBaseAndBitshift+0x124>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d03b      	beq.n	8005ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a3c      	ldr	r2, [pc, #240]	; (8005d24 <DMA_CalcBaseAndBitshift+0x128>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d036      	beq.n	8005ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a3b      	ldr	r2, [pc, #236]	; (8005d28 <DMA_CalcBaseAndBitshift+0x12c>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d031      	beq.n	8005ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a39      	ldr	r2, [pc, #228]	; (8005d2c <DMA_CalcBaseAndBitshift+0x130>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d02c      	beq.n	8005ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a38      	ldr	r2, [pc, #224]	; (8005d30 <DMA_CalcBaseAndBitshift+0x134>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d027      	beq.n	8005ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a36      	ldr	r2, [pc, #216]	; (8005d34 <DMA_CalcBaseAndBitshift+0x138>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d022      	beq.n	8005ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a35      	ldr	r2, [pc, #212]	; (8005d38 <DMA_CalcBaseAndBitshift+0x13c>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d01d      	beq.n	8005ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a33      	ldr	r2, [pc, #204]	; (8005d3c <DMA_CalcBaseAndBitshift+0x140>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d018      	beq.n	8005ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a32      	ldr	r2, [pc, #200]	; (8005d40 <DMA_CalcBaseAndBitshift+0x144>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d013      	beq.n	8005ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a30      	ldr	r2, [pc, #192]	; (8005d44 <DMA_CalcBaseAndBitshift+0x148>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d00e      	beq.n	8005ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a2f      	ldr	r2, [pc, #188]	; (8005d48 <DMA_CalcBaseAndBitshift+0x14c>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d009      	beq.n	8005ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a2d      	ldr	r2, [pc, #180]	; (8005d4c <DMA_CalcBaseAndBitshift+0x150>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d004      	beq.n	8005ca4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a2c      	ldr	r2, [pc, #176]	; (8005d50 <DMA_CalcBaseAndBitshift+0x154>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d101      	bne.n	8005ca8 <DMA_CalcBaseAndBitshift+0xac>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e000      	b.n	8005caa <DMA_CalcBaseAndBitshift+0xae>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d024      	beq.n	8005cf8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	3b10      	subs	r3, #16
 8005cb6:	4a27      	ldr	r2, [pc, #156]	; (8005d54 <DMA_CalcBaseAndBitshift+0x158>)
 8005cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cbc:	091b      	lsrs	r3, r3, #4
 8005cbe:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f003 0307 	and.w	r3, r3, #7
 8005cc6:	4a24      	ldr	r2, [pc, #144]	; (8005d58 <DMA_CalcBaseAndBitshift+0x15c>)
 8005cc8:	5cd3      	ldrb	r3, [r2, r3]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2b03      	cmp	r3, #3
 8005cd4:	d908      	bls.n	8005ce8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	4b1f      	ldr	r3, [pc, #124]	; (8005d5c <DMA_CalcBaseAndBitshift+0x160>)
 8005cde:	4013      	ands	r3, r2
 8005ce0:	1d1a      	adds	r2, r3, #4
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	659a      	str	r2, [r3, #88]	; 0x58
 8005ce6:	e00d      	b.n	8005d04 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	461a      	mov	r2, r3
 8005cee:	4b1b      	ldr	r3, [pc, #108]	; (8005d5c <DMA_CalcBaseAndBitshift+0x160>)
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	6593      	str	r3, [r2, #88]	; 0x58
 8005cf6:	e005      	b.n	8005d04 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3714      	adds	r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	40020010 	.word	0x40020010
 8005d18:	40020028 	.word	0x40020028
 8005d1c:	40020040 	.word	0x40020040
 8005d20:	40020058 	.word	0x40020058
 8005d24:	40020070 	.word	0x40020070
 8005d28:	40020088 	.word	0x40020088
 8005d2c:	400200a0 	.word	0x400200a0
 8005d30:	400200b8 	.word	0x400200b8
 8005d34:	40020410 	.word	0x40020410
 8005d38:	40020428 	.word	0x40020428
 8005d3c:	40020440 	.word	0x40020440
 8005d40:	40020458 	.word	0x40020458
 8005d44:	40020470 	.word	0x40020470
 8005d48:	40020488 	.word	0x40020488
 8005d4c:	400204a0 	.word	0x400204a0
 8005d50:	400204b8 	.word	0x400204b8
 8005d54:	aaaaaaab 	.word	0xaaaaaaab
 8005d58:	0800cfa8 	.word	0x0800cfa8
 8005d5c:	fffffc00 	.word	0xfffffc00

08005d60 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d120      	bne.n	8005db6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d78:	2b03      	cmp	r3, #3
 8005d7a:	d858      	bhi.n	8005e2e <DMA_CheckFifoParam+0xce>
 8005d7c:	a201      	add	r2, pc, #4	; (adr r2, 8005d84 <DMA_CheckFifoParam+0x24>)
 8005d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d82:	bf00      	nop
 8005d84:	08005d95 	.word	0x08005d95
 8005d88:	08005da7 	.word	0x08005da7
 8005d8c:	08005d95 	.word	0x08005d95
 8005d90:	08005e2f 	.word	0x08005e2f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d048      	beq.n	8005e32 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005da4:	e045      	b.n	8005e32 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005daa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005dae:	d142      	bne.n	8005e36 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005db4:	e03f      	b.n	8005e36 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dbe:	d123      	bne.n	8005e08 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	d838      	bhi.n	8005e3a <DMA_CheckFifoParam+0xda>
 8005dc8:	a201      	add	r2, pc, #4	; (adr r2, 8005dd0 <DMA_CheckFifoParam+0x70>)
 8005dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dce:	bf00      	nop
 8005dd0:	08005de1 	.word	0x08005de1
 8005dd4:	08005de7 	.word	0x08005de7
 8005dd8:	08005de1 	.word	0x08005de1
 8005ddc:	08005df9 	.word	0x08005df9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	73fb      	strb	r3, [r7, #15]
        break;
 8005de4:	e030      	b.n	8005e48 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d025      	beq.n	8005e3e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005df6:	e022      	b.n	8005e3e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005e00:	d11f      	bne.n	8005e42 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e06:	e01c      	b.n	8005e42 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d902      	bls.n	8005e16 <DMA_CheckFifoParam+0xb6>
 8005e10:	2b03      	cmp	r3, #3
 8005e12:	d003      	beq.n	8005e1c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005e14:	e018      	b.n	8005e48 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	73fb      	strb	r3, [r7, #15]
        break;
 8005e1a:	e015      	b.n	8005e48 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00e      	beq.n	8005e46 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	73fb      	strb	r3, [r7, #15]
    break;
 8005e2c:	e00b      	b.n	8005e46 <DMA_CheckFifoParam+0xe6>
        break;
 8005e2e:	bf00      	nop
 8005e30:	e00a      	b.n	8005e48 <DMA_CheckFifoParam+0xe8>
        break;
 8005e32:	bf00      	nop
 8005e34:	e008      	b.n	8005e48 <DMA_CheckFifoParam+0xe8>
        break;
 8005e36:	bf00      	nop
 8005e38:	e006      	b.n	8005e48 <DMA_CheckFifoParam+0xe8>
        break;
 8005e3a:	bf00      	nop
 8005e3c:	e004      	b.n	8005e48 <DMA_CheckFifoParam+0xe8>
        break;
 8005e3e:	bf00      	nop
 8005e40:	e002      	b.n	8005e48 <DMA_CheckFifoParam+0xe8>
        break;
 8005e42:	bf00      	nop
 8005e44:	e000      	b.n	8005e48 <DMA_CheckFifoParam+0xe8>
    break;
 8005e46:	bf00      	nop
    }
  }

  return status;
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop

08005e58 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a38      	ldr	r2, [pc, #224]	; (8005f4c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d022      	beq.n	8005eb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a36      	ldr	r2, [pc, #216]	; (8005f50 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d01d      	beq.n	8005eb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a35      	ldr	r2, [pc, #212]	; (8005f54 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d018      	beq.n	8005eb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a33      	ldr	r2, [pc, #204]	; (8005f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d013      	beq.n	8005eb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a32      	ldr	r2, [pc, #200]	; (8005f5c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d00e      	beq.n	8005eb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a30      	ldr	r2, [pc, #192]	; (8005f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d009      	beq.n	8005eb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a2f      	ldr	r2, [pc, #188]	; (8005f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d004      	beq.n	8005eb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a2d      	ldr	r2, [pc, #180]	; (8005f68 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d101      	bne.n	8005eba <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e000      	b.n	8005ebc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d01a      	beq.n	8005ef6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	3b08      	subs	r3, #8
 8005ec8:	4a28      	ldr	r2, [pc, #160]	; (8005f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005eca:	fba2 2303 	umull	r2, r3, r2, r3
 8005ece:	091b      	lsrs	r3, r3, #4
 8005ed0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	4b26      	ldr	r3, [pc, #152]	; (8005f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005ed6:	4413      	add	r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	461a      	mov	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a24      	ldr	r2, [pc, #144]	; (8005f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005ee4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f003 031f 	and.w	r3, r3, #31
 8005eec:	2201      	movs	r2, #1
 8005eee:	409a      	lsls	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005ef4:	e024      	b.n	8005f40 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	3b10      	subs	r3, #16
 8005efe:	4a1e      	ldr	r2, [pc, #120]	; (8005f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005f00:	fba2 2303 	umull	r2, r3, r2, r3
 8005f04:	091b      	lsrs	r3, r3, #4
 8005f06:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	4a1c      	ldr	r2, [pc, #112]	; (8005f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d806      	bhi.n	8005f1e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	4a1b      	ldr	r2, [pc, #108]	; (8005f80 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d902      	bls.n	8005f1e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	3308      	adds	r3, #8
 8005f1c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	4b18      	ldr	r3, [pc, #96]	; (8005f84 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005f22:	4413      	add	r3, r2
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	461a      	mov	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a16      	ldr	r2, [pc, #88]	; (8005f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005f30:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f003 031f 	and.w	r3, r3, #31
 8005f38:	2201      	movs	r2, #1
 8005f3a:	409a      	lsls	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005f40:	bf00      	nop
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	58025408 	.word	0x58025408
 8005f50:	5802541c 	.word	0x5802541c
 8005f54:	58025430 	.word	0x58025430
 8005f58:	58025444 	.word	0x58025444
 8005f5c:	58025458 	.word	0x58025458
 8005f60:	5802546c 	.word	0x5802546c
 8005f64:	58025480 	.word	0x58025480
 8005f68:	58025494 	.word	0x58025494
 8005f6c:	cccccccd 	.word	0xcccccccd
 8005f70:	16009600 	.word	0x16009600
 8005f74:	58025880 	.word	0x58025880
 8005f78:	aaaaaaab 	.word	0xaaaaaaab
 8005f7c:	400204b8 	.word	0x400204b8
 8005f80:	4002040f 	.word	0x4002040f
 8005f84:	10008200 	.word	0x10008200
 8005f88:	40020880 	.word	0x40020880

08005f8c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d04a      	beq.n	8006038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b08      	cmp	r3, #8
 8005fa6:	d847      	bhi.n	8006038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a25      	ldr	r2, [pc, #148]	; (8006044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d022      	beq.n	8005ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a24      	ldr	r2, [pc, #144]	; (8006048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d01d      	beq.n	8005ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a22      	ldr	r2, [pc, #136]	; (800604c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d018      	beq.n	8005ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a21      	ldr	r2, [pc, #132]	; (8006050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d013      	beq.n	8005ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a1f      	ldr	r2, [pc, #124]	; (8006054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d00e      	beq.n	8005ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a1e      	ldr	r2, [pc, #120]	; (8006058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d009      	beq.n	8005ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a1c      	ldr	r2, [pc, #112]	; (800605c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d004      	beq.n	8005ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a1b      	ldr	r2, [pc, #108]	; (8006060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d101      	bne.n	8005ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e000      	b.n	8005ffe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00a      	beq.n	8006018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	4b17      	ldr	r3, [pc, #92]	; (8006064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006006:	4413      	add	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	461a      	mov	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a15      	ldr	r2, [pc, #84]	; (8006068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006014:	671a      	str	r2, [r3, #112]	; 0x70
 8006016:	e009      	b.n	800602c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	4b14      	ldr	r3, [pc, #80]	; (800606c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800601c:	4413      	add	r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	461a      	mov	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a11      	ldr	r2, [pc, #68]	; (8006070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800602a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	3b01      	subs	r3, #1
 8006030:	2201      	movs	r2, #1
 8006032:	409a      	lsls	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006038:	bf00      	nop
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr
 8006044:	58025408 	.word	0x58025408
 8006048:	5802541c 	.word	0x5802541c
 800604c:	58025430 	.word	0x58025430
 8006050:	58025444 	.word	0x58025444
 8006054:	58025458 	.word	0x58025458
 8006058:	5802546c 	.word	0x5802546c
 800605c:	58025480 	.word	0x58025480
 8006060:	58025494 	.word	0x58025494
 8006064:	1600963f 	.word	0x1600963f
 8006068:	58025940 	.word	0x58025940
 800606c:	1000823f 	.word	0x1000823f
 8006070:	40020940 	.word	0x40020940

08006074 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e0c6      	b.n	8006214 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800608a:	2b00      	cmp	r3, #0
 800608c:	d102      	bne.n	8006094 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7fc ff16 	bl	8002ec0 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2223      	movs	r2, #35	; 0x23
 8006098:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800609a:	4b60      	ldr	r3, [pc, #384]	; (800621c <HAL_ETH_Init+0x1a8>)
 800609c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80060a0:	4a5e      	ldr	r2, [pc, #376]	; (800621c <HAL_ETH_Init+0x1a8>)
 80060a2:	f043 0302 	orr.w	r3, r3, #2
 80060a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80060aa:	4b5c      	ldr	r3, [pc, #368]	; (800621c <HAL_ETH_Init+0x1a8>)
 80060ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	60bb      	str	r3, [r7, #8]
 80060b6:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	7a1b      	ldrb	r3, [r3, #8]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d103      	bne.n	80060c8 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80060c0:	2000      	movs	r0, #0
 80060c2:	f7fd fb8b 	bl	80037dc <HAL_SYSCFG_ETHInterfaceSelect>
 80060c6:	e003      	b.n	80060d0 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80060c8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80060cc:	f7fd fb86 	bl	80037dc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f042 0201 	orr.w	r2, r2, #1
 80060e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060e8:	f7fd fb3c 	bl	8003764 <HAL_GetTick>
 80060ec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80060ee:	e00f      	b.n	8006110 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80060f0:	f7fd fb38 	bl	8003764 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80060fe:	d907      	bls.n	8006110 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2204      	movs	r2, #4
 8006104:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	22e0      	movs	r2, #224	; 0xe0
 800610a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e081      	b.n	8006214 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1e6      	bne.n	80060f0 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fac0 	bl	80066a8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8006128:	f001 fed8 	bl	8007edc <HAL_RCC_GetHCLKFreq>
 800612c:	4603      	mov	r3, r0
 800612e:	4a3c      	ldr	r2, [pc, #240]	; (8006220 <HAL_ETH_Init+0x1ac>)
 8006130:	fba2 2303 	umull	r2, r3, r2, r3
 8006134:	0c9a      	lsrs	r2, r3, #18
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3a01      	subs	r2, #1
 800613c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 fa13 	bl	800656c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800615c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8006160:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	f003 0303 	and.w	r3, r3, #3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d007      	beq.n	800617e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	22e0      	movs	r2, #224	; 0xe0
 8006178:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e04a      	b.n	8006214 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	f241 1308 	movw	r3, #4360	; 0x1108
 8006186:	4413      	add	r3, r2
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	4b26      	ldr	r3, [pc, #152]	; (8006224 <HAL_ETH_Init+0x1b0>)
 800618c:	4013      	ands	r3, r2
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	6952      	ldr	r2, [r2, #20]
 8006192:	0052      	lsls	r2, r2, #1
 8006194:	6879      	ldr	r1, [r7, #4]
 8006196:	6809      	ldr	r1, [r1, #0]
 8006198:	431a      	orrs	r2, r3
 800619a:	f241 1308 	movw	r3, #4360	; 0x1108
 800619e:	440b      	add	r3, r1
 80061a0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 fad8 	bl	8006758 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 fb1c 	bl	80067e6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	3305      	adds	r3, #5
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	021a      	lsls	r2, r3, #8
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	3304      	adds	r3, #4
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	4619      	mov	r1, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	430a      	orrs	r2, r1
 80061c8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	3303      	adds	r3, #3
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	061a      	lsls	r2, r3, #24
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	3302      	adds	r3, #2
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	041b      	lsls	r3, r3, #16
 80061e0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	3301      	adds	r3, #1
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80061ec:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80061fa:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80061fc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2210      	movs	r2, #16
 800620a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2210      	movs	r2, #16
 8006210:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3710      	adds	r7, #16
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	58024400 	.word	0x58024400
 8006220:	431bde83 	.word	0x431bde83
 8006224:	ffff8001 	.word	0xffff8001

08006228 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800623a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	791b      	ldrb	r3, [r3, #4]
 8006240:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8006242:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	7b1b      	ldrb	r3, [r3, #12]
 8006248:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800624a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	7b5b      	ldrb	r3, [r3, #13]
 8006250:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006252:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	7b9b      	ldrb	r3, [r3, #14]
 8006258:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800625a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	7bdb      	ldrb	r3, [r3, #15]
 8006260:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006262:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006264:	683a      	ldr	r2, [r7, #0]
 8006266:	7c12      	ldrb	r2, [r2, #16]
 8006268:	2a00      	cmp	r2, #0
 800626a:	d102      	bne.n	8006272 <ETH_SetMACConfig+0x4a>
 800626c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006270:	e000      	b.n	8006274 <ETH_SetMACConfig+0x4c>
 8006272:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006274:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	7c52      	ldrb	r2, [r2, #17]
 800627a:	2a00      	cmp	r2, #0
 800627c:	d102      	bne.n	8006284 <ETH_SetMACConfig+0x5c>
 800627e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006282:	e000      	b.n	8006286 <ETH_SetMACConfig+0x5e>
 8006284:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006286:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	7c9b      	ldrb	r3, [r3, #18]
 800628c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800628e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8006294:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800629a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	7f1b      	ldrb	r3, [r3, #28]
 80062a0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80062a2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	7f5b      	ldrb	r3, [r3, #29]
 80062a8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80062aa:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80062ac:	683a      	ldr	r2, [r7, #0]
 80062ae:	7f92      	ldrb	r2, [r2, #30]
 80062b0:	2a00      	cmp	r2, #0
 80062b2:	d102      	bne.n	80062ba <ETH_SetMACConfig+0x92>
 80062b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062b8:	e000      	b.n	80062bc <ETH_SetMACConfig+0x94>
 80062ba:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80062bc:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	7fdb      	ldrb	r3, [r3, #31]
 80062c2:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80062c4:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80062cc:	2a00      	cmp	r2, #0
 80062ce:	d102      	bne.n	80062d6 <ETH_SetMACConfig+0xae>
 80062d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062d4:	e000      	b.n	80062d8 <ETH_SetMACConfig+0xb0>
 80062d6:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80062d8:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80062de:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062e6:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80062e8:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	4b56      	ldr	r3, [pc, #344]	; (8006454 <ETH_SetMACConfig+0x22c>)
 80062fa:	4013      	ands	r3, r2
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	6812      	ldr	r2, [r2, #0]
 8006300:	68f9      	ldr	r1, [r7, #12]
 8006302:	430b      	orrs	r3, r1
 8006304:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800630a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006312:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8006314:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800631c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800631e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006326:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8006328:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8006330:	2a00      	cmp	r2, #0
 8006332:	d102      	bne.n	800633a <ETH_SetMACConfig+0x112>
 8006334:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006338:	e000      	b.n	800633c <ETH_SetMACConfig+0x114>
 800633a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800633c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8006342:	4313      	orrs	r3, r2
 8006344:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	4b42      	ldr	r3, [pc, #264]	; (8006458 <ETH_SetMACConfig+0x230>)
 800634e:	4013      	ands	r3, r2
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	6812      	ldr	r2, [r2, #0]
 8006354:	68f9      	ldr	r1, [r7, #12]
 8006356:	430b      	orrs	r3, r1
 8006358:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006360:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68da      	ldr	r2, [r3, #12]
 8006370:	4b3a      	ldr	r3, [pc, #232]	; (800645c <ETH_SetMACConfig+0x234>)
 8006372:	4013      	ands	r3, r2
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	6812      	ldr	r2, [r2, #0]
 8006378:	68f9      	ldr	r1, [r7, #12]
 800637a:	430b      	orrs	r3, r1
 800637c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006384:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800638a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8006392:	2a00      	cmp	r2, #0
 8006394:	d101      	bne.n	800639a <ETH_SetMACConfig+0x172>
 8006396:	2280      	movs	r2, #128	; 0x80
 8006398:	e000      	b.n	800639c <ETH_SetMACConfig+0x174>
 800639a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800639c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063a2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80063a4:	4313      	orrs	r3, r2
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80063ae:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80063b2:	4013      	ands	r3, r2
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	6812      	ldr	r2, [r2, #0]
 80063b8:	68f9      	ldr	r1, [r7, #12]
 80063ba:	430b      	orrs	r3, r1
 80063bc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80063c4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80063cc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80063ce:	4313      	orrs	r3, r2
 80063d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063da:	f023 0103 	bic.w	r1, r3, #3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	430a      	orrs	r2, r1
 80063e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80063f2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	430a      	orrs	r2, r1
 8006400:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800640e:	2a00      	cmp	r2, #0
 8006410:	d101      	bne.n	8006416 <ETH_SetMACConfig+0x1ee>
 8006412:	2240      	movs	r2, #64	; 0x40
 8006414:	e000      	b.n	8006418 <ETH_SetMACConfig+0x1f0>
 8006416:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8006418:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006420:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006422:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800642a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800642c:	4313      	orrs	r3, r2
 800642e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006438:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	430a      	orrs	r2, r1
 8006444:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8006448:	bf00      	nop
 800644a:	3714      	adds	r7, #20
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	00048083 	.word	0x00048083
 8006458:	c0f88000 	.word	0xc0f88000
 800645c:	fffffef0 	.word	0xfffffef0

08006460 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	4b38      	ldr	r3, [pc, #224]	; (8006558 <ETH_SetDMAConfig+0xf8>)
 8006476:	4013      	ands	r3, r2
 8006478:	683a      	ldr	r2, [r7, #0]
 800647a:	6812      	ldr	r2, [r2, #0]
 800647c:	6879      	ldr	r1, [r7, #4]
 800647e:	6809      	ldr	r1, [r1, #0]
 8006480:	431a      	orrs	r2, r3
 8006482:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8006486:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	791b      	ldrb	r3, [r3, #4]
 800648c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006492:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	7b1b      	ldrb	r3, [r3, #12]
 8006498:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800649a:	4313      	orrs	r3, r2
 800649c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	f241 0304 	movw	r3, #4100	; 0x1004
 80064a6:	4413      	add	r3, r2
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	4b2c      	ldr	r3, [pc, #176]	; (800655c <ETH_SetDMAConfig+0xfc>)
 80064ac:	4013      	ands	r3, r2
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	6811      	ldr	r1, [r2, #0]
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	431a      	orrs	r2, r3
 80064b6:	f241 0304 	movw	r3, #4100	; 0x1004
 80064ba:	440b      	add	r3, r1
 80064bc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	7b5b      	ldrb	r3, [r3, #13]
 80064c2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80064c8:	4313      	orrs	r3, r2
 80064ca:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	4b22      	ldr	r3, [pc, #136]	; (8006560 <ETH_SetDMAConfig+0x100>)
 80064d8:	4013      	ands	r3, r2
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	6811      	ldr	r1, [r2, #0]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	431a      	orrs	r2, r3
 80064e2:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80064e6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	7d1b      	ldrb	r3, [r3, #20]
 80064f0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80064f2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	7f5b      	ldrb	r3, [r3, #29]
 80064f8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80064fa:	4313      	orrs	r3, r2
 80064fc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	f241 1304 	movw	r3, #4356	; 0x1104
 8006506:	4413      	add	r3, r2
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	4b16      	ldr	r3, [pc, #88]	; (8006564 <ETH_SetDMAConfig+0x104>)
 800650c:	4013      	ands	r3, r2
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	6811      	ldr	r1, [r2, #0]
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	431a      	orrs	r2, r3
 8006516:	f241 1304 	movw	r3, #4356	; 0x1104
 800651a:	440b      	add	r3, r1
 800651c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	7f1b      	ldrb	r3, [r3, #28]
 8006522:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006528:	4313      	orrs	r3, r2
 800652a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	f241 1308 	movw	r3, #4360	; 0x1108
 8006534:	4413      	add	r3, r2
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	4b0b      	ldr	r3, [pc, #44]	; (8006568 <ETH_SetDMAConfig+0x108>)
 800653a:	4013      	ands	r3, r2
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	6811      	ldr	r1, [r2, #0]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	431a      	orrs	r2, r3
 8006544:	f241 1308 	movw	r3, #4360	; 0x1108
 8006548:	440b      	add	r3, r1
 800654a:	601a      	str	r2, [r3, #0]
}
 800654c:	bf00      	nop
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	ffff87fd 	.word	0xffff87fd
 800655c:	ffff2ffe 	.word	0xffff2ffe
 8006560:	fffec000 	.word	0xfffec000
 8006564:	ffc0efef 	.word	0xffc0efef
 8006568:	7fc0ffff 	.word	0x7fc0ffff

0800656c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b0a4      	sub	sp, #144	; 0x90
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8006574:	2301      	movs	r3, #1
 8006576:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800657a:	2300      	movs	r3, #0
 800657c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800657e:	2300      	movs	r3, #0
 8006580:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006584:	2300      	movs	r3, #0
 8006586:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800658a:	2301      	movs	r3, #1
 800658c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8006590:	2301      	movs	r3, #1
 8006592:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8006596:	2301      	movs	r3, #1
 8006598:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800659c:	2300      	movs	r3, #0
 800659e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80065a2:	2301      	movs	r3, #1
 80065a4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80065a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80065ac:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80065ae:	2300      	movs	r3, #0
 80065b0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80065b4:	2300      	movs	r3, #0
 80065b6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80065b8:	2300      	movs	r3, #0
 80065ba:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80065be:	2300      	movs	r3, #0
 80065c0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80065c4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80065c8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80065ca:	2300      	movs	r3, #0
 80065cc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80065d0:	2300      	movs	r3, #0
 80065d2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80065d4:	2301      	movs	r3, #1
 80065d6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80065da:	2300      	movs	r3, #0
 80065dc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80065e0:	2300      	movs	r3, #0
 80065e2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80065e6:	2300      	movs	r3, #0
 80065e8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80065ea:	2300      	movs	r3, #0
 80065ec:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80065ee:	2300      	movs	r3, #0
 80065f0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80065f2:	2300      	movs	r3, #0
 80065f4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80065f8:	2300      	movs	r3, #0
 80065fa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80065fe:	2301      	movs	r3, #1
 8006600:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8006604:	2320      	movs	r3, #32
 8006606:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800660a:	2301      	movs	r3, #1
 800660c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8006610:	2300      	movs	r3, #0
 8006612:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8006616:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800661a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800661c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006620:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8006622:	2300      	movs	r3, #0
 8006624:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8006628:	2302      	movs	r3, #2
 800662a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800662e:	2300      	movs	r3, #0
 8006630:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006634:	2300      	movs	r3, #0
 8006636:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800663a:	2300      	movs	r3, #0
 800663c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8006640:	2301      	movs	r3, #1
 8006642:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8006646:	2300      	movs	r3, #0
 8006648:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800664a:	2301      	movs	r3, #1
 800664c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006650:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006654:	4619      	mov	r1, r3
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7ff fde6 	bl	8006228 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800665c:	2301      	movs	r3, #1
 800665e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006660:	2301      	movs	r3, #1
 8006662:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8006664:	2300      	movs	r3, #0
 8006666:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8006668:	2300      	movs	r3, #0
 800666a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800666e:	2300      	movs	r3, #0
 8006670:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8006672:	2300      	movs	r3, #0
 8006674:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006676:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800667a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800667c:	2300      	movs	r3, #0
 800667e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006680:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006684:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8006686:	2300      	movs	r3, #0
 8006688:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800668c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8006690:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006692:	f107 0308 	add.w	r3, r7, #8
 8006696:	4619      	mov	r1, r3
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f7ff fee1 	bl	8006460 <ETH_SetDMAConfig>
}
 800669e:	bf00      	nop
 80066a0:	3790      	adds	r7, #144	; 0x90
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
	...

080066a8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80066b8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80066c0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80066c2:	f001 fc0b 	bl	8007edc <HAL_RCC_GetHCLKFreq>
 80066c6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	4a1e      	ldr	r2, [pc, #120]	; (8006744 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d908      	bls.n	80066e2 <ETH_MAC_MDIO_ClkConfig+0x3a>
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	4a1d      	ldr	r2, [pc, #116]	; (8006748 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d804      	bhi.n	80066e2 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066de:	60fb      	str	r3, [r7, #12]
 80066e0:	e027      	b.n	8006732 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	4a18      	ldr	r2, [pc, #96]	; (8006748 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d908      	bls.n	80066fc <ETH_MAC_MDIO_ClkConfig+0x54>
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	4a17      	ldr	r2, [pc, #92]	; (800674c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d204      	bcs.n	80066fc <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80066f8:	60fb      	str	r3, [r7, #12]
 80066fa:	e01a      	b.n	8006732 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	4a13      	ldr	r2, [pc, #76]	; (800674c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d303      	bcc.n	800670c <ETH_MAC_MDIO_ClkConfig+0x64>
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	4a12      	ldr	r2, [pc, #72]	; (8006750 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d911      	bls.n	8006730 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	4a10      	ldr	r2, [pc, #64]	; (8006750 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d908      	bls.n	8006726 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	4a0f      	ldr	r2, [pc, #60]	; (8006754 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d804      	bhi.n	8006726 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006722:	60fb      	str	r3, [r7, #12]
 8006724:	e005      	b.n	8006732 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800672c:	60fb      	str	r3, [r7, #12]
 800672e:	e000      	b.n	8006732 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8006730:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800673c:	bf00      	nop
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	01312cff 	.word	0x01312cff
 8006748:	02160ebf 	.word	0x02160ebf
 800674c:	03938700 	.word	0x03938700
 8006750:	05f5e0ff 	.word	0x05f5e0ff
 8006754:	08f0d17f 	.word	0x08f0d17f

08006758 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006760:	2300      	movs	r3, #0
 8006762:	60fb      	str	r3, [r7, #12]
 8006764:	e01d      	b.n	80067a2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68d9      	ldr	r1, [r3, #12]
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	4613      	mov	r3, r2
 800676e:	005b      	lsls	r3, r3, #1
 8006770:	4413      	add	r3, r2
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	440b      	add	r3, r1
 8006776:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	2200      	movs	r2, #0
 800677c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	2200      	movs	r2, #0
 8006782:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2200      	movs	r2, #0
 8006788:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	2200      	movs	r2, #0
 800678e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006790:	68b9      	ldr	r1, [r7, #8]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	3206      	adds	r2, #6
 8006798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	3301      	adds	r3, #1
 80067a0:	60fb      	str	r3, [r7, #12]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2b03      	cmp	r3, #3
 80067a6:	d9de      	bls.n	8006766 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	f241 132c 	movw	r3, #4396	; 0x112c
 80067b6:	4413      	add	r3, r2
 80067b8:	2203      	movs	r2, #3
 80067ba:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	68d9      	ldr	r1, [r3, #12]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	f241 1314 	movw	r3, #4372	; 0x1114
 80067c8:	4413      	add	r3, r2
 80067ca:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	68da      	ldr	r2, [r3, #12]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80067d8:	601a      	str	r2, [r3, #0]
}
 80067da:	bf00      	nop
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b085      	sub	sp, #20
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80067ee:	2300      	movs	r3, #0
 80067f0:	60fb      	str	r3, [r7, #12]
 80067f2:	e024      	b.n	800683e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6919      	ldr	r1, [r3, #16]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	4613      	mov	r3, r2
 80067fc:	005b      	lsls	r3, r3, #1
 80067fe:	4413      	add	r3, r2
 8006800:	00db      	lsls	r3, r3, #3
 8006802:	440b      	add	r3, r1
 8006804:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	2200      	movs	r2, #0
 800680a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	2200      	movs	r2, #0
 8006810:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	2200      	movs	r2, #0
 8006816:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	2200      	movs	r2, #0
 800681c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	2200      	movs	r2, #0
 8006822:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	2200      	movs	r2, #0
 8006828:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	6879      	ldr	r1, [r7, #4]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	3310      	adds	r3, #16
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	440b      	add	r3, r1
 8006836:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3301      	adds	r3, #1
 800683c:	60fb      	str	r3, [r7, #12]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2b03      	cmp	r3, #3
 8006842:	d9d7      	bls.n	80067f4 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	f241 1330 	movw	r3, #4400	; 0x1130
 800686a:	4413      	add	r3, r2
 800686c:	2203      	movs	r2, #3
 800686e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6919      	ldr	r1, [r3, #16]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	f241 131c 	movw	r3, #4380	; 0x111c
 800687c:	4413      	add	r3, r2
 800687e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	f241 1328 	movw	r3, #4392	; 0x1128
 8006890:	4413      	add	r3, r2
 8006892:	6019      	str	r1, [r3, #0]
}
 8006894:	bf00      	nop
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b089      	sub	sp, #36	; 0x24
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80068ae:	4b89      	ldr	r3, [pc, #548]	; (8006ad4 <HAL_GPIO_Init+0x234>)
 80068b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80068b2:	e194      	b.n	8006bde <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	2101      	movs	r1, #1
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	fa01 f303 	lsl.w	r3, r1, r3
 80068c0:	4013      	ands	r3, r2
 80068c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f000 8186 	beq.w	8006bd8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	f003 0303 	and.w	r3, r3, #3
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d005      	beq.n	80068e4 <HAL_GPIO_Init+0x44>
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	f003 0303 	and.w	r3, r3, #3
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d130      	bne.n	8006946 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	005b      	lsls	r3, r3, #1
 80068ee:	2203      	movs	r2, #3
 80068f0:	fa02 f303 	lsl.w	r3, r2, r3
 80068f4:	43db      	mvns	r3, r3
 80068f6:	69ba      	ldr	r2, [r7, #24]
 80068f8:	4013      	ands	r3, r2
 80068fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	68da      	ldr	r2, [r3, #12]
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	005b      	lsls	r3, r3, #1
 8006904:	fa02 f303 	lsl.w	r3, r2, r3
 8006908:	69ba      	ldr	r2, [r7, #24]
 800690a:	4313      	orrs	r3, r2
 800690c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	69ba      	ldr	r2, [r7, #24]
 8006912:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800691a:	2201      	movs	r2, #1
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	fa02 f303 	lsl.w	r3, r2, r3
 8006922:	43db      	mvns	r3, r3
 8006924:	69ba      	ldr	r2, [r7, #24]
 8006926:	4013      	ands	r3, r2
 8006928:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	091b      	lsrs	r3, r3, #4
 8006930:	f003 0201 	and.w	r2, r3, #1
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	fa02 f303 	lsl.w	r3, r2, r3
 800693a:	69ba      	ldr	r2, [r7, #24]
 800693c:	4313      	orrs	r3, r2
 800693e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	69ba      	ldr	r2, [r7, #24]
 8006944:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f003 0303 	and.w	r3, r3, #3
 800694e:	2b03      	cmp	r3, #3
 8006950:	d017      	beq.n	8006982 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	005b      	lsls	r3, r3, #1
 800695c:	2203      	movs	r2, #3
 800695e:	fa02 f303 	lsl.w	r3, r2, r3
 8006962:	43db      	mvns	r3, r3
 8006964:	69ba      	ldr	r2, [r7, #24]
 8006966:	4013      	ands	r3, r2
 8006968:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	689a      	ldr	r2, [r3, #8]
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	005b      	lsls	r3, r3, #1
 8006972:	fa02 f303 	lsl.w	r3, r2, r3
 8006976:	69ba      	ldr	r2, [r7, #24]
 8006978:	4313      	orrs	r3, r2
 800697a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	69ba      	ldr	r2, [r7, #24]
 8006980:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f003 0303 	and.w	r3, r3, #3
 800698a:	2b02      	cmp	r3, #2
 800698c:	d123      	bne.n	80069d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	08da      	lsrs	r2, r3, #3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	3208      	adds	r2, #8
 8006996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800699a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	f003 0307 	and.w	r3, r3, #7
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	220f      	movs	r2, #15
 80069a6:	fa02 f303 	lsl.w	r3, r2, r3
 80069aa:	43db      	mvns	r3, r3
 80069ac:	69ba      	ldr	r2, [r7, #24]
 80069ae:	4013      	ands	r3, r2
 80069b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	691a      	ldr	r2, [r3, #16]
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	f003 0307 	and.w	r3, r3, #7
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	fa02 f303 	lsl.w	r3, r2, r3
 80069c2:	69ba      	ldr	r2, [r7, #24]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	08da      	lsrs	r2, r3, #3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	3208      	adds	r2, #8
 80069d0:	69b9      	ldr	r1, [r7, #24]
 80069d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	005b      	lsls	r3, r3, #1
 80069e0:	2203      	movs	r2, #3
 80069e2:	fa02 f303 	lsl.w	r3, r2, r3
 80069e6:	43db      	mvns	r3, r3
 80069e8:	69ba      	ldr	r2, [r7, #24]
 80069ea:	4013      	ands	r3, r2
 80069ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f003 0203 	and.w	r2, r3, #3
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	005b      	lsls	r3, r3, #1
 80069fa:	fa02 f303 	lsl.w	r3, r2, r3
 80069fe:	69ba      	ldr	r2, [r7, #24]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	69ba      	ldr	r2, [r7, #24]
 8006a08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f000 80e0 	beq.w	8006bd8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a18:	4b2f      	ldr	r3, [pc, #188]	; (8006ad8 <HAL_GPIO_Init+0x238>)
 8006a1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a1e:	4a2e      	ldr	r2, [pc, #184]	; (8006ad8 <HAL_GPIO_Init+0x238>)
 8006a20:	f043 0302 	orr.w	r3, r3, #2
 8006a24:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006a28:	4b2b      	ldr	r3, [pc, #172]	; (8006ad8 <HAL_GPIO_Init+0x238>)
 8006a2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	60fb      	str	r3, [r7, #12]
 8006a34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a36:	4a29      	ldr	r2, [pc, #164]	; (8006adc <HAL_GPIO_Init+0x23c>)
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	089b      	lsrs	r3, r3, #2
 8006a3c:	3302      	adds	r3, #2
 8006a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	f003 0303 	and.w	r3, r3, #3
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	220f      	movs	r2, #15
 8006a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a52:	43db      	mvns	r3, r3
 8006a54:	69ba      	ldr	r2, [r7, #24]
 8006a56:	4013      	ands	r3, r2
 8006a58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a20      	ldr	r2, [pc, #128]	; (8006ae0 <HAL_GPIO_Init+0x240>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d052      	beq.n	8006b08 <HAL_GPIO_Init+0x268>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a1f      	ldr	r2, [pc, #124]	; (8006ae4 <HAL_GPIO_Init+0x244>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d031      	beq.n	8006ace <HAL_GPIO_Init+0x22e>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a1e      	ldr	r2, [pc, #120]	; (8006ae8 <HAL_GPIO_Init+0x248>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d02b      	beq.n	8006aca <HAL_GPIO_Init+0x22a>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a1d      	ldr	r2, [pc, #116]	; (8006aec <HAL_GPIO_Init+0x24c>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d025      	beq.n	8006ac6 <HAL_GPIO_Init+0x226>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a1c      	ldr	r2, [pc, #112]	; (8006af0 <HAL_GPIO_Init+0x250>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d01f      	beq.n	8006ac2 <HAL_GPIO_Init+0x222>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a1b      	ldr	r2, [pc, #108]	; (8006af4 <HAL_GPIO_Init+0x254>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d019      	beq.n	8006abe <HAL_GPIO_Init+0x21e>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a1a      	ldr	r2, [pc, #104]	; (8006af8 <HAL_GPIO_Init+0x258>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d013      	beq.n	8006aba <HAL_GPIO_Init+0x21a>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a19      	ldr	r2, [pc, #100]	; (8006afc <HAL_GPIO_Init+0x25c>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d00d      	beq.n	8006ab6 <HAL_GPIO_Init+0x216>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a18      	ldr	r2, [pc, #96]	; (8006b00 <HAL_GPIO_Init+0x260>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d007      	beq.n	8006ab2 <HAL_GPIO_Init+0x212>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a17      	ldr	r2, [pc, #92]	; (8006b04 <HAL_GPIO_Init+0x264>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d101      	bne.n	8006aae <HAL_GPIO_Init+0x20e>
 8006aaa:	2309      	movs	r3, #9
 8006aac:	e02d      	b.n	8006b0a <HAL_GPIO_Init+0x26a>
 8006aae:	230a      	movs	r3, #10
 8006ab0:	e02b      	b.n	8006b0a <HAL_GPIO_Init+0x26a>
 8006ab2:	2308      	movs	r3, #8
 8006ab4:	e029      	b.n	8006b0a <HAL_GPIO_Init+0x26a>
 8006ab6:	2307      	movs	r3, #7
 8006ab8:	e027      	b.n	8006b0a <HAL_GPIO_Init+0x26a>
 8006aba:	2306      	movs	r3, #6
 8006abc:	e025      	b.n	8006b0a <HAL_GPIO_Init+0x26a>
 8006abe:	2305      	movs	r3, #5
 8006ac0:	e023      	b.n	8006b0a <HAL_GPIO_Init+0x26a>
 8006ac2:	2304      	movs	r3, #4
 8006ac4:	e021      	b.n	8006b0a <HAL_GPIO_Init+0x26a>
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e01f      	b.n	8006b0a <HAL_GPIO_Init+0x26a>
 8006aca:	2302      	movs	r3, #2
 8006acc:	e01d      	b.n	8006b0a <HAL_GPIO_Init+0x26a>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e01b      	b.n	8006b0a <HAL_GPIO_Init+0x26a>
 8006ad2:	bf00      	nop
 8006ad4:	58000080 	.word	0x58000080
 8006ad8:	58024400 	.word	0x58024400
 8006adc:	58000400 	.word	0x58000400
 8006ae0:	58020000 	.word	0x58020000
 8006ae4:	58020400 	.word	0x58020400
 8006ae8:	58020800 	.word	0x58020800
 8006aec:	58020c00 	.word	0x58020c00
 8006af0:	58021000 	.word	0x58021000
 8006af4:	58021400 	.word	0x58021400
 8006af8:	58021800 	.word	0x58021800
 8006afc:	58021c00 	.word	0x58021c00
 8006b00:	58022000 	.word	0x58022000
 8006b04:	58022400 	.word	0x58022400
 8006b08:	2300      	movs	r3, #0
 8006b0a:	69fa      	ldr	r2, [r7, #28]
 8006b0c:	f002 0203 	and.w	r2, r2, #3
 8006b10:	0092      	lsls	r2, r2, #2
 8006b12:	4093      	lsls	r3, r2
 8006b14:	69ba      	ldr	r2, [r7, #24]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b1a:	4938      	ldr	r1, [pc, #224]	; (8006bfc <HAL_GPIO_Init+0x35c>)
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	089b      	lsrs	r3, r3, #2
 8006b20:	3302      	adds	r3, #2
 8006b22:	69ba      	ldr	r2, [r7, #24]
 8006b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	43db      	mvns	r3, r3
 8006b34:	69ba      	ldr	r2, [r7, #24]
 8006b36:	4013      	ands	r3, r2
 8006b38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006b46:	69ba      	ldr	r2, [r7, #24]
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006b4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	43db      	mvns	r3, r3
 8006b62:	69ba      	ldr	r2, [r7, #24]
 8006b64:	4013      	ands	r3, r2
 8006b66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d003      	beq.n	8006b7c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006b74:	69ba      	ldr	r2, [r7, #24]
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006b7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	43db      	mvns	r3, r3
 8006b8e:	69ba      	ldr	r2, [r7, #24]
 8006b90:	4013      	ands	r3, r2
 8006b92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d003      	beq.n	8006ba8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006ba0:	69ba      	ldr	r2, [r7, #24]
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	69ba      	ldr	r2, [r7, #24]
 8006bac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	43db      	mvns	r3, r3
 8006bb8:	69ba      	ldr	r2, [r7, #24]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d003      	beq.n	8006bd2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006bca:	69ba      	ldr	r2, [r7, #24]
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	fa22 f303 	lsr.w	r3, r2, r3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f47f ae63 	bne.w	80068b4 <HAL_GPIO_Init+0x14>
  }
}
 8006bee:	bf00      	nop
 8006bf0:	bf00      	nop
 8006bf2:	3724      	adds	r7, #36	; 0x24
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	58000400 	.word	0x58000400

08006c00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	460b      	mov	r3, r1
 8006c0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	691a      	ldr	r2, [r3, #16]
 8006c10:	887b      	ldrh	r3, [r7, #2]
 8006c12:	4013      	ands	r3, r2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d002      	beq.n	8006c1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	73fb      	strb	r3, [r7, #15]
 8006c1c:	e001      	b.n	8006c22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3714      	adds	r7, #20
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	460b      	mov	r3, r1
 8006c3a:	807b      	strh	r3, [r7, #2]
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006c40:	787b      	ldrb	r3, [r7, #1]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d003      	beq.n	8006c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006c46:	887a      	ldrh	r2, [r7, #2]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006c4c:	e003      	b.n	8006c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006c4e:	887b      	ldrh	r3, [r7, #2]
 8006c50:	041a      	lsls	r2, r3, #16
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	619a      	str	r2, [r3, #24]
}
 8006c56:	bf00      	nop
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
	...

08006c64 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006c6c:	4a08      	ldr	r2, [pc, #32]	; (8006c90 <HAL_HSEM_FastTake+0x2c>)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	3320      	adds	r3, #32
 8006c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c76:	4a07      	ldr	r2, [pc, #28]	; (8006c94 <HAL_HSEM_FastTake+0x30>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d101      	bne.n	8006c80 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	e000      	b.n	8006c82 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	370c      	adds	r7, #12
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	58026400 	.word	0x58026400
 8006c94:	80000300 	.word	0x80000300

08006c98 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006ca2:	4906      	ldr	r1, [pc, #24]	; (8006cbc <HAL_HSEM_Release+0x24>)
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr
 8006cbc:	58026400 	.word	0x58026400

08006cc0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cc2:	b08f      	sub	sp, #60	; 0x3c
 8006cc4:	af0a      	add	r7, sp, #40	; 0x28
 8006cc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d101      	bne.n	8006cd2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e116      	b.n	8006f00 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d106      	bne.n	8006cf2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f7fc fb63 	bl	80033b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2203      	movs	r2, #3
 8006cf6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d102      	bne.n	8006d0c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f005 fa3d 	bl	800c190 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	603b      	str	r3, [r7, #0]
 8006d1c:	687e      	ldr	r6, [r7, #4]
 8006d1e:	466d      	mov	r5, sp
 8006d20:	f106 0410 	add.w	r4, r6, #16
 8006d24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006d30:	e885 0003 	stmia.w	r5, {r0, r1}
 8006d34:	1d33      	adds	r3, r6, #4
 8006d36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d38:	6838      	ldr	r0, [r7, #0]
 8006d3a:	f005 f9bb 	bl	800c0b4 <USB_CoreInit>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d005      	beq.n	8006d50 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2202      	movs	r2, #2
 8006d48:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e0d7      	b.n	8006f00 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2100      	movs	r1, #0
 8006d56:	4618      	mov	r0, r3
 8006d58:	f005 fa2b 	bl	800c1b2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	73fb      	strb	r3, [r7, #15]
 8006d60:	e04a      	b.n	8006df8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006d62:	7bfa      	ldrb	r2, [r7, #15]
 8006d64:	6879      	ldr	r1, [r7, #4]
 8006d66:	4613      	mov	r3, r2
 8006d68:	00db      	lsls	r3, r3, #3
 8006d6a:	1a9b      	subs	r3, r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	440b      	add	r3, r1
 8006d70:	333d      	adds	r3, #61	; 0x3d
 8006d72:	2201      	movs	r2, #1
 8006d74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006d76:	7bfa      	ldrb	r2, [r7, #15]
 8006d78:	6879      	ldr	r1, [r7, #4]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	00db      	lsls	r3, r3, #3
 8006d7e:	1a9b      	subs	r3, r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	440b      	add	r3, r1
 8006d84:	333c      	adds	r3, #60	; 0x3c
 8006d86:	7bfa      	ldrb	r2, [r7, #15]
 8006d88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006d8a:	7bfa      	ldrb	r2, [r7, #15]
 8006d8c:	7bfb      	ldrb	r3, [r7, #15]
 8006d8e:	b298      	uxth	r0, r3
 8006d90:	6879      	ldr	r1, [r7, #4]
 8006d92:	4613      	mov	r3, r2
 8006d94:	00db      	lsls	r3, r3, #3
 8006d96:	1a9b      	subs	r3, r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	440b      	add	r3, r1
 8006d9c:	3342      	adds	r3, #66	; 0x42
 8006d9e:	4602      	mov	r2, r0
 8006da0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006da2:	7bfa      	ldrb	r2, [r7, #15]
 8006da4:	6879      	ldr	r1, [r7, #4]
 8006da6:	4613      	mov	r3, r2
 8006da8:	00db      	lsls	r3, r3, #3
 8006daa:	1a9b      	subs	r3, r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	440b      	add	r3, r1
 8006db0:	333f      	adds	r3, #63	; 0x3f
 8006db2:	2200      	movs	r2, #0
 8006db4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006db6:	7bfa      	ldrb	r2, [r7, #15]
 8006db8:	6879      	ldr	r1, [r7, #4]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	00db      	lsls	r3, r3, #3
 8006dbe:	1a9b      	subs	r3, r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	440b      	add	r3, r1
 8006dc4:	3344      	adds	r3, #68	; 0x44
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006dca:	7bfa      	ldrb	r2, [r7, #15]
 8006dcc:	6879      	ldr	r1, [r7, #4]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	00db      	lsls	r3, r3, #3
 8006dd2:	1a9b      	subs	r3, r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	440b      	add	r3, r1
 8006dd8:	3348      	adds	r3, #72	; 0x48
 8006dda:	2200      	movs	r2, #0
 8006ddc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006dde:	7bfa      	ldrb	r2, [r7, #15]
 8006de0:	6879      	ldr	r1, [r7, #4]
 8006de2:	4613      	mov	r3, r2
 8006de4:	00db      	lsls	r3, r3, #3
 8006de6:	1a9b      	subs	r3, r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	440b      	add	r3, r1
 8006dec:	3350      	adds	r3, #80	; 0x50
 8006dee:	2200      	movs	r2, #0
 8006df0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006df2:	7bfb      	ldrb	r3, [r7, #15]
 8006df4:	3301      	adds	r3, #1
 8006df6:	73fb      	strb	r3, [r7, #15]
 8006df8:	7bfa      	ldrb	r2, [r7, #15]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d3af      	bcc.n	8006d62 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e02:	2300      	movs	r3, #0
 8006e04:	73fb      	strb	r3, [r7, #15]
 8006e06:	e044      	b.n	8006e92 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006e08:	7bfa      	ldrb	r2, [r7, #15]
 8006e0a:	6879      	ldr	r1, [r7, #4]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	00db      	lsls	r3, r3, #3
 8006e10:	1a9b      	subs	r3, r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	440b      	add	r3, r1
 8006e16:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006e1e:	7bfa      	ldrb	r2, [r7, #15]
 8006e20:	6879      	ldr	r1, [r7, #4]
 8006e22:	4613      	mov	r3, r2
 8006e24:	00db      	lsls	r3, r3, #3
 8006e26:	1a9b      	subs	r3, r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	440b      	add	r3, r1
 8006e2c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006e30:	7bfa      	ldrb	r2, [r7, #15]
 8006e32:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006e34:	7bfa      	ldrb	r2, [r7, #15]
 8006e36:	6879      	ldr	r1, [r7, #4]
 8006e38:	4613      	mov	r3, r2
 8006e3a:	00db      	lsls	r3, r3, #3
 8006e3c:	1a9b      	subs	r3, r3, r2
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	440b      	add	r3, r1
 8006e42:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006e46:	2200      	movs	r2, #0
 8006e48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006e4a:	7bfa      	ldrb	r2, [r7, #15]
 8006e4c:	6879      	ldr	r1, [r7, #4]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	00db      	lsls	r3, r3, #3
 8006e52:	1a9b      	subs	r3, r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	440b      	add	r3, r1
 8006e58:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006e60:	7bfa      	ldrb	r2, [r7, #15]
 8006e62:	6879      	ldr	r1, [r7, #4]
 8006e64:	4613      	mov	r3, r2
 8006e66:	00db      	lsls	r3, r3, #3
 8006e68:	1a9b      	subs	r3, r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	440b      	add	r3, r1
 8006e6e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006e72:	2200      	movs	r2, #0
 8006e74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006e76:	7bfa      	ldrb	r2, [r7, #15]
 8006e78:	6879      	ldr	r1, [r7, #4]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	00db      	lsls	r3, r3, #3
 8006e7e:	1a9b      	subs	r3, r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	440b      	add	r3, r1
 8006e84:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006e88:	2200      	movs	r2, #0
 8006e8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	73fb      	strb	r3, [r7, #15]
 8006e92:	7bfa      	ldrb	r2, [r7, #15]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d3b5      	bcc.n	8006e08 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	603b      	str	r3, [r7, #0]
 8006ea2:	687e      	ldr	r6, [r7, #4]
 8006ea4:	466d      	mov	r5, sp
 8006ea6:	f106 0410 	add.w	r4, r6, #16
 8006eaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006eac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006eae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006eb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006eb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006eb6:	e885 0003 	stmia.w	r5, {r0, r1}
 8006eba:	1d33      	adds	r3, r6, #4
 8006ebc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ebe:	6838      	ldr	r0, [r7, #0]
 8006ec0:	f005 f9c4 	bl	800c24c <USB_DevInit>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d005      	beq.n	8006ed6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2202      	movs	r2, #2
 8006ece:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e014      	b.n	8006f00 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d102      	bne.n	8006ef4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f80a 	bl	8006f08 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f005 fb7e 	bl	800c5fa <USB_DevDisconnect>

  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f08 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f36:	4b05      	ldr	r3, [pc, #20]	; (8006f4c <HAL_PCDEx_ActivateLPM+0x44>)
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3714      	adds	r7, #20
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr
 8006f4c:	10000003 	.word	0x10000003

08006f50 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006f58:	4b29      	ldr	r3, [pc, #164]	; (8007000 <HAL_PWREx_ConfigSupply+0xb0>)
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	f003 0307 	and.w	r3, r3, #7
 8006f60:	2b06      	cmp	r3, #6
 8006f62:	d00a      	beq.n	8006f7a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006f64:	4b26      	ldr	r3, [pc, #152]	; (8007000 <HAL_PWREx_ConfigSupply+0xb0>)
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d001      	beq.n	8006f76 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e040      	b.n	8006ff8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006f76:	2300      	movs	r3, #0
 8006f78:	e03e      	b.n	8006ff8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006f7a:	4b21      	ldr	r3, [pc, #132]	; (8007000 <HAL_PWREx_ConfigSupply+0xb0>)
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006f82:	491f      	ldr	r1, [pc, #124]	; (8007000 <HAL_PWREx_ConfigSupply+0xb0>)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006f8a:	f7fc fbeb 	bl	8003764 <HAL_GetTick>
 8006f8e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006f90:	e009      	b.n	8006fa6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006f92:	f7fc fbe7 	bl	8003764 <HAL_GetTick>
 8006f96:	4602      	mov	r2, r0
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fa0:	d901      	bls.n	8006fa6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e028      	b.n	8006ff8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006fa6:	4b16      	ldr	r3, [pc, #88]	; (8007000 <HAL_PWREx_ConfigSupply+0xb0>)
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fb2:	d1ee      	bne.n	8006f92 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2b1e      	cmp	r3, #30
 8006fb8:	d008      	beq.n	8006fcc <HAL_PWREx_ConfigSupply+0x7c>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2b2e      	cmp	r3, #46	; 0x2e
 8006fbe:	d005      	beq.n	8006fcc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2b1d      	cmp	r3, #29
 8006fc4:	d002      	beq.n	8006fcc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b2d      	cmp	r3, #45	; 0x2d
 8006fca:	d114      	bne.n	8006ff6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006fcc:	f7fc fbca 	bl	8003764 <HAL_GetTick>
 8006fd0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006fd2:	e009      	b.n	8006fe8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006fd4:	f7fc fbc6 	bl	8003764 <HAL_GetTick>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fe2:	d901      	bls.n	8006fe8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e007      	b.n	8006ff8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006fe8:	4b05      	ldr	r3, [pc, #20]	; (8007000 <HAL_PWREx_ConfigSupply+0xb0>)
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ff4:	d1ee      	bne.n	8006fd4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	58024800 	.word	0x58024800

08007004 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007004:	b480      	push	{r7}
 8007006:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007008:	4b05      	ldr	r3, [pc, #20]	; (8007020 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	4a04      	ldr	r2, [pc, #16]	; (8007020 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800700e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007012:	60d3      	str	r3, [r2, #12]
}
 8007014:	bf00      	nop
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	58024800 	.word	0x58024800

08007024 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b08c      	sub	sp, #48	; 0x30
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d102      	bne.n	8007038 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	f000 bc1c 	b.w	8007870 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0301 	and.w	r3, r3, #1
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 8087 	beq.w	8007154 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007046:	4b9e      	ldr	r3, [pc, #632]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800704e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007050:	4b9b      	ldr	r3, [pc, #620]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 8007052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007054:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007058:	2b10      	cmp	r3, #16
 800705a:	d007      	beq.n	800706c <HAL_RCC_OscConfig+0x48>
 800705c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705e:	2b18      	cmp	r3, #24
 8007060:	d110      	bne.n	8007084 <HAL_RCC_OscConfig+0x60>
 8007062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007064:	f003 0303 	and.w	r3, r3, #3
 8007068:	2b02      	cmp	r3, #2
 800706a:	d10b      	bne.n	8007084 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800706c:	4b94      	ldr	r3, [pc, #592]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d06c      	beq.n	8007152 <HAL_RCC_OscConfig+0x12e>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d168      	bne.n	8007152 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	e3f5      	b.n	8007870 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800708c:	d106      	bne.n	800709c <HAL_RCC_OscConfig+0x78>
 800708e:	4b8c      	ldr	r3, [pc, #560]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a8b      	ldr	r2, [pc, #556]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 8007094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007098:	6013      	str	r3, [r2, #0]
 800709a:	e02e      	b.n	80070fa <HAL_RCC_OscConfig+0xd6>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10c      	bne.n	80070be <HAL_RCC_OscConfig+0x9a>
 80070a4:	4b86      	ldr	r3, [pc, #536]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a85      	ldr	r2, [pc, #532]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 80070aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070ae:	6013      	str	r3, [r2, #0]
 80070b0:	4b83      	ldr	r3, [pc, #524]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a82      	ldr	r2, [pc, #520]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 80070b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070ba:	6013      	str	r3, [r2, #0]
 80070bc:	e01d      	b.n	80070fa <HAL_RCC_OscConfig+0xd6>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070c6:	d10c      	bne.n	80070e2 <HAL_RCC_OscConfig+0xbe>
 80070c8:	4b7d      	ldr	r3, [pc, #500]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a7c      	ldr	r2, [pc, #496]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 80070ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070d2:	6013      	str	r3, [r2, #0]
 80070d4:	4b7a      	ldr	r3, [pc, #488]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a79      	ldr	r2, [pc, #484]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 80070da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070de:	6013      	str	r3, [r2, #0]
 80070e0:	e00b      	b.n	80070fa <HAL_RCC_OscConfig+0xd6>
 80070e2:	4b77      	ldr	r3, [pc, #476]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a76      	ldr	r2, [pc, #472]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 80070e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070ec:	6013      	str	r3, [r2, #0]
 80070ee:	4b74      	ldr	r3, [pc, #464]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a73      	ldr	r2, [pc, #460]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 80070f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d013      	beq.n	800712a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007102:	f7fc fb2f 	bl	8003764 <HAL_GetTick>
 8007106:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007108:	e008      	b.n	800711c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800710a:	f7fc fb2b 	bl	8003764 <HAL_GetTick>
 800710e:	4602      	mov	r2, r0
 8007110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	2b64      	cmp	r3, #100	; 0x64
 8007116:	d901      	bls.n	800711c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e3a9      	b.n	8007870 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800711c:	4b68      	ldr	r3, [pc, #416]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d0f0      	beq.n	800710a <HAL_RCC_OscConfig+0xe6>
 8007128:	e014      	b.n	8007154 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800712a:	f7fc fb1b 	bl	8003764 <HAL_GetTick>
 800712e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007130:	e008      	b.n	8007144 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007132:	f7fc fb17 	bl	8003764 <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	2b64      	cmp	r3, #100	; 0x64
 800713e:	d901      	bls.n	8007144 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	e395      	b.n	8007870 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007144:	4b5e      	ldr	r3, [pc, #376]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1f0      	bne.n	8007132 <HAL_RCC_OscConfig+0x10e>
 8007150:	e000      	b.n	8007154 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007152:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0302 	and.w	r3, r3, #2
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 80ca 	beq.w	80072f6 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007162:	4b57      	ldr	r3, [pc, #348]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800716a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800716c:	4b54      	ldr	r3, [pc, #336]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 800716e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007170:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007172:	6a3b      	ldr	r3, [r7, #32]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d007      	beq.n	8007188 <HAL_RCC_OscConfig+0x164>
 8007178:	6a3b      	ldr	r3, [r7, #32]
 800717a:	2b18      	cmp	r3, #24
 800717c:	d156      	bne.n	800722c <HAL_RCC_OscConfig+0x208>
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	f003 0303 	and.w	r3, r3, #3
 8007184:	2b00      	cmp	r3, #0
 8007186:	d151      	bne.n	800722c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007188:	4b4d      	ldr	r3, [pc, #308]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0304 	and.w	r3, r3, #4
 8007190:	2b00      	cmp	r3, #0
 8007192:	d005      	beq.n	80071a0 <HAL_RCC_OscConfig+0x17c>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d101      	bne.n	80071a0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e367      	b.n	8007870 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80071a0:	4b47      	ldr	r3, [pc, #284]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f023 0219 	bic.w	r2, r3, #25
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	4944      	ldr	r1, [pc, #272]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80071b2:	f7fc fad7 	bl	8003764 <HAL_GetTick>
 80071b6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071b8:	e008      	b.n	80071cc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80071ba:	f7fc fad3 	bl	8003764 <HAL_GetTick>
 80071be:	4602      	mov	r2, r0
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d901      	bls.n	80071cc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80071c8:	2303      	movs	r3, #3
 80071ca:	e351      	b.n	8007870 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071cc:	4b3c      	ldr	r3, [pc, #240]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0304 	and.w	r3, r3, #4
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d0f0      	beq.n	80071ba <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071d8:	f7fc faf4 	bl	80037c4 <HAL_GetREVID>
 80071dc:	4603      	mov	r3, r0
 80071de:	f241 0203 	movw	r2, #4099	; 0x1003
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d817      	bhi.n	8007216 <HAL_RCC_OscConfig+0x1f2>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	2b40      	cmp	r3, #64	; 0x40
 80071ec:	d108      	bne.n	8007200 <HAL_RCC_OscConfig+0x1dc>
 80071ee:	4b34      	ldr	r3, [pc, #208]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80071f6:	4a32      	ldr	r2, [pc, #200]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 80071f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071fc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071fe:	e07a      	b.n	80072f6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007200:	4b2f      	ldr	r3, [pc, #188]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	031b      	lsls	r3, r3, #12
 800720e:	492c      	ldr	r1, [pc, #176]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 8007210:	4313      	orrs	r3, r2
 8007212:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007214:	e06f      	b.n	80072f6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007216:	4b2a      	ldr	r3, [pc, #168]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	061b      	lsls	r3, r3, #24
 8007224:	4926      	ldr	r1, [pc, #152]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 8007226:	4313      	orrs	r3, r2
 8007228:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800722a:	e064      	b.n	80072f6 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d047      	beq.n	80072c4 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007234:	4b22      	ldr	r3, [pc, #136]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f023 0219 	bic.w	r2, r3, #25
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	491f      	ldr	r1, [pc, #124]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 8007242:	4313      	orrs	r3, r2
 8007244:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007246:	f7fc fa8d 	bl	8003764 <HAL_GetTick>
 800724a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800724c:	e008      	b.n	8007260 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800724e:	f7fc fa89 	bl	8003764 <HAL_GetTick>
 8007252:	4602      	mov	r2, r0
 8007254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	2b02      	cmp	r3, #2
 800725a:	d901      	bls.n	8007260 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e307      	b.n	8007870 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007260:	4b17      	ldr	r3, [pc, #92]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 0304 	and.w	r3, r3, #4
 8007268:	2b00      	cmp	r3, #0
 800726a:	d0f0      	beq.n	800724e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800726c:	f7fc faaa 	bl	80037c4 <HAL_GetREVID>
 8007270:	4603      	mov	r3, r0
 8007272:	f241 0203 	movw	r2, #4099	; 0x1003
 8007276:	4293      	cmp	r3, r2
 8007278:	d817      	bhi.n	80072aa <HAL_RCC_OscConfig+0x286>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	2b40      	cmp	r3, #64	; 0x40
 8007280:	d108      	bne.n	8007294 <HAL_RCC_OscConfig+0x270>
 8007282:	4b0f      	ldr	r3, [pc, #60]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800728a:	4a0d      	ldr	r2, [pc, #52]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 800728c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007290:	6053      	str	r3, [r2, #4]
 8007292:	e030      	b.n	80072f6 <HAL_RCC_OscConfig+0x2d2>
 8007294:	4b0a      	ldr	r3, [pc, #40]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	031b      	lsls	r3, r3, #12
 80072a2:	4907      	ldr	r1, [pc, #28]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 80072a4:	4313      	orrs	r3, r2
 80072a6:	604b      	str	r3, [r1, #4]
 80072a8:	e025      	b.n	80072f6 <HAL_RCC_OscConfig+0x2d2>
 80072aa:	4b05      	ldr	r3, [pc, #20]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	061b      	lsls	r3, r3, #24
 80072b8:	4901      	ldr	r1, [pc, #4]	; (80072c0 <HAL_RCC_OscConfig+0x29c>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	604b      	str	r3, [r1, #4]
 80072be:	e01a      	b.n	80072f6 <HAL_RCC_OscConfig+0x2d2>
 80072c0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072c4:	4b9e      	ldr	r3, [pc, #632]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a9d      	ldr	r2, [pc, #628]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 80072ca:	f023 0301 	bic.w	r3, r3, #1
 80072ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072d0:	f7fc fa48 	bl	8003764 <HAL_GetTick>
 80072d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80072d6:	e008      	b.n	80072ea <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072d8:	f7fc fa44 	bl	8003764 <HAL_GetTick>
 80072dc:	4602      	mov	r2, r0
 80072de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d901      	bls.n	80072ea <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e2c2      	b.n	8007870 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80072ea:	4b95      	ldr	r3, [pc, #596]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0304 	and.w	r3, r3, #4
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1f0      	bne.n	80072d8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 0310 	and.w	r3, r3, #16
 80072fe:	2b00      	cmp	r3, #0
 8007300:	f000 80a9 	beq.w	8007456 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007304:	4b8e      	ldr	r3, [pc, #568]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800730c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800730e:	4b8c      	ldr	r3, [pc, #560]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 8007310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007312:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	2b08      	cmp	r3, #8
 8007318:	d007      	beq.n	800732a <HAL_RCC_OscConfig+0x306>
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	2b18      	cmp	r3, #24
 800731e:	d13a      	bne.n	8007396 <HAL_RCC_OscConfig+0x372>
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	f003 0303 	and.w	r3, r3, #3
 8007326:	2b01      	cmp	r3, #1
 8007328:	d135      	bne.n	8007396 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800732a:	4b85      	ldr	r3, [pc, #532]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007332:	2b00      	cmp	r3, #0
 8007334:	d005      	beq.n	8007342 <HAL_RCC_OscConfig+0x31e>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	69db      	ldr	r3, [r3, #28]
 800733a:	2b80      	cmp	r3, #128	; 0x80
 800733c:	d001      	beq.n	8007342 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e296      	b.n	8007870 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007342:	f7fc fa3f 	bl	80037c4 <HAL_GetREVID>
 8007346:	4603      	mov	r3, r0
 8007348:	f241 0203 	movw	r2, #4099	; 0x1003
 800734c:	4293      	cmp	r3, r2
 800734e:	d817      	bhi.n	8007380 <HAL_RCC_OscConfig+0x35c>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a1b      	ldr	r3, [r3, #32]
 8007354:	2b20      	cmp	r3, #32
 8007356:	d108      	bne.n	800736a <HAL_RCC_OscConfig+0x346>
 8007358:	4b79      	ldr	r3, [pc, #484]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007360:	4a77      	ldr	r2, [pc, #476]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 8007362:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007366:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007368:	e075      	b.n	8007456 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800736a:	4b75      	ldr	r3, [pc, #468]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	069b      	lsls	r3, r3, #26
 8007378:	4971      	ldr	r1, [pc, #452]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 800737a:	4313      	orrs	r3, r2
 800737c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800737e:	e06a      	b.n	8007456 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007380:	4b6f      	ldr	r3, [pc, #444]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a1b      	ldr	r3, [r3, #32]
 800738c:	061b      	lsls	r3, r3, #24
 800738e:	496c      	ldr	r1, [pc, #432]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 8007390:	4313      	orrs	r3, r2
 8007392:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007394:	e05f      	b.n	8007456 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	69db      	ldr	r3, [r3, #28]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d042      	beq.n	8007424 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800739e:	4b68      	ldr	r3, [pc, #416]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a67      	ldr	r2, [pc, #412]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 80073a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073aa:	f7fc f9db 	bl	8003764 <HAL_GetTick>
 80073ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80073b0:	e008      	b.n	80073c4 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80073b2:	f7fc f9d7 	bl	8003764 <HAL_GetTick>
 80073b6:	4602      	mov	r2, r0
 80073b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d901      	bls.n	80073c4 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e255      	b.n	8007870 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80073c4:	4b5e      	ldr	r3, [pc, #376]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d0f0      	beq.n	80073b2 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80073d0:	f7fc f9f8 	bl	80037c4 <HAL_GetREVID>
 80073d4:	4603      	mov	r3, r0
 80073d6:	f241 0203 	movw	r2, #4099	; 0x1003
 80073da:	4293      	cmp	r3, r2
 80073dc:	d817      	bhi.n	800740e <HAL_RCC_OscConfig+0x3ea>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	2b20      	cmp	r3, #32
 80073e4:	d108      	bne.n	80073f8 <HAL_RCC_OscConfig+0x3d4>
 80073e6:	4b56      	ldr	r3, [pc, #344]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80073ee:	4a54      	ldr	r2, [pc, #336]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 80073f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073f4:	6053      	str	r3, [r2, #4]
 80073f6:	e02e      	b.n	8007456 <HAL_RCC_OscConfig+0x432>
 80073f8:	4b51      	ldr	r3, [pc, #324]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a1b      	ldr	r3, [r3, #32]
 8007404:	069b      	lsls	r3, r3, #26
 8007406:	494e      	ldr	r1, [pc, #312]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 8007408:	4313      	orrs	r3, r2
 800740a:	604b      	str	r3, [r1, #4]
 800740c:	e023      	b.n	8007456 <HAL_RCC_OscConfig+0x432>
 800740e:	4b4c      	ldr	r3, [pc, #304]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a1b      	ldr	r3, [r3, #32]
 800741a:	061b      	lsls	r3, r3, #24
 800741c:	4948      	ldr	r1, [pc, #288]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 800741e:	4313      	orrs	r3, r2
 8007420:	60cb      	str	r3, [r1, #12]
 8007422:	e018      	b.n	8007456 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007424:	4b46      	ldr	r3, [pc, #280]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a45      	ldr	r2, [pc, #276]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 800742a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800742e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007430:	f7fc f998 	bl	8003764 <HAL_GetTick>
 8007434:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007436:	e008      	b.n	800744a <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007438:	f7fc f994 	bl	8003764 <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	2b02      	cmp	r3, #2
 8007444:	d901      	bls.n	800744a <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e212      	b.n	8007870 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800744a:	4b3d      	ldr	r3, [pc, #244]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1f0      	bne.n	8007438 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0308 	and.w	r3, r3, #8
 800745e:	2b00      	cmp	r3, #0
 8007460:	d036      	beq.n	80074d0 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	695b      	ldr	r3, [r3, #20]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d019      	beq.n	800749e <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800746a:	4b35      	ldr	r3, [pc, #212]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 800746c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800746e:	4a34      	ldr	r2, [pc, #208]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 8007470:	f043 0301 	orr.w	r3, r3, #1
 8007474:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007476:	f7fc f975 	bl	8003764 <HAL_GetTick>
 800747a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800747c:	e008      	b.n	8007490 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800747e:	f7fc f971 	bl	8003764 <HAL_GetTick>
 8007482:	4602      	mov	r2, r0
 8007484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	2b02      	cmp	r3, #2
 800748a:	d901      	bls.n	8007490 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800748c:	2303      	movs	r3, #3
 800748e:	e1ef      	b.n	8007870 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007490:	4b2b      	ldr	r3, [pc, #172]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 8007492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007494:	f003 0302 	and.w	r3, r3, #2
 8007498:	2b00      	cmp	r3, #0
 800749a:	d0f0      	beq.n	800747e <HAL_RCC_OscConfig+0x45a>
 800749c:	e018      	b.n	80074d0 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800749e:	4b28      	ldr	r3, [pc, #160]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 80074a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074a2:	4a27      	ldr	r2, [pc, #156]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 80074a4:	f023 0301 	bic.w	r3, r3, #1
 80074a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074aa:	f7fc f95b 	bl	8003764 <HAL_GetTick>
 80074ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80074b0:	e008      	b.n	80074c4 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074b2:	f7fc f957 	bl	8003764 <HAL_GetTick>
 80074b6:	4602      	mov	r2, r0
 80074b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	2b02      	cmp	r3, #2
 80074be:	d901      	bls.n	80074c4 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e1d5      	b.n	8007870 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80074c4:	4b1e      	ldr	r3, [pc, #120]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 80074c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074c8:	f003 0302 	and.w	r3, r3, #2
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1f0      	bne.n	80074b2 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 0320 	and.w	r3, r3, #32
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d039      	beq.n	8007550 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d019      	beq.n	8007518 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80074e4:	4b16      	ldr	r3, [pc, #88]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a15      	ldr	r2, [pc, #84]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 80074ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80074ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80074f0:	f7fc f938 	bl	8003764 <HAL_GetTick>
 80074f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80074f6:	e008      	b.n	800750a <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80074f8:	f7fc f934 	bl	8003764 <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	2b02      	cmp	r3, #2
 8007504:	d901      	bls.n	800750a <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	e1b2      	b.n	8007870 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800750a:	4b0d      	ldr	r3, [pc, #52]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007512:	2b00      	cmp	r3, #0
 8007514:	d0f0      	beq.n	80074f8 <HAL_RCC_OscConfig+0x4d4>
 8007516:	e01b      	b.n	8007550 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007518:	4b09      	ldr	r3, [pc, #36]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a08      	ldr	r2, [pc, #32]	; (8007540 <HAL_RCC_OscConfig+0x51c>)
 800751e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007522:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007524:	f7fc f91e 	bl	8003764 <HAL_GetTick>
 8007528:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800752a:	e00b      	b.n	8007544 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800752c:	f7fc f91a 	bl	8003764 <HAL_GetTick>
 8007530:	4602      	mov	r2, r0
 8007532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	2b02      	cmp	r3, #2
 8007538:	d904      	bls.n	8007544 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	e198      	b.n	8007870 <HAL_RCC_OscConfig+0x84c>
 800753e:	bf00      	nop
 8007540:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007544:	4ba3      	ldr	r3, [pc, #652]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1ed      	bne.n	800752c <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 0304 	and.w	r3, r3, #4
 8007558:	2b00      	cmp	r3, #0
 800755a:	f000 8081 	beq.w	8007660 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800755e:	4b9e      	ldr	r3, [pc, #632]	; (80077d8 <HAL_RCC_OscConfig+0x7b4>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a9d      	ldr	r2, [pc, #628]	; (80077d8 <HAL_RCC_OscConfig+0x7b4>)
 8007564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007568:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800756a:	f7fc f8fb 	bl	8003764 <HAL_GetTick>
 800756e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007570:	e008      	b.n	8007584 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007572:	f7fc f8f7 	bl	8003764 <HAL_GetTick>
 8007576:	4602      	mov	r2, r0
 8007578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757a:	1ad3      	subs	r3, r2, r3
 800757c:	2b64      	cmp	r3, #100	; 0x64
 800757e:	d901      	bls.n	8007584 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8007580:	2303      	movs	r3, #3
 8007582:	e175      	b.n	8007870 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007584:	4b94      	ldr	r3, [pc, #592]	; (80077d8 <HAL_RCC_OscConfig+0x7b4>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800758c:	2b00      	cmp	r3, #0
 800758e:	d0f0      	beq.n	8007572 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d106      	bne.n	80075a6 <HAL_RCC_OscConfig+0x582>
 8007598:	4b8e      	ldr	r3, [pc, #568]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 800759a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800759c:	4a8d      	ldr	r2, [pc, #564]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 800759e:	f043 0301 	orr.w	r3, r3, #1
 80075a2:	6713      	str	r3, [r2, #112]	; 0x70
 80075a4:	e02d      	b.n	8007602 <HAL_RCC_OscConfig+0x5de>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10c      	bne.n	80075c8 <HAL_RCC_OscConfig+0x5a4>
 80075ae:	4b89      	ldr	r3, [pc, #548]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 80075b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b2:	4a88      	ldr	r2, [pc, #544]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 80075b4:	f023 0301 	bic.w	r3, r3, #1
 80075b8:	6713      	str	r3, [r2, #112]	; 0x70
 80075ba:	4b86      	ldr	r3, [pc, #536]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 80075bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075be:	4a85      	ldr	r2, [pc, #532]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 80075c0:	f023 0304 	bic.w	r3, r3, #4
 80075c4:	6713      	str	r3, [r2, #112]	; 0x70
 80075c6:	e01c      	b.n	8007602 <HAL_RCC_OscConfig+0x5de>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	2b05      	cmp	r3, #5
 80075ce:	d10c      	bne.n	80075ea <HAL_RCC_OscConfig+0x5c6>
 80075d0:	4b80      	ldr	r3, [pc, #512]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 80075d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075d4:	4a7f      	ldr	r2, [pc, #508]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 80075d6:	f043 0304 	orr.w	r3, r3, #4
 80075da:	6713      	str	r3, [r2, #112]	; 0x70
 80075dc:	4b7d      	ldr	r3, [pc, #500]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 80075de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e0:	4a7c      	ldr	r2, [pc, #496]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 80075e2:	f043 0301 	orr.w	r3, r3, #1
 80075e6:	6713      	str	r3, [r2, #112]	; 0x70
 80075e8:	e00b      	b.n	8007602 <HAL_RCC_OscConfig+0x5de>
 80075ea:	4b7a      	ldr	r3, [pc, #488]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 80075ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ee:	4a79      	ldr	r2, [pc, #484]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 80075f0:	f023 0301 	bic.w	r3, r3, #1
 80075f4:	6713      	str	r3, [r2, #112]	; 0x70
 80075f6:	4b77      	ldr	r3, [pc, #476]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 80075f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075fa:	4a76      	ldr	r2, [pc, #472]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 80075fc:	f023 0304 	bic.w	r3, r3, #4
 8007600:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d015      	beq.n	8007636 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800760a:	f7fc f8ab 	bl	8003764 <HAL_GetTick>
 800760e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007610:	e00a      	b.n	8007628 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007612:	f7fc f8a7 	bl	8003764 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007620:	4293      	cmp	r3, r2
 8007622:	d901      	bls.n	8007628 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	e123      	b.n	8007870 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007628:	4b6a      	ldr	r3, [pc, #424]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 800762a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800762c:	f003 0302 	and.w	r3, r3, #2
 8007630:	2b00      	cmp	r3, #0
 8007632:	d0ee      	beq.n	8007612 <HAL_RCC_OscConfig+0x5ee>
 8007634:	e014      	b.n	8007660 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007636:	f7fc f895 	bl	8003764 <HAL_GetTick>
 800763a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800763c:	e00a      	b.n	8007654 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800763e:	f7fc f891 	bl	8003764 <HAL_GetTick>
 8007642:	4602      	mov	r2, r0
 8007644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	f241 3288 	movw	r2, #5000	; 0x1388
 800764c:	4293      	cmp	r3, r2
 800764e:	d901      	bls.n	8007654 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e10d      	b.n	8007870 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007654:	4b5f      	ldr	r3, [pc, #380]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 8007656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007658:	f003 0302 	and.w	r3, r3, #2
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1ee      	bne.n	800763e <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007664:	2b00      	cmp	r3, #0
 8007666:	f000 8102 	beq.w	800786e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800766a:	4b5a      	ldr	r3, [pc, #360]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007672:	2b18      	cmp	r3, #24
 8007674:	f000 80bd 	beq.w	80077f2 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767c:	2b02      	cmp	r3, #2
 800767e:	f040 8095 	bne.w	80077ac <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007682:	4b54      	ldr	r3, [pc, #336]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a53      	ldr	r2, [pc, #332]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 8007688:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800768c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800768e:	f7fc f869 	bl	8003764 <HAL_GetTick>
 8007692:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007694:	e008      	b.n	80076a8 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007696:	f7fc f865 	bl	8003764 <HAL_GetTick>
 800769a:	4602      	mov	r2, r0
 800769c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d901      	bls.n	80076a8 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e0e3      	b.n	8007870 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80076a8:	4b4a      	ldr	r3, [pc, #296]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1f0      	bne.n	8007696 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80076b4:	4b47      	ldr	r3, [pc, #284]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 80076b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076b8:	4b48      	ldr	r3, [pc, #288]	; (80077dc <HAL_RCC_OscConfig+0x7b8>)
 80076ba:	4013      	ands	r3, r2
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80076c4:	0112      	lsls	r2, r2, #4
 80076c6:	430a      	orrs	r2, r1
 80076c8:	4942      	ldr	r1, [pc, #264]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 80076ca:	4313      	orrs	r3, r2
 80076cc:	628b      	str	r3, [r1, #40]	; 0x28
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d2:	3b01      	subs	r3, #1
 80076d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076dc:	3b01      	subs	r3, #1
 80076de:	025b      	lsls	r3, r3, #9
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	431a      	orrs	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e8:	3b01      	subs	r3, #1
 80076ea:	041b      	lsls	r3, r3, #16
 80076ec:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80076f0:	431a      	orrs	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f6:	3b01      	subs	r3, #1
 80076f8:	061b      	lsls	r3, r3, #24
 80076fa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80076fe:	4935      	ldr	r1, [pc, #212]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 8007700:	4313      	orrs	r3, r2
 8007702:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007704:	4b33      	ldr	r3, [pc, #204]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 8007706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007708:	4a32      	ldr	r2, [pc, #200]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 800770a:	f023 0301 	bic.w	r3, r3, #1
 800770e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007710:	4b30      	ldr	r3, [pc, #192]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 8007712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007714:	4b32      	ldr	r3, [pc, #200]	; (80077e0 <HAL_RCC_OscConfig+0x7bc>)
 8007716:	4013      	ands	r3, r2
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800771c:	00d2      	lsls	r2, r2, #3
 800771e:	492d      	ldr	r1, [pc, #180]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 8007720:	4313      	orrs	r3, r2
 8007722:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007724:	4b2b      	ldr	r3, [pc, #172]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 8007726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007728:	f023 020c 	bic.w	r2, r3, #12
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007730:	4928      	ldr	r1, [pc, #160]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 8007732:	4313      	orrs	r3, r2
 8007734:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007736:	4b27      	ldr	r3, [pc, #156]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 8007738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773a:	f023 0202 	bic.w	r2, r3, #2
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007742:	4924      	ldr	r1, [pc, #144]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 8007744:	4313      	orrs	r3, r2
 8007746:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007748:	4b22      	ldr	r3, [pc, #136]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 800774a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774c:	4a21      	ldr	r2, [pc, #132]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 800774e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007752:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007754:	4b1f      	ldr	r3, [pc, #124]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 8007756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007758:	4a1e      	ldr	r2, [pc, #120]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 800775a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800775e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007760:	4b1c      	ldr	r3, [pc, #112]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 8007762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007764:	4a1b      	ldr	r2, [pc, #108]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 8007766:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800776a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800776c:	4b19      	ldr	r3, [pc, #100]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 800776e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007770:	4a18      	ldr	r2, [pc, #96]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 8007772:	f043 0301 	orr.w	r3, r3, #1
 8007776:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007778:	4b16      	ldr	r3, [pc, #88]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a15      	ldr	r2, [pc, #84]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 800777e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007784:	f7fb ffee 	bl	8003764 <HAL_GetTick>
 8007788:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800778a:	e008      	b.n	800779e <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800778c:	f7fb ffea 	bl	8003764 <HAL_GetTick>
 8007790:	4602      	mov	r2, r0
 8007792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	2b02      	cmp	r3, #2
 8007798:	d901      	bls.n	800779e <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800779a:	2303      	movs	r3, #3
 800779c:	e068      	b.n	8007870 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800779e:	4b0d      	ldr	r3, [pc, #52]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d0f0      	beq.n	800778c <HAL_RCC_OscConfig+0x768>
 80077aa:	e060      	b.n	800786e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077ac:	4b09      	ldr	r3, [pc, #36]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a08      	ldr	r2, [pc, #32]	; (80077d4 <HAL_RCC_OscConfig+0x7b0>)
 80077b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077b8:	f7fb ffd4 	bl	8003764 <HAL_GetTick>
 80077bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80077be:	e011      	b.n	80077e4 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80077c0:	f7fb ffd0 	bl	8003764 <HAL_GetTick>
 80077c4:	4602      	mov	r2, r0
 80077c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d90a      	bls.n	80077e4 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 80077ce:	2303      	movs	r3, #3
 80077d0:	e04e      	b.n	8007870 <HAL_RCC_OscConfig+0x84c>
 80077d2:	bf00      	nop
 80077d4:	58024400 	.word	0x58024400
 80077d8:	58024800 	.word	0x58024800
 80077dc:	fffffc0c 	.word	0xfffffc0c
 80077e0:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80077e4:	4b24      	ldr	r3, [pc, #144]	; (8007878 <HAL_RCC_OscConfig+0x854>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1e7      	bne.n	80077c0 <HAL_RCC_OscConfig+0x79c>
 80077f0:	e03d      	b.n	800786e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80077f2:	4b21      	ldr	r3, [pc, #132]	; (8007878 <HAL_RCC_OscConfig+0x854>)
 80077f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80077f8:	4b1f      	ldr	r3, [pc, #124]	; (8007878 <HAL_RCC_OscConfig+0x854>)
 80077fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fc:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007802:	2b01      	cmp	r3, #1
 8007804:	d031      	beq.n	800786a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	f003 0203 	and.w	r2, r3, #3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007810:	429a      	cmp	r2, r3
 8007812:	d12a      	bne.n	800786a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	091b      	lsrs	r3, r3, #4
 8007818:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007820:	429a      	cmp	r2, r3
 8007822:	d122      	bne.n	800786a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007830:	429a      	cmp	r2, r3
 8007832:	d11a      	bne.n	800786a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	0a5b      	lsrs	r3, r3, #9
 8007838:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007840:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007842:	429a      	cmp	r2, r3
 8007844:	d111      	bne.n	800786a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	0c1b      	lsrs	r3, r3, #16
 800784a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007852:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007854:	429a      	cmp	r2, r3
 8007856:	d108      	bne.n	800786a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	0e1b      	lsrs	r3, r3, #24
 800785c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007864:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007866:	429a      	cmp	r2, r3
 8007868:	d001      	beq.n	800786e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e000      	b.n	8007870 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	3730      	adds	r7, #48	; 0x30
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	58024400 	.word	0x58024400

0800787c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b086      	sub	sp, #24
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d101      	bne.n	8007890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	e19c      	b.n	8007bca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007890:	4b8a      	ldr	r3, [pc, #552]	; (8007abc <HAL_RCC_ClockConfig+0x240>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 030f 	and.w	r3, r3, #15
 8007898:	683a      	ldr	r2, [r7, #0]
 800789a:	429a      	cmp	r2, r3
 800789c:	d910      	bls.n	80078c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800789e:	4b87      	ldr	r3, [pc, #540]	; (8007abc <HAL_RCC_ClockConfig+0x240>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f023 020f 	bic.w	r2, r3, #15
 80078a6:	4985      	ldr	r1, [pc, #532]	; (8007abc <HAL_RCC_ClockConfig+0x240>)
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078ae:	4b83      	ldr	r3, [pc, #524]	; (8007abc <HAL_RCC_ClockConfig+0x240>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f003 030f 	and.w	r3, r3, #15
 80078b6:	683a      	ldr	r2, [r7, #0]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d001      	beq.n	80078c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e184      	b.n	8007bca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0304 	and.w	r3, r3, #4
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d010      	beq.n	80078ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	691a      	ldr	r2, [r3, #16]
 80078d0:	4b7b      	ldr	r3, [pc, #492]	; (8007ac0 <HAL_RCC_ClockConfig+0x244>)
 80078d2:	699b      	ldr	r3, [r3, #24]
 80078d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078d8:	429a      	cmp	r2, r3
 80078da:	d908      	bls.n	80078ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80078dc:	4b78      	ldr	r3, [pc, #480]	; (8007ac0 <HAL_RCC_ClockConfig+0x244>)
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	4975      	ldr	r1, [pc, #468]	; (8007ac0 <HAL_RCC_ClockConfig+0x244>)
 80078ea:	4313      	orrs	r3, r2
 80078ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 0308 	and.w	r3, r3, #8
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d010      	beq.n	800791c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	695a      	ldr	r2, [r3, #20]
 80078fe:	4b70      	ldr	r3, [pc, #448]	; (8007ac0 <HAL_RCC_ClockConfig+0x244>)
 8007900:	69db      	ldr	r3, [r3, #28]
 8007902:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007906:	429a      	cmp	r2, r3
 8007908:	d908      	bls.n	800791c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800790a:	4b6d      	ldr	r3, [pc, #436]	; (8007ac0 <HAL_RCC_ClockConfig+0x244>)
 800790c:	69db      	ldr	r3, [r3, #28]
 800790e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	695b      	ldr	r3, [r3, #20]
 8007916:	496a      	ldr	r1, [pc, #424]	; (8007ac0 <HAL_RCC_ClockConfig+0x244>)
 8007918:	4313      	orrs	r3, r2
 800791a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f003 0310 	and.w	r3, r3, #16
 8007924:	2b00      	cmp	r3, #0
 8007926:	d010      	beq.n	800794a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	699a      	ldr	r2, [r3, #24]
 800792c:	4b64      	ldr	r3, [pc, #400]	; (8007ac0 <HAL_RCC_ClockConfig+0x244>)
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007934:	429a      	cmp	r2, r3
 8007936:	d908      	bls.n	800794a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007938:	4b61      	ldr	r3, [pc, #388]	; (8007ac0 <HAL_RCC_ClockConfig+0x244>)
 800793a:	69db      	ldr	r3, [r3, #28]
 800793c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	495e      	ldr	r1, [pc, #376]	; (8007ac0 <HAL_RCC_ClockConfig+0x244>)
 8007946:	4313      	orrs	r3, r2
 8007948:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 0320 	and.w	r3, r3, #32
 8007952:	2b00      	cmp	r3, #0
 8007954:	d010      	beq.n	8007978 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	69da      	ldr	r2, [r3, #28]
 800795a:	4b59      	ldr	r3, [pc, #356]	; (8007ac0 <HAL_RCC_ClockConfig+0x244>)
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007962:	429a      	cmp	r2, r3
 8007964:	d908      	bls.n	8007978 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007966:	4b56      	ldr	r3, [pc, #344]	; (8007ac0 <HAL_RCC_ClockConfig+0x244>)
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	69db      	ldr	r3, [r3, #28]
 8007972:	4953      	ldr	r1, [pc, #332]	; (8007ac0 <HAL_RCC_ClockConfig+0x244>)
 8007974:	4313      	orrs	r3, r2
 8007976:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 0302 	and.w	r3, r3, #2
 8007980:	2b00      	cmp	r3, #0
 8007982:	d010      	beq.n	80079a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	68da      	ldr	r2, [r3, #12]
 8007988:	4b4d      	ldr	r3, [pc, #308]	; (8007ac0 <HAL_RCC_ClockConfig+0x244>)
 800798a:	699b      	ldr	r3, [r3, #24]
 800798c:	f003 030f 	and.w	r3, r3, #15
 8007990:	429a      	cmp	r2, r3
 8007992:	d908      	bls.n	80079a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007994:	4b4a      	ldr	r3, [pc, #296]	; (8007ac0 <HAL_RCC_ClockConfig+0x244>)
 8007996:	699b      	ldr	r3, [r3, #24]
 8007998:	f023 020f 	bic.w	r2, r3, #15
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	4947      	ldr	r1, [pc, #284]	; (8007ac0 <HAL_RCC_ClockConfig+0x244>)
 80079a2:	4313      	orrs	r3, r2
 80079a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 0301 	and.w	r3, r3, #1
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d055      	beq.n	8007a5e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80079b2:	4b43      	ldr	r3, [pc, #268]	; (8007ac0 <HAL_RCC_ClockConfig+0x244>)
 80079b4:	699b      	ldr	r3, [r3, #24]
 80079b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	4940      	ldr	r1, [pc, #256]	; (8007ac0 <HAL_RCC_ClockConfig+0x244>)
 80079c0:	4313      	orrs	r3, r2
 80079c2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d107      	bne.n	80079dc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079cc:	4b3c      	ldr	r3, [pc, #240]	; (8007ac0 <HAL_RCC_ClockConfig+0x244>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d121      	bne.n	8007a1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e0f6      	b.n	8007bca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	2b03      	cmp	r3, #3
 80079e2:	d107      	bne.n	80079f4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80079e4:	4b36      	ldr	r3, [pc, #216]	; (8007ac0 <HAL_RCC_ClockConfig+0x244>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d115      	bne.n	8007a1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e0ea      	b.n	8007bca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d107      	bne.n	8007a0c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80079fc:	4b30      	ldr	r3, [pc, #192]	; (8007ac0 <HAL_RCC_ClockConfig+0x244>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d109      	bne.n	8007a1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e0de      	b.n	8007bca <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a0c:	4b2c      	ldr	r3, [pc, #176]	; (8007ac0 <HAL_RCC_ClockConfig+0x244>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 0304 	and.w	r3, r3, #4
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d101      	bne.n	8007a1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e0d6      	b.n	8007bca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007a1c:	4b28      	ldr	r3, [pc, #160]	; (8007ac0 <HAL_RCC_ClockConfig+0x244>)
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	f023 0207 	bic.w	r2, r3, #7
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	4925      	ldr	r1, [pc, #148]	; (8007ac0 <HAL_RCC_ClockConfig+0x244>)
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a2e:	f7fb fe99 	bl	8003764 <HAL_GetTick>
 8007a32:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a34:	e00a      	b.n	8007a4c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a36:	f7fb fe95 	bl	8003764 <HAL_GetTick>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	1ad3      	subs	r3, r2, r3
 8007a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d901      	bls.n	8007a4c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	e0be      	b.n	8007bca <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a4c:	4b1c      	ldr	r3, [pc, #112]	; (8007ac0 <HAL_RCC_ClockConfig+0x244>)
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	00db      	lsls	r3, r3, #3
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d1eb      	bne.n	8007a36 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 0302 	and.w	r3, r3, #2
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d010      	beq.n	8007a8c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	68da      	ldr	r2, [r3, #12]
 8007a6e:	4b14      	ldr	r3, [pc, #80]	; (8007ac0 <HAL_RCC_ClockConfig+0x244>)
 8007a70:	699b      	ldr	r3, [r3, #24]
 8007a72:	f003 030f 	and.w	r3, r3, #15
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d208      	bcs.n	8007a8c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a7a:	4b11      	ldr	r3, [pc, #68]	; (8007ac0 <HAL_RCC_ClockConfig+0x244>)
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	f023 020f 	bic.w	r2, r3, #15
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	490e      	ldr	r1, [pc, #56]	; (8007ac0 <HAL_RCC_ClockConfig+0x244>)
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007a8c:	4b0b      	ldr	r3, [pc, #44]	; (8007abc <HAL_RCC_ClockConfig+0x240>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 030f 	and.w	r3, r3, #15
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d214      	bcs.n	8007ac4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a9a:	4b08      	ldr	r3, [pc, #32]	; (8007abc <HAL_RCC_ClockConfig+0x240>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f023 020f 	bic.w	r2, r3, #15
 8007aa2:	4906      	ldr	r1, [pc, #24]	; (8007abc <HAL_RCC_ClockConfig+0x240>)
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007aaa:	4b04      	ldr	r3, [pc, #16]	; (8007abc <HAL_RCC_ClockConfig+0x240>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 030f 	and.w	r3, r3, #15
 8007ab2:	683a      	ldr	r2, [r7, #0]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d005      	beq.n	8007ac4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e086      	b.n	8007bca <HAL_RCC_ClockConfig+0x34e>
 8007abc:	52002000 	.word	0x52002000
 8007ac0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 0304 	and.w	r3, r3, #4
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d010      	beq.n	8007af2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	691a      	ldr	r2, [r3, #16]
 8007ad4:	4b3f      	ldr	r3, [pc, #252]	; (8007bd4 <HAL_RCC_ClockConfig+0x358>)
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d208      	bcs.n	8007af2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007ae0:	4b3c      	ldr	r3, [pc, #240]	; (8007bd4 <HAL_RCC_ClockConfig+0x358>)
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	4939      	ldr	r1, [pc, #228]	; (8007bd4 <HAL_RCC_ClockConfig+0x358>)
 8007aee:	4313      	orrs	r3, r2
 8007af0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0308 	and.w	r3, r3, #8
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d010      	beq.n	8007b20 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	695a      	ldr	r2, [r3, #20]
 8007b02:	4b34      	ldr	r3, [pc, #208]	; (8007bd4 <HAL_RCC_ClockConfig+0x358>)
 8007b04:	69db      	ldr	r3, [r3, #28]
 8007b06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d208      	bcs.n	8007b20 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007b0e:	4b31      	ldr	r3, [pc, #196]	; (8007bd4 <HAL_RCC_ClockConfig+0x358>)
 8007b10:	69db      	ldr	r3, [r3, #28]
 8007b12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	695b      	ldr	r3, [r3, #20]
 8007b1a:	492e      	ldr	r1, [pc, #184]	; (8007bd4 <HAL_RCC_ClockConfig+0x358>)
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 0310 	and.w	r3, r3, #16
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d010      	beq.n	8007b4e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	699a      	ldr	r2, [r3, #24]
 8007b30:	4b28      	ldr	r3, [pc, #160]	; (8007bd4 <HAL_RCC_ClockConfig+0x358>)
 8007b32:	69db      	ldr	r3, [r3, #28]
 8007b34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d208      	bcs.n	8007b4e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007b3c:	4b25      	ldr	r3, [pc, #148]	; (8007bd4 <HAL_RCC_ClockConfig+0x358>)
 8007b3e:	69db      	ldr	r3, [r3, #28]
 8007b40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	4922      	ldr	r1, [pc, #136]	; (8007bd4 <HAL_RCC_ClockConfig+0x358>)
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 0320 	and.w	r3, r3, #32
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d010      	beq.n	8007b7c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	69da      	ldr	r2, [r3, #28]
 8007b5e:	4b1d      	ldr	r3, [pc, #116]	; (8007bd4 <HAL_RCC_ClockConfig+0x358>)
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d208      	bcs.n	8007b7c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007b6a:	4b1a      	ldr	r3, [pc, #104]	; (8007bd4 <HAL_RCC_ClockConfig+0x358>)
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	69db      	ldr	r3, [r3, #28]
 8007b76:	4917      	ldr	r1, [pc, #92]	; (8007bd4 <HAL_RCC_ClockConfig+0x358>)
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007b7c:	f000 f834 	bl	8007be8 <HAL_RCC_GetSysClockFreq>
 8007b80:	4602      	mov	r2, r0
 8007b82:	4b14      	ldr	r3, [pc, #80]	; (8007bd4 <HAL_RCC_ClockConfig+0x358>)
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	0a1b      	lsrs	r3, r3, #8
 8007b88:	f003 030f 	and.w	r3, r3, #15
 8007b8c:	4912      	ldr	r1, [pc, #72]	; (8007bd8 <HAL_RCC_ClockConfig+0x35c>)
 8007b8e:	5ccb      	ldrb	r3, [r1, r3]
 8007b90:	f003 031f 	and.w	r3, r3, #31
 8007b94:	fa22 f303 	lsr.w	r3, r2, r3
 8007b98:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007b9a:	4b0e      	ldr	r3, [pc, #56]	; (8007bd4 <HAL_RCC_ClockConfig+0x358>)
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	f003 030f 	and.w	r3, r3, #15
 8007ba2:	4a0d      	ldr	r2, [pc, #52]	; (8007bd8 <HAL_RCC_ClockConfig+0x35c>)
 8007ba4:	5cd3      	ldrb	r3, [r2, r3]
 8007ba6:	f003 031f 	and.w	r3, r3, #31
 8007baa:	693a      	ldr	r2, [r7, #16]
 8007bac:	fa22 f303 	lsr.w	r3, r2, r3
 8007bb0:	4a0a      	ldr	r2, [pc, #40]	; (8007bdc <HAL_RCC_ClockConfig+0x360>)
 8007bb2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007bb4:	4a0a      	ldr	r2, [pc, #40]	; (8007be0 <HAL_RCC_ClockConfig+0x364>)
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007bba:	4b0a      	ldr	r3, [pc, #40]	; (8007be4 <HAL_RCC_ClockConfig+0x368>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7fb fd86 	bl	80036d0 <HAL_InitTick>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3718      	adds	r7, #24
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	58024400 	.word	0x58024400
 8007bd8:	0800cf98 	.word	0x0800cf98
 8007bdc:	24000004 	.word	0x24000004
 8007be0:	24000000 	.word	0x24000000
 8007be4:	24047b9c 	.word	0x24047b9c

08007be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b089      	sub	sp, #36	; 0x24
 8007bec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007bee:	4bb3      	ldr	r3, [pc, #716]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007bf6:	2b18      	cmp	r3, #24
 8007bf8:	f200 8155 	bhi.w	8007ea6 <HAL_RCC_GetSysClockFreq+0x2be>
 8007bfc:	a201      	add	r2, pc, #4	; (adr r2, 8007c04 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c02:	bf00      	nop
 8007c04:	08007c69 	.word	0x08007c69
 8007c08:	08007ea7 	.word	0x08007ea7
 8007c0c:	08007ea7 	.word	0x08007ea7
 8007c10:	08007ea7 	.word	0x08007ea7
 8007c14:	08007ea7 	.word	0x08007ea7
 8007c18:	08007ea7 	.word	0x08007ea7
 8007c1c:	08007ea7 	.word	0x08007ea7
 8007c20:	08007ea7 	.word	0x08007ea7
 8007c24:	08007c8f 	.word	0x08007c8f
 8007c28:	08007ea7 	.word	0x08007ea7
 8007c2c:	08007ea7 	.word	0x08007ea7
 8007c30:	08007ea7 	.word	0x08007ea7
 8007c34:	08007ea7 	.word	0x08007ea7
 8007c38:	08007ea7 	.word	0x08007ea7
 8007c3c:	08007ea7 	.word	0x08007ea7
 8007c40:	08007ea7 	.word	0x08007ea7
 8007c44:	08007c95 	.word	0x08007c95
 8007c48:	08007ea7 	.word	0x08007ea7
 8007c4c:	08007ea7 	.word	0x08007ea7
 8007c50:	08007ea7 	.word	0x08007ea7
 8007c54:	08007ea7 	.word	0x08007ea7
 8007c58:	08007ea7 	.word	0x08007ea7
 8007c5c:	08007ea7 	.word	0x08007ea7
 8007c60:	08007ea7 	.word	0x08007ea7
 8007c64:	08007c9b 	.word	0x08007c9b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c68:	4b94      	ldr	r3, [pc, #592]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 0320 	and.w	r3, r3, #32
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d009      	beq.n	8007c88 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c74:	4b91      	ldr	r3, [pc, #580]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	08db      	lsrs	r3, r3, #3
 8007c7a:	f003 0303 	and.w	r3, r3, #3
 8007c7e:	4a90      	ldr	r2, [pc, #576]	; (8007ec0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c80:	fa22 f303 	lsr.w	r3, r2, r3
 8007c84:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007c86:	e111      	b.n	8007eac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007c88:	4b8d      	ldr	r3, [pc, #564]	; (8007ec0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c8a:	61bb      	str	r3, [r7, #24]
    break;
 8007c8c:	e10e      	b.n	8007eac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007c8e:	4b8d      	ldr	r3, [pc, #564]	; (8007ec4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007c90:	61bb      	str	r3, [r7, #24]
    break;
 8007c92:	e10b      	b.n	8007eac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007c94:	4b8c      	ldr	r3, [pc, #560]	; (8007ec8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007c96:	61bb      	str	r3, [r7, #24]
    break;
 8007c98:	e108      	b.n	8007eac <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c9a:	4b88      	ldr	r3, [pc, #544]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9e:	f003 0303 	and.w	r3, r3, #3
 8007ca2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007ca4:	4b85      	ldr	r3, [pc, #532]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca8:	091b      	lsrs	r3, r3, #4
 8007caa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007cb0:	4b82      	ldr	r3, [pc, #520]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb4:	f003 0301 	and.w	r3, r3, #1
 8007cb8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007cba:	4b80      	ldr	r3, [pc, #512]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cbe:	08db      	lsrs	r3, r3, #3
 8007cc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	fb02 f303 	mul.w	r3, r2, r3
 8007cca:	ee07 3a90 	vmov	s15, r3
 8007cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cd2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f000 80e1 	beq.w	8007ea0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	f000 8083 	beq.w	8007dec <HAL_RCC_GetSysClockFreq+0x204>
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	f200 80a1 	bhi.w	8007e30 <HAL_RCC_GetSysClockFreq+0x248>
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d003      	beq.n	8007cfc <HAL_RCC_GetSysClockFreq+0x114>
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d056      	beq.n	8007da8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007cfa:	e099      	b.n	8007e30 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cfc:	4b6f      	ldr	r3, [pc, #444]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0320 	and.w	r3, r3, #32
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d02d      	beq.n	8007d64 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d08:	4b6c      	ldr	r3, [pc, #432]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	08db      	lsrs	r3, r3, #3
 8007d0e:	f003 0303 	and.w	r3, r3, #3
 8007d12:	4a6b      	ldr	r2, [pc, #428]	; (8007ec0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007d14:	fa22 f303 	lsr.w	r3, r2, r3
 8007d18:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	ee07 3a90 	vmov	s15, r3
 8007d20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	ee07 3a90 	vmov	s15, r3
 8007d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d32:	4b62      	ldr	r3, [pc, #392]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d3a:	ee07 3a90 	vmov	s15, r3
 8007d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d42:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d46:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007ecc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007d62:	e087      	b.n	8007e74 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	ee07 3a90 	vmov	s15, r3
 8007d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d6e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007ed0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d76:	4b51      	ldr	r3, [pc, #324]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d7e:	ee07 3a90 	vmov	s15, r3
 8007d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d86:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d8a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007ecc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007da2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007da6:	e065      	b.n	8007e74 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	ee07 3a90 	vmov	s15, r3
 8007dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007db2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007ed4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dba:	4b40      	ldr	r3, [pc, #256]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc2:	ee07 3a90 	vmov	s15, r3
 8007dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dca:	ed97 6a02 	vldr	s12, [r7, #8]
 8007dce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007ecc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007de6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dea:	e043      	b.n	8007e74 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	ee07 3a90 	vmov	s15, r3
 8007df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007df6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007ed8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dfe:	4b2f      	ldr	r3, [pc, #188]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e06:	ee07 3a90 	vmov	s15, r3
 8007e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e12:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007ecc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e2e:	e021      	b.n	8007e74 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	ee07 3a90 	vmov	s15, r3
 8007e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e3a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007ed4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e42:	4b1e      	ldr	r3, [pc, #120]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e4a:	ee07 3a90 	vmov	s15, r3
 8007e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e52:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e56:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007ecc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e72:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007e74:	4b11      	ldr	r3, [pc, #68]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e78:	0a5b      	lsrs	r3, r3, #9
 8007e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e7e:	3301      	adds	r3, #1
 8007e80:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	ee07 3a90 	vmov	s15, r3
 8007e88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007e8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e98:	ee17 3a90 	vmov	r3, s15
 8007e9c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007e9e:	e005      	b.n	8007eac <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	61bb      	str	r3, [r7, #24]
    break;
 8007ea4:	e002      	b.n	8007eac <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007ea6:	4b07      	ldr	r3, [pc, #28]	; (8007ec4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007ea8:	61bb      	str	r3, [r7, #24]
    break;
 8007eaa:	bf00      	nop
  }

  return sysclockfreq;
 8007eac:	69bb      	ldr	r3, [r7, #24]
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3724      	adds	r7, #36	; 0x24
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	58024400 	.word	0x58024400
 8007ec0:	03d09000 	.word	0x03d09000
 8007ec4:	003d0900 	.word	0x003d0900
 8007ec8:	007a1200 	.word	0x007a1200
 8007ecc:	46000000 	.word	0x46000000
 8007ed0:	4c742400 	.word	0x4c742400
 8007ed4:	4a742400 	.word	0x4a742400
 8007ed8:	4af42400 	.word	0x4af42400

08007edc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007ee2:	f7ff fe81 	bl	8007be8 <HAL_RCC_GetSysClockFreq>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	4b10      	ldr	r3, [pc, #64]	; (8007f2c <HAL_RCC_GetHCLKFreq+0x50>)
 8007eea:	699b      	ldr	r3, [r3, #24]
 8007eec:	0a1b      	lsrs	r3, r3, #8
 8007eee:	f003 030f 	and.w	r3, r3, #15
 8007ef2:	490f      	ldr	r1, [pc, #60]	; (8007f30 <HAL_RCC_GetHCLKFreq+0x54>)
 8007ef4:	5ccb      	ldrb	r3, [r1, r3]
 8007ef6:	f003 031f 	and.w	r3, r3, #31
 8007efa:	fa22 f303 	lsr.w	r3, r2, r3
 8007efe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007f00:	4b0a      	ldr	r3, [pc, #40]	; (8007f2c <HAL_RCC_GetHCLKFreq+0x50>)
 8007f02:	699b      	ldr	r3, [r3, #24]
 8007f04:	f003 030f 	and.w	r3, r3, #15
 8007f08:	4a09      	ldr	r2, [pc, #36]	; (8007f30 <HAL_RCC_GetHCLKFreq+0x54>)
 8007f0a:	5cd3      	ldrb	r3, [r2, r3]
 8007f0c:	f003 031f 	and.w	r3, r3, #31
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	fa22 f303 	lsr.w	r3, r2, r3
 8007f16:	4a07      	ldr	r2, [pc, #28]	; (8007f34 <HAL_RCC_GetHCLKFreq+0x58>)
 8007f18:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007f1a:	4a07      	ldr	r2, [pc, #28]	; (8007f38 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007f20:	4b04      	ldr	r3, [pc, #16]	; (8007f34 <HAL_RCC_GetHCLKFreq+0x58>)
 8007f22:	681b      	ldr	r3, [r3, #0]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	58024400 	.word	0x58024400
 8007f30:	0800cf98 	.word	0x0800cf98
 8007f34:	24000004 	.word	0x24000004
 8007f38:	24000000 	.word	0x24000000

08007f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007f40:	f7ff ffcc 	bl	8007edc <HAL_RCC_GetHCLKFreq>
 8007f44:	4602      	mov	r2, r0
 8007f46:	4b06      	ldr	r3, [pc, #24]	; (8007f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f48:	69db      	ldr	r3, [r3, #28]
 8007f4a:	091b      	lsrs	r3, r3, #4
 8007f4c:	f003 0307 	and.w	r3, r3, #7
 8007f50:	4904      	ldr	r1, [pc, #16]	; (8007f64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007f52:	5ccb      	ldrb	r3, [r1, r3]
 8007f54:	f003 031f 	and.w	r3, r3, #31
 8007f58:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	58024400 	.word	0x58024400
 8007f64:	0800cf98 	.word	0x0800cf98

08007f68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007f6c:	f7ff ffb6 	bl	8007edc <HAL_RCC_GetHCLKFreq>
 8007f70:	4602      	mov	r2, r0
 8007f72:	4b06      	ldr	r3, [pc, #24]	; (8007f8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f74:	69db      	ldr	r3, [r3, #28]
 8007f76:	0a1b      	lsrs	r3, r3, #8
 8007f78:	f003 0307 	and.w	r3, r3, #7
 8007f7c:	4904      	ldr	r1, [pc, #16]	; (8007f90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007f7e:	5ccb      	ldrb	r3, [r1, r3]
 8007f80:	f003 031f 	and.w	r3, r3, #31
 8007f84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	58024400 	.word	0x58024400
 8007f90:	0800cf98 	.word	0x0800cf98

08007f94 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b086      	sub	sp, #24
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d03f      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fb4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007fb8:	d02a      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007fba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007fbe:	d824      	bhi.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007fc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007fc4:	d018      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007fc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007fca:	d81e      	bhi.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d003      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007fd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fd4:	d007      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007fd6:	e018      	b.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fd8:	4bab      	ldr	r3, [pc, #684]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fdc:	4aaa      	ldr	r2, [pc, #680]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fe2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007fe4:	e015      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	3304      	adds	r3, #4
 8007fea:	2102      	movs	r1, #2
 8007fec:	4618      	mov	r0, r3
 8007fee:	f001 f9cf 	bl	8009390 <RCCEx_PLL2_Config>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007ff6:	e00c      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	3324      	adds	r3, #36	; 0x24
 8007ffc:	2102      	movs	r1, #2
 8007ffe:	4618      	mov	r0, r3
 8008000:	f001 fa78 	bl	80094f4 <RCCEx_PLL3_Config>
 8008004:	4603      	mov	r3, r0
 8008006:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008008:	e003      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	75fb      	strb	r3, [r7, #23]
      break;
 800800e:	e000      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008010:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008012:	7dfb      	ldrb	r3, [r7, #23]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d109      	bne.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008018:	4b9b      	ldr	r3, [pc, #620]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800801a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800801c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008024:	4998      	ldr	r1, [pc, #608]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008026:	4313      	orrs	r3, r2
 8008028:	650b      	str	r3, [r1, #80]	; 0x50
 800802a:	e001      	b.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800802c:	7dfb      	ldrb	r3, [r7, #23]
 800802e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008038:	2b00      	cmp	r3, #0
 800803a:	d03d      	beq.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008040:	2b04      	cmp	r3, #4
 8008042:	d826      	bhi.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008044:	a201      	add	r2, pc, #4	; (adr r2, 800804c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804a:	bf00      	nop
 800804c:	08008061 	.word	0x08008061
 8008050:	0800806f 	.word	0x0800806f
 8008054:	08008081 	.word	0x08008081
 8008058:	08008099 	.word	0x08008099
 800805c:	08008099 	.word	0x08008099
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008060:	4b89      	ldr	r3, [pc, #548]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008064:	4a88      	ldr	r2, [pc, #544]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800806a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800806c:	e015      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	3304      	adds	r3, #4
 8008072:	2100      	movs	r1, #0
 8008074:	4618      	mov	r0, r3
 8008076:	f001 f98b 	bl	8009390 <RCCEx_PLL2_Config>
 800807a:	4603      	mov	r3, r0
 800807c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800807e:	e00c      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	3324      	adds	r3, #36	; 0x24
 8008084:	2100      	movs	r1, #0
 8008086:	4618      	mov	r0, r3
 8008088:	f001 fa34 	bl	80094f4 <RCCEx_PLL3_Config>
 800808c:	4603      	mov	r3, r0
 800808e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008090:	e003      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	75fb      	strb	r3, [r7, #23]
      break;
 8008096:	e000      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008098:	bf00      	nop
    }

    if(ret == HAL_OK)
 800809a:	7dfb      	ldrb	r3, [r7, #23]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d109      	bne.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80080a0:	4b79      	ldr	r3, [pc, #484]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080a4:	f023 0207 	bic.w	r2, r3, #7
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ac:	4976      	ldr	r1, [pc, #472]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080ae:	4313      	orrs	r3, r2
 80080b0:	650b      	str	r3, [r1, #80]	; 0x50
 80080b2:	e001      	b.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080b4:	7dfb      	ldrb	r3, [r7, #23]
 80080b6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d042      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080cc:	d02b      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80080ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080d2:	d825      	bhi.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80080d4:	2bc0      	cmp	r3, #192	; 0xc0
 80080d6:	d028      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80080d8:	2bc0      	cmp	r3, #192	; 0xc0
 80080da:	d821      	bhi.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80080dc:	2b80      	cmp	r3, #128	; 0x80
 80080de:	d016      	beq.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80080e0:	2b80      	cmp	r3, #128	; 0x80
 80080e2:	d81d      	bhi.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d002      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80080e8:	2b40      	cmp	r3, #64	; 0x40
 80080ea:	d007      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x168>
 80080ec:	e018      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080ee:	4b66      	ldr	r3, [pc, #408]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f2:	4a65      	ldr	r2, [pc, #404]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80080fa:	e017      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	3304      	adds	r3, #4
 8008100:	2100      	movs	r1, #0
 8008102:	4618      	mov	r0, r3
 8008104:	f001 f944 	bl	8009390 <RCCEx_PLL2_Config>
 8008108:	4603      	mov	r3, r0
 800810a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800810c:	e00e      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	3324      	adds	r3, #36	; 0x24
 8008112:	2100      	movs	r1, #0
 8008114:	4618      	mov	r0, r3
 8008116:	f001 f9ed 	bl	80094f4 <RCCEx_PLL3_Config>
 800811a:	4603      	mov	r3, r0
 800811c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800811e:	e005      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	75fb      	strb	r3, [r7, #23]
      break;
 8008124:	e002      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008126:	bf00      	nop
 8008128:	e000      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800812a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800812c:	7dfb      	ldrb	r3, [r7, #23]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d109      	bne.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008132:	4b55      	ldr	r3, [pc, #340]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008136:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800813e:	4952      	ldr	r1, [pc, #328]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008140:	4313      	orrs	r3, r2
 8008142:	650b      	str	r3, [r1, #80]	; 0x50
 8008144:	e001      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008146:	7dfb      	ldrb	r3, [r7, #23]
 8008148:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008152:	2b00      	cmp	r3, #0
 8008154:	d049      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800815c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008160:	d030      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008162:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008166:	d82a      	bhi.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008168:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800816c:	d02c      	beq.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800816e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008172:	d824      	bhi.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008174:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008178:	d018      	beq.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x218>
 800817a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800817e:	d81e      	bhi.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008180:	2b00      	cmp	r3, #0
 8008182:	d003      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008184:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008188:	d007      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800818a:	e018      	b.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800818c:	4b3e      	ldr	r3, [pc, #248]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800818e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008190:	4a3d      	ldr	r2, [pc, #244]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008196:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008198:	e017      	b.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	3304      	adds	r3, #4
 800819e:	2100      	movs	r1, #0
 80081a0:	4618      	mov	r0, r3
 80081a2:	f001 f8f5 	bl	8009390 <RCCEx_PLL2_Config>
 80081a6:	4603      	mov	r3, r0
 80081a8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80081aa:	e00e      	b.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	3324      	adds	r3, #36	; 0x24
 80081b0:	2100      	movs	r1, #0
 80081b2:	4618      	mov	r0, r3
 80081b4:	f001 f99e 	bl	80094f4 <RCCEx_PLL3_Config>
 80081b8:	4603      	mov	r3, r0
 80081ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80081bc:	e005      	b.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	75fb      	strb	r3, [r7, #23]
      break;
 80081c2:	e002      	b.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80081c4:	bf00      	nop
 80081c6:	e000      	b.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80081c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081ca:	7dfb      	ldrb	r3, [r7, #23]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d10a      	bne.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80081d0:	4b2d      	ldr	r3, [pc, #180]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081d4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80081de:	492a      	ldr	r1, [pc, #168]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081e0:	4313      	orrs	r3, r2
 80081e2:	658b      	str	r3, [r1, #88]	; 0x58
 80081e4:	e001      	b.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081e6:	7dfb      	ldrb	r3, [r7, #23]
 80081e8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d04c      	beq.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80081fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008200:	d030      	beq.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008202:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008206:	d82a      	bhi.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008208:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800820c:	d02c      	beq.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800820e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008212:	d824      	bhi.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008214:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008218:	d018      	beq.n	800824c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800821a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800821e:	d81e      	bhi.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008220:	2b00      	cmp	r3, #0
 8008222:	d003      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008228:	d007      	beq.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800822a:	e018      	b.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800822c:	4b16      	ldr	r3, [pc, #88]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800822e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008230:	4a15      	ldr	r2, [pc, #84]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008236:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008238:	e017      	b.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	3304      	adds	r3, #4
 800823e:	2100      	movs	r1, #0
 8008240:	4618      	mov	r0, r3
 8008242:	f001 f8a5 	bl	8009390 <RCCEx_PLL2_Config>
 8008246:	4603      	mov	r3, r0
 8008248:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800824a:	e00e      	b.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	3324      	adds	r3, #36	; 0x24
 8008250:	2100      	movs	r1, #0
 8008252:	4618      	mov	r0, r3
 8008254:	f001 f94e 	bl	80094f4 <RCCEx_PLL3_Config>
 8008258:	4603      	mov	r3, r0
 800825a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800825c:	e005      	b.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	75fb      	strb	r3, [r7, #23]
      break;
 8008262:	e002      	b.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008264:	bf00      	nop
 8008266:	e000      	b.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008268:	bf00      	nop
    }

    if(ret == HAL_OK)
 800826a:	7dfb      	ldrb	r3, [r7, #23]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10d      	bne.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008270:	4b05      	ldr	r3, [pc, #20]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008274:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800827e:	4902      	ldr	r1, [pc, #8]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008280:	4313      	orrs	r3, r2
 8008282:	658b      	str	r3, [r1, #88]	; 0x58
 8008284:	e004      	b.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008286:	bf00      	nop
 8008288:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800828c:	7dfb      	ldrb	r3, [r7, #23]
 800828e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008298:	2b00      	cmp	r3, #0
 800829a:	d032      	beq.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082a0:	2b30      	cmp	r3, #48	; 0x30
 80082a2:	d01c      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80082a4:	2b30      	cmp	r3, #48	; 0x30
 80082a6:	d817      	bhi.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80082a8:	2b20      	cmp	r3, #32
 80082aa:	d00c      	beq.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80082ac:	2b20      	cmp	r3, #32
 80082ae:	d813      	bhi.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d016      	beq.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80082b4:	2b10      	cmp	r3, #16
 80082b6:	d10f      	bne.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082b8:	4baf      	ldr	r3, [pc, #700]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80082ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082bc:	4aae      	ldr	r2, [pc, #696]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80082be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80082c4:	e00e      	b.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	3304      	adds	r3, #4
 80082ca:	2102      	movs	r1, #2
 80082cc:	4618      	mov	r0, r3
 80082ce:	f001 f85f 	bl	8009390 <RCCEx_PLL2_Config>
 80082d2:	4603      	mov	r3, r0
 80082d4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80082d6:	e005      	b.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	75fb      	strb	r3, [r7, #23]
      break;
 80082dc:	e002      	b.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80082de:	bf00      	nop
 80082e0:	e000      	b.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80082e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082e4:	7dfb      	ldrb	r3, [r7, #23]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d109      	bne.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80082ea:	4ba3      	ldr	r3, [pc, #652]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80082ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082f6:	49a0      	ldr	r1, [pc, #640]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80082f8:	4313      	orrs	r3, r2
 80082fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80082fc:	e001      	b.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082fe:	7dfb      	ldrb	r3, [r7, #23]
 8008300:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800830a:	2b00      	cmp	r3, #0
 800830c:	d047      	beq.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008312:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008316:	d030      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008318:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800831c:	d82a      	bhi.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800831e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008322:	d02c      	beq.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8008324:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008328:	d824      	bhi.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800832a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800832e:	d018      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8008330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008334:	d81e      	bhi.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008336:	2b00      	cmp	r3, #0
 8008338:	d003      	beq.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800833a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800833e:	d007      	beq.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008340:	e018      	b.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008342:	4b8d      	ldr	r3, [pc, #564]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008346:	4a8c      	ldr	r2, [pc, #560]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800834c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800834e:	e017      	b.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	3304      	adds	r3, #4
 8008354:	2100      	movs	r1, #0
 8008356:	4618      	mov	r0, r3
 8008358:	f001 f81a 	bl	8009390 <RCCEx_PLL2_Config>
 800835c:	4603      	mov	r3, r0
 800835e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008360:	e00e      	b.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	3324      	adds	r3, #36	; 0x24
 8008366:	2100      	movs	r1, #0
 8008368:	4618      	mov	r0, r3
 800836a:	f001 f8c3 	bl	80094f4 <RCCEx_PLL3_Config>
 800836e:	4603      	mov	r3, r0
 8008370:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008372:	e005      	b.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	75fb      	strb	r3, [r7, #23]
      break;
 8008378:	e002      	b.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800837a:	bf00      	nop
 800837c:	e000      	b.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800837e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008380:	7dfb      	ldrb	r3, [r7, #23]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d109      	bne.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008386:	4b7c      	ldr	r3, [pc, #496]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800838a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008392:	4979      	ldr	r1, [pc, #484]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008394:	4313      	orrs	r3, r2
 8008396:	650b      	str	r3, [r1, #80]	; 0x50
 8008398:	e001      	b.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800839a:	7dfb      	ldrb	r3, [r7, #23]
 800839c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d049      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083b2:	d02e      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80083b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083b8:	d828      	bhi.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80083ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80083be:	d02a      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80083c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80083c4:	d822      	bhi.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80083c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80083ca:	d026      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80083cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80083d0:	d81c      	bhi.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80083d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083d6:	d010      	beq.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x466>
 80083d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083dc:	d816      	bhi.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d01d      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80083e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083e6:	d111      	bne.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	3304      	adds	r3, #4
 80083ec:	2101      	movs	r1, #1
 80083ee:	4618      	mov	r0, r3
 80083f0:	f000 ffce 	bl	8009390 <RCCEx_PLL2_Config>
 80083f4:	4603      	mov	r3, r0
 80083f6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80083f8:	e012      	b.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	3324      	adds	r3, #36	; 0x24
 80083fe:	2101      	movs	r1, #1
 8008400:	4618      	mov	r0, r3
 8008402:	f001 f877 	bl	80094f4 <RCCEx_PLL3_Config>
 8008406:	4603      	mov	r3, r0
 8008408:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800840a:	e009      	b.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	75fb      	strb	r3, [r7, #23]
      break;
 8008410:	e006      	b.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008412:	bf00      	nop
 8008414:	e004      	b.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008416:	bf00      	nop
 8008418:	e002      	b.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800841a:	bf00      	nop
 800841c:	e000      	b.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800841e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008420:	7dfb      	ldrb	r3, [r7, #23]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d109      	bne.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008426:	4b54      	ldr	r3, [pc, #336]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800842a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008432:	4951      	ldr	r1, [pc, #324]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008434:	4313      	orrs	r3, r2
 8008436:	650b      	str	r3, [r1, #80]	; 0x50
 8008438:	e001      	b.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800843a:	7dfb      	ldrb	r3, [r7, #23]
 800843c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008446:	2b00      	cmp	r3, #0
 8008448:	d04b      	beq.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008450:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008454:	d02e      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8008456:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800845a:	d828      	bhi.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800845c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008460:	d02a      	beq.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8008462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008466:	d822      	bhi.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008468:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800846c:	d026      	beq.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x528>
 800846e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008472:	d81c      	bhi.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008474:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008478:	d010      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800847a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800847e:	d816      	bhi.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008480:	2b00      	cmp	r3, #0
 8008482:	d01d      	beq.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8008484:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008488:	d111      	bne.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	3304      	adds	r3, #4
 800848e:	2101      	movs	r1, #1
 8008490:	4618      	mov	r0, r3
 8008492:	f000 ff7d 	bl	8009390 <RCCEx_PLL2_Config>
 8008496:	4603      	mov	r3, r0
 8008498:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800849a:	e012      	b.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	3324      	adds	r3, #36	; 0x24
 80084a0:	2101      	movs	r1, #1
 80084a2:	4618      	mov	r0, r3
 80084a4:	f001 f826 	bl	80094f4 <RCCEx_PLL3_Config>
 80084a8:	4603      	mov	r3, r0
 80084aa:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80084ac:	e009      	b.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	75fb      	strb	r3, [r7, #23]
      break;
 80084b2:	e006      	b.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80084b4:	bf00      	nop
 80084b6:	e004      	b.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80084b8:	bf00      	nop
 80084ba:	e002      	b.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80084bc:	bf00      	nop
 80084be:	e000      	b.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80084c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084c2:	7dfb      	ldrb	r3, [r7, #23]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d10a      	bne.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80084c8:	4b2b      	ldr	r3, [pc, #172]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80084ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084cc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80084d6:	4928      	ldr	r1, [pc, #160]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80084d8:	4313      	orrs	r3, r2
 80084da:	658b      	str	r3, [r1, #88]	; 0x58
 80084dc:	e001      	b.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084de:	7dfb      	ldrb	r3, [r7, #23]
 80084e0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d02f      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084f6:	d00e      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80084f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084fc:	d814      	bhi.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d015      	beq.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008502:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008506:	d10f      	bne.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008508:	4b1b      	ldr	r3, [pc, #108]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800850a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800850c:	4a1a      	ldr	r2, [pc, #104]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800850e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008512:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008514:	e00c      	b.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	3304      	adds	r3, #4
 800851a:	2101      	movs	r1, #1
 800851c:	4618      	mov	r0, r3
 800851e:	f000 ff37 	bl	8009390 <RCCEx_PLL2_Config>
 8008522:	4603      	mov	r3, r0
 8008524:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008526:	e003      	b.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	75fb      	strb	r3, [r7, #23]
      break;
 800852c:	e000      	b.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800852e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008530:	7dfb      	ldrb	r3, [r7, #23]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d109      	bne.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008536:	4b10      	ldr	r3, [pc, #64]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800853a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008542:	490d      	ldr	r1, [pc, #52]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008544:	4313      	orrs	r3, r2
 8008546:	650b      	str	r3, [r1, #80]	; 0x50
 8008548:	e001      	b.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800854a:	7dfb      	ldrb	r3, [r7, #23]
 800854c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008556:	2b00      	cmp	r3, #0
 8008558:	d033      	beq.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800855e:	2b03      	cmp	r3, #3
 8008560:	d81c      	bhi.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008562:	a201      	add	r2, pc, #4	; (adr r2, 8008568 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8008564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008568:	080085a3 	.word	0x080085a3
 800856c:	0800857d 	.word	0x0800857d
 8008570:	0800858b 	.word	0x0800858b
 8008574:	080085a3 	.word	0x080085a3
 8008578:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800857c:	4bb8      	ldr	r3, [pc, #736]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800857e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008580:	4ab7      	ldr	r2, [pc, #732]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008586:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008588:	e00c      	b.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	3304      	adds	r3, #4
 800858e:	2102      	movs	r1, #2
 8008590:	4618      	mov	r0, r3
 8008592:	f000 fefd 	bl	8009390 <RCCEx_PLL2_Config>
 8008596:	4603      	mov	r3, r0
 8008598:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800859a:	e003      	b.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	75fb      	strb	r3, [r7, #23]
      break;
 80085a0:	e000      	b.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80085a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085a4:	7dfb      	ldrb	r3, [r7, #23]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d109      	bne.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80085aa:	4bad      	ldr	r3, [pc, #692]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80085ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085ae:	f023 0203 	bic.w	r2, r3, #3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085b6:	49aa      	ldr	r1, [pc, #680]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80085b8:	4313      	orrs	r3, r2
 80085ba:	64cb      	str	r3, [r1, #76]	; 0x4c
 80085bc:	e001      	b.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085be:	7dfb      	ldrb	r3, [r7, #23]
 80085c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f000 8086 	beq.w	80086dc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80085d0:	4ba4      	ldr	r3, [pc, #656]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4aa3      	ldr	r2, [pc, #652]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80085d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80085dc:	f7fb f8c2 	bl	8003764 <HAL_GetTick>
 80085e0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085e2:	e009      	b.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085e4:	f7fb f8be 	bl	8003764 <HAL_GetTick>
 80085e8:	4602      	mov	r2, r0
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	1ad3      	subs	r3, r2, r3
 80085ee:	2b64      	cmp	r3, #100	; 0x64
 80085f0:	d902      	bls.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80085f2:	2303      	movs	r3, #3
 80085f4:	75fb      	strb	r3, [r7, #23]
        break;
 80085f6:	e005      	b.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085f8:	4b9a      	ldr	r3, [pc, #616]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008600:	2b00      	cmp	r3, #0
 8008602:	d0ef      	beq.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008604:	7dfb      	ldrb	r3, [r7, #23]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d166      	bne.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800860a:	4b95      	ldr	r3, [pc, #596]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800860c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008614:	4053      	eors	r3, r2
 8008616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800861a:	2b00      	cmp	r3, #0
 800861c:	d013      	beq.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800861e:	4b90      	ldr	r3, [pc, #576]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008626:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008628:	4b8d      	ldr	r3, [pc, #564]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800862a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800862c:	4a8c      	ldr	r2, [pc, #560]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800862e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008632:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008634:	4b8a      	ldr	r3, [pc, #552]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008638:	4a89      	ldr	r2, [pc, #548]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800863a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800863e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008640:	4a87      	ldr	r2, [pc, #540]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800864c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008650:	d115      	bne.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008652:	f7fb f887 	bl	8003764 <HAL_GetTick>
 8008656:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008658:	e00b      	b.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800865a:	f7fb f883 	bl	8003764 <HAL_GetTick>
 800865e:	4602      	mov	r2, r0
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	f241 3288 	movw	r2, #5000	; 0x1388
 8008668:	4293      	cmp	r3, r2
 800866a:	d902      	bls.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800866c:	2303      	movs	r3, #3
 800866e:	75fb      	strb	r3, [r7, #23]
            break;
 8008670:	e005      	b.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008672:	4b7b      	ldr	r3, [pc, #492]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008676:	f003 0302 	and.w	r3, r3, #2
 800867a:	2b00      	cmp	r3, #0
 800867c:	d0ed      	beq.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800867e:	7dfb      	ldrb	r3, [r7, #23]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d126      	bne.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800868a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800868e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008692:	d10d      	bne.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008694:	4b72      	ldr	r3, [pc, #456]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80086a2:	0919      	lsrs	r1, r3, #4
 80086a4:	4b70      	ldr	r3, [pc, #448]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80086a6:	400b      	ands	r3, r1
 80086a8:	496d      	ldr	r1, [pc, #436]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80086aa:	4313      	orrs	r3, r2
 80086ac:	610b      	str	r3, [r1, #16]
 80086ae:	e005      	b.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x728>
 80086b0:	4b6b      	ldr	r3, [pc, #428]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80086b2:	691b      	ldr	r3, [r3, #16]
 80086b4:	4a6a      	ldr	r2, [pc, #424]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80086b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80086ba:	6113      	str	r3, [r2, #16]
 80086bc:	4b68      	ldr	r3, [pc, #416]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80086be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80086c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086ca:	4965      	ldr	r1, [pc, #404]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80086cc:	4313      	orrs	r3, r2
 80086ce:	670b      	str	r3, [r1, #112]	; 0x70
 80086d0:	e004      	b.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80086d2:	7dfb      	ldrb	r3, [r7, #23]
 80086d4:	75bb      	strb	r3, [r7, #22]
 80086d6:	e001      	b.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086d8:	7dfb      	ldrb	r3, [r7, #23]
 80086da:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f003 0301 	and.w	r3, r3, #1
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d07e      	beq.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086ec:	2b28      	cmp	r3, #40	; 0x28
 80086ee:	d867      	bhi.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80086f0:	a201      	add	r2, pc, #4	; (adr r2, 80086f8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80086f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f6:	bf00      	nop
 80086f8:	080087c7 	.word	0x080087c7
 80086fc:	080087c1 	.word	0x080087c1
 8008700:	080087c1 	.word	0x080087c1
 8008704:	080087c1 	.word	0x080087c1
 8008708:	080087c1 	.word	0x080087c1
 800870c:	080087c1 	.word	0x080087c1
 8008710:	080087c1 	.word	0x080087c1
 8008714:	080087c1 	.word	0x080087c1
 8008718:	0800879d 	.word	0x0800879d
 800871c:	080087c1 	.word	0x080087c1
 8008720:	080087c1 	.word	0x080087c1
 8008724:	080087c1 	.word	0x080087c1
 8008728:	080087c1 	.word	0x080087c1
 800872c:	080087c1 	.word	0x080087c1
 8008730:	080087c1 	.word	0x080087c1
 8008734:	080087c1 	.word	0x080087c1
 8008738:	080087af 	.word	0x080087af
 800873c:	080087c1 	.word	0x080087c1
 8008740:	080087c1 	.word	0x080087c1
 8008744:	080087c1 	.word	0x080087c1
 8008748:	080087c1 	.word	0x080087c1
 800874c:	080087c1 	.word	0x080087c1
 8008750:	080087c1 	.word	0x080087c1
 8008754:	080087c1 	.word	0x080087c1
 8008758:	080087c7 	.word	0x080087c7
 800875c:	080087c1 	.word	0x080087c1
 8008760:	080087c1 	.word	0x080087c1
 8008764:	080087c1 	.word	0x080087c1
 8008768:	080087c1 	.word	0x080087c1
 800876c:	080087c1 	.word	0x080087c1
 8008770:	080087c1 	.word	0x080087c1
 8008774:	080087c1 	.word	0x080087c1
 8008778:	080087c7 	.word	0x080087c7
 800877c:	080087c1 	.word	0x080087c1
 8008780:	080087c1 	.word	0x080087c1
 8008784:	080087c1 	.word	0x080087c1
 8008788:	080087c1 	.word	0x080087c1
 800878c:	080087c1 	.word	0x080087c1
 8008790:	080087c1 	.word	0x080087c1
 8008794:	080087c1 	.word	0x080087c1
 8008798:	080087c7 	.word	0x080087c7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	3304      	adds	r3, #4
 80087a0:	2101      	movs	r1, #1
 80087a2:	4618      	mov	r0, r3
 80087a4:	f000 fdf4 	bl	8009390 <RCCEx_PLL2_Config>
 80087a8:	4603      	mov	r3, r0
 80087aa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80087ac:	e00c      	b.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	3324      	adds	r3, #36	; 0x24
 80087b2:	2101      	movs	r1, #1
 80087b4:	4618      	mov	r0, r3
 80087b6:	f000 fe9d 	bl	80094f4 <RCCEx_PLL3_Config>
 80087ba:	4603      	mov	r3, r0
 80087bc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80087be:	e003      	b.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087c0:	2301      	movs	r3, #1
 80087c2:	75fb      	strb	r3, [r7, #23]
      break;
 80087c4:	e000      	b.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80087c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087c8:	7dfb      	ldrb	r3, [r7, #23]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d109      	bne.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80087ce:	4b24      	ldr	r3, [pc, #144]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80087d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087d2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087da:	4921      	ldr	r1, [pc, #132]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80087dc:	4313      	orrs	r3, r2
 80087de:	654b      	str	r3, [r1, #84]	; 0x54
 80087e0:	e001      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087e2:	7dfb      	ldrb	r3, [r7, #23]
 80087e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 0302 	and.w	r3, r3, #2
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d03e      	beq.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087f6:	2b05      	cmp	r3, #5
 80087f8:	d820      	bhi.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80087fa:	a201      	add	r2, pc, #4	; (adr r2, 8008800 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80087fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008800:	08008843 	.word	0x08008843
 8008804:	08008819 	.word	0x08008819
 8008808:	0800882b 	.word	0x0800882b
 800880c:	08008843 	.word	0x08008843
 8008810:	08008843 	.word	0x08008843
 8008814:	08008843 	.word	0x08008843
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	3304      	adds	r3, #4
 800881c:	2101      	movs	r1, #1
 800881e:	4618      	mov	r0, r3
 8008820:	f000 fdb6 	bl	8009390 <RCCEx_PLL2_Config>
 8008824:	4603      	mov	r3, r0
 8008826:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008828:	e00c      	b.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	3324      	adds	r3, #36	; 0x24
 800882e:	2101      	movs	r1, #1
 8008830:	4618      	mov	r0, r3
 8008832:	f000 fe5f 	bl	80094f4 <RCCEx_PLL3_Config>
 8008836:	4603      	mov	r3, r0
 8008838:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800883a:	e003      	b.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	75fb      	strb	r3, [r7, #23]
      break;
 8008840:	e000      	b.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8008842:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008844:	7dfb      	ldrb	r3, [r7, #23]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d110      	bne.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800884a:	4b05      	ldr	r3, [pc, #20]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800884c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800884e:	f023 0207 	bic.w	r2, r3, #7
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008856:	4902      	ldr	r1, [pc, #8]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008858:	4313      	orrs	r3, r2
 800885a:	654b      	str	r3, [r1, #84]	; 0x54
 800885c:	e008      	b.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800885e:	bf00      	nop
 8008860:	58024400 	.word	0x58024400
 8008864:	58024800 	.word	0x58024800
 8008868:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800886c:	7dfb      	ldrb	r3, [r7, #23]
 800886e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f003 0304 	and.w	r3, r3, #4
 8008878:	2b00      	cmp	r3, #0
 800887a:	d039      	beq.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008882:	2b05      	cmp	r3, #5
 8008884:	d820      	bhi.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8008886:	a201      	add	r2, pc, #4	; (adr r2, 800888c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8008888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888c:	080088cf 	.word	0x080088cf
 8008890:	080088a5 	.word	0x080088a5
 8008894:	080088b7 	.word	0x080088b7
 8008898:	080088cf 	.word	0x080088cf
 800889c:	080088cf 	.word	0x080088cf
 80088a0:	080088cf 	.word	0x080088cf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	3304      	adds	r3, #4
 80088a8:	2101      	movs	r1, #1
 80088aa:	4618      	mov	r0, r3
 80088ac:	f000 fd70 	bl	8009390 <RCCEx_PLL2_Config>
 80088b0:	4603      	mov	r3, r0
 80088b2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80088b4:	e00c      	b.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	3324      	adds	r3, #36	; 0x24
 80088ba:	2101      	movs	r1, #1
 80088bc:	4618      	mov	r0, r3
 80088be:	f000 fe19 	bl	80094f4 <RCCEx_PLL3_Config>
 80088c2:	4603      	mov	r3, r0
 80088c4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80088c6:	e003      	b.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	75fb      	strb	r3, [r7, #23]
      break;
 80088cc:	e000      	b.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80088ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088d0:	7dfb      	ldrb	r3, [r7, #23]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d10a      	bne.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80088d6:	4bb7      	ldr	r3, [pc, #732]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80088d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088da:	f023 0207 	bic.w	r2, r3, #7
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088e4:	49b3      	ldr	r1, [pc, #716]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80088e6:	4313      	orrs	r3, r2
 80088e8:	658b      	str	r3, [r1, #88]	; 0x58
 80088ea:	e001      	b.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ec:	7dfb      	ldrb	r3, [r7, #23]
 80088ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 0320 	and.w	r3, r3, #32
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d04b      	beq.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008902:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008906:	d02e      	beq.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8008908:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800890c:	d828      	bhi.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800890e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008912:	d02a      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008918:	d822      	bhi.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800891a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800891e:	d026      	beq.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008920:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008924:	d81c      	bhi.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008926:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800892a:	d010      	beq.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800892c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008930:	d816      	bhi.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008932:	2b00      	cmp	r3, #0
 8008934:	d01d      	beq.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008936:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800893a:	d111      	bne.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	3304      	adds	r3, #4
 8008940:	2100      	movs	r1, #0
 8008942:	4618      	mov	r0, r3
 8008944:	f000 fd24 	bl	8009390 <RCCEx_PLL2_Config>
 8008948:	4603      	mov	r3, r0
 800894a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800894c:	e012      	b.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	3324      	adds	r3, #36	; 0x24
 8008952:	2102      	movs	r1, #2
 8008954:	4618      	mov	r0, r3
 8008956:	f000 fdcd 	bl	80094f4 <RCCEx_PLL3_Config>
 800895a:	4603      	mov	r3, r0
 800895c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800895e:	e009      	b.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	75fb      	strb	r3, [r7, #23]
      break;
 8008964:	e006      	b.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008966:	bf00      	nop
 8008968:	e004      	b.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800896a:	bf00      	nop
 800896c:	e002      	b.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800896e:	bf00      	nop
 8008970:	e000      	b.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008972:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008974:	7dfb      	ldrb	r3, [r7, #23]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d10a      	bne.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800897a:	4b8e      	ldr	r3, [pc, #568]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800897c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800897e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008988:	498a      	ldr	r1, [pc, #552]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800898a:	4313      	orrs	r3, r2
 800898c:	654b      	str	r3, [r1, #84]	; 0x54
 800898e:	e001      	b.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008990:	7dfb      	ldrb	r3, [r7, #23]
 8008992:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800899c:	2b00      	cmp	r3, #0
 800899e:	d04b      	beq.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80089a6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80089aa:	d02e      	beq.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80089ac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80089b0:	d828      	bhi.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80089b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089b6:	d02a      	beq.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80089b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089bc:	d822      	bhi.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80089be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089c2:	d026      	beq.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80089c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089c8:	d81c      	bhi.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80089ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089ce:	d010      	beq.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80089d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089d4:	d816      	bhi.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d01d      	beq.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80089da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089de:	d111      	bne.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	3304      	adds	r3, #4
 80089e4:	2100      	movs	r1, #0
 80089e6:	4618      	mov	r0, r3
 80089e8:	f000 fcd2 	bl	8009390 <RCCEx_PLL2_Config>
 80089ec:	4603      	mov	r3, r0
 80089ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80089f0:	e012      	b.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	3324      	adds	r3, #36	; 0x24
 80089f6:	2102      	movs	r1, #2
 80089f8:	4618      	mov	r0, r3
 80089fa:	f000 fd7b 	bl	80094f4 <RCCEx_PLL3_Config>
 80089fe:	4603      	mov	r3, r0
 8008a00:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008a02:	e009      	b.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	75fb      	strb	r3, [r7, #23]
      break;
 8008a08:	e006      	b.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008a0a:	bf00      	nop
 8008a0c:	e004      	b.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008a0e:	bf00      	nop
 8008a10:	e002      	b.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008a12:	bf00      	nop
 8008a14:	e000      	b.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008a16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a18:	7dfb      	ldrb	r3, [r7, #23]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d10a      	bne.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008a1e:	4b65      	ldr	r3, [pc, #404]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a22:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008a2c:	4961      	ldr	r1, [pc, #388]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	658b      	str	r3, [r1, #88]	; 0x58
 8008a32:	e001      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a34:	7dfb      	ldrb	r3, [r7, #23]
 8008a36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d04b      	beq.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008a4a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008a4e:	d02e      	beq.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008a50:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008a54:	d828      	bhi.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a5a:	d02a      	beq.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a60:	d822      	bhi.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008a62:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008a66:	d026      	beq.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008a68:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008a6c:	d81c      	bhi.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008a6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a72:	d010      	beq.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8008a74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a78:	d816      	bhi.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d01d      	beq.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a82:	d111      	bne.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	3304      	adds	r3, #4
 8008a88:	2100      	movs	r1, #0
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f000 fc80 	bl	8009390 <RCCEx_PLL2_Config>
 8008a90:	4603      	mov	r3, r0
 8008a92:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008a94:	e012      	b.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	3324      	adds	r3, #36	; 0x24
 8008a9a:	2102      	movs	r1, #2
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f000 fd29 	bl	80094f4 <RCCEx_PLL3_Config>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008aa6:	e009      	b.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8008aac:	e006      	b.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008aae:	bf00      	nop
 8008ab0:	e004      	b.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008ab2:	bf00      	nop
 8008ab4:	e002      	b.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008ab6:	bf00      	nop
 8008ab8:	e000      	b.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008aba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008abc:	7dfb      	ldrb	r3, [r7, #23]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d10a      	bne.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008ac2:	4b3c      	ldr	r3, [pc, #240]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ac6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ad0:	4938      	ldr	r1, [pc, #224]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	658b      	str	r3, [r1, #88]	; 0x58
 8008ad6:	e001      	b.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ad8:	7dfb      	ldrb	r3, [r7, #23]
 8008ada:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 0308 	and.w	r3, r3, #8
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d01a      	beq.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008af2:	d10a      	bne.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	3324      	adds	r3, #36	; 0x24
 8008af8:	2102      	movs	r1, #2
 8008afa:	4618      	mov	r0, r3
 8008afc:	f000 fcfa 	bl	80094f4 <RCCEx_PLL3_Config>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d001      	beq.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008b0a:	4b2a      	ldr	r3, [pc, #168]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b18:	4926      	ldr	r1, [pc, #152]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f003 0310 	and.w	r3, r3, #16
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d01a      	beq.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b34:	d10a      	bne.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	3324      	adds	r3, #36	; 0x24
 8008b3a:	2102      	movs	r1, #2
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f000 fcd9 	bl	80094f4 <RCCEx_PLL3_Config>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d001      	beq.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008b4c:	4b19      	ldr	r3, [pc, #100]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b5a:	4916      	ldr	r1, [pc, #88]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d036      	beq.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008b72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b76:	d01f      	beq.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008b78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b7c:	d817      	bhi.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d003      	beq.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8008b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b86:	d009      	beq.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008b88:	e011      	b.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	3304      	adds	r3, #4
 8008b8e:	2100      	movs	r1, #0
 8008b90:	4618      	mov	r0, r3
 8008b92:	f000 fbfd 	bl	8009390 <RCCEx_PLL2_Config>
 8008b96:	4603      	mov	r3, r0
 8008b98:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008b9a:	e00e      	b.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	3324      	adds	r3, #36	; 0x24
 8008ba0:	2102      	movs	r1, #2
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f000 fca6 	bl	80094f4 <RCCEx_PLL3_Config>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008bac:	e005      	b.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	75fb      	strb	r3, [r7, #23]
      break;
 8008bb2:	e002      	b.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8008bb4:	58024400 	.word	0x58024400
      break;
 8008bb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bba:	7dfb      	ldrb	r3, [r7, #23]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10a      	bne.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008bc0:	4b93      	ldr	r3, [pc, #588]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008bce:	4990      	ldr	r1, [pc, #576]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	658b      	str	r3, [r1, #88]	; 0x58
 8008bd4:	e001      	b.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bd6:	7dfb      	ldrb	r3, [r7, #23]
 8008bd8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d033      	beq.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008bf0:	d01c      	beq.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8008bf2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008bf6:	d816      	bhi.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8008bf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bfc:	d003      	beq.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8008bfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c02:	d007      	beq.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008c04:	e00f      	b.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c06:	4b82      	ldr	r3, [pc, #520]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0a:	4a81      	ldr	r2, [pc, #516]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008c12:	e00c      	b.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	3324      	adds	r3, #36	; 0x24
 8008c18:	2101      	movs	r1, #1
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f000 fc6a 	bl	80094f4 <RCCEx_PLL3_Config>
 8008c20:	4603      	mov	r3, r0
 8008c22:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008c24:	e003      	b.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	75fb      	strb	r3, [r7, #23]
      break;
 8008c2a:	e000      	b.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008c2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c2e:	7dfb      	ldrb	r3, [r7, #23]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d10a      	bne.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008c34:	4b76      	ldr	r3, [pc, #472]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c42:	4973      	ldr	r1, [pc, #460]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c44:	4313      	orrs	r3, r2
 8008c46:	654b      	str	r3, [r1, #84]	; 0x54
 8008c48:	e001      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c4a:	7dfb      	ldrb	r3, [r7, #23]
 8008c4c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d029      	beq.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d003      	beq.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8008c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c66:	d007      	beq.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008c68:	e00f      	b.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c6a:	4b69      	ldr	r3, [pc, #420]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6e:	4a68      	ldr	r2, [pc, #416]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008c76:	e00b      	b.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	3304      	adds	r3, #4
 8008c7c:	2102      	movs	r1, #2
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f000 fb86 	bl	8009390 <RCCEx_PLL2_Config>
 8008c84:	4603      	mov	r3, r0
 8008c86:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008c88:	e002      	b.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	75fb      	strb	r3, [r7, #23]
      break;
 8008c8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c90:	7dfb      	ldrb	r3, [r7, #23]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d109      	bne.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008c96:	4b5e      	ldr	r3, [pc, #376]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ca2:	495b      	ldr	r1, [pc, #364]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008ca8:	e001      	b.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008caa:	7dfb      	ldrb	r3, [r7, #23]
 8008cac:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00a      	beq.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	3324      	adds	r3, #36	; 0x24
 8008cbe:	2102      	movs	r1, #2
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f000 fc17 	bl	80094f4 <RCCEx_PLL3_Config>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d001      	beq.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d030      	beq.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ce0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ce4:	d017      	beq.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8008ce6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008cea:	d811      	bhi.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cf0:	d013      	beq.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008cf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cf6:	d80b      	bhi.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d010      	beq.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d00:	d106      	bne.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d02:	4b43      	ldr	r3, [pc, #268]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d06:	4a42      	ldr	r2, [pc, #264]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008d0e:	e007      	b.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d10:	2301      	movs	r3, #1
 8008d12:	75fb      	strb	r3, [r7, #23]
      break;
 8008d14:	e004      	b.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008d16:	bf00      	nop
 8008d18:	e002      	b.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008d1a:	bf00      	nop
 8008d1c:	e000      	b.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008d1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d20:	7dfb      	ldrb	r3, [r7, #23]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d109      	bne.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008d26:	4b3a      	ldr	r3, [pc, #232]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d32:	4937      	ldr	r1, [pc, #220]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d34:	4313      	orrs	r3, r2
 8008d36:	654b      	str	r3, [r1, #84]	; 0x54
 8008d38:	e001      	b.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d3a:	7dfb      	ldrb	r3, [r7, #23]
 8008d3c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d008      	beq.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008d4a:	4b31      	ldr	r3, [pc, #196]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d56:	492e      	ldr	r1, [pc, #184]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d009      	beq.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008d68:	4b29      	ldr	r3, [pc, #164]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008d76:	4926      	ldr	r1, [pc, #152]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d008      	beq.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008d88:	4b21      	ldr	r3, [pc, #132]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d8c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d94:	491e      	ldr	r1, [pc, #120]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d96:	4313      	orrs	r3, r2
 8008d98:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d00d      	beq.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008da6:	4b1a      	ldr	r3, [pc, #104]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008da8:	691b      	ldr	r3, [r3, #16]
 8008daa:	4a19      	ldr	r2, [pc, #100]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008dac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008db0:	6113      	str	r3, [r2, #16]
 8008db2:	4b17      	ldr	r3, [pc, #92]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008db4:	691a      	ldr	r2, [r3, #16]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008dbc:	4914      	ldr	r1, [pc, #80]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	da08      	bge.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008dca:	4b11      	ldr	r3, [pc, #68]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dd6:	490e      	ldr	r1, [pc, #56]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d009      	beq.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008de8:	4b09      	ldr	r3, [pc, #36]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008df6:	4906      	ldr	r1, [pc, #24]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008dfc:	7dbb      	ldrb	r3, [r7, #22]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d101      	bne.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8008e02:	2300      	movs	r3, #0
 8008e04:	e000      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3718      	adds	r7, #24
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	58024400 	.word	0x58024400

08008e14 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008e18:	f7ff f860 	bl	8007edc <HAL_RCC_GetHCLKFreq>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	4b06      	ldr	r3, [pc, #24]	; (8008e38 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008e20:	6a1b      	ldr	r3, [r3, #32]
 8008e22:	091b      	lsrs	r3, r3, #4
 8008e24:	f003 0307 	and.w	r3, r3, #7
 8008e28:	4904      	ldr	r1, [pc, #16]	; (8008e3c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008e2a:	5ccb      	ldrb	r3, [r1, r3]
 8008e2c:	f003 031f 	and.w	r3, r3, #31
 8008e30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	58024400 	.word	0x58024400
 8008e3c:	0800cf98 	.word	0x0800cf98

08008e40 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b089      	sub	sp, #36	; 0x24
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e48:	4ba1      	ldr	r3, [pc, #644]	; (80090d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e4c:	f003 0303 	and.w	r3, r3, #3
 8008e50:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008e52:	4b9f      	ldr	r3, [pc, #636]	; (80090d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e56:	0b1b      	lsrs	r3, r3, #12
 8008e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e5c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008e5e:	4b9c      	ldr	r3, [pc, #624]	; (80090d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e62:	091b      	lsrs	r3, r3, #4
 8008e64:	f003 0301 	and.w	r3, r3, #1
 8008e68:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008e6a:	4b99      	ldr	r3, [pc, #612]	; (80090d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e6e:	08db      	lsrs	r3, r3, #3
 8008e70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	fb02 f303 	mul.w	r3, r2, r3
 8008e7a:	ee07 3a90 	vmov	s15, r3
 8008e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f000 8111 	beq.w	80090b0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	2b02      	cmp	r3, #2
 8008e92:	f000 8083 	beq.w	8008f9c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	f200 80a1 	bhi.w	8008fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d003      	beq.n	8008eac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008ea4:	69bb      	ldr	r3, [r7, #24]
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d056      	beq.n	8008f58 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008eaa:	e099      	b.n	8008fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008eac:	4b88      	ldr	r3, [pc, #544]	; (80090d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f003 0320 	and.w	r3, r3, #32
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d02d      	beq.n	8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008eb8:	4b85      	ldr	r3, [pc, #532]	; (80090d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	08db      	lsrs	r3, r3, #3
 8008ebe:	f003 0303 	and.w	r3, r3, #3
 8008ec2:	4a84      	ldr	r2, [pc, #528]	; (80090d4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ec8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	ee07 3a90 	vmov	s15, r3
 8008ed0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	ee07 3a90 	vmov	s15, r3
 8008eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ee2:	4b7b      	ldr	r3, [pc, #492]	; (80090d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eea:	ee07 3a90 	vmov	s15, r3
 8008eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ef2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ef6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80090d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f0e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008f12:	e087      	b.n	8009024 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	ee07 3a90 	vmov	s15, r3
 8008f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f1e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80090dc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f26:	4b6a      	ldr	r3, [pc, #424]	; (80090d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f2e:	ee07 3a90 	vmov	s15, r3
 8008f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f36:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f3a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80090d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f56:	e065      	b.n	8009024 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	ee07 3a90 	vmov	s15, r3
 8008f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f62:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80090e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f6a:	4b59      	ldr	r3, [pc, #356]	; (80090d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f72:	ee07 3a90 	vmov	s15, r3
 8008f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f7e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80090d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f9a:	e043      	b.n	8009024 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	ee07 3a90 	vmov	s15, r3
 8008fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fa6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80090e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fae:	4b48      	ldr	r3, [pc, #288]	; (80090d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fb6:	ee07 3a90 	vmov	s15, r3
 8008fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fc2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80090d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008fde:	e021      	b.n	8009024 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	ee07 3a90 	vmov	s15, r3
 8008fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80090e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ff2:	4b37      	ldr	r3, [pc, #220]	; (80090d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ffa:	ee07 3a90 	vmov	s15, r3
 8008ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009002:	ed97 6a03 	vldr	s12, [r7, #12]
 8009006:	eddf 5a34 	vldr	s11, [pc, #208]	; 80090d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800900a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800900e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800901a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800901e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009022:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009024:	4b2a      	ldr	r3, [pc, #168]	; (80090d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009028:	0a5b      	lsrs	r3, r3, #9
 800902a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800902e:	ee07 3a90 	vmov	s15, r3
 8009032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009036:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800903a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800903e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009042:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009046:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800904a:	ee17 2a90 	vmov	r2, s15
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009052:	4b1f      	ldr	r3, [pc, #124]	; (80090d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009056:	0c1b      	lsrs	r3, r3, #16
 8009058:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800905c:	ee07 3a90 	vmov	s15, r3
 8009060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009064:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009068:	ee37 7a87 	vadd.f32	s14, s15, s14
 800906c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009070:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009074:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009078:	ee17 2a90 	vmov	r2, s15
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009080:	4b13      	ldr	r3, [pc, #76]	; (80090d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009084:	0e1b      	lsrs	r3, r3, #24
 8009086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800908a:	ee07 3a90 	vmov	s15, r3
 800908e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009092:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009096:	ee37 7a87 	vadd.f32	s14, s15, s14
 800909a:	edd7 6a07 	vldr	s13, [r7, #28]
 800909e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090a6:	ee17 2a90 	vmov	r2, s15
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80090ae:	e008      	b.n	80090c2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	609a      	str	r2, [r3, #8]
}
 80090c2:	bf00      	nop
 80090c4:	3724      	adds	r7, #36	; 0x24
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	58024400 	.word	0x58024400
 80090d4:	03d09000 	.word	0x03d09000
 80090d8:	46000000 	.word	0x46000000
 80090dc:	4c742400 	.word	0x4c742400
 80090e0:	4a742400 	.word	0x4a742400
 80090e4:	4af42400 	.word	0x4af42400

080090e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b089      	sub	sp, #36	; 0x24
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090f0:	4ba1      	ldr	r3, [pc, #644]	; (8009378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f4:	f003 0303 	and.w	r3, r3, #3
 80090f8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80090fa:	4b9f      	ldr	r3, [pc, #636]	; (8009378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090fe:	0d1b      	lsrs	r3, r3, #20
 8009100:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009104:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009106:	4b9c      	ldr	r3, [pc, #624]	; (8009378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800910a:	0a1b      	lsrs	r3, r3, #8
 800910c:	f003 0301 	and.w	r3, r3, #1
 8009110:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009112:	4b99      	ldr	r3, [pc, #612]	; (8009378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009116:	08db      	lsrs	r3, r3, #3
 8009118:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800911c:	693a      	ldr	r2, [r7, #16]
 800911e:	fb02 f303 	mul.w	r3, r2, r3
 8009122:	ee07 3a90 	vmov	s15, r3
 8009126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800912a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	2b00      	cmp	r3, #0
 8009132:	f000 8111 	beq.w	8009358 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	2b02      	cmp	r3, #2
 800913a:	f000 8083 	beq.w	8009244 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	2b02      	cmp	r3, #2
 8009142:	f200 80a1 	bhi.w	8009288 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d003      	beq.n	8009154 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800914c:	69bb      	ldr	r3, [r7, #24]
 800914e:	2b01      	cmp	r3, #1
 8009150:	d056      	beq.n	8009200 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009152:	e099      	b.n	8009288 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009154:	4b88      	ldr	r3, [pc, #544]	; (8009378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 0320 	and.w	r3, r3, #32
 800915c:	2b00      	cmp	r3, #0
 800915e:	d02d      	beq.n	80091bc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009160:	4b85      	ldr	r3, [pc, #532]	; (8009378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	08db      	lsrs	r3, r3, #3
 8009166:	f003 0303 	and.w	r3, r3, #3
 800916a:	4a84      	ldr	r2, [pc, #528]	; (800937c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800916c:	fa22 f303 	lsr.w	r3, r2, r3
 8009170:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	ee07 3a90 	vmov	s15, r3
 8009178:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	ee07 3a90 	vmov	s15, r3
 8009182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800918a:	4b7b      	ldr	r3, [pc, #492]	; (8009378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800918c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800918e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009192:	ee07 3a90 	vmov	s15, r3
 8009196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800919a:	ed97 6a03 	vldr	s12, [r7, #12]
 800919e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009380 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80091a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80091ba:	e087      	b.n	80092cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	ee07 3a90 	vmov	s15, r3
 80091c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009384 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80091ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091ce:	4b6a      	ldr	r3, [pc, #424]	; (8009378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091d6:	ee07 3a90 	vmov	s15, r3
 80091da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091de:	ed97 6a03 	vldr	s12, [r7, #12]
 80091e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009380 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80091e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091fe:	e065      	b.n	80092cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	ee07 3a90 	vmov	s15, r3
 8009206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800920a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009388 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800920e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009212:	4b59      	ldr	r3, [pc, #356]	; (8009378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800921a:	ee07 3a90 	vmov	s15, r3
 800921e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009222:	ed97 6a03 	vldr	s12, [r7, #12]
 8009226:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009380 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800922a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800922e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800923a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800923e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009242:	e043      	b.n	80092cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	ee07 3a90 	vmov	s15, r3
 800924a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800924e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800938c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009256:	4b48      	ldr	r3, [pc, #288]	; (8009378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800925a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800925e:	ee07 3a90 	vmov	s15, r3
 8009262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009266:	ed97 6a03 	vldr	s12, [r7, #12]
 800926a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009380 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800926e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800927a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800927e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009282:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009286:	e021      	b.n	80092cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	ee07 3a90 	vmov	s15, r3
 800928e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009292:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009388 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800929a:	4b37      	ldr	r3, [pc, #220]	; (8009378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800929c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800929e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092a2:	ee07 3a90 	vmov	s15, r3
 80092a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80092ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009380 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80092b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80092ca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80092cc:	4b2a      	ldr	r3, [pc, #168]	; (8009378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092d0:	0a5b      	lsrs	r3, r3, #9
 80092d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092d6:	ee07 3a90 	vmov	s15, r3
 80092da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80092ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092f2:	ee17 2a90 	vmov	r2, s15
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80092fa:	4b1f      	ldr	r3, [pc, #124]	; (8009378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fe:	0c1b      	lsrs	r3, r3, #16
 8009300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009304:	ee07 3a90 	vmov	s15, r3
 8009308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800930c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009310:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009314:	edd7 6a07 	vldr	s13, [r7, #28]
 8009318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800931c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009320:	ee17 2a90 	vmov	r2, s15
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009328:	4b13      	ldr	r3, [pc, #76]	; (8009378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800932a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800932c:	0e1b      	lsrs	r3, r3, #24
 800932e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009332:	ee07 3a90 	vmov	s15, r3
 8009336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800933a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800933e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009342:	edd7 6a07 	vldr	s13, [r7, #28]
 8009346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800934a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800934e:	ee17 2a90 	vmov	r2, s15
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009356:	e008      	b.n	800936a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	609a      	str	r2, [r3, #8]
}
 800936a:	bf00      	nop
 800936c:	3724      	adds	r7, #36	; 0x24
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr
 8009376:	bf00      	nop
 8009378:	58024400 	.word	0x58024400
 800937c:	03d09000 	.word	0x03d09000
 8009380:	46000000 	.word	0x46000000
 8009384:	4c742400 	.word	0x4c742400
 8009388:	4a742400 	.word	0x4a742400
 800938c:	4af42400 	.word	0x4af42400

08009390 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800939a:	2300      	movs	r3, #0
 800939c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800939e:	4b53      	ldr	r3, [pc, #332]	; (80094ec <RCCEx_PLL2_Config+0x15c>)
 80093a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093a2:	f003 0303 	and.w	r3, r3, #3
 80093a6:	2b03      	cmp	r3, #3
 80093a8:	d101      	bne.n	80093ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	e099      	b.n	80094e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80093ae:	4b4f      	ldr	r3, [pc, #316]	; (80094ec <RCCEx_PLL2_Config+0x15c>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a4e      	ldr	r2, [pc, #312]	; (80094ec <RCCEx_PLL2_Config+0x15c>)
 80093b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80093b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093ba:	f7fa f9d3 	bl	8003764 <HAL_GetTick>
 80093be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80093c0:	e008      	b.n	80093d4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80093c2:	f7fa f9cf 	bl	8003764 <HAL_GetTick>
 80093c6:	4602      	mov	r2, r0
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	1ad3      	subs	r3, r2, r3
 80093cc:	2b02      	cmp	r3, #2
 80093ce:	d901      	bls.n	80093d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80093d0:	2303      	movs	r3, #3
 80093d2:	e086      	b.n	80094e2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80093d4:	4b45      	ldr	r3, [pc, #276]	; (80094ec <RCCEx_PLL2_Config+0x15c>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d1f0      	bne.n	80093c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80093e0:	4b42      	ldr	r3, [pc, #264]	; (80094ec <RCCEx_PLL2_Config+0x15c>)
 80093e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	031b      	lsls	r3, r3, #12
 80093ee:	493f      	ldr	r1, [pc, #252]	; (80094ec <RCCEx_PLL2_Config+0x15c>)
 80093f0:	4313      	orrs	r3, r2
 80093f2:	628b      	str	r3, [r1, #40]	; 0x28
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	3b01      	subs	r3, #1
 80093fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	3b01      	subs	r3, #1
 8009404:	025b      	lsls	r3, r3, #9
 8009406:	b29b      	uxth	r3, r3
 8009408:	431a      	orrs	r2, r3
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	3b01      	subs	r3, #1
 8009410:	041b      	lsls	r3, r3, #16
 8009412:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009416:	431a      	orrs	r2, r3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	691b      	ldr	r3, [r3, #16]
 800941c:	3b01      	subs	r3, #1
 800941e:	061b      	lsls	r3, r3, #24
 8009420:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009424:	4931      	ldr	r1, [pc, #196]	; (80094ec <RCCEx_PLL2_Config+0x15c>)
 8009426:	4313      	orrs	r3, r2
 8009428:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800942a:	4b30      	ldr	r3, [pc, #192]	; (80094ec <RCCEx_PLL2_Config+0x15c>)
 800942c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800942e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	695b      	ldr	r3, [r3, #20]
 8009436:	492d      	ldr	r1, [pc, #180]	; (80094ec <RCCEx_PLL2_Config+0x15c>)
 8009438:	4313      	orrs	r3, r2
 800943a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800943c:	4b2b      	ldr	r3, [pc, #172]	; (80094ec <RCCEx_PLL2_Config+0x15c>)
 800943e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009440:	f023 0220 	bic.w	r2, r3, #32
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	699b      	ldr	r3, [r3, #24]
 8009448:	4928      	ldr	r1, [pc, #160]	; (80094ec <RCCEx_PLL2_Config+0x15c>)
 800944a:	4313      	orrs	r3, r2
 800944c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800944e:	4b27      	ldr	r3, [pc, #156]	; (80094ec <RCCEx_PLL2_Config+0x15c>)
 8009450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009452:	4a26      	ldr	r2, [pc, #152]	; (80094ec <RCCEx_PLL2_Config+0x15c>)
 8009454:	f023 0310 	bic.w	r3, r3, #16
 8009458:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800945a:	4b24      	ldr	r3, [pc, #144]	; (80094ec <RCCEx_PLL2_Config+0x15c>)
 800945c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800945e:	4b24      	ldr	r3, [pc, #144]	; (80094f0 <RCCEx_PLL2_Config+0x160>)
 8009460:	4013      	ands	r3, r2
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	69d2      	ldr	r2, [r2, #28]
 8009466:	00d2      	lsls	r2, r2, #3
 8009468:	4920      	ldr	r1, [pc, #128]	; (80094ec <RCCEx_PLL2_Config+0x15c>)
 800946a:	4313      	orrs	r3, r2
 800946c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800946e:	4b1f      	ldr	r3, [pc, #124]	; (80094ec <RCCEx_PLL2_Config+0x15c>)
 8009470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009472:	4a1e      	ldr	r2, [pc, #120]	; (80094ec <RCCEx_PLL2_Config+0x15c>)
 8009474:	f043 0310 	orr.w	r3, r3, #16
 8009478:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d106      	bne.n	800948e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009480:	4b1a      	ldr	r3, [pc, #104]	; (80094ec <RCCEx_PLL2_Config+0x15c>)
 8009482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009484:	4a19      	ldr	r2, [pc, #100]	; (80094ec <RCCEx_PLL2_Config+0x15c>)
 8009486:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800948a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800948c:	e00f      	b.n	80094ae <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	2b01      	cmp	r3, #1
 8009492:	d106      	bne.n	80094a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009494:	4b15      	ldr	r3, [pc, #84]	; (80094ec <RCCEx_PLL2_Config+0x15c>)
 8009496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009498:	4a14      	ldr	r2, [pc, #80]	; (80094ec <RCCEx_PLL2_Config+0x15c>)
 800949a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800949e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80094a0:	e005      	b.n	80094ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80094a2:	4b12      	ldr	r3, [pc, #72]	; (80094ec <RCCEx_PLL2_Config+0x15c>)
 80094a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a6:	4a11      	ldr	r2, [pc, #68]	; (80094ec <RCCEx_PLL2_Config+0x15c>)
 80094a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80094ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80094ae:	4b0f      	ldr	r3, [pc, #60]	; (80094ec <RCCEx_PLL2_Config+0x15c>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a0e      	ldr	r2, [pc, #56]	; (80094ec <RCCEx_PLL2_Config+0x15c>)
 80094b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80094b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094ba:	f7fa f953 	bl	8003764 <HAL_GetTick>
 80094be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80094c0:	e008      	b.n	80094d4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80094c2:	f7fa f94f 	bl	8003764 <HAL_GetTick>
 80094c6:	4602      	mov	r2, r0
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	1ad3      	subs	r3, r2, r3
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	d901      	bls.n	80094d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80094d0:	2303      	movs	r3, #3
 80094d2:	e006      	b.n	80094e2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80094d4:	4b05      	ldr	r3, [pc, #20]	; (80094ec <RCCEx_PLL2_Config+0x15c>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d0f0      	beq.n	80094c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80094e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	58024400 	.word	0x58024400
 80094f0:	ffff0007 	.word	0xffff0007

080094f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80094fe:	2300      	movs	r3, #0
 8009500:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009502:	4b53      	ldr	r3, [pc, #332]	; (8009650 <RCCEx_PLL3_Config+0x15c>)
 8009504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009506:	f003 0303 	and.w	r3, r3, #3
 800950a:	2b03      	cmp	r3, #3
 800950c:	d101      	bne.n	8009512 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800950e:	2301      	movs	r3, #1
 8009510:	e099      	b.n	8009646 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009512:	4b4f      	ldr	r3, [pc, #316]	; (8009650 <RCCEx_PLL3_Config+0x15c>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a4e      	ldr	r2, [pc, #312]	; (8009650 <RCCEx_PLL3_Config+0x15c>)
 8009518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800951c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800951e:	f7fa f921 	bl	8003764 <HAL_GetTick>
 8009522:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009524:	e008      	b.n	8009538 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009526:	f7fa f91d 	bl	8003764 <HAL_GetTick>
 800952a:	4602      	mov	r2, r0
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	1ad3      	subs	r3, r2, r3
 8009530:	2b02      	cmp	r3, #2
 8009532:	d901      	bls.n	8009538 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009534:	2303      	movs	r3, #3
 8009536:	e086      	b.n	8009646 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009538:	4b45      	ldr	r3, [pc, #276]	; (8009650 <RCCEx_PLL3_Config+0x15c>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009540:	2b00      	cmp	r3, #0
 8009542:	d1f0      	bne.n	8009526 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009544:	4b42      	ldr	r3, [pc, #264]	; (8009650 <RCCEx_PLL3_Config+0x15c>)
 8009546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009548:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	051b      	lsls	r3, r3, #20
 8009552:	493f      	ldr	r1, [pc, #252]	; (8009650 <RCCEx_PLL3_Config+0x15c>)
 8009554:	4313      	orrs	r3, r2
 8009556:	628b      	str	r3, [r1, #40]	; 0x28
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	3b01      	subs	r3, #1
 800955e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	3b01      	subs	r3, #1
 8009568:	025b      	lsls	r3, r3, #9
 800956a:	b29b      	uxth	r3, r3
 800956c:	431a      	orrs	r2, r3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	3b01      	subs	r3, #1
 8009574:	041b      	lsls	r3, r3, #16
 8009576:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800957a:	431a      	orrs	r2, r3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	691b      	ldr	r3, [r3, #16]
 8009580:	3b01      	subs	r3, #1
 8009582:	061b      	lsls	r3, r3, #24
 8009584:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009588:	4931      	ldr	r1, [pc, #196]	; (8009650 <RCCEx_PLL3_Config+0x15c>)
 800958a:	4313      	orrs	r3, r2
 800958c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800958e:	4b30      	ldr	r3, [pc, #192]	; (8009650 <RCCEx_PLL3_Config+0x15c>)
 8009590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009592:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	695b      	ldr	r3, [r3, #20]
 800959a:	492d      	ldr	r1, [pc, #180]	; (8009650 <RCCEx_PLL3_Config+0x15c>)
 800959c:	4313      	orrs	r3, r2
 800959e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80095a0:	4b2b      	ldr	r3, [pc, #172]	; (8009650 <RCCEx_PLL3_Config+0x15c>)
 80095a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	699b      	ldr	r3, [r3, #24]
 80095ac:	4928      	ldr	r1, [pc, #160]	; (8009650 <RCCEx_PLL3_Config+0x15c>)
 80095ae:	4313      	orrs	r3, r2
 80095b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80095b2:	4b27      	ldr	r3, [pc, #156]	; (8009650 <RCCEx_PLL3_Config+0x15c>)
 80095b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b6:	4a26      	ldr	r2, [pc, #152]	; (8009650 <RCCEx_PLL3_Config+0x15c>)
 80095b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80095be:	4b24      	ldr	r3, [pc, #144]	; (8009650 <RCCEx_PLL3_Config+0x15c>)
 80095c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095c2:	4b24      	ldr	r3, [pc, #144]	; (8009654 <RCCEx_PLL3_Config+0x160>)
 80095c4:	4013      	ands	r3, r2
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	69d2      	ldr	r2, [r2, #28]
 80095ca:	00d2      	lsls	r2, r2, #3
 80095cc:	4920      	ldr	r1, [pc, #128]	; (8009650 <RCCEx_PLL3_Config+0x15c>)
 80095ce:	4313      	orrs	r3, r2
 80095d0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80095d2:	4b1f      	ldr	r3, [pc, #124]	; (8009650 <RCCEx_PLL3_Config+0x15c>)
 80095d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d6:	4a1e      	ldr	r2, [pc, #120]	; (8009650 <RCCEx_PLL3_Config+0x15c>)
 80095d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d106      	bne.n	80095f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80095e4:	4b1a      	ldr	r3, [pc, #104]	; (8009650 <RCCEx_PLL3_Config+0x15c>)
 80095e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e8:	4a19      	ldr	r2, [pc, #100]	; (8009650 <RCCEx_PLL3_Config+0x15c>)
 80095ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80095ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80095f0:	e00f      	b.n	8009612 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d106      	bne.n	8009606 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80095f8:	4b15      	ldr	r3, [pc, #84]	; (8009650 <RCCEx_PLL3_Config+0x15c>)
 80095fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095fc:	4a14      	ldr	r2, [pc, #80]	; (8009650 <RCCEx_PLL3_Config+0x15c>)
 80095fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009602:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009604:	e005      	b.n	8009612 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009606:	4b12      	ldr	r3, [pc, #72]	; (8009650 <RCCEx_PLL3_Config+0x15c>)
 8009608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800960a:	4a11      	ldr	r2, [pc, #68]	; (8009650 <RCCEx_PLL3_Config+0x15c>)
 800960c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009610:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009612:	4b0f      	ldr	r3, [pc, #60]	; (8009650 <RCCEx_PLL3_Config+0x15c>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a0e      	ldr	r2, [pc, #56]	; (8009650 <RCCEx_PLL3_Config+0x15c>)
 8009618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800961c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800961e:	f7fa f8a1 	bl	8003764 <HAL_GetTick>
 8009622:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009624:	e008      	b.n	8009638 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009626:	f7fa f89d 	bl	8003764 <HAL_GetTick>
 800962a:	4602      	mov	r2, r0
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	1ad3      	subs	r3, r2, r3
 8009630:	2b02      	cmp	r3, #2
 8009632:	d901      	bls.n	8009638 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009634:	2303      	movs	r3, #3
 8009636:	e006      	b.n	8009646 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009638:	4b05      	ldr	r3, [pc, #20]	; (8009650 <RCCEx_PLL3_Config+0x15c>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009640:	2b00      	cmp	r3, #0
 8009642:	d0f0      	beq.n	8009626 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009644:	7bfb      	ldrb	r3, [r7, #15]
}
 8009646:	4618      	mov	r0, r3
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	58024400 	.word	0x58024400
 8009654:	ffff0007 	.word	0xffff0007

08009658 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d101      	bne.n	800966a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	e0f1      	b.n	800984e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a78      	ldr	r2, [pc, #480]	; (8009858 <HAL_SPI_Init+0x200>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d00f      	beq.n	800969a <HAL_SPI_Init+0x42>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a77      	ldr	r2, [pc, #476]	; (800985c <HAL_SPI_Init+0x204>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d00a      	beq.n	800969a <HAL_SPI_Init+0x42>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a75      	ldr	r2, [pc, #468]	; (8009860 <HAL_SPI_Init+0x208>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d005      	beq.n	800969a <HAL_SPI_Init+0x42>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	68db      	ldr	r3, [r3, #12]
 8009692:	2b0f      	cmp	r3, #15
 8009694:	d901      	bls.n	800969a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	e0d9      	b.n	800984e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 ff6c 	bl	800a578 <SPI_GetPacketSize>
 80096a0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a6c      	ldr	r2, [pc, #432]	; (8009858 <HAL_SPI_Init+0x200>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d00c      	beq.n	80096c6 <HAL_SPI_Init+0x6e>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a6a      	ldr	r2, [pc, #424]	; (800985c <HAL_SPI_Init+0x204>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d007      	beq.n	80096c6 <HAL_SPI_Init+0x6e>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a69      	ldr	r2, [pc, #420]	; (8009860 <HAL_SPI_Init+0x208>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d002      	beq.n	80096c6 <HAL_SPI_Init+0x6e>
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2b08      	cmp	r3, #8
 80096c4:	d811      	bhi.n	80096ea <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80096ca:	4a63      	ldr	r2, [pc, #396]	; (8009858 <HAL_SPI_Init+0x200>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d009      	beq.n	80096e4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a61      	ldr	r2, [pc, #388]	; (800985c <HAL_SPI_Init+0x204>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d004      	beq.n	80096e4 <HAL_SPI_Init+0x8c>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a60      	ldr	r2, [pc, #384]	; (8009860 <HAL_SPI_Init+0x208>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d104      	bne.n	80096ee <HAL_SPI_Init+0x96>
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2b10      	cmp	r3, #16
 80096e8:	d901      	bls.n	80096ee <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	e0af      	b.n	800984e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d106      	bne.n	8009708 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f7f9 fcaa 	bl	800305c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2202      	movs	r2, #2
 800970c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f022 0201 	bic.w	r2, r2, #1
 800971e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800972a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	699b      	ldr	r3, [r3, #24]
 8009730:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009734:	d119      	bne.n	800976a <HAL_SPI_Init+0x112>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800973e:	d103      	bne.n	8009748 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009744:	2b00      	cmp	r3, #0
 8009746:	d008      	beq.n	800975a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800974c:	2b00      	cmp	r3, #0
 800974e:	d10c      	bne.n	800976a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009754:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009758:	d107      	bne.n	800976a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009768:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	69da      	ldr	r2, [r3, #28]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009772:	431a      	orrs	r2, r3
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	431a      	orrs	r2, r3
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800977c:	ea42 0103 	orr.w	r1, r2, r3
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	68da      	ldr	r2, [r3, #12]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	430a      	orrs	r2, r1
 800978a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009794:	431a      	orrs	r2, r3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800979a:	431a      	orrs	r2, r3
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	699b      	ldr	r3, [r3, #24]
 80097a0:	431a      	orrs	r2, r3
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	691b      	ldr	r3, [r3, #16]
 80097a6:	431a      	orrs	r2, r3
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	695b      	ldr	r3, [r3, #20]
 80097ac:	431a      	orrs	r2, r3
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6a1b      	ldr	r3, [r3, #32]
 80097b2:	431a      	orrs	r2, r3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	431a      	orrs	r2, r3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097be:	431a      	orrs	r2, r3
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	431a      	orrs	r2, r3
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097ca:	ea42 0103 	orr.w	r1, r2, r3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	430a      	orrs	r2, r1
 80097d8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d113      	bne.n	800980a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097f4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009808:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f022 0201 	bic.w	r2, r2, #1
 8009818:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009822:	2b00      	cmp	r3, #0
 8009824:	d00a      	beq.n	800983c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	430a      	orrs	r2, r1
 800983a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2201      	movs	r2, #1
 8009848:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	40013000 	.word	0x40013000
 800985c:	40003800 	.word	0x40003800
 8009860:	40003c00 	.word	0x40003c00

08009864 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b08a      	sub	sp, #40	; 0x28
 8009868:	af02      	add	r7, sp, #8
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	603b      	str	r3, [r7, #0]
 8009870:	4613      	mov	r3, r2
 8009872:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	3320      	adds	r3, #32
 800987a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800987c:	2300      	movs	r3, #0
 800987e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009886:	2b01      	cmp	r3, #1
 8009888:	d101      	bne.n	800988e <HAL_SPI_Transmit+0x2a>
 800988a:	2302      	movs	r3, #2
 800988c:	e1d7      	b.n	8009c3e <HAL_SPI_Transmit+0x3da>
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2201      	movs	r2, #1
 8009892:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009896:	f7f9 ff65 	bl	8003764 <HAL_GetTick>
 800989a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d007      	beq.n	80098b8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80098a8:	2302      	movs	r3, #2
 80098aa:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80098b4:	7efb      	ldrb	r3, [r7, #27]
 80098b6:	e1c2      	b.n	8009c3e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d002      	beq.n	80098c4 <HAL_SPI_Transmit+0x60>
 80098be:	88fb      	ldrh	r3, [r7, #6]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d107      	bne.n	80098d4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80098d0:	7efb      	ldrb	r3, [r7, #27]
 80098d2:	e1b4      	b.n	8009c3e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2203      	movs	r2, #3
 80098d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2200      	movs	r2, #0
 80098e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	68ba      	ldr	r2, [r7, #8]
 80098e8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	88fa      	ldrh	r2, [r7, #6]
 80098ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	88fa      	ldrh	r2, [r7, #6]
 80098f6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2200      	movs	r2, #0
 80098fe:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2200      	movs	r2, #0
 8009904:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2200      	movs	r2, #0
 800990c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2200      	movs	r2, #0
 8009914:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2200      	movs	r2, #0
 800991a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009924:	d107      	bne.n	8009936 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009934:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	685a      	ldr	r2, [r3, #4]
 800993c:	4b96      	ldr	r3, [pc, #600]	; (8009b98 <HAL_SPI_Transmit+0x334>)
 800993e:	4013      	ands	r3, r2
 8009940:	88f9      	ldrh	r1, [r7, #6]
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	6812      	ldr	r2, [r2, #0]
 8009946:	430b      	orrs	r3, r1
 8009948:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f042 0201 	orr.w	r2, r2, #1
 8009958:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009962:	d107      	bne.n	8009974 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009972:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	2b0f      	cmp	r3, #15
 800997a:	d947      	bls.n	8009a0c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800997c:	e03f      	b.n	80099fe <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	695b      	ldr	r3, [r3, #20]
 8009984:	f003 0302 	and.w	r3, r3, #2
 8009988:	2b02      	cmp	r3, #2
 800998a:	d114      	bne.n	80099b6 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	6812      	ldr	r2, [r2, #0]
 8009996:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800999c:	1d1a      	adds	r2, r3, #4
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	3b01      	subs	r3, #1
 80099ac:	b29a      	uxth	r2, r3
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80099b4:	e023      	b.n	80099fe <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80099b6:	f7f9 fed5 	bl	8003764 <HAL_GetTick>
 80099ba:	4602      	mov	r2, r0
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	683a      	ldr	r2, [r7, #0]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d803      	bhi.n	80099ce <HAL_SPI_Transmit+0x16a>
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099cc:	d102      	bne.n	80099d4 <HAL_SPI_Transmit+0x170>
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d114      	bne.n	80099fe <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f000 fd01 	bl	800a3dc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2200      	movs	r2, #0
 80099de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2201      	movs	r2, #1
 80099f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80099fa:	2303      	movs	r3, #3
 80099fc:	e11f      	b.n	8009c3e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d1b9      	bne.n	800997e <HAL_SPI_Transmit+0x11a>
 8009a0a:	e0f2      	b.n	8009bf2 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	2b07      	cmp	r3, #7
 8009a12:	f240 80e7 	bls.w	8009be4 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009a16:	e05d      	b.n	8009ad4 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	695b      	ldr	r3, [r3, #20]
 8009a1e:	f003 0302 	and.w	r3, r3, #2
 8009a22:	2b02      	cmp	r3, #2
 8009a24:	d132      	bne.n	8009a8c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d918      	bls.n	8009a64 <HAL_SPI_Transmit+0x200>
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d014      	beq.n	8009a64 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	6812      	ldr	r2, [r2, #0]
 8009a44:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a4a:	1d1a      	adds	r2, r3, #4
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	3b02      	subs	r3, #2
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009a62:	e037      	b.n	8009ad4 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a68:	881a      	ldrh	r2, [r3, #0]
 8009a6a:	69fb      	ldr	r3, [r7, #28]
 8009a6c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a72:	1c9a      	adds	r2, r3, #2
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	3b01      	subs	r3, #1
 8009a82:	b29a      	uxth	r2, r3
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009a8a:	e023      	b.n	8009ad4 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009a8c:	f7f9 fe6a 	bl	8003764 <HAL_GetTick>
 8009a90:	4602      	mov	r2, r0
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	1ad3      	subs	r3, r2, r3
 8009a96:	683a      	ldr	r2, [r7, #0]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d803      	bhi.n	8009aa4 <HAL_SPI_Transmit+0x240>
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aa2:	d102      	bne.n	8009aaa <HAL_SPI_Transmit+0x246>
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d114      	bne.n	8009ad4 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009aaa:	68f8      	ldr	r0, [r7, #12]
 8009aac:	f000 fc96 	bl	800a3dc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009abe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2201      	movs	r2, #1
 8009acc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	e0b4      	b.n	8009c3e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d19b      	bne.n	8009a18 <HAL_SPI_Transmit+0x1b4>
 8009ae0:	e087      	b.n	8009bf2 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	695b      	ldr	r3, [r3, #20]
 8009ae8:	f003 0302 	and.w	r3, r3, #2
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	d155      	bne.n	8009b9c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	2b03      	cmp	r3, #3
 8009afa:	d918      	bls.n	8009b2e <HAL_SPI_Transmit+0x2ca>
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b00:	2b40      	cmp	r3, #64	; 0x40
 8009b02:	d914      	bls.n	8009b2e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	6812      	ldr	r2, [r2, #0]
 8009b0e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b14:	1d1a      	adds	r2, r3, #4
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	3b04      	subs	r3, #4
 8009b24:	b29a      	uxth	r2, r3
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009b2c:	e05a      	b.n	8009be4 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d917      	bls.n	8009b6a <HAL_SPI_Transmit+0x306>
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d013      	beq.n	8009b6a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b46:	881a      	ldrh	r2, [r3, #0]
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b50:	1c9a      	adds	r2, r3, #2
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	3b02      	subs	r3, #2
 8009b60:	b29a      	uxth	r2, r3
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009b68:	e03c      	b.n	8009be4 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	3320      	adds	r3, #32
 8009b74:	7812      	ldrb	r2, [r2, #0]
 8009b76:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b7c:	1c5a      	adds	r2, r3, #1
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	3b01      	subs	r3, #1
 8009b8c:	b29a      	uxth	r2, r3
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009b94:	e026      	b.n	8009be4 <HAL_SPI_Transmit+0x380>
 8009b96:	bf00      	nop
 8009b98:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b9c:	f7f9 fde2 	bl	8003764 <HAL_GetTick>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	1ad3      	subs	r3, r2, r3
 8009ba6:	683a      	ldr	r2, [r7, #0]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d803      	bhi.n	8009bb4 <HAL_SPI_Transmit+0x350>
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bb2:	d102      	bne.n	8009bba <HAL_SPI_Transmit+0x356>
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d114      	bne.n	8009be4 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009bba:	68f8      	ldr	r0, [r7, #12]
 8009bbc:	f000 fc0e 	bl	800a3dc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009be0:	2303      	movs	r3, #3
 8009be2:	e02c      	b.n	8009c3e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f47f af78 	bne.w	8009ae2 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	9300      	str	r3, [sp, #0]
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	2108      	movs	r1, #8
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f000 fc8d 	bl	800a51c <SPI_WaitOnFlagUntilTimeout>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d007      	beq.n	8009c18 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c0e:	f043 0220 	orr.w	r2, r3, #32
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009c18:	68f8      	ldr	r0, [r7, #12]
 8009c1a:	f000 fbdf 	bl	800a3dc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2200      	movs	r2, #0
 8009c22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d001      	beq.n	8009c3c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	e000      	b.n	8009c3e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8009c3c:	7efb      	ldrb	r3, [r7, #27]
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3720      	adds	r7, #32
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop

08009c48 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b086      	sub	sp, #24
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	4613      	mov	r3, r2
 8009c54:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009c56:	2300      	movs	r3, #0
 8009c58:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d101      	bne.n	8009c68 <HAL_SPI_Transmit_DMA+0x20>
 8009c64:	2302      	movs	r3, #2
 8009c66:	e12c      	b.n	8009ec2 <HAL_SPI_Transmit_DMA+0x27a>
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d007      	beq.n	8009c8c <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 8009c7c:	2302      	movs	r3, #2
 8009c7e:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2200      	movs	r2, #0
 8009c84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009c88:	7dfb      	ldrb	r3, [r7, #23]
 8009c8a:	e11a      	b.n	8009ec2 <HAL_SPI_Transmit_DMA+0x27a>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d002      	beq.n	8009c98 <HAL_SPI_Transmit_DMA+0x50>
 8009c92:	88fb      	ldrh	r3, [r7, #6]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d107      	bne.n	8009ca8 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009ca4:	7dfb      	ldrb	r3, [r7, #23]
 8009ca6:	e10c      	b.n	8009ec2 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2203      	movs	r2, #3
 8009cac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	68ba      	ldr	r2, [r7, #8]
 8009cbc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	88fa      	ldrh	r2, [r7, #6]
 8009cc2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	88fa      	ldrh	r2, [r7, #6]
 8009cca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2200      	movs	r2, #0
 8009cec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009cf8:	d107      	bne.n	8009d0a <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d08:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	68db      	ldr	r3, [r3, #12]
 8009d0e:	2b0f      	cmp	r3, #15
 8009d10:	d905      	bls.n	8009d1e <HAL_SPI_Transmit_DMA+0xd6>
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d16:	699b      	ldr	r3, [r3, #24]
 8009d18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d1c:	d10f      	bne.n	8009d3e <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009d22:	2b07      	cmp	r3, #7
 8009d24:	d913      	bls.n	8009d4e <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d2a:	699b      	ldr	r3, [r3, #24]
 8009d2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d30:	d00d      	beq.n	8009d4e <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d36:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009d38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d3c:	d007      	beq.n	8009d4e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2200      	movs	r2, #0
 8009d46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009d4a:	7dfb      	ldrb	r3, [r7, #23]
 8009d4c:	e0b9      	b.n	8009ec2 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	2b07      	cmp	r3, #7
 8009d54:	d820      	bhi.n	8009d98 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d5a:	699b      	ldr	r3, [r3, #24]
 8009d5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d60:	d109      	bne.n	8009d76 <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	105b      	asrs	r3, r3, #1
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d7a:	699b      	ldr	r3, [r3, #24]
 8009d7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d80:	d11e      	bne.n	8009dc0 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	3303      	adds	r3, #3
 8009d8c:	109b      	asrs	r3, r3, #2
 8009d8e:	b29a      	uxth	r2, r3
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009d96:	e013      	b.n	8009dc0 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	2b0f      	cmp	r3, #15
 8009d9e:	d80f      	bhi.n	8009dc0 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009da4:	699b      	ldr	r3, [r3, #24]
 8009da6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009daa:	d109      	bne.n	8009dc0 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	3301      	adds	r3, #1
 8009db6:	105b      	asrs	r3, r3, #1
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009dc4:	4a41      	ldr	r2, [pc, #260]	; (8009ecc <HAL_SPI_Transmit_DMA+0x284>)
 8009dc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009dcc:	4a40      	ldr	r2, [pc, #256]	; (8009ed0 <HAL_SPI_Transmit_DMA+0x288>)
 8009dce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009dd4:	4a3f      	ldr	r2, [pc, #252]	; (8009ed4 <HAL_SPI_Transmit_DMA+0x28c>)
 8009dd6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ddc:	2200      	movs	r2, #0
 8009dde:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	689a      	ldr	r2, [r3, #8]
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009dee:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009df8:	4619      	mov	r1, r3
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	3320      	adds	r3, #32
 8009e00:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009e08:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8009e0a:	f7fa f967 	bl	80040dc <HAL_DMA_Start_IT>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d013      	beq.n	8009e3c <HAL_SPI_Transmit_DMA+0x1f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e1a:	f043 0210 	orr.w	r2, r3, #16
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2201      	movs	r2, #1
 8009e30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8009e34:	2301      	movs	r3, #1
 8009e36:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8009e38:	7dfb      	ldrb	r3, [r7, #23]
 8009e3a:	e042      	b.n	8009ec2 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e40:	69db      	ldr	r3, [r3, #28]
 8009e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e46:	d108      	bne.n	8009e5a <HAL_SPI_Transmit_DMA+0x212>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	6859      	ldr	r1, [r3, #4]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	4b21      	ldr	r3, [pc, #132]	; (8009ed8 <HAL_SPI_Transmit_DMA+0x290>)
 8009e54:	400b      	ands	r3, r1
 8009e56:	6053      	str	r3, [r2, #4]
 8009e58:	e009      	b.n	8009e6e <HAL_SPI_Transmit_DMA+0x226>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	685a      	ldr	r2, [r3, #4]
 8009e60:	4b1d      	ldr	r3, [pc, #116]	; (8009ed8 <HAL_SPI_Transmit_DMA+0x290>)
 8009e62:	4013      	ands	r3, r2
 8009e64:	88f9      	ldrh	r1, [r7, #6]
 8009e66:	68fa      	ldr	r2, [r7, #12]
 8009e68:	6812      	ldr	r2, [r2, #0]
 8009e6a:	430b      	orrs	r3, r1
 8009e6c:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	689a      	ldr	r2, [r3, #8]
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e7c:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	691a      	ldr	r2, [r3, #16]
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 8009e8c:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f042 0201 	orr.w	r2, r2, #1
 8009e9c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ea6:	d107      	bne.n	8009eb8 <HAL_SPI_Transmit_DMA+0x270>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009eb6:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8009ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3718      	adds	r7, #24
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	0800a347 	.word	0x0800a347
 8009ed0:	0800a301 	.word	0x0800a301
 8009ed4:	0800a363 	.word	0x0800a363
 8009ed8:	ffff0000 	.word	0xffff0000

08009edc <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b08a      	sub	sp, #40	; 0x28
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	691b      	ldr	r3, [r3, #16]
 8009eea:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	695b      	ldr	r3, [r3, #20]
 8009ef2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8009ef4:	6a3a      	ldr	r2, [r7, #32]
 8009ef6:	69fb      	ldr	r3, [r7, #28]
 8009ef8:	4013      	ands	r3, r2
 8009efa:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8009f04:	2300      	movs	r3, #0
 8009f06:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009f0e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	3330      	adds	r3, #48	; 0x30
 8009f16:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d113      	bne.n	8009f4a <HAL_SPI_IRQHandler+0x6e>
 8009f22:	69bb      	ldr	r3, [r7, #24]
 8009f24:	f003 0320 	and.w	r3, r3, #32
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d10e      	bne.n	8009f4a <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d009      	beq.n	8009f4a <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	4798      	blx	r3
    hspi->RxISR(hspi);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	4798      	blx	r3
    handled = 1UL;
 8009f46:	2301      	movs	r3, #1
 8009f48:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d10f      	bne.n	8009f74 <HAL_SPI_IRQHandler+0x98>
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	f003 0301 	and.w	r3, r3, #1
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d00a      	beq.n	8009f74 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009f5e:	69bb      	ldr	r3, [r7, #24]
 8009f60:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d105      	bne.n	8009f74 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	4798      	blx	r3
    handled = 1UL;
 8009f70:	2301      	movs	r3, #1
 8009f72:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	f003 0320 	and.w	r3, r3, #32
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d10f      	bne.n	8009f9e <HAL_SPI_IRQHandler+0xc2>
 8009f7e:	69bb      	ldr	r3, [r7, #24]
 8009f80:	f003 0302 	and.w	r3, r3, #2
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d00a      	beq.n	8009f9e <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009f88:	69bb      	ldr	r3, [r7, #24]
 8009f8a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d105      	bne.n	8009f9e <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	4798      	blx	r3
    handled = 1UL;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8009f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	f040 816f 	bne.w	800a284 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8009fa6:	69bb      	ldr	r3, [r7, #24]
 8009fa8:	f003 0308 	and.w	r3, r3, #8
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	f000 80a0 	beq.w	800a0f2 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	699a      	ldr	r2, [r3, #24]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f042 0208 	orr.w	r2, r2, #8
 8009fc0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	699a      	ldr	r2, [r3, #24]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f042 0210 	orr.w	r2, r2, #16
 8009fd0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	699a      	ldr	r2, [r3, #24]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009fe0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	691a      	ldr	r2, [r3, #16]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f022 0208 	bic.w	r2, r2, #8
 8009ff0:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d00f      	beq.n	800a01c <HAL_SPI_IRQHandler+0x140>
 8009ffc:	7cfb      	ldrb	r3, [r7, #19]
 8009ffe:	2b04      	cmp	r3, #4
 800a000:	d004      	beq.n	800a00c <HAL_SPI_IRQHandler+0x130>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a006:	69db      	ldr	r3, [r3, #28]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d007      	beq.n	800a01c <HAL_SPI_IRQHandler+0x140>
 800a00c:	7cfb      	ldrb	r3, [r7, #19]
 800a00e:	2b03      	cmp	r3, #3
 800a010:	d059      	beq.n	800a0c6 <HAL_SPI_IRQHandler+0x1ea>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a016:	69db      	ldr	r3, [r3, #28]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d154      	bne.n	800a0c6 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a026:	2b00      	cmp	r3, #0
 800a028:	d13d      	bne.n	800a0a6 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800a02a:	e036      	b.n	800a09a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	2b0f      	cmp	r3, #15
 800a032:	d90b      	bls.n	800a04c <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681a      	ldr	r2, [r3, #0]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a03c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a03e:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a044:	1d1a      	adds	r2, r3, #4
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	665a      	str	r2, [r3, #100]	; 0x64
 800a04a:	e01d      	b.n	800a088 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	68db      	ldr	r3, [r3, #12]
 800a050:	2b07      	cmp	r3, #7
 800a052:	d90b      	bls.n	800a06c <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	8812      	ldrh	r2, [r2, #0]
 800a05c:	b292      	uxth	r2, r2
 800a05e:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a064:	1c9a      	adds	r2, r3, #2
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	665a      	str	r2, [r3, #100]	; 0x64
 800a06a:	e00d      	b.n	800a088 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a078:	7812      	ldrb	r2, [r2, #0]
 800a07a:	b2d2      	uxtb	r2, r2
 800a07c:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a082:	1c5a      	adds	r2, r3, #1
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a08e:	b29b      	uxth	r3, r3
 800a090:	3b01      	subs	r3, #1
 800a092:	b29a      	uxth	r2, r3
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d1c2      	bne.n	800a02c <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 f998 	bl	800a3dc <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d003      	beq.n	800a0c6 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 f914 	bl	800a2ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800a0c4:	e0e3      	b.n	800a28e <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a0c6:	7cfb      	ldrb	r3, [r7, #19]
 800a0c8:	2b05      	cmp	r3, #5
 800a0ca:	d103      	bne.n	800a0d4 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 f8f9 	bl	800a2c4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800a0d2:	e0d9      	b.n	800a288 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a0d4:	7cfb      	ldrb	r3, [r7, #19]
 800a0d6:	2b04      	cmp	r3, #4
 800a0d8:	d103      	bne.n	800a0e2 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 f8e8 	bl	800a2b0 <HAL_SPI_RxCpltCallback>
    return;
 800a0e0:	e0d2      	b.n	800a288 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a0e2:	7cfb      	ldrb	r3, [r7, #19]
 800a0e4:	2b03      	cmp	r3, #3
 800a0e6:	f040 80cf 	bne.w	800a288 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 f8d6 	bl	800a29c <HAL_SPI_TxCpltCallback>
    return;
 800a0f0:	e0ca      	b.n	800a288 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a0f2:	69fb      	ldr	r3, [r7, #28]
 800a0f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d00d      	beq.n	800a118 <HAL_SPI_IRQHandler+0x23c>
 800a0fc:	6a3b      	ldr	r3, [r7, #32]
 800a0fe:	f003 0308 	and.w	r3, r3, #8
 800a102:	2b00      	cmp	r3, #0
 800a104:	d008      	beq.n	800a118 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	699a      	ldr	r2, [r3, #24]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a114:	619a      	str	r2, [r3, #24]

    return;
 800a116:	e0ba      	b.n	800a28e <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800a11e:	2b00      	cmp	r3, #0
 800a120:	f000 80b5 	beq.w	800a28e <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a124:	69bb      	ldr	r3, [r7, #24]
 800a126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d00f      	beq.n	800a14e <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a134:	f043 0204 	orr.w	r2, r3, #4
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	699a      	ldr	r2, [r3, #24]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a14c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a14e:	69bb      	ldr	r3, [r7, #24]
 800a150:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a154:	2b00      	cmp	r3, #0
 800a156:	d00f      	beq.n	800a178 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a15e:	f043 0201 	orr.w	r2, r3, #1
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	699a      	ldr	r2, [r3, #24]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a176:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a178:	69bb      	ldr	r3, [r7, #24]
 800a17a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d00f      	beq.n	800a1a2 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a188:	f043 0208 	orr.w	r2, r3, #8
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	699a      	ldr	r2, [r3, #24]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1a0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a1a2:	69bb      	ldr	r3, [r7, #24]
 800a1a4:	f003 0320 	and.w	r3, r3, #32
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d00f      	beq.n	800a1cc <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1b2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	699a      	ldr	r2, [r3, #24]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f042 0220 	orr.w	r2, r2, #32
 800a1ca:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d05a      	beq.n	800a28c <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f022 0201 	bic.w	r2, r2, #1
 800a1e4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	6919      	ldr	r1, [r3, #16]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681a      	ldr	r2, [r3, #0]
 800a1f0:	4b28      	ldr	r3, [pc, #160]	; (800a294 <HAL_SPI_IRQHandler+0x3b8>)
 800a1f2:	400b      	ands	r3, r1
 800a1f4:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a1fc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a200:	d138      	bne.n	800a274 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	689a      	ldr	r2, [r3, #8]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a210:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a216:	2b00      	cmp	r3, #0
 800a218:	d013      	beq.n	800a242 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a21e:	4a1e      	ldr	r2, [pc, #120]	; (800a298 <HAL_SPI_IRQHandler+0x3bc>)
 800a220:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a226:	4618      	mov	r0, r3
 800a228:	f7fa f9c2 	bl	80045b0 <HAL_DMA_Abort_IT>
 800a22c:	4603      	mov	r3, r0
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d007      	beq.n	800a242 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a238:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a246:	2b00      	cmp	r3, #0
 800a248:	d020      	beq.n	800a28c <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a24e:	4a12      	ldr	r2, [pc, #72]	; (800a298 <HAL_SPI_IRQHandler+0x3bc>)
 800a250:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a256:	4618      	mov	r0, r3
 800a258:	f7fa f9aa 	bl	80045b0 <HAL_DMA_Abort_IT>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d014      	beq.n	800a28c <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a268:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a272:	e00b      	b.n	800a28c <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2201      	movs	r2, #1
 800a278:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 f835 	bl	800a2ec <HAL_SPI_ErrorCallback>
    return;
 800a282:	e003      	b.n	800a28c <HAL_SPI_IRQHandler+0x3b0>
    return;
 800a284:	bf00      	nop
 800a286:	e002      	b.n	800a28e <HAL_SPI_IRQHandler+0x3b2>
    return;
 800a288:	bf00      	nop
 800a28a:	e000      	b.n	800a28e <HAL_SPI_IRQHandler+0x3b2>
    return;
 800a28c:	bf00      	nop
  }
}
 800a28e:	3728      	adds	r7, #40	; 0x28
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}
 800a294:	fffffc94 	.word	0xfffffc94
 800a298:	0800a3a9 	.word	0x0800a3a9

0800a29c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b083      	sub	sp, #12
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a2a4:	bf00      	nop
 800a2a6:	370c      	adds	r7, #12
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr

0800a2b0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b083      	sub	sp, #12
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a2b8:	bf00      	nop
 800a2ba:	370c      	adds	r7, #12
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a2cc:	bf00      	nop
 800a2ce:	370c      	adds	r7, #12
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a2e0:	bf00      	nop
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a2f4:	bf00      	nop
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a30c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a314:	b2db      	uxtb	r3, r3
 800a316:	2b07      	cmp	r3, #7
 800a318:	d011      	beq.n	800a33e <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a31e:	69db      	ldr	r3, [r3, #28]
 800a320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a324:	d103      	bne.n	800a32e <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 800a326:	68f8      	ldr	r0, [r7, #12]
 800a328:	f7ff ffb8 	bl	800a29c <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800a32c:	e007      	b.n	800a33e <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	691a      	ldr	r2, [r3, #16]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f042 0208 	orr.w	r2, r2, #8
 800a33c:	611a      	str	r2, [r3, #16]
}
 800a33e:	bf00      	nop
 800a340:	3710      	adds	r7, #16
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}

0800a346 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a346:	b580      	push	{r7, lr}
 800a348:	b084      	sub	sp, #16
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a352:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800a354:	68f8      	ldr	r0, [r7, #12]
 800a356:	f7ff ffbf 	bl	800a2d8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a35a:	bf00      	nop
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b084      	sub	sp, #16
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a36e:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f7fb fa8b 	bl	800588c <HAL_DMA_GetError>
 800a376:	4603      	mov	r3, r0
 800a378:	2b02      	cmp	r3, #2
 800a37a:	d011      	beq.n	800a3a0 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800a37c:	68f8      	ldr	r0, [r7, #12]
 800a37e:	f000 f82d 	bl	800a3dc <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a388:	f043 0210 	orr.w	r2, r3, #16
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2201      	movs	r2, #1
 800a396:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800a39a:	68f8      	ldr	r0, [r7, #12]
 800a39c:	f7ff ffa6 	bl	800a2ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800a3a0:	bf00      	nop
 800a3a2:	3710      	adds	r7, #16
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3b4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a3ce:	68f8      	ldr	r0, [r7, #12]
 800a3d0:	f7ff ff8c 	bl	800a2ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a3d4:	bf00      	nop
 800a3d6:	3710      	adds	r7, #16
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b085      	sub	sp, #20
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	695b      	ldr	r3, [r3, #20]
 800a3ea:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	699a      	ldr	r2, [r3, #24]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f042 0208 	orr.w	r2, r2, #8
 800a3fa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	699a      	ldr	r2, [r3, #24]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f042 0210 	orr.w	r2, r2, #16
 800a40a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	681a      	ldr	r2, [r3, #0]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f022 0201 	bic.w	r2, r2, #1
 800a41a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	6919      	ldr	r1, [r3, #16]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681a      	ldr	r2, [r3, #0]
 800a426:	4b3c      	ldr	r3, [pc, #240]	; (800a518 <SPI_CloseTransfer+0x13c>)
 800a428:	400b      	ands	r3, r1
 800a42a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	689a      	ldr	r2, [r3, #8]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a43a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a442:	b2db      	uxtb	r3, r3
 800a444:	2b04      	cmp	r3, #4
 800a446:	d014      	beq.n	800a472 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f003 0320 	and.w	r3, r3, #32
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d00f      	beq.n	800a472 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a458:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	699a      	ldr	r2, [r3, #24]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f042 0220 	orr.w	r2, r2, #32
 800a470:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	2b03      	cmp	r3, #3
 800a47c:	d014      	beq.n	800a4a8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a484:	2b00      	cmp	r3, #0
 800a486:	d00f      	beq.n	800a4a8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a48e:	f043 0204 	orr.w	r2, r3, #4
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	699a      	ldr	r2, [r3, #24]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4a6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00f      	beq.n	800a4d2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4b8:	f043 0201 	orr.w	r2, r3, #1
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	699a      	ldr	r2, [r3, #24]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4d0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d00f      	beq.n	800a4fc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4e2:	f043 0208 	orr.w	r2, r3, #8
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	699a      	ldr	r2, [r3, #24]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a4fa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2200      	movs	r2, #0
 800a500:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800a50c:	bf00      	nop
 800a50e:	3714      	adds	r7, #20
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr
 800a518:	fffffc90 	.word	0xfffffc90

0800a51c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	60b9      	str	r1, [r7, #8]
 800a526:	603b      	str	r3, [r7, #0]
 800a528:	4613      	mov	r3, r2
 800a52a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a52c:	e010      	b.n	800a550 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a52e:	f7f9 f919 	bl	8003764 <HAL_GetTick>
 800a532:	4602      	mov	r2, r0
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	1ad3      	subs	r3, r2, r3
 800a538:	69ba      	ldr	r2, [r7, #24]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d803      	bhi.n	800a546 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a544:	d102      	bne.n	800a54c <SPI_WaitOnFlagUntilTimeout+0x30>
 800a546:	69bb      	ldr	r3, [r7, #24]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d101      	bne.n	800a550 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a54c:	2303      	movs	r3, #3
 800a54e:	e00f      	b.n	800a570 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	695a      	ldr	r2, [r3, #20]
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	4013      	ands	r3, r2
 800a55a:	68ba      	ldr	r2, [r7, #8]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	bf0c      	ite	eq
 800a560:	2301      	moveq	r3, #1
 800a562:	2300      	movne	r3, #0
 800a564:	b2db      	uxtb	r3, r3
 800a566:	461a      	mov	r2, r3
 800a568:	79fb      	ldrb	r3, [r7, #7]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d0df      	beq.n	800a52e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a56e:	2300      	movs	r3, #0
}
 800a570:	4618      	mov	r0, r3
 800a572:	3710      	adds	r7, #16
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a578:	b480      	push	{r7}
 800a57a:	b085      	sub	sp, #20
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a584:	095b      	lsrs	r3, r3, #5
 800a586:	3301      	adds	r3, #1
 800a588:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	68db      	ldr	r3, [r3, #12]
 800a58e:	3301      	adds	r3, #1
 800a590:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	3307      	adds	r3, #7
 800a596:	08db      	lsrs	r3, r3, #3
 800a598:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	68fa      	ldr	r2, [r7, #12]
 800a59e:	fb02 f303 	mul.w	r3, r2, r3
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3714      	adds	r7, #20
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr

0800a5ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b082      	sub	sp, #8
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d101      	bne.n	800a5c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	e049      	b.n	800a654 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d106      	bne.n	800a5da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f7f8 fe05 	bl	80031e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2202      	movs	r2, #2
 800a5de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	3304      	adds	r3, #4
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	4610      	mov	r0, r2
 800a5ee:	f000 fb15 	bl	800ac1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2201      	movs	r2, #1
 800a606:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2201      	movs	r2, #1
 800a60e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2201      	movs	r2, #1
 800a616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2201      	movs	r2, #1
 800a61e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2201      	movs	r2, #1
 800a626:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2201      	movs	r2, #1
 800a62e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2201      	movs	r2, #1
 800a636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2201      	movs	r2, #1
 800a63e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2201      	movs	r2, #1
 800a646:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2201      	movs	r2, #1
 800a64e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a652:	2300      	movs	r3, #0
}
 800a654:	4618      	mov	r0, r3
 800a656:	3708      	adds	r7, #8
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	6a1a      	ldr	r2, [r3, #32]
 800a66a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a66e:	4013      	ands	r3, r2
 800a670:	2b00      	cmp	r3, #0
 800a672:	d10f      	bne.n	800a694 <HAL_TIM_Base_Stop+0x38>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	6a1a      	ldr	r2, [r3, #32]
 800a67a:	f240 4344 	movw	r3, #1092	; 0x444
 800a67e:	4013      	ands	r3, r2
 800a680:	2b00      	cmp	r3, #0
 800a682:	d107      	bne.n	800a694 <HAL_TIM_Base_Stop+0x38>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f022 0201 	bic.w	r2, r2, #1
 800a692:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2201      	movs	r2, #1
 800a698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	370c      	adds	r7, #12
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr
	...

0800a6ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b085      	sub	sp, #20
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d001      	beq.n	800a6c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	e054      	b.n	800a76e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2202      	movs	r2, #2
 800a6c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	68da      	ldr	r2, [r3, #12]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f042 0201 	orr.w	r2, r2, #1
 800a6da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a26      	ldr	r2, [pc, #152]	; (800a77c <HAL_TIM_Base_Start_IT+0xd0>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d022      	beq.n	800a72c <HAL_TIM_Base_Start_IT+0x80>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6ee:	d01d      	beq.n	800a72c <HAL_TIM_Base_Start_IT+0x80>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a22      	ldr	r2, [pc, #136]	; (800a780 <HAL_TIM_Base_Start_IT+0xd4>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d018      	beq.n	800a72c <HAL_TIM_Base_Start_IT+0x80>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4a21      	ldr	r2, [pc, #132]	; (800a784 <HAL_TIM_Base_Start_IT+0xd8>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d013      	beq.n	800a72c <HAL_TIM_Base_Start_IT+0x80>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4a1f      	ldr	r2, [pc, #124]	; (800a788 <HAL_TIM_Base_Start_IT+0xdc>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d00e      	beq.n	800a72c <HAL_TIM_Base_Start_IT+0x80>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4a1e      	ldr	r2, [pc, #120]	; (800a78c <HAL_TIM_Base_Start_IT+0xe0>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d009      	beq.n	800a72c <HAL_TIM_Base_Start_IT+0x80>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a1c      	ldr	r2, [pc, #112]	; (800a790 <HAL_TIM_Base_Start_IT+0xe4>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d004      	beq.n	800a72c <HAL_TIM_Base_Start_IT+0x80>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4a1b      	ldr	r2, [pc, #108]	; (800a794 <HAL_TIM_Base_Start_IT+0xe8>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d115      	bne.n	800a758 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	689a      	ldr	r2, [r3, #8]
 800a732:	4b19      	ldr	r3, [pc, #100]	; (800a798 <HAL_TIM_Base_Start_IT+0xec>)
 800a734:	4013      	ands	r3, r2
 800a736:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2b06      	cmp	r3, #6
 800a73c:	d015      	beq.n	800a76a <HAL_TIM_Base_Start_IT+0xbe>
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a744:	d011      	beq.n	800a76a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f042 0201 	orr.w	r2, r2, #1
 800a754:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a756:	e008      	b.n	800a76a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	681a      	ldr	r2, [r3, #0]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f042 0201 	orr.w	r2, r2, #1
 800a766:	601a      	str	r2, [r3, #0]
 800a768:	e000      	b.n	800a76c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a76a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a76c:	2300      	movs	r3, #0
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3714      	adds	r7, #20
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr
 800a77a:	bf00      	nop
 800a77c:	40010000 	.word	0x40010000
 800a780:	40000400 	.word	0x40000400
 800a784:	40000800 	.word	0x40000800
 800a788:	40000c00 	.word	0x40000c00
 800a78c:	40010400 	.word	0x40010400
 800a790:	40001800 	.word	0x40001800
 800a794:	40014000 	.word	0x40014000
 800a798:	00010007 	.word	0x00010007

0800a79c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	691b      	ldr	r3, [r3, #16]
 800a7aa:	f003 0302 	and.w	r3, r3, #2
 800a7ae:	2b02      	cmp	r3, #2
 800a7b0:	d122      	bne.n	800a7f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	f003 0302 	and.w	r3, r3, #2
 800a7bc:	2b02      	cmp	r3, #2
 800a7be:	d11b      	bne.n	800a7f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f06f 0202 	mvn.w	r2, #2
 800a7c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	699b      	ldr	r3, [r3, #24]
 800a7d6:	f003 0303 	and.w	r3, r3, #3
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d003      	beq.n	800a7e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 f9fe 	bl	800abe0 <HAL_TIM_IC_CaptureCallback>
 800a7e4:	e005      	b.n	800a7f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 f9f0 	bl	800abcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 fa01 	bl	800abf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	691b      	ldr	r3, [r3, #16]
 800a7fe:	f003 0304 	and.w	r3, r3, #4
 800a802:	2b04      	cmp	r3, #4
 800a804:	d122      	bne.n	800a84c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	f003 0304 	and.w	r3, r3, #4
 800a810:	2b04      	cmp	r3, #4
 800a812:	d11b      	bne.n	800a84c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f06f 0204 	mvn.w	r2, #4
 800a81c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2202      	movs	r2, #2
 800a822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	699b      	ldr	r3, [r3, #24]
 800a82a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d003      	beq.n	800a83a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 f9d4 	bl	800abe0 <HAL_TIM_IC_CaptureCallback>
 800a838:	e005      	b.n	800a846 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 f9c6 	bl	800abcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f000 f9d7 	bl	800abf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2200      	movs	r2, #0
 800a84a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	691b      	ldr	r3, [r3, #16]
 800a852:	f003 0308 	and.w	r3, r3, #8
 800a856:	2b08      	cmp	r3, #8
 800a858:	d122      	bne.n	800a8a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	68db      	ldr	r3, [r3, #12]
 800a860:	f003 0308 	and.w	r3, r3, #8
 800a864:	2b08      	cmp	r3, #8
 800a866:	d11b      	bne.n	800a8a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f06f 0208 	mvn.w	r2, #8
 800a870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2204      	movs	r2, #4
 800a876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	69db      	ldr	r3, [r3, #28]
 800a87e:	f003 0303 	and.w	r3, r3, #3
 800a882:	2b00      	cmp	r3, #0
 800a884:	d003      	beq.n	800a88e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 f9aa 	bl	800abe0 <HAL_TIM_IC_CaptureCallback>
 800a88c:	e005      	b.n	800a89a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 f99c 	bl	800abcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 f9ad 	bl	800abf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2200      	movs	r2, #0
 800a89e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	691b      	ldr	r3, [r3, #16]
 800a8a6:	f003 0310 	and.w	r3, r3, #16
 800a8aa:	2b10      	cmp	r3, #16
 800a8ac:	d122      	bne.n	800a8f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	f003 0310 	and.w	r3, r3, #16
 800a8b8:	2b10      	cmp	r3, #16
 800a8ba:	d11b      	bne.n	800a8f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f06f 0210 	mvn.w	r2, #16
 800a8c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2208      	movs	r2, #8
 800a8ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	69db      	ldr	r3, [r3, #28]
 800a8d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d003      	beq.n	800a8e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 f980 	bl	800abe0 <HAL_TIM_IC_CaptureCallback>
 800a8e0:	e005      	b.n	800a8ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 f972 	bl	800abcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 f983 	bl	800abf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	691b      	ldr	r3, [r3, #16]
 800a8fa:	f003 0301 	and.w	r3, r3, #1
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	d10e      	bne.n	800a920 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	68db      	ldr	r3, [r3, #12]
 800a908:	f003 0301 	and.w	r3, r3, #1
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d107      	bne.n	800a920 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f06f 0201 	mvn.w	r2, #1
 800a918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f7f6 fb94 	bl	8001048 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	691b      	ldr	r3, [r3, #16]
 800a926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a92a:	2b80      	cmp	r3, #128	; 0x80
 800a92c:	d10e      	bne.n	800a94c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	68db      	ldr	r3, [r3, #12]
 800a934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a938:	2b80      	cmp	r3, #128	; 0x80
 800a93a:	d107      	bne.n	800a94c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 fb38 	bl	800afbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	691b      	ldr	r3, [r3, #16]
 800a952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a95a:	d10e      	bne.n	800a97a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	68db      	ldr	r3, [r3, #12]
 800a962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a966:	2b80      	cmp	r3, #128	; 0x80
 800a968:	d107      	bne.n	800a97a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f000 fb2b 	bl	800afd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	691b      	ldr	r3, [r3, #16]
 800a980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a984:	2b40      	cmp	r3, #64	; 0x40
 800a986:	d10e      	bne.n	800a9a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	68db      	ldr	r3, [r3, #12]
 800a98e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a992:	2b40      	cmp	r3, #64	; 0x40
 800a994:	d107      	bne.n	800a9a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a99e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 f931 	bl	800ac08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	691b      	ldr	r3, [r3, #16]
 800a9ac:	f003 0320 	and.w	r3, r3, #32
 800a9b0:	2b20      	cmp	r3, #32
 800a9b2:	d10e      	bne.n	800a9d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	68db      	ldr	r3, [r3, #12]
 800a9ba:	f003 0320 	and.w	r3, r3, #32
 800a9be:	2b20      	cmp	r3, #32
 800a9c0:	d107      	bne.n	800a9d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f06f 0220 	mvn.w	r2, #32
 800a9ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f000 faeb 	bl	800afa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a9d2:	bf00      	nop
 800a9d4:	3708      	adds	r7, #8
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
	...

0800a9dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b084      	sub	sp, #16
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d101      	bne.n	800a9f8 <HAL_TIM_ConfigClockSource+0x1c>
 800a9f4:	2302      	movs	r3, #2
 800a9f6:	e0dc      	b.n	800abb2 <HAL_TIM_ConfigClockSource+0x1d6>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2202      	movs	r2, #2
 800aa04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aa10:	68ba      	ldr	r2, [r7, #8]
 800aa12:	4b6a      	ldr	r3, [pc, #424]	; (800abbc <HAL_TIM_ConfigClockSource+0x1e0>)
 800aa14:	4013      	ands	r3, r2
 800aa16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aa1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	68ba      	ldr	r2, [r7, #8]
 800aa26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a64      	ldr	r2, [pc, #400]	; (800abc0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	f000 80a9 	beq.w	800ab86 <HAL_TIM_ConfigClockSource+0x1aa>
 800aa34:	4a62      	ldr	r2, [pc, #392]	; (800abc0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	f200 80ae 	bhi.w	800ab98 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa3c:	4a61      	ldr	r2, [pc, #388]	; (800abc4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	f000 80a1 	beq.w	800ab86 <HAL_TIM_ConfigClockSource+0x1aa>
 800aa44:	4a5f      	ldr	r2, [pc, #380]	; (800abc4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	f200 80a6 	bhi.w	800ab98 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa4c:	4a5e      	ldr	r2, [pc, #376]	; (800abc8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	f000 8099 	beq.w	800ab86 <HAL_TIM_ConfigClockSource+0x1aa>
 800aa54:	4a5c      	ldr	r2, [pc, #368]	; (800abc8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	f200 809e 	bhi.w	800ab98 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa5c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800aa60:	f000 8091 	beq.w	800ab86 <HAL_TIM_ConfigClockSource+0x1aa>
 800aa64:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800aa68:	f200 8096 	bhi.w	800ab98 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa70:	f000 8089 	beq.w	800ab86 <HAL_TIM_ConfigClockSource+0x1aa>
 800aa74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa78:	f200 808e 	bhi.w	800ab98 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa80:	d03e      	beq.n	800ab00 <HAL_TIM_ConfigClockSource+0x124>
 800aa82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa86:	f200 8087 	bhi.w	800ab98 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa8e:	f000 8086 	beq.w	800ab9e <HAL_TIM_ConfigClockSource+0x1c2>
 800aa92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa96:	d87f      	bhi.n	800ab98 <HAL_TIM_ConfigClockSource+0x1bc>
 800aa98:	2b70      	cmp	r3, #112	; 0x70
 800aa9a:	d01a      	beq.n	800aad2 <HAL_TIM_ConfigClockSource+0xf6>
 800aa9c:	2b70      	cmp	r3, #112	; 0x70
 800aa9e:	d87b      	bhi.n	800ab98 <HAL_TIM_ConfigClockSource+0x1bc>
 800aaa0:	2b60      	cmp	r3, #96	; 0x60
 800aaa2:	d050      	beq.n	800ab46 <HAL_TIM_ConfigClockSource+0x16a>
 800aaa4:	2b60      	cmp	r3, #96	; 0x60
 800aaa6:	d877      	bhi.n	800ab98 <HAL_TIM_ConfigClockSource+0x1bc>
 800aaa8:	2b50      	cmp	r3, #80	; 0x50
 800aaaa:	d03c      	beq.n	800ab26 <HAL_TIM_ConfigClockSource+0x14a>
 800aaac:	2b50      	cmp	r3, #80	; 0x50
 800aaae:	d873      	bhi.n	800ab98 <HAL_TIM_ConfigClockSource+0x1bc>
 800aab0:	2b40      	cmp	r3, #64	; 0x40
 800aab2:	d058      	beq.n	800ab66 <HAL_TIM_ConfigClockSource+0x18a>
 800aab4:	2b40      	cmp	r3, #64	; 0x40
 800aab6:	d86f      	bhi.n	800ab98 <HAL_TIM_ConfigClockSource+0x1bc>
 800aab8:	2b30      	cmp	r3, #48	; 0x30
 800aaba:	d064      	beq.n	800ab86 <HAL_TIM_ConfigClockSource+0x1aa>
 800aabc:	2b30      	cmp	r3, #48	; 0x30
 800aabe:	d86b      	bhi.n	800ab98 <HAL_TIM_ConfigClockSource+0x1bc>
 800aac0:	2b20      	cmp	r3, #32
 800aac2:	d060      	beq.n	800ab86 <HAL_TIM_ConfigClockSource+0x1aa>
 800aac4:	2b20      	cmp	r3, #32
 800aac6:	d867      	bhi.n	800ab98 <HAL_TIM_ConfigClockSource+0x1bc>
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d05c      	beq.n	800ab86 <HAL_TIM_ConfigClockSource+0x1aa>
 800aacc:	2b10      	cmp	r3, #16
 800aace:	d05a      	beq.n	800ab86 <HAL_TIM_ConfigClockSource+0x1aa>
 800aad0:	e062      	b.n	800ab98 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6818      	ldr	r0, [r3, #0]
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	6899      	ldr	r1, [r3, #8]
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	685a      	ldr	r2, [r3, #4]
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	68db      	ldr	r3, [r3, #12]
 800aae2:	f000 f9b3 	bl	800ae4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	689b      	ldr	r3, [r3, #8]
 800aaec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800aaf4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	68ba      	ldr	r2, [r7, #8]
 800aafc:	609a      	str	r2, [r3, #8]
      break;
 800aafe:	e04f      	b.n	800aba0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6818      	ldr	r0, [r3, #0]
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	6899      	ldr	r1, [r3, #8]
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	685a      	ldr	r2, [r3, #4]
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	68db      	ldr	r3, [r3, #12]
 800ab10:	f000 f99c 	bl	800ae4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	689a      	ldr	r2, [r3, #8]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ab22:	609a      	str	r2, [r3, #8]
      break;
 800ab24:	e03c      	b.n	800aba0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6818      	ldr	r0, [r3, #0]
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	6859      	ldr	r1, [r3, #4]
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	461a      	mov	r2, r3
 800ab34:	f000 f90c 	bl	800ad50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	2150      	movs	r1, #80	; 0x50
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f000 f966 	bl	800ae10 <TIM_ITRx_SetConfig>
      break;
 800ab44:	e02c      	b.n	800aba0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6818      	ldr	r0, [r3, #0]
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	6859      	ldr	r1, [r3, #4]
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	461a      	mov	r2, r3
 800ab54:	f000 f92b 	bl	800adae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2160      	movs	r1, #96	; 0x60
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f000 f956 	bl	800ae10 <TIM_ITRx_SetConfig>
      break;
 800ab64:	e01c      	b.n	800aba0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6818      	ldr	r0, [r3, #0]
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	6859      	ldr	r1, [r3, #4]
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	68db      	ldr	r3, [r3, #12]
 800ab72:	461a      	mov	r2, r3
 800ab74:	f000 f8ec 	bl	800ad50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	2140      	movs	r1, #64	; 0x40
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f000 f946 	bl	800ae10 <TIM_ITRx_SetConfig>
      break;
 800ab84:	e00c      	b.n	800aba0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4619      	mov	r1, r3
 800ab90:	4610      	mov	r0, r2
 800ab92:	f000 f93d 	bl	800ae10 <TIM_ITRx_SetConfig>
      break;
 800ab96:	e003      	b.n	800aba0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	73fb      	strb	r3, [r7, #15]
      break;
 800ab9c:	e000      	b.n	800aba0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ab9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2201      	movs	r2, #1
 800aba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2200      	movs	r2, #0
 800abac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800abb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	bf00      	nop
 800abbc:	ffceff88 	.word	0xffceff88
 800abc0:	00100040 	.word	0x00100040
 800abc4:	00100030 	.word	0x00100030
 800abc8:	00100020 	.word	0x00100020

0800abcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800abd4:	bf00      	nop
 800abd6:	370c      	adds	r7, #12
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b083      	sub	sp, #12
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800abe8:	bf00      	nop
 800abea:	370c      	adds	r7, #12
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr

0800abf4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800abfc:	bf00      	nop
 800abfe:	370c      	adds	r7, #12
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b083      	sub	sp, #12
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac10:	bf00      	nop
 800ac12:	370c      	adds	r7, #12
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr

0800ac1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b085      	sub	sp, #20
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	4a40      	ldr	r2, [pc, #256]	; (800ad30 <TIM_Base_SetConfig+0x114>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d013      	beq.n	800ac5c <TIM_Base_SetConfig+0x40>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac3a:	d00f      	beq.n	800ac5c <TIM_Base_SetConfig+0x40>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	4a3d      	ldr	r2, [pc, #244]	; (800ad34 <TIM_Base_SetConfig+0x118>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d00b      	beq.n	800ac5c <TIM_Base_SetConfig+0x40>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	4a3c      	ldr	r2, [pc, #240]	; (800ad38 <TIM_Base_SetConfig+0x11c>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d007      	beq.n	800ac5c <TIM_Base_SetConfig+0x40>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	4a3b      	ldr	r2, [pc, #236]	; (800ad3c <TIM_Base_SetConfig+0x120>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d003      	beq.n	800ac5c <TIM_Base_SetConfig+0x40>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	4a3a      	ldr	r2, [pc, #232]	; (800ad40 <TIM_Base_SetConfig+0x124>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d108      	bne.n	800ac6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	4a2f      	ldr	r2, [pc, #188]	; (800ad30 <TIM_Base_SetConfig+0x114>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d01f      	beq.n	800acb6 <TIM_Base_SetConfig+0x9a>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac7c:	d01b      	beq.n	800acb6 <TIM_Base_SetConfig+0x9a>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	4a2c      	ldr	r2, [pc, #176]	; (800ad34 <TIM_Base_SetConfig+0x118>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d017      	beq.n	800acb6 <TIM_Base_SetConfig+0x9a>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	4a2b      	ldr	r2, [pc, #172]	; (800ad38 <TIM_Base_SetConfig+0x11c>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d013      	beq.n	800acb6 <TIM_Base_SetConfig+0x9a>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	4a2a      	ldr	r2, [pc, #168]	; (800ad3c <TIM_Base_SetConfig+0x120>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d00f      	beq.n	800acb6 <TIM_Base_SetConfig+0x9a>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	4a29      	ldr	r2, [pc, #164]	; (800ad40 <TIM_Base_SetConfig+0x124>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d00b      	beq.n	800acb6 <TIM_Base_SetConfig+0x9a>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	4a28      	ldr	r2, [pc, #160]	; (800ad44 <TIM_Base_SetConfig+0x128>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d007      	beq.n	800acb6 <TIM_Base_SetConfig+0x9a>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	4a27      	ldr	r2, [pc, #156]	; (800ad48 <TIM_Base_SetConfig+0x12c>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d003      	beq.n	800acb6 <TIM_Base_SetConfig+0x9a>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	4a26      	ldr	r2, [pc, #152]	; (800ad4c <TIM_Base_SetConfig+0x130>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d108      	bne.n	800acc8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	68db      	ldr	r3, [r3, #12]
 800acc2:	68fa      	ldr	r2, [r7, #12]
 800acc4:	4313      	orrs	r3, r2
 800acc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	695b      	ldr	r3, [r3, #20]
 800acd2:	4313      	orrs	r3, r2
 800acd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	689a      	ldr	r2, [r3, #8]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	681a      	ldr	r2, [r3, #0]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	4a10      	ldr	r2, [pc, #64]	; (800ad30 <TIM_Base_SetConfig+0x114>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d00f      	beq.n	800ad14 <TIM_Base_SetConfig+0xf8>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	4a12      	ldr	r2, [pc, #72]	; (800ad40 <TIM_Base_SetConfig+0x124>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d00b      	beq.n	800ad14 <TIM_Base_SetConfig+0xf8>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	4a11      	ldr	r2, [pc, #68]	; (800ad44 <TIM_Base_SetConfig+0x128>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d007      	beq.n	800ad14 <TIM_Base_SetConfig+0xf8>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	4a10      	ldr	r2, [pc, #64]	; (800ad48 <TIM_Base_SetConfig+0x12c>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d003      	beq.n	800ad14 <TIM_Base_SetConfig+0xf8>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	4a0f      	ldr	r2, [pc, #60]	; (800ad4c <TIM_Base_SetConfig+0x130>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d103      	bne.n	800ad1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	691a      	ldr	r2, [r3, #16]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2201      	movs	r2, #1
 800ad20:	615a      	str	r2, [r3, #20]
}
 800ad22:	bf00      	nop
 800ad24:	3714      	adds	r7, #20
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr
 800ad2e:	bf00      	nop
 800ad30:	40010000 	.word	0x40010000
 800ad34:	40000400 	.word	0x40000400
 800ad38:	40000800 	.word	0x40000800
 800ad3c:	40000c00 	.word	0x40000c00
 800ad40:	40010400 	.word	0x40010400
 800ad44:	40014000 	.word	0x40014000
 800ad48:	40014400 	.word	0x40014400
 800ad4c:	40014800 	.word	0x40014800

0800ad50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b087      	sub	sp, #28
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	6a1b      	ldr	r3, [r3, #32]
 800ad60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	6a1b      	ldr	r3, [r3, #32]
 800ad66:	f023 0201 	bic.w	r2, r3, #1
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	699b      	ldr	r3, [r3, #24]
 800ad72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	011b      	lsls	r3, r3, #4
 800ad80:	693a      	ldr	r2, [r7, #16]
 800ad82:	4313      	orrs	r3, r2
 800ad84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	f023 030a 	bic.w	r3, r3, #10
 800ad8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad8e:	697a      	ldr	r2, [r7, #20]
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	4313      	orrs	r3, r2
 800ad94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	693a      	ldr	r2, [r7, #16]
 800ad9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	697a      	ldr	r2, [r7, #20]
 800ada0:	621a      	str	r2, [r3, #32]
}
 800ada2:	bf00      	nop
 800ada4:	371c      	adds	r7, #28
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr

0800adae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800adae:	b480      	push	{r7}
 800adb0:	b087      	sub	sp, #28
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	60f8      	str	r0, [r7, #12]
 800adb6:	60b9      	str	r1, [r7, #8]
 800adb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	6a1b      	ldr	r3, [r3, #32]
 800adbe:	f023 0210 	bic.w	r2, r3, #16
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	699b      	ldr	r3, [r3, #24]
 800adca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	6a1b      	ldr	r3, [r3, #32]
 800add0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800add8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	031b      	lsls	r3, r3, #12
 800adde:	697a      	ldr	r2, [r7, #20]
 800ade0:	4313      	orrs	r3, r2
 800ade2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800adea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	011b      	lsls	r3, r3, #4
 800adf0:	693a      	ldr	r2, [r7, #16]
 800adf2:	4313      	orrs	r3, r2
 800adf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	697a      	ldr	r2, [r7, #20]
 800adfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	693a      	ldr	r2, [r7, #16]
 800ae00:	621a      	str	r2, [r3, #32]
}
 800ae02:	bf00      	nop
 800ae04:	371c      	adds	r7, #28
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr
	...

0800ae10 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b085      	sub	sp, #20
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	689b      	ldr	r3, [r3, #8]
 800ae1e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae20:	68fa      	ldr	r2, [r7, #12]
 800ae22:	4b09      	ldr	r3, [pc, #36]	; (800ae48 <TIM_ITRx_SetConfig+0x38>)
 800ae24:	4013      	ands	r3, r2
 800ae26:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae28:	683a      	ldr	r2, [r7, #0]
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	f043 0307 	orr.w	r3, r3, #7
 800ae32:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	68fa      	ldr	r2, [r7, #12]
 800ae38:	609a      	str	r2, [r3, #8]
}
 800ae3a:	bf00      	nop
 800ae3c:	3714      	adds	r7, #20
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr
 800ae46:	bf00      	nop
 800ae48:	ffcfff8f 	.word	0xffcfff8f

0800ae4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b087      	sub	sp, #28
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	607a      	str	r2, [r7, #4]
 800ae58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ae66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	021a      	lsls	r2, r3, #8
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	431a      	orrs	r2, r3
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	4313      	orrs	r3, r2
 800ae74:	697a      	ldr	r2, [r7, #20]
 800ae76:	4313      	orrs	r3, r2
 800ae78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	697a      	ldr	r2, [r7, #20]
 800ae7e:	609a      	str	r2, [r3, #8]
}
 800ae80:	bf00      	nop
 800ae82:	371c      	adds	r7, #28
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr

0800ae8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b085      	sub	sp, #20
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d101      	bne.n	800aea4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aea0:	2302      	movs	r3, #2
 800aea2:	e06d      	b.n	800af80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2201      	movs	r2, #1
 800aea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2202      	movs	r2, #2
 800aeb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	4a30      	ldr	r2, [pc, #192]	; (800af8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d004      	beq.n	800aed8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4a2f      	ldr	r2, [pc, #188]	; (800af90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d108      	bne.n	800aeea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aede:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	68fa      	ldr	r2, [r7, #12]
 800aee6:	4313      	orrs	r3, r2
 800aee8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aef0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	68fa      	ldr	r2, [r7, #12]
 800aef8:	4313      	orrs	r3, r2
 800aefa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	68fa      	ldr	r2, [r7, #12]
 800af02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4a20      	ldr	r2, [pc, #128]	; (800af8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d022      	beq.n	800af54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af16:	d01d      	beq.n	800af54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4a1d      	ldr	r2, [pc, #116]	; (800af94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d018      	beq.n	800af54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4a1c      	ldr	r2, [pc, #112]	; (800af98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d013      	beq.n	800af54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4a1a      	ldr	r2, [pc, #104]	; (800af9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d00e      	beq.n	800af54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4a15      	ldr	r2, [pc, #84]	; (800af90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d009      	beq.n	800af54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4a16      	ldr	r2, [pc, #88]	; (800afa0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d004      	beq.n	800af54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4a15      	ldr	r2, [pc, #84]	; (800afa4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800af50:	4293      	cmp	r3, r2
 800af52:	d10c      	bne.n	800af6e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	68ba      	ldr	r2, [r7, #8]
 800af62:	4313      	orrs	r3, r2
 800af64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	68ba      	ldr	r2, [r7, #8]
 800af6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2201      	movs	r2, #1
 800af72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2200      	movs	r2, #0
 800af7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af7e:	2300      	movs	r3, #0
}
 800af80:	4618      	mov	r0, r3
 800af82:	3714      	adds	r7, #20
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr
 800af8c:	40010000 	.word	0x40010000
 800af90:	40010400 	.word	0x40010400
 800af94:	40000400 	.word	0x40000400
 800af98:	40000800 	.word	0x40000800
 800af9c:	40000c00 	.word	0x40000c00
 800afa0:	40001800 	.word	0x40001800
 800afa4:	40014000 	.word	0x40014000

0800afa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b083      	sub	sp, #12
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800afb0:	bf00      	nop
 800afb2:	370c      	adds	r7, #12
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr

0800afbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b083      	sub	sp, #12
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800afc4:	bf00      	nop
 800afc6:	370c      	adds	r7, #12
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr

0800afd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b083      	sub	sp, #12
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800afd8:	bf00      	nop
 800afda:	370c      	adds	r7, #12
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr

0800afe4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d101      	bne.n	800aff6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aff2:	2301      	movs	r3, #1
 800aff4:	e042      	b.n	800b07c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800affc:	2b00      	cmp	r3, #0
 800affe:	d106      	bne.n	800b00e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2200      	movs	r2, #0
 800b004:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f7f8 f96f 	bl	80032ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2224      	movs	r2, #36	; 0x24
 800b012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	681a      	ldr	r2, [r3, #0]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f022 0201 	bic.w	r2, r2, #1
 800b024:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 f82c 	bl	800b084 <UART_SetConfig>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d101      	bne.n	800b036 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b032:	2301      	movs	r3, #1
 800b034:	e022      	b.n	800b07c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d002      	beq.n	800b044 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f000 fd80 	bl	800bb44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	685a      	ldr	r2, [r3, #4]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b052:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	689a      	ldr	r2, [r3, #8]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b062:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	681a      	ldr	r2, [r3, #0]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f042 0201 	orr.w	r2, r2, #1
 800b072:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 fe07 	bl	800bc88 <UART_CheckIdleState>
 800b07a:	4603      	mov	r3, r0
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3708      	adds	r7, #8
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b084:	b5b0      	push	{r4, r5, r7, lr}
 800b086:	b08e      	sub	sp, #56	; 0x38
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b08c:	2300      	movs	r3, #0
 800b08e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	689a      	ldr	r2, [r3, #8]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	691b      	ldr	r3, [r3, #16]
 800b09a:	431a      	orrs	r2, r3
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	695b      	ldr	r3, [r3, #20]
 800b0a0:	431a      	orrs	r2, r3
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	69db      	ldr	r3, [r3, #28]
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	681a      	ldr	r2, [r3, #0]
 800b0b0:	4bbf      	ldr	r3, [pc, #764]	; (800b3b0 <UART_SetConfig+0x32c>)
 800b0b2:	4013      	ands	r3, r2
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	6812      	ldr	r2, [r2, #0]
 800b0b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b0ba:	430b      	orrs	r3, r1
 800b0bc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	68da      	ldr	r2, [r3, #12]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	430a      	orrs	r2, r1
 800b0d2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	699b      	ldr	r3, [r3, #24]
 800b0d8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4ab5      	ldr	r2, [pc, #724]	; (800b3b4 <UART_SetConfig+0x330>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d004      	beq.n	800b0ee <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6a1b      	ldr	r3, [r3, #32]
 800b0e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	689a      	ldr	r2, [r3, #8]
 800b0f4:	4bb0      	ldr	r3, [pc, #704]	; (800b3b8 <UART_SetConfig+0x334>)
 800b0f6:	4013      	ands	r3, r2
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	6812      	ldr	r2, [r2, #0]
 800b0fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b0fe:	430b      	orrs	r3, r1
 800b100:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b108:	f023 010f 	bic.w	r1, r3, #15
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	430a      	orrs	r2, r1
 800b116:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4aa7      	ldr	r2, [pc, #668]	; (800b3bc <UART_SetConfig+0x338>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d176      	bne.n	800b210 <UART_SetConfig+0x18c>
 800b122:	4ba7      	ldr	r3, [pc, #668]	; (800b3c0 <UART_SetConfig+0x33c>)
 800b124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b126:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b12a:	2b28      	cmp	r3, #40	; 0x28
 800b12c:	d86c      	bhi.n	800b208 <UART_SetConfig+0x184>
 800b12e:	a201      	add	r2, pc, #4	; (adr r2, 800b134 <UART_SetConfig+0xb0>)
 800b130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b134:	0800b1d9 	.word	0x0800b1d9
 800b138:	0800b209 	.word	0x0800b209
 800b13c:	0800b209 	.word	0x0800b209
 800b140:	0800b209 	.word	0x0800b209
 800b144:	0800b209 	.word	0x0800b209
 800b148:	0800b209 	.word	0x0800b209
 800b14c:	0800b209 	.word	0x0800b209
 800b150:	0800b209 	.word	0x0800b209
 800b154:	0800b1e1 	.word	0x0800b1e1
 800b158:	0800b209 	.word	0x0800b209
 800b15c:	0800b209 	.word	0x0800b209
 800b160:	0800b209 	.word	0x0800b209
 800b164:	0800b209 	.word	0x0800b209
 800b168:	0800b209 	.word	0x0800b209
 800b16c:	0800b209 	.word	0x0800b209
 800b170:	0800b209 	.word	0x0800b209
 800b174:	0800b1e9 	.word	0x0800b1e9
 800b178:	0800b209 	.word	0x0800b209
 800b17c:	0800b209 	.word	0x0800b209
 800b180:	0800b209 	.word	0x0800b209
 800b184:	0800b209 	.word	0x0800b209
 800b188:	0800b209 	.word	0x0800b209
 800b18c:	0800b209 	.word	0x0800b209
 800b190:	0800b209 	.word	0x0800b209
 800b194:	0800b1f1 	.word	0x0800b1f1
 800b198:	0800b209 	.word	0x0800b209
 800b19c:	0800b209 	.word	0x0800b209
 800b1a0:	0800b209 	.word	0x0800b209
 800b1a4:	0800b209 	.word	0x0800b209
 800b1a8:	0800b209 	.word	0x0800b209
 800b1ac:	0800b209 	.word	0x0800b209
 800b1b0:	0800b209 	.word	0x0800b209
 800b1b4:	0800b1f9 	.word	0x0800b1f9
 800b1b8:	0800b209 	.word	0x0800b209
 800b1bc:	0800b209 	.word	0x0800b209
 800b1c0:	0800b209 	.word	0x0800b209
 800b1c4:	0800b209 	.word	0x0800b209
 800b1c8:	0800b209 	.word	0x0800b209
 800b1cc:	0800b209 	.word	0x0800b209
 800b1d0:	0800b209 	.word	0x0800b209
 800b1d4:	0800b201 	.word	0x0800b201
 800b1d8:	2301      	movs	r3, #1
 800b1da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1de:	e222      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b1e0:	2304      	movs	r3, #4
 800b1e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1e6:	e21e      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b1e8:	2308      	movs	r3, #8
 800b1ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1ee:	e21a      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b1f0:	2310      	movs	r3, #16
 800b1f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1f6:	e216      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b1f8:	2320      	movs	r3, #32
 800b1fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1fe:	e212      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b200:	2340      	movs	r3, #64	; 0x40
 800b202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b206:	e20e      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b208:	2380      	movs	r3, #128	; 0x80
 800b20a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b20e:	e20a      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a6b      	ldr	r2, [pc, #428]	; (800b3c4 <UART_SetConfig+0x340>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d130      	bne.n	800b27c <UART_SetConfig+0x1f8>
 800b21a:	4b69      	ldr	r3, [pc, #420]	; (800b3c0 <UART_SetConfig+0x33c>)
 800b21c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b21e:	f003 0307 	and.w	r3, r3, #7
 800b222:	2b05      	cmp	r3, #5
 800b224:	d826      	bhi.n	800b274 <UART_SetConfig+0x1f0>
 800b226:	a201      	add	r2, pc, #4	; (adr r2, 800b22c <UART_SetConfig+0x1a8>)
 800b228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b22c:	0800b245 	.word	0x0800b245
 800b230:	0800b24d 	.word	0x0800b24d
 800b234:	0800b255 	.word	0x0800b255
 800b238:	0800b25d 	.word	0x0800b25d
 800b23c:	0800b265 	.word	0x0800b265
 800b240:	0800b26d 	.word	0x0800b26d
 800b244:	2300      	movs	r3, #0
 800b246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b24a:	e1ec      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b24c:	2304      	movs	r3, #4
 800b24e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b252:	e1e8      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b254:	2308      	movs	r3, #8
 800b256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b25a:	e1e4      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b25c:	2310      	movs	r3, #16
 800b25e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b262:	e1e0      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b264:	2320      	movs	r3, #32
 800b266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b26a:	e1dc      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b26c:	2340      	movs	r3, #64	; 0x40
 800b26e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b272:	e1d8      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b274:	2380      	movs	r3, #128	; 0x80
 800b276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b27a:	e1d4      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a51      	ldr	r2, [pc, #324]	; (800b3c8 <UART_SetConfig+0x344>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d130      	bne.n	800b2e8 <UART_SetConfig+0x264>
 800b286:	4b4e      	ldr	r3, [pc, #312]	; (800b3c0 <UART_SetConfig+0x33c>)
 800b288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b28a:	f003 0307 	and.w	r3, r3, #7
 800b28e:	2b05      	cmp	r3, #5
 800b290:	d826      	bhi.n	800b2e0 <UART_SetConfig+0x25c>
 800b292:	a201      	add	r2, pc, #4	; (adr r2, 800b298 <UART_SetConfig+0x214>)
 800b294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b298:	0800b2b1 	.word	0x0800b2b1
 800b29c:	0800b2b9 	.word	0x0800b2b9
 800b2a0:	0800b2c1 	.word	0x0800b2c1
 800b2a4:	0800b2c9 	.word	0x0800b2c9
 800b2a8:	0800b2d1 	.word	0x0800b2d1
 800b2ac:	0800b2d9 	.word	0x0800b2d9
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2b6:	e1b6      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b2b8:	2304      	movs	r3, #4
 800b2ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2be:	e1b2      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b2c0:	2308      	movs	r3, #8
 800b2c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2c6:	e1ae      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b2c8:	2310      	movs	r3, #16
 800b2ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2ce:	e1aa      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b2d0:	2320      	movs	r3, #32
 800b2d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2d6:	e1a6      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b2d8:	2340      	movs	r3, #64	; 0x40
 800b2da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2de:	e1a2      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b2e0:	2380      	movs	r3, #128	; 0x80
 800b2e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2e6:	e19e      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	4a37      	ldr	r2, [pc, #220]	; (800b3cc <UART_SetConfig+0x348>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d130      	bne.n	800b354 <UART_SetConfig+0x2d0>
 800b2f2:	4b33      	ldr	r3, [pc, #204]	; (800b3c0 <UART_SetConfig+0x33c>)
 800b2f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2f6:	f003 0307 	and.w	r3, r3, #7
 800b2fa:	2b05      	cmp	r3, #5
 800b2fc:	d826      	bhi.n	800b34c <UART_SetConfig+0x2c8>
 800b2fe:	a201      	add	r2, pc, #4	; (adr r2, 800b304 <UART_SetConfig+0x280>)
 800b300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b304:	0800b31d 	.word	0x0800b31d
 800b308:	0800b325 	.word	0x0800b325
 800b30c:	0800b32d 	.word	0x0800b32d
 800b310:	0800b335 	.word	0x0800b335
 800b314:	0800b33d 	.word	0x0800b33d
 800b318:	0800b345 	.word	0x0800b345
 800b31c:	2300      	movs	r3, #0
 800b31e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b322:	e180      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b324:	2304      	movs	r3, #4
 800b326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b32a:	e17c      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b32c:	2308      	movs	r3, #8
 800b32e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b332:	e178      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b334:	2310      	movs	r3, #16
 800b336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b33a:	e174      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b33c:	2320      	movs	r3, #32
 800b33e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b342:	e170      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b344:	2340      	movs	r3, #64	; 0x40
 800b346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b34a:	e16c      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b34c:	2380      	movs	r3, #128	; 0x80
 800b34e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b352:	e168      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	4a1d      	ldr	r2, [pc, #116]	; (800b3d0 <UART_SetConfig+0x34c>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d142      	bne.n	800b3e4 <UART_SetConfig+0x360>
 800b35e:	4b18      	ldr	r3, [pc, #96]	; (800b3c0 <UART_SetConfig+0x33c>)
 800b360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b362:	f003 0307 	and.w	r3, r3, #7
 800b366:	2b05      	cmp	r3, #5
 800b368:	d838      	bhi.n	800b3dc <UART_SetConfig+0x358>
 800b36a:	a201      	add	r2, pc, #4	; (adr r2, 800b370 <UART_SetConfig+0x2ec>)
 800b36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b370:	0800b389 	.word	0x0800b389
 800b374:	0800b391 	.word	0x0800b391
 800b378:	0800b399 	.word	0x0800b399
 800b37c:	0800b3a1 	.word	0x0800b3a1
 800b380:	0800b3a9 	.word	0x0800b3a9
 800b384:	0800b3d5 	.word	0x0800b3d5
 800b388:	2300      	movs	r3, #0
 800b38a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b38e:	e14a      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b390:	2304      	movs	r3, #4
 800b392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b396:	e146      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b398:	2308      	movs	r3, #8
 800b39a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b39e:	e142      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b3a0:	2310      	movs	r3, #16
 800b3a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3a6:	e13e      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b3a8:	2320      	movs	r3, #32
 800b3aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3ae:	e13a      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b3b0:	cfff69f3 	.word	0xcfff69f3
 800b3b4:	58000c00 	.word	0x58000c00
 800b3b8:	11fff4ff 	.word	0x11fff4ff
 800b3bc:	40011000 	.word	0x40011000
 800b3c0:	58024400 	.word	0x58024400
 800b3c4:	40004400 	.word	0x40004400
 800b3c8:	40004800 	.word	0x40004800
 800b3cc:	40004c00 	.word	0x40004c00
 800b3d0:	40005000 	.word	0x40005000
 800b3d4:	2340      	movs	r3, #64	; 0x40
 800b3d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3da:	e124      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b3dc:	2380      	movs	r3, #128	; 0x80
 800b3de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3e2:	e120      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4acc      	ldr	r2, [pc, #816]	; (800b71c <UART_SetConfig+0x698>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d176      	bne.n	800b4dc <UART_SetConfig+0x458>
 800b3ee:	4bcc      	ldr	r3, [pc, #816]	; (800b720 <UART_SetConfig+0x69c>)
 800b3f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b3f6:	2b28      	cmp	r3, #40	; 0x28
 800b3f8:	d86c      	bhi.n	800b4d4 <UART_SetConfig+0x450>
 800b3fa:	a201      	add	r2, pc, #4	; (adr r2, 800b400 <UART_SetConfig+0x37c>)
 800b3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b400:	0800b4a5 	.word	0x0800b4a5
 800b404:	0800b4d5 	.word	0x0800b4d5
 800b408:	0800b4d5 	.word	0x0800b4d5
 800b40c:	0800b4d5 	.word	0x0800b4d5
 800b410:	0800b4d5 	.word	0x0800b4d5
 800b414:	0800b4d5 	.word	0x0800b4d5
 800b418:	0800b4d5 	.word	0x0800b4d5
 800b41c:	0800b4d5 	.word	0x0800b4d5
 800b420:	0800b4ad 	.word	0x0800b4ad
 800b424:	0800b4d5 	.word	0x0800b4d5
 800b428:	0800b4d5 	.word	0x0800b4d5
 800b42c:	0800b4d5 	.word	0x0800b4d5
 800b430:	0800b4d5 	.word	0x0800b4d5
 800b434:	0800b4d5 	.word	0x0800b4d5
 800b438:	0800b4d5 	.word	0x0800b4d5
 800b43c:	0800b4d5 	.word	0x0800b4d5
 800b440:	0800b4b5 	.word	0x0800b4b5
 800b444:	0800b4d5 	.word	0x0800b4d5
 800b448:	0800b4d5 	.word	0x0800b4d5
 800b44c:	0800b4d5 	.word	0x0800b4d5
 800b450:	0800b4d5 	.word	0x0800b4d5
 800b454:	0800b4d5 	.word	0x0800b4d5
 800b458:	0800b4d5 	.word	0x0800b4d5
 800b45c:	0800b4d5 	.word	0x0800b4d5
 800b460:	0800b4bd 	.word	0x0800b4bd
 800b464:	0800b4d5 	.word	0x0800b4d5
 800b468:	0800b4d5 	.word	0x0800b4d5
 800b46c:	0800b4d5 	.word	0x0800b4d5
 800b470:	0800b4d5 	.word	0x0800b4d5
 800b474:	0800b4d5 	.word	0x0800b4d5
 800b478:	0800b4d5 	.word	0x0800b4d5
 800b47c:	0800b4d5 	.word	0x0800b4d5
 800b480:	0800b4c5 	.word	0x0800b4c5
 800b484:	0800b4d5 	.word	0x0800b4d5
 800b488:	0800b4d5 	.word	0x0800b4d5
 800b48c:	0800b4d5 	.word	0x0800b4d5
 800b490:	0800b4d5 	.word	0x0800b4d5
 800b494:	0800b4d5 	.word	0x0800b4d5
 800b498:	0800b4d5 	.word	0x0800b4d5
 800b49c:	0800b4d5 	.word	0x0800b4d5
 800b4a0:	0800b4cd 	.word	0x0800b4cd
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4aa:	e0bc      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b4ac:	2304      	movs	r3, #4
 800b4ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4b2:	e0b8      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b4b4:	2308      	movs	r3, #8
 800b4b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4ba:	e0b4      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b4bc:	2310      	movs	r3, #16
 800b4be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4c2:	e0b0      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b4c4:	2320      	movs	r3, #32
 800b4c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4ca:	e0ac      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b4cc:	2340      	movs	r3, #64	; 0x40
 800b4ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4d2:	e0a8      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b4d4:	2380      	movs	r3, #128	; 0x80
 800b4d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4da:	e0a4      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a90      	ldr	r2, [pc, #576]	; (800b724 <UART_SetConfig+0x6a0>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d130      	bne.n	800b548 <UART_SetConfig+0x4c4>
 800b4e6:	4b8e      	ldr	r3, [pc, #568]	; (800b720 <UART_SetConfig+0x69c>)
 800b4e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4ea:	f003 0307 	and.w	r3, r3, #7
 800b4ee:	2b05      	cmp	r3, #5
 800b4f0:	d826      	bhi.n	800b540 <UART_SetConfig+0x4bc>
 800b4f2:	a201      	add	r2, pc, #4	; (adr r2, 800b4f8 <UART_SetConfig+0x474>)
 800b4f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4f8:	0800b511 	.word	0x0800b511
 800b4fc:	0800b519 	.word	0x0800b519
 800b500:	0800b521 	.word	0x0800b521
 800b504:	0800b529 	.word	0x0800b529
 800b508:	0800b531 	.word	0x0800b531
 800b50c:	0800b539 	.word	0x0800b539
 800b510:	2300      	movs	r3, #0
 800b512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b516:	e086      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b518:	2304      	movs	r3, #4
 800b51a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b51e:	e082      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b520:	2308      	movs	r3, #8
 800b522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b526:	e07e      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b528:	2310      	movs	r3, #16
 800b52a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b52e:	e07a      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b530:	2320      	movs	r3, #32
 800b532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b536:	e076      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b538:	2340      	movs	r3, #64	; 0x40
 800b53a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b53e:	e072      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b540:	2380      	movs	r3, #128	; 0x80
 800b542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b546:	e06e      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4a76      	ldr	r2, [pc, #472]	; (800b728 <UART_SetConfig+0x6a4>)
 800b54e:	4293      	cmp	r3, r2
 800b550:	d130      	bne.n	800b5b4 <UART_SetConfig+0x530>
 800b552:	4b73      	ldr	r3, [pc, #460]	; (800b720 <UART_SetConfig+0x69c>)
 800b554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b556:	f003 0307 	and.w	r3, r3, #7
 800b55a:	2b05      	cmp	r3, #5
 800b55c:	d826      	bhi.n	800b5ac <UART_SetConfig+0x528>
 800b55e:	a201      	add	r2, pc, #4	; (adr r2, 800b564 <UART_SetConfig+0x4e0>)
 800b560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b564:	0800b57d 	.word	0x0800b57d
 800b568:	0800b585 	.word	0x0800b585
 800b56c:	0800b58d 	.word	0x0800b58d
 800b570:	0800b595 	.word	0x0800b595
 800b574:	0800b59d 	.word	0x0800b59d
 800b578:	0800b5a5 	.word	0x0800b5a5
 800b57c:	2300      	movs	r3, #0
 800b57e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b582:	e050      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b584:	2304      	movs	r3, #4
 800b586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b58a:	e04c      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b58c:	2308      	movs	r3, #8
 800b58e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b592:	e048      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b594:	2310      	movs	r3, #16
 800b596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b59a:	e044      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b59c:	2320      	movs	r3, #32
 800b59e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5a2:	e040      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b5a4:	2340      	movs	r3, #64	; 0x40
 800b5a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5aa:	e03c      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b5ac:	2380      	movs	r3, #128	; 0x80
 800b5ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5b2:	e038      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	4a5c      	ldr	r2, [pc, #368]	; (800b72c <UART_SetConfig+0x6a8>)
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d130      	bne.n	800b620 <UART_SetConfig+0x59c>
 800b5be:	4b58      	ldr	r3, [pc, #352]	; (800b720 <UART_SetConfig+0x69c>)
 800b5c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5c2:	f003 0307 	and.w	r3, r3, #7
 800b5c6:	2b05      	cmp	r3, #5
 800b5c8:	d826      	bhi.n	800b618 <UART_SetConfig+0x594>
 800b5ca:	a201      	add	r2, pc, #4	; (adr r2, 800b5d0 <UART_SetConfig+0x54c>)
 800b5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5d0:	0800b5e9 	.word	0x0800b5e9
 800b5d4:	0800b5f1 	.word	0x0800b5f1
 800b5d8:	0800b5f9 	.word	0x0800b5f9
 800b5dc:	0800b601 	.word	0x0800b601
 800b5e0:	0800b609 	.word	0x0800b609
 800b5e4:	0800b611 	.word	0x0800b611
 800b5e8:	2302      	movs	r3, #2
 800b5ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5ee:	e01a      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b5f0:	2304      	movs	r3, #4
 800b5f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5f6:	e016      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b5f8:	2308      	movs	r3, #8
 800b5fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5fe:	e012      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b600:	2310      	movs	r3, #16
 800b602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b606:	e00e      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b608:	2320      	movs	r3, #32
 800b60a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b60e:	e00a      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b610:	2340      	movs	r3, #64	; 0x40
 800b612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b616:	e006      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b618:	2380      	movs	r3, #128	; 0x80
 800b61a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b61e:	e002      	b.n	800b626 <UART_SetConfig+0x5a2>
 800b620:	2380      	movs	r3, #128	; 0x80
 800b622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	4a40      	ldr	r2, [pc, #256]	; (800b72c <UART_SetConfig+0x6a8>)
 800b62c:	4293      	cmp	r3, r2
 800b62e:	f040 80ef 	bne.w	800b810 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b632:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b636:	2b20      	cmp	r3, #32
 800b638:	dc46      	bgt.n	800b6c8 <UART_SetConfig+0x644>
 800b63a:	2b02      	cmp	r3, #2
 800b63c:	f2c0 8081 	blt.w	800b742 <UART_SetConfig+0x6be>
 800b640:	3b02      	subs	r3, #2
 800b642:	2b1e      	cmp	r3, #30
 800b644:	d87d      	bhi.n	800b742 <UART_SetConfig+0x6be>
 800b646:	a201      	add	r2, pc, #4	; (adr r2, 800b64c <UART_SetConfig+0x5c8>)
 800b648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b64c:	0800b6cf 	.word	0x0800b6cf
 800b650:	0800b743 	.word	0x0800b743
 800b654:	0800b6d7 	.word	0x0800b6d7
 800b658:	0800b743 	.word	0x0800b743
 800b65c:	0800b743 	.word	0x0800b743
 800b660:	0800b743 	.word	0x0800b743
 800b664:	0800b6e7 	.word	0x0800b6e7
 800b668:	0800b743 	.word	0x0800b743
 800b66c:	0800b743 	.word	0x0800b743
 800b670:	0800b743 	.word	0x0800b743
 800b674:	0800b743 	.word	0x0800b743
 800b678:	0800b743 	.word	0x0800b743
 800b67c:	0800b743 	.word	0x0800b743
 800b680:	0800b743 	.word	0x0800b743
 800b684:	0800b6f7 	.word	0x0800b6f7
 800b688:	0800b743 	.word	0x0800b743
 800b68c:	0800b743 	.word	0x0800b743
 800b690:	0800b743 	.word	0x0800b743
 800b694:	0800b743 	.word	0x0800b743
 800b698:	0800b743 	.word	0x0800b743
 800b69c:	0800b743 	.word	0x0800b743
 800b6a0:	0800b743 	.word	0x0800b743
 800b6a4:	0800b743 	.word	0x0800b743
 800b6a8:	0800b743 	.word	0x0800b743
 800b6ac:	0800b743 	.word	0x0800b743
 800b6b0:	0800b743 	.word	0x0800b743
 800b6b4:	0800b743 	.word	0x0800b743
 800b6b8:	0800b743 	.word	0x0800b743
 800b6bc:	0800b743 	.word	0x0800b743
 800b6c0:	0800b743 	.word	0x0800b743
 800b6c4:	0800b735 	.word	0x0800b735
 800b6c8:	2b40      	cmp	r3, #64	; 0x40
 800b6ca:	d036      	beq.n	800b73a <UART_SetConfig+0x6b6>
 800b6cc:	e039      	b.n	800b742 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b6ce:	f7fd fba1 	bl	8008e14 <HAL_RCCEx_GetD3PCLK1Freq>
 800b6d2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b6d4:	e03b      	b.n	800b74e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6d6:	f107 0314 	add.w	r3, r7, #20
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f7fd fbb0 	bl	8008e40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b6e0:	69bb      	ldr	r3, [r7, #24]
 800b6e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6e4:	e033      	b.n	800b74e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6e6:	f107 0308 	add.w	r3, r7, #8
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f7fd fcfc 	bl	80090e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6f4:	e02b      	b.n	800b74e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6f6:	4b0a      	ldr	r3, [pc, #40]	; (800b720 <UART_SetConfig+0x69c>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f003 0320 	and.w	r3, r3, #32
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d009      	beq.n	800b716 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b702:	4b07      	ldr	r3, [pc, #28]	; (800b720 <UART_SetConfig+0x69c>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	08db      	lsrs	r3, r3, #3
 800b708:	f003 0303 	and.w	r3, r3, #3
 800b70c:	4a08      	ldr	r2, [pc, #32]	; (800b730 <UART_SetConfig+0x6ac>)
 800b70e:	fa22 f303 	lsr.w	r3, r2, r3
 800b712:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b714:	e01b      	b.n	800b74e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800b716:	4b06      	ldr	r3, [pc, #24]	; (800b730 <UART_SetConfig+0x6ac>)
 800b718:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b71a:	e018      	b.n	800b74e <UART_SetConfig+0x6ca>
 800b71c:	40011400 	.word	0x40011400
 800b720:	58024400 	.word	0x58024400
 800b724:	40007800 	.word	0x40007800
 800b728:	40007c00 	.word	0x40007c00
 800b72c:	58000c00 	.word	0x58000c00
 800b730:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b734:	4bc4      	ldr	r3, [pc, #784]	; (800ba48 <UART_SetConfig+0x9c4>)
 800b736:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b738:	e009      	b.n	800b74e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b73a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b73e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b740:	e005      	b.n	800b74e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800b742:	2300      	movs	r3, #0
 800b744:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b746:	2301      	movs	r3, #1
 800b748:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b74c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b750:	2b00      	cmp	r3, #0
 800b752:	f000 81da 	beq.w	800bb0a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b75a:	4abc      	ldr	r2, [pc, #752]	; (800ba4c <UART_SetConfig+0x9c8>)
 800b75c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b760:	461a      	mov	r2, r3
 800b762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b764:	fbb3 f3f2 	udiv	r3, r3, r2
 800b768:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	685a      	ldr	r2, [r3, #4]
 800b76e:	4613      	mov	r3, r2
 800b770:	005b      	lsls	r3, r3, #1
 800b772:	4413      	add	r3, r2
 800b774:	6a3a      	ldr	r2, [r7, #32]
 800b776:	429a      	cmp	r2, r3
 800b778:	d305      	bcc.n	800b786 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b780:	6a3a      	ldr	r2, [r7, #32]
 800b782:	429a      	cmp	r2, r3
 800b784:	d903      	bls.n	800b78e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800b786:	2301      	movs	r3, #1
 800b788:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b78c:	e1bd      	b.n	800bb0a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b790:	4618      	mov	r0, r3
 800b792:	f04f 0100 	mov.w	r1, #0
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b79a:	4aac      	ldr	r2, [pc, #688]	; (800ba4c <UART_SetConfig+0x9c8>)
 800b79c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7a0:	b29a      	uxth	r2, r3
 800b7a2:	f04f 0300 	mov.w	r3, #0
 800b7a6:	f7f4 fdeb 	bl	8000380 <__aeabi_uldivmod>
 800b7aa:	4602      	mov	r2, r0
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	4610      	mov	r0, r2
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	f04f 0200 	mov.w	r2, #0
 800b7b6:	f04f 0300 	mov.w	r3, #0
 800b7ba:	020b      	lsls	r3, r1, #8
 800b7bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b7c0:	0202      	lsls	r2, r0, #8
 800b7c2:	6879      	ldr	r1, [r7, #4]
 800b7c4:	6849      	ldr	r1, [r1, #4]
 800b7c6:	0849      	lsrs	r1, r1, #1
 800b7c8:	4608      	mov	r0, r1
 800b7ca:	f04f 0100 	mov.w	r1, #0
 800b7ce:	1814      	adds	r4, r2, r0
 800b7d0:	eb43 0501 	adc.w	r5, r3, r1
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	461a      	mov	r2, r3
 800b7da:	f04f 0300 	mov.w	r3, #0
 800b7de:	4620      	mov	r0, r4
 800b7e0:	4629      	mov	r1, r5
 800b7e2:	f7f4 fdcd 	bl	8000380 <__aeabi_uldivmod>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	4613      	mov	r3, r2
 800b7ec:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b7f4:	d308      	bcc.n	800b808 <UART_SetConfig+0x784>
 800b7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7fc:	d204      	bcs.n	800b808 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b804:	60da      	str	r2, [r3, #12]
 800b806:	e180      	b.n	800bb0a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800b808:	2301      	movs	r3, #1
 800b80a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b80e:	e17c      	b.n	800bb0a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	69db      	ldr	r3, [r3, #28]
 800b814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b818:	f040 80be 	bne.w	800b998 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800b81c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b820:	2b20      	cmp	r3, #32
 800b822:	dc49      	bgt.n	800b8b8 <UART_SetConfig+0x834>
 800b824:	2b00      	cmp	r3, #0
 800b826:	db7c      	blt.n	800b922 <UART_SetConfig+0x89e>
 800b828:	2b20      	cmp	r3, #32
 800b82a:	d87a      	bhi.n	800b922 <UART_SetConfig+0x89e>
 800b82c:	a201      	add	r2, pc, #4	; (adr r2, 800b834 <UART_SetConfig+0x7b0>)
 800b82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b832:	bf00      	nop
 800b834:	0800b8bf 	.word	0x0800b8bf
 800b838:	0800b8c7 	.word	0x0800b8c7
 800b83c:	0800b923 	.word	0x0800b923
 800b840:	0800b923 	.word	0x0800b923
 800b844:	0800b8cf 	.word	0x0800b8cf
 800b848:	0800b923 	.word	0x0800b923
 800b84c:	0800b923 	.word	0x0800b923
 800b850:	0800b923 	.word	0x0800b923
 800b854:	0800b8df 	.word	0x0800b8df
 800b858:	0800b923 	.word	0x0800b923
 800b85c:	0800b923 	.word	0x0800b923
 800b860:	0800b923 	.word	0x0800b923
 800b864:	0800b923 	.word	0x0800b923
 800b868:	0800b923 	.word	0x0800b923
 800b86c:	0800b923 	.word	0x0800b923
 800b870:	0800b923 	.word	0x0800b923
 800b874:	0800b8ef 	.word	0x0800b8ef
 800b878:	0800b923 	.word	0x0800b923
 800b87c:	0800b923 	.word	0x0800b923
 800b880:	0800b923 	.word	0x0800b923
 800b884:	0800b923 	.word	0x0800b923
 800b888:	0800b923 	.word	0x0800b923
 800b88c:	0800b923 	.word	0x0800b923
 800b890:	0800b923 	.word	0x0800b923
 800b894:	0800b923 	.word	0x0800b923
 800b898:	0800b923 	.word	0x0800b923
 800b89c:	0800b923 	.word	0x0800b923
 800b8a0:	0800b923 	.word	0x0800b923
 800b8a4:	0800b923 	.word	0x0800b923
 800b8a8:	0800b923 	.word	0x0800b923
 800b8ac:	0800b923 	.word	0x0800b923
 800b8b0:	0800b923 	.word	0x0800b923
 800b8b4:	0800b915 	.word	0x0800b915
 800b8b8:	2b40      	cmp	r3, #64	; 0x40
 800b8ba:	d02e      	beq.n	800b91a <UART_SetConfig+0x896>
 800b8bc:	e031      	b.n	800b922 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8be:	f7fc fb3d 	bl	8007f3c <HAL_RCC_GetPCLK1Freq>
 800b8c2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b8c4:	e033      	b.n	800b92e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8c6:	f7fc fb4f 	bl	8007f68 <HAL_RCC_GetPCLK2Freq>
 800b8ca:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b8cc:	e02f      	b.n	800b92e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8ce:	f107 0314 	add.w	r3, r7, #20
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f7fd fab4 	bl	8008e40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b8d8:	69bb      	ldr	r3, [r7, #24]
 800b8da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b8dc:	e027      	b.n	800b92e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8de:	f107 0308 	add.w	r3, r7, #8
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7fd fc00 	bl	80090e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b8ec:	e01f      	b.n	800b92e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8ee:	4b58      	ldr	r3, [pc, #352]	; (800ba50 <UART_SetConfig+0x9cc>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f003 0320 	and.w	r3, r3, #32
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d009      	beq.n	800b90e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b8fa:	4b55      	ldr	r3, [pc, #340]	; (800ba50 <UART_SetConfig+0x9cc>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	08db      	lsrs	r3, r3, #3
 800b900:	f003 0303 	and.w	r3, r3, #3
 800b904:	4a53      	ldr	r2, [pc, #332]	; (800ba54 <UART_SetConfig+0x9d0>)
 800b906:	fa22 f303 	lsr.w	r3, r2, r3
 800b90a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b90c:	e00f      	b.n	800b92e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800b90e:	4b51      	ldr	r3, [pc, #324]	; (800ba54 <UART_SetConfig+0x9d0>)
 800b910:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b912:	e00c      	b.n	800b92e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b914:	4b4c      	ldr	r3, [pc, #304]	; (800ba48 <UART_SetConfig+0x9c4>)
 800b916:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b918:	e009      	b.n	800b92e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b91a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b91e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b920:	e005      	b.n	800b92e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800b922:	2300      	movs	r3, #0
 800b924:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b926:	2301      	movs	r3, #1
 800b928:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b92c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b930:	2b00      	cmp	r3, #0
 800b932:	f000 80ea 	beq.w	800bb0a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b93a:	4a44      	ldr	r2, [pc, #272]	; (800ba4c <UART_SetConfig+0x9c8>)
 800b93c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b940:	461a      	mov	r2, r3
 800b942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b944:	fbb3 f3f2 	udiv	r3, r3, r2
 800b948:	005a      	lsls	r2, r3, #1
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	085b      	lsrs	r3, r3, #1
 800b950:	441a      	add	r2, r3
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	685b      	ldr	r3, [r3, #4]
 800b956:	fbb2 f3f3 	udiv	r3, r2, r3
 800b95a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b95e:	2b0f      	cmp	r3, #15
 800b960:	d916      	bls.n	800b990 <UART_SetConfig+0x90c>
 800b962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b968:	d212      	bcs.n	800b990 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96c:	b29b      	uxth	r3, r3
 800b96e:	f023 030f 	bic.w	r3, r3, #15
 800b972:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b976:	085b      	lsrs	r3, r3, #1
 800b978:	b29b      	uxth	r3, r3
 800b97a:	f003 0307 	and.w	r3, r3, #7
 800b97e:	b29a      	uxth	r2, r3
 800b980:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b982:	4313      	orrs	r3, r2
 800b984:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b98c:	60da      	str	r2, [r3, #12]
 800b98e:	e0bc      	b.n	800bb0a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b990:	2301      	movs	r3, #1
 800b992:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b996:	e0b8      	b.n	800bb0a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b998:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b99c:	2b20      	cmp	r3, #32
 800b99e:	dc4b      	bgt.n	800ba38 <UART_SetConfig+0x9b4>
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	f2c0 8087 	blt.w	800bab4 <UART_SetConfig+0xa30>
 800b9a6:	2b20      	cmp	r3, #32
 800b9a8:	f200 8084 	bhi.w	800bab4 <UART_SetConfig+0xa30>
 800b9ac:	a201      	add	r2, pc, #4	; (adr r2, 800b9b4 <UART_SetConfig+0x930>)
 800b9ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9b2:	bf00      	nop
 800b9b4:	0800ba3f 	.word	0x0800ba3f
 800b9b8:	0800ba59 	.word	0x0800ba59
 800b9bc:	0800bab5 	.word	0x0800bab5
 800b9c0:	0800bab5 	.word	0x0800bab5
 800b9c4:	0800ba61 	.word	0x0800ba61
 800b9c8:	0800bab5 	.word	0x0800bab5
 800b9cc:	0800bab5 	.word	0x0800bab5
 800b9d0:	0800bab5 	.word	0x0800bab5
 800b9d4:	0800ba71 	.word	0x0800ba71
 800b9d8:	0800bab5 	.word	0x0800bab5
 800b9dc:	0800bab5 	.word	0x0800bab5
 800b9e0:	0800bab5 	.word	0x0800bab5
 800b9e4:	0800bab5 	.word	0x0800bab5
 800b9e8:	0800bab5 	.word	0x0800bab5
 800b9ec:	0800bab5 	.word	0x0800bab5
 800b9f0:	0800bab5 	.word	0x0800bab5
 800b9f4:	0800ba81 	.word	0x0800ba81
 800b9f8:	0800bab5 	.word	0x0800bab5
 800b9fc:	0800bab5 	.word	0x0800bab5
 800ba00:	0800bab5 	.word	0x0800bab5
 800ba04:	0800bab5 	.word	0x0800bab5
 800ba08:	0800bab5 	.word	0x0800bab5
 800ba0c:	0800bab5 	.word	0x0800bab5
 800ba10:	0800bab5 	.word	0x0800bab5
 800ba14:	0800bab5 	.word	0x0800bab5
 800ba18:	0800bab5 	.word	0x0800bab5
 800ba1c:	0800bab5 	.word	0x0800bab5
 800ba20:	0800bab5 	.word	0x0800bab5
 800ba24:	0800bab5 	.word	0x0800bab5
 800ba28:	0800bab5 	.word	0x0800bab5
 800ba2c:	0800bab5 	.word	0x0800bab5
 800ba30:	0800bab5 	.word	0x0800bab5
 800ba34:	0800baa7 	.word	0x0800baa7
 800ba38:	2b40      	cmp	r3, #64	; 0x40
 800ba3a:	d037      	beq.n	800baac <UART_SetConfig+0xa28>
 800ba3c:	e03a      	b.n	800bab4 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba3e:	f7fc fa7d 	bl	8007f3c <HAL_RCC_GetPCLK1Freq>
 800ba42:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ba44:	e03c      	b.n	800bac0 <UART_SetConfig+0xa3c>
 800ba46:	bf00      	nop
 800ba48:	003d0900 	.word	0x003d0900
 800ba4c:	0800cfb0 	.word	0x0800cfb0
 800ba50:	58024400 	.word	0x58024400
 800ba54:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba58:	f7fc fa86 	bl	8007f68 <HAL_RCC_GetPCLK2Freq>
 800ba5c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ba5e:	e02f      	b.n	800bac0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba60:	f107 0314 	add.w	r3, r7, #20
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7fd f9eb 	bl	8008e40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ba6a:	69bb      	ldr	r3, [r7, #24]
 800ba6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba6e:	e027      	b.n	800bac0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba70:	f107 0308 	add.w	r3, r7, #8
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7fd fb37 	bl	80090e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba7e:	e01f      	b.n	800bac0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba80:	4b2c      	ldr	r3, [pc, #176]	; (800bb34 <UART_SetConfig+0xab0>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f003 0320 	and.w	r3, r3, #32
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d009      	beq.n	800baa0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ba8c:	4b29      	ldr	r3, [pc, #164]	; (800bb34 <UART_SetConfig+0xab0>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	08db      	lsrs	r3, r3, #3
 800ba92:	f003 0303 	and.w	r3, r3, #3
 800ba96:	4a28      	ldr	r2, [pc, #160]	; (800bb38 <UART_SetConfig+0xab4>)
 800ba98:	fa22 f303 	lsr.w	r3, r2, r3
 800ba9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ba9e:	e00f      	b.n	800bac0 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800baa0:	4b25      	ldr	r3, [pc, #148]	; (800bb38 <UART_SetConfig+0xab4>)
 800baa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800baa4:	e00c      	b.n	800bac0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800baa6:	4b25      	ldr	r3, [pc, #148]	; (800bb3c <UART_SetConfig+0xab8>)
 800baa8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800baaa:	e009      	b.n	800bac0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800baac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bab0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bab2:	e005      	b.n	800bac0 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800bab4:	2300      	movs	r3, #0
 800bab6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800bab8:	2301      	movs	r3, #1
 800baba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800babe:	bf00      	nop
    }

    if (pclk != 0U)
 800bac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d021      	beq.n	800bb0a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baca:	4a1d      	ldr	r2, [pc, #116]	; (800bb40 <UART_SetConfig+0xabc>)
 800bacc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bad0:	461a      	mov	r2, r3
 800bad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bad4:	fbb3 f2f2 	udiv	r2, r3, r2
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	085b      	lsrs	r3, r3, #1
 800bade:	441a      	add	r2, r3
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bae8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800baea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baec:	2b0f      	cmp	r3, #15
 800baee:	d909      	bls.n	800bb04 <UART_SetConfig+0xa80>
 800baf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800baf6:	d205      	bcs.n	800bb04 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800baf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bafa:	b29a      	uxth	r2, r3
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	60da      	str	r2, [r3, #12]
 800bb02:	e002      	b.n	800bb0a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800bb04:	2301      	movs	r3, #1
 800bb06:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2201      	movs	r2, #1
 800bb16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2200      	movs	r2, #0
 800bb24:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800bb26:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3738      	adds	r7, #56	; 0x38
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bdb0      	pop	{r4, r5, r7, pc}
 800bb32:	bf00      	nop
 800bb34:	58024400 	.word	0x58024400
 800bb38:	03d09000 	.word	0x03d09000
 800bb3c:	003d0900 	.word	0x003d0900
 800bb40:	0800cfb0 	.word	0x0800cfb0

0800bb44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b083      	sub	sp, #12
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb50:	f003 0301 	and.w	r3, r3, #1
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d00a      	beq.n	800bb6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	430a      	orrs	r2, r1
 800bb6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb72:	f003 0302 	and.w	r3, r3, #2
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d00a      	beq.n	800bb90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	430a      	orrs	r2, r1
 800bb8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb94:	f003 0304 	and.w	r3, r3, #4
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d00a      	beq.n	800bbb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	685b      	ldr	r3, [r3, #4]
 800bba2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	430a      	orrs	r2, r1
 800bbb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbb6:	f003 0308 	and.w	r3, r3, #8
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d00a      	beq.n	800bbd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	430a      	orrs	r2, r1
 800bbd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbd8:	f003 0310 	and.w	r3, r3, #16
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d00a      	beq.n	800bbf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	689b      	ldr	r3, [r3, #8]
 800bbe6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	430a      	orrs	r2, r1
 800bbf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbfa:	f003 0320 	and.w	r3, r3, #32
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d00a      	beq.n	800bc18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	689b      	ldr	r3, [r3, #8]
 800bc08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	430a      	orrs	r2, r1
 800bc16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d01a      	beq.n	800bc5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	685b      	ldr	r3, [r3, #4]
 800bc2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	430a      	orrs	r2, r1
 800bc38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc42:	d10a      	bne.n	800bc5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	685b      	ldr	r3, [r3, #4]
 800bc4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	430a      	orrs	r2, r1
 800bc58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d00a      	beq.n	800bc7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	430a      	orrs	r2, r1
 800bc7a:	605a      	str	r2, [r3, #4]
  }
}
 800bc7c:	bf00      	nop
 800bc7e:	370c      	adds	r7, #12
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr

0800bc88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b086      	sub	sp, #24
 800bc8c:	af02      	add	r7, sp, #8
 800bc8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2200      	movs	r2, #0
 800bc94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bc98:	f7f7 fd64 	bl	8003764 <HAL_GetTick>
 800bc9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f003 0308 	and.w	r3, r3, #8
 800bca8:	2b08      	cmp	r3, #8
 800bcaa:	d10e      	bne.n	800bcca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bcac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bcb0:	9300      	str	r3, [sp, #0]
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f000 f82f 	bl	800bd1e <UART_WaitOnFlagUntilTimeout>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d001      	beq.n	800bcca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bcc6:	2303      	movs	r3, #3
 800bcc8:	e025      	b.n	800bd16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f003 0304 	and.w	r3, r3, #4
 800bcd4:	2b04      	cmp	r3, #4
 800bcd6:	d10e      	bne.n	800bcf6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bcd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bcdc:	9300      	str	r3, [sp, #0]
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2200      	movs	r2, #0
 800bce2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 f819 	bl	800bd1e <UART_WaitOnFlagUntilTimeout>
 800bcec:	4603      	mov	r3, r0
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d001      	beq.n	800bcf6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bcf2:	2303      	movs	r3, #3
 800bcf4:	e00f      	b.n	800bd16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2220      	movs	r2, #32
 800bcfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2220      	movs	r2, #32
 800bd02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bd14:	2300      	movs	r3, #0
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3710      	adds	r7, #16
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}

0800bd1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bd1e:	b580      	push	{r7, lr}
 800bd20:	b09c      	sub	sp, #112	; 0x70
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	60f8      	str	r0, [r7, #12]
 800bd26:	60b9      	str	r1, [r7, #8]
 800bd28:	603b      	str	r3, [r7, #0]
 800bd2a:	4613      	mov	r3, r2
 800bd2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd2e:	e0a9      	b.n	800be84 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd36:	f000 80a5 	beq.w	800be84 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd3a:	f7f7 fd13 	bl	8003764 <HAL_GetTick>
 800bd3e:	4602      	mov	r2, r0
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	1ad3      	subs	r3, r2, r3
 800bd44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d302      	bcc.n	800bd50 <UART_WaitOnFlagUntilTimeout+0x32>
 800bd4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d140      	bne.n	800bdd2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd58:	e853 3f00 	ldrex	r3, [r3]
 800bd5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bd5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bd64:	667b      	str	r3, [r7, #100]	; 0x64
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd70:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bd74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bd76:	e841 2300 	strex	r3, r2, [r1]
 800bd7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bd7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d1e6      	bne.n	800bd50 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	3308      	adds	r3, #8
 800bd88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd8c:	e853 3f00 	ldrex	r3, [r3]
 800bd90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd94:	f023 0301 	bic.w	r3, r3, #1
 800bd98:	663b      	str	r3, [r7, #96]	; 0x60
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	3308      	adds	r3, #8
 800bda0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bda2:	64ba      	str	r2, [r7, #72]	; 0x48
 800bda4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bda6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bda8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bdaa:	e841 2300 	strex	r3, r2, [r1]
 800bdae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bdb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d1e5      	bne.n	800bd82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2220      	movs	r2, #32
 800bdba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	2220      	movs	r2, #32
 800bdc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800bdce:	2303      	movs	r3, #3
 800bdd0:	e069      	b.n	800bea6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f003 0304 	and.w	r3, r3, #4
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d051      	beq.n	800be84 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	69db      	ldr	r3, [r3, #28]
 800bde6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bdea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bdee:	d149      	bne.n	800be84 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bdf8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be02:	e853 3f00 	ldrex	r3, [r3]
 800be06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800be0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	461a      	mov	r2, r3
 800be16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be18:	637b      	str	r3, [r7, #52]	; 0x34
 800be1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800be1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be20:	e841 2300 	strex	r3, r2, [r1]
 800be24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800be26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d1e6      	bne.n	800bdfa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	3308      	adds	r3, #8
 800be32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	e853 3f00 	ldrex	r3, [r3]
 800be3a:	613b      	str	r3, [r7, #16]
   return(result);
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	f023 0301 	bic.w	r3, r3, #1
 800be42:	66bb      	str	r3, [r7, #104]	; 0x68
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	3308      	adds	r3, #8
 800be4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800be4c:	623a      	str	r2, [r7, #32]
 800be4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be50:	69f9      	ldr	r1, [r7, #28]
 800be52:	6a3a      	ldr	r2, [r7, #32]
 800be54:	e841 2300 	strex	r3, r2, [r1]
 800be58:	61bb      	str	r3, [r7, #24]
   return(result);
 800be5a:	69bb      	ldr	r3, [r7, #24]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d1e5      	bne.n	800be2c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2220      	movs	r2, #32
 800be64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2220      	movs	r2, #32
 800be6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2220      	movs	r2, #32
 800be74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2200      	movs	r2, #0
 800be7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800be80:	2303      	movs	r3, #3
 800be82:	e010      	b.n	800bea6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	69da      	ldr	r2, [r3, #28]
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	4013      	ands	r3, r2
 800be8e:	68ba      	ldr	r2, [r7, #8]
 800be90:	429a      	cmp	r2, r3
 800be92:	bf0c      	ite	eq
 800be94:	2301      	moveq	r3, #1
 800be96:	2300      	movne	r3, #0
 800be98:	b2db      	uxtb	r3, r3
 800be9a:	461a      	mov	r2, r3
 800be9c:	79fb      	ldrb	r3, [r7, #7]
 800be9e:	429a      	cmp	r2, r3
 800bea0:	f43f af46 	beq.w	800bd30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bea4:	2300      	movs	r3, #0
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3770      	adds	r7, #112	; 0x70
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}

0800beae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800beae:	b480      	push	{r7}
 800beb0:	b085      	sub	sp, #20
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	d101      	bne.n	800bec4 <HAL_UARTEx_DisableFifoMode+0x16>
 800bec0:	2302      	movs	r3, #2
 800bec2:	e027      	b.n	800bf14 <HAL_UARTEx_DisableFifoMode+0x66>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2201      	movs	r2, #1
 800bec8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2224      	movs	r2, #36	; 0x24
 800bed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	681a      	ldr	r2, [r3, #0]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f022 0201 	bic.w	r2, r2, #1
 800beea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bef2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2200      	movs	r2, #0
 800bef8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	68fa      	ldr	r2, [r7, #12]
 800bf00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2220      	movs	r2, #32
 800bf06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bf12:	2300      	movs	r3, #0
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3714      	adds	r7, #20
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr

0800bf20 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b084      	sub	sp, #16
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bf30:	2b01      	cmp	r3, #1
 800bf32:	d101      	bne.n	800bf38 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bf34:	2302      	movs	r3, #2
 800bf36:	e02d      	b.n	800bf94 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2224      	movs	r2, #36	; 0x24
 800bf44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	681a      	ldr	r2, [r3, #0]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f022 0201 	bic.w	r2, r2, #1
 800bf5e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	689b      	ldr	r3, [r3, #8]
 800bf66:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	683a      	ldr	r2, [r7, #0]
 800bf70:	430a      	orrs	r2, r1
 800bf72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f000 f84f 	bl	800c018 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	68fa      	ldr	r2, [r7, #12]
 800bf80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2220      	movs	r2, #32
 800bf86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bf92:	2300      	movs	r3, #0
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3710      	adds	r7, #16
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}

0800bf9c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b084      	sub	sp, #16
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	d101      	bne.n	800bfb4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bfb0:	2302      	movs	r3, #2
 800bfb2:	e02d      	b.n	800c010 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2224      	movs	r2, #36	; 0x24
 800bfc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f022 0201 	bic.w	r2, r2, #1
 800bfda:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	689b      	ldr	r3, [r3, #8]
 800bfe2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	683a      	ldr	r2, [r7, #0]
 800bfec:	430a      	orrs	r2, r1
 800bfee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f000 f811 	bl	800c018 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	68fa      	ldr	r2, [r7, #12]
 800bffc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2220      	movs	r2, #32
 800c002:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2200      	movs	r2, #0
 800c00a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c00e:	2300      	movs	r3, #0
}
 800c010:	4618      	mov	r0, r3
 800c012:	3710      	adds	r7, #16
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c018:	b480      	push	{r7}
 800c01a:	b085      	sub	sp, #20
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c024:	2b00      	cmp	r3, #0
 800c026:	d108      	bne.n	800c03a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2201      	movs	r2, #1
 800c02c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2201      	movs	r2, #1
 800c034:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c038:	e031      	b.n	800c09e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c03a:	2310      	movs	r3, #16
 800c03c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c03e:	2310      	movs	r3, #16
 800c040:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	689b      	ldr	r3, [r3, #8]
 800c048:	0e5b      	lsrs	r3, r3, #25
 800c04a:	b2db      	uxtb	r3, r3
 800c04c:	f003 0307 	and.w	r3, r3, #7
 800c050:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	689b      	ldr	r3, [r3, #8]
 800c058:	0f5b      	lsrs	r3, r3, #29
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	f003 0307 	and.w	r3, r3, #7
 800c060:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c062:	7bbb      	ldrb	r3, [r7, #14]
 800c064:	7b3a      	ldrb	r2, [r7, #12]
 800c066:	4911      	ldr	r1, [pc, #68]	; (800c0ac <UARTEx_SetNbDataToProcess+0x94>)
 800c068:	5c8a      	ldrb	r2, [r1, r2]
 800c06a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c06e:	7b3a      	ldrb	r2, [r7, #12]
 800c070:	490f      	ldr	r1, [pc, #60]	; (800c0b0 <UARTEx_SetNbDataToProcess+0x98>)
 800c072:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c074:	fb93 f3f2 	sdiv	r3, r3, r2
 800c078:	b29a      	uxth	r2, r3
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c080:	7bfb      	ldrb	r3, [r7, #15]
 800c082:	7b7a      	ldrb	r2, [r7, #13]
 800c084:	4909      	ldr	r1, [pc, #36]	; (800c0ac <UARTEx_SetNbDataToProcess+0x94>)
 800c086:	5c8a      	ldrb	r2, [r1, r2]
 800c088:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c08c:	7b7a      	ldrb	r2, [r7, #13]
 800c08e:	4908      	ldr	r1, [pc, #32]	; (800c0b0 <UARTEx_SetNbDataToProcess+0x98>)
 800c090:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c092:	fb93 f3f2 	sdiv	r3, r3, r2
 800c096:	b29a      	uxth	r2, r3
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c09e:	bf00      	nop
 800c0a0:	3714      	adds	r7, #20
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a8:	4770      	bx	lr
 800c0aa:	bf00      	nop
 800c0ac:	0800cfc8 	.word	0x0800cfc8
 800c0b0:	0800cfd0 	.word	0x0800cfd0

0800c0b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c0b4:	b084      	sub	sp, #16
 800c0b6:	b580      	push	{r7, lr}
 800c0b8:	b084      	sub	sp, #16
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
 800c0be:	f107 001c 	add.w	r0, r7, #28
 800c0c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	d120      	bne.n	800c10e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	68da      	ldr	r2, [r3, #12]
 800c0dc:	4b2a      	ldr	r3, [pc, #168]	; (800c188 <USB_CoreInit+0xd4>)
 800c0de:	4013      	ands	r3, r2
 800c0e0:	687a      	ldr	r2, [r7, #4]
 800c0e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	68db      	ldr	r3, [r3, #12]
 800c0e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c0f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0f2:	2b01      	cmp	r3, #1
 800c0f4:	d105      	bne.n	800c102 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	68db      	ldr	r3, [r3, #12]
 800c0fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 faa8 	bl	800c658 <USB_CoreReset>
 800c108:	4603      	mov	r3, r0
 800c10a:	73fb      	strb	r3, [r7, #15]
 800c10c:	e01a      	b.n	800c144 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	68db      	ldr	r3, [r3, #12]
 800c112:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f000 fa9c 	bl	800c658 <USB_CoreReset>
 800c120:	4603      	mov	r3, r0
 800c122:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c126:	2b00      	cmp	r3, #0
 800c128:	d106      	bne.n	800c138 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c12e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	639a      	str	r2, [r3, #56]	; 0x38
 800c136:	e005      	b.n	800c144 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c13c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c146:	2b01      	cmp	r3, #1
 800c148:	d116      	bne.n	800c178 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c14e:	b29a      	uxth	r2, r3
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c158:	4b0c      	ldr	r3, [pc, #48]	; (800c18c <USB_CoreInit+0xd8>)
 800c15a:	4313      	orrs	r3, r2
 800c15c:	687a      	ldr	r2, [r7, #4]
 800c15e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	689b      	ldr	r3, [r3, #8]
 800c164:	f043 0206 	orr.w	r2, r3, #6
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	689b      	ldr	r3, [r3, #8]
 800c170:	f043 0220 	orr.w	r2, r3, #32
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c178:	7bfb      	ldrb	r3, [r7, #15]
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3710      	adds	r7, #16
 800c17e:	46bd      	mov	sp, r7
 800c180:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c184:	b004      	add	sp, #16
 800c186:	4770      	bx	lr
 800c188:	ffbdffbf 	.word	0xffbdffbf
 800c18c:	03ee0000 	.word	0x03ee0000

0800c190 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c190:	b480      	push	{r7}
 800c192:	b083      	sub	sp, #12
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	689b      	ldr	r3, [r3, #8]
 800c19c:	f023 0201 	bic.w	r2, r3, #1
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c1a4:	2300      	movs	r3, #0
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	370c      	adds	r7, #12
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b0:	4770      	bx	lr

0800c1b2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c1b2:	b580      	push	{r7, lr}
 800c1b4:	b084      	sub	sp, #16
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6078      	str	r0, [r7, #4]
 800c1ba:	460b      	mov	r3, r1
 800c1bc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	68db      	ldr	r3, [r3, #12]
 800c1c6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c1ce:	78fb      	ldrb	r3, [r7, #3]
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d115      	bne.n	800c200 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	68db      	ldr	r3, [r3, #12]
 800c1d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c1e0:	2001      	movs	r0, #1
 800c1e2:	f7f7 facb 	bl	800377c <HAL_Delay>
      ms++;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	3301      	adds	r3, #1
 800c1ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f000 fa25 	bl	800c63c <USB_GetMode>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	d01e      	beq.n	800c236 <USB_SetCurrentMode+0x84>
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2b31      	cmp	r3, #49	; 0x31
 800c1fc:	d9f0      	bls.n	800c1e0 <USB_SetCurrentMode+0x2e>
 800c1fe:	e01a      	b.n	800c236 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c200:	78fb      	ldrb	r3, [r7, #3]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d115      	bne.n	800c232 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	68db      	ldr	r3, [r3, #12]
 800c20a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c212:	2001      	movs	r0, #1
 800c214:	f7f7 fab2 	bl	800377c <HAL_Delay>
      ms++;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	3301      	adds	r3, #1
 800c21c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f000 fa0c 	bl	800c63c <USB_GetMode>
 800c224:	4603      	mov	r3, r0
 800c226:	2b00      	cmp	r3, #0
 800c228:	d005      	beq.n	800c236 <USB_SetCurrentMode+0x84>
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2b31      	cmp	r3, #49	; 0x31
 800c22e:	d9f0      	bls.n	800c212 <USB_SetCurrentMode+0x60>
 800c230:	e001      	b.n	800c236 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c232:	2301      	movs	r3, #1
 800c234:	e005      	b.n	800c242 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2b32      	cmp	r3, #50	; 0x32
 800c23a:	d101      	bne.n	800c240 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c23c:	2301      	movs	r3, #1
 800c23e:	e000      	b.n	800c242 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c240:	2300      	movs	r3, #0
}
 800c242:	4618      	mov	r0, r3
 800c244:	3710      	adds	r7, #16
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
	...

0800c24c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c24c:	b084      	sub	sp, #16
 800c24e:	b580      	push	{r7, lr}
 800c250:	b086      	sub	sp, #24
 800c252:	af00      	add	r7, sp, #0
 800c254:	6078      	str	r0, [r7, #4]
 800c256:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c25a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c25e:	2300      	movs	r3, #0
 800c260:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c266:	2300      	movs	r3, #0
 800c268:	613b      	str	r3, [r7, #16]
 800c26a:	e009      	b.n	800c280 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c26c:	687a      	ldr	r2, [r7, #4]
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	3340      	adds	r3, #64	; 0x40
 800c272:	009b      	lsls	r3, r3, #2
 800c274:	4413      	add	r3, r2
 800c276:	2200      	movs	r2, #0
 800c278:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	3301      	adds	r3, #1
 800c27e:	613b      	str	r3, [r7, #16]
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	2b0e      	cmp	r3, #14
 800c284:	d9f2      	bls.n	800c26c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d11c      	bne.n	800c2c6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c292:	685b      	ldr	r3, [r3, #4]
 800c294:	68fa      	ldr	r2, [r7, #12]
 800c296:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c29a:	f043 0302 	orr.w	r3, r3, #2
 800c29e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2a4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	601a      	str	r2, [r3, #0]
 800c2c4:	e005      	b.n	800c2d2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c2d8:	461a      	mov	r2, r3
 800c2da:	2300      	movs	r3, #0
 800c2dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2e4:	4619      	mov	r1, r3
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2ec:	461a      	mov	r2, r3
 800c2ee:	680b      	ldr	r3, [r1, #0]
 800c2f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d10c      	bne.n	800c312 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d104      	bne.n	800c308 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c2fe:	2100      	movs	r1, #0
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f000 f961 	bl	800c5c8 <USB_SetDevSpeed>
 800c306:	e008      	b.n	800c31a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c308:	2101      	movs	r1, #1
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f000 f95c 	bl	800c5c8 <USB_SetDevSpeed>
 800c310:	e003      	b.n	800c31a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c312:	2103      	movs	r1, #3
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f000 f957 	bl	800c5c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c31a:	2110      	movs	r1, #16
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f000 f8f3 	bl	800c508 <USB_FlushTxFifo>
 800c322:	4603      	mov	r3, r0
 800c324:	2b00      	cmp	r3, #0
 800c326:	d001      	beq.n	800c32c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c328:	2301      	movs	r3, #1
 800c32a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f000 f91d 	bl	800c56c <USB_FlushRxFifo>
 800c332:	4603      	mov	r3, r0
 800c334:	2b00      	cmp	r3, #0
 800c336:	d001      	beq.n	800c33c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c338:	2301      	movs	r3, #1
 800c33a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c342:	461a      	mov	r2, r3
 800c344:	2300      	movs	r3, #0
 800c346:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c34e:	461a      	mov	r2, r3
 800c350:	2300      	movs	r3, #0
 800c352:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c35a:	461a      	mov	r2, r3
 800c35c:	2300      	movs	r3, #0
 800c35e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c360:	2300      	movs	r3, #0
 800c362:	613b      	str	r3, [r7, #16]
 800c364:	e043      	b.n	800c3ee <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	015a      	lsls	r2, r3, #5
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	4413      	add	r3, r2
 800c36e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c378:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c37c:	d118      	bne.n	800c3b0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d10a      	bne.n	800c39a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	015a      	lsls	r2, r3, #5
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	4413      	add	r3, r2
 800c38c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c390:	461a      	mov	r2, r3
 800c392:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c396:	6013      	str	r3, [r2, #0]
 800c398:	e013      	b.n	800c3c2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	015a      	lsls	r2, r3, #5
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	4413      	add	r3, r2
 800c3a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c3ac:	6013      	str	r3, [r2, #0]
 800c3ae:	e008      	b.n	800c3c2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	015a      	lsls	r2, r3, #5
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	4413      	add	r3, r2
 800c3b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3bc:	461a      	mov	r2, r3
 800c3be:	2300      	movs	r3, #0
 800c3c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	015a      	lsls	r2, r3, #5
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	4413      	add	r3, r2
 800c3ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	015a      	lsls	r2, r3, #5
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	4413      	add	r3, r2
 800c3dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3e0:	461a      	mov	r2, r3
 800c3e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c3e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	613b      	str	r3, [r7, #16]
 800c3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f0:	693a      	ldr	r2, [r7, #16]
 800c3f2:	429a      	cmp	r2, r3
 800c3f4:	d3b7      	bcc.n	800c366 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	613b      	str	r3, [r7, #16]
 800c3fa:	e043      	b.n	800c484 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	015a      	lsls	r2, r3, #5
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	4413      	add	r3, r2
 800c404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c40e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c412:	d118      	bne.n	800c446 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c414:	693b      	ldr	r3, [r7, #16]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d10a      	bne.n	800c430 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	015a      	lsls	r2, r3, #5
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	4413      	add	r3, r2
 800c422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c426:	461a      	mov	r2, r3
 800c428:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c42c:	6013      	str	r3, [r2, #0]
 800c42e:	e013      	b.n	800c458 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	015a      	lsls	r2, r3, #5
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	4413      	add	r3, r2
 800c438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c43c:	461a      	mov	r2, r3
 800c43e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c442:	6013      	str	r3, [r2, #0]
 800c444:	e008      	b.n	800c458 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	015a      	lsls	r2, r3, #5
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	4413      	add	r3, r2
 800c44e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c452:	461a      	mov	r2, r3
 800c454:	2300      	movs	r3, #0
 800c456:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	015a      	lsls	r2, r3, #5
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	4413      	add	r3, r2
 800c460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c464:	461a      	mov	r2, r3
 800c466:	2300      	movs	r3, #0
 800c468:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	015a      	lsls	r2, r3, #5
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	4413      	add	r3, r2
 800c472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c476:	461a      	mov	r2, r3
 800c478:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c47c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	3301      	adds	r3, #1
 800c482:	613b      	str	r3, [r7, #16]
 800c484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c486:	693a      	ldr	r2, [r7, #16]
 800c488:	429a      	cmp	r2, r3
 800c48a:	d3b7      	bcc.n	800c3fc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c492:	691b      	ldr	r3, [r3, #16]
 800c494:	68fa      	ldr	r2, [r7, #12]
 800c496:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c49a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c49e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c4ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d105      	bne.n	800c4c0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	699b      	ldr	r3, [r3, #24]
 800c4b8:	f043 0210 	orr.w	r2, r3, #16
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	699a      	ldr	r2, [r3, #24]
 800c4c4:	4b0e      	ldr	r3, [pc, #56]	; (800c500 <USB_DevInit+0x2b4>)
 800c4c6:	4313      	orrs	r3, r2
 800c4c8:	687a      	ldr	r2, [r7, #4]
 800c4ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c4cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d005      	beq.n	800c4de <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	699b      	ldr	r3, [r3, #24]
 800c4d6:	f043 0208 	orr.w	r2, r3, #8
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c4de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4e0:	2b01      	cmp	r3, #1
 800c4e2:	d105      	bne.n	800c4f0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	699a      	ldr	r2, [r3, #24]
 800c4e8:	4b06      	ldr	r3, [pc, #24]	; (800c504 <USB_DevInit+0x2b8>)
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	687a      	ldr	r2, [r7, #4]
 800c4ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c4f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3718      	adds	r7, #24
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c4fc:	b004      	add	sp, #16
 800c4fe:	4770      	bx	lr
 800c500:	803c3800 	.word	0x803c3800
 800c504:	40000004 	.word	0x40000004

0800c508 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c508:	b480      	push	{r7}
 800c50a:	b085      	sub	sp, #20
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c512:	2300      	movs	r3, #0
 800c514:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	3301      	adds	r3, #1
 800c51a:	60fb      	str	r3, [r7, #12]
 800c51c:	4a12      	ldr	r2, [pc, #72]	; (800c568 <USB_FlushTxFifo+0x60>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d901      	bls.n	800c526 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c522:	2303      	movs	r3, #3
 800c524:	e01a      	b.n	800c55c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	691b      	ldr	r3, [r3, #16]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	daf3      	bge.n	800c516 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c52e:	2300      	movs	r3, #0
 800c530:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	019b      	lsls	r3, r3, #6
 800c536:	f043 0220 	orr.w	r2, r3, #32
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	3301      	adds	r3, #1
 800c542:	60fb      	str	r3, [r7, #12]
 800c544:	4a08      	ldr	r2, [pc, #32]	; (800c568 <USB_FlushTxFifo+0x60>)
 800c546:	4293      	cmp	r3, r2
 800c548:	d901      	bls.n	800c54e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800c54a:	2303      	movs	r3, #3
 800c54c:	e006      	b.n	800c55c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	691b      	ldr	r3, [r3, #16]
 800c552:	f003 0320 	and.w	r3, r3, #32
 800c556:	2b20      	cmp	r3, #32
 800c558:	d0f1      	beq.n	800c53e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800c55a:	2300      	movs	r3, #0
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3714      	adds	r7, #20
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr
 800c568:	00030d40 	.word	0x00030d40

0800c56c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b085      	sub	sp, #20
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c574:	2300      	movs	r3, #0
 800c576:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	3301      	adds	r3, #1
 800c57c:	60fb      	str	r3, [r7, #12]
 800c57e:	4a11      	ldr	r2, [pc, #68]	; (800c5c4 <USB_FlushRxFifo+0x58>)
 800c580:	4293      	cmp	r3, r2
 800c582:	d901      	bls.n	800c588 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800c584:	2303      	movs	r3, #3
 800c586:	e017      	b.n	800c5b8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	691b      	ldr	r3, [r3, #16]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	daf3      	bge.n	800c578 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c590:	2300      	movs	r3, #0
 800c592:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2210      	movs	r2, #16
 800c598:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	3301      	adds	r3, #1
 800c59e:	60fb      	str	r3, [r7, #12]
 800c5a0:	4a08      	ldr	r2, [pc, #32]	; (800c5c4 <USB_FlushRxFifo+0x58>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d901      	bls.n	800c5aa <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800c5a6:	2303      	movs	r3, #3
 800c5a8:	e006      	b.n	800c5b8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	691b      	ldr	r3, [r3, #16]
 800c5ae:	f003 0310 	and.w	r3, r3, #16
 800c5b2:	2b10      	cmp	r3, #16
 800c5b4:	d0f1      	beq.n	800c59a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800c5b6:	2300      	movs	r3, #0
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3714      	adds	r7, #20
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr
 800c5c4:	00030d40 	.word	0x00030d40

0800c5c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b085      	sub	sp, #20
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5de:	681a      	ldr	r2, [r3, #0]
 800c5e0:	78fb      	ldrb	r3, [r7, #3]
 800c5e2:	68f9      	ldr	r1, [r7, #12]
 800c5e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c5e8:	4313      	orrs	r3, r2
 800c5ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c5ec:	2300      	movs	r3, #0
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3714      	adds	r7, #20
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr

0800c5fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c5fa:	b480      	push	{r7}
 800c5fc:	b085      	sub	sp, #20
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	68fa      	ldr	r2, [r7, #12]
 800c610:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c614:	f023 0303 	bic.w	r3, r3, #3
 800c618:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c620:	685b      	ldr	r3, [r3, #4]
 800c622:	68fa      	ldr	r2, [r7, #12]
 800c624:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c628:	f043 0302 	orr.w	r3, r3, #2
 800c62c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c62e:	2300      	movs	r3, #0
}
 800c630:	4618      	mov	r0, r3
 800c632:	3714      	adds	r7, #20
 800c634:	46bd      	mov	sp, r7
 800c636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63a:	4770      	bx	lr

0800c63c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b083      	sub	sp, #12
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	695b      	ldr	r3, [r3, #20]
 800c648:	f003 0301 	and.w	r3, r3, #1
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	370c      	adds	r7, #12
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr

0800c658 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c658:	b480      	push	{r7}
 800c65a:	b085      	sub	sp, #20
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c660:	2300      	movs	r3, #0
 800c662:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	3301      	adds	r3, #1
 800c668:	60fb      	str	r3, [r7, #12]
 800c66a:	4a13      	ldr	r2, [pc, #76]	; (800c6b8 <USB_CoreReset+0x60>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d901      	bls.n	800c674 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800c670:	2303      	movs	r3, #3
 800c672:	e01a      	b.n	800c6aa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	691b      	ldr	r3, [r3, #16]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	daf3      	bge.n	800c664 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c67c:	2300      	movs	r3, #0
 800c67e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	691b      	ldr	r3, [r3, #16]
 800c684:	f043 0201 	orr.w	r2, r3, #1
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	3301      	adds	r3, #1
 800c690:	60fb      	str	r3, [r7, #12]
 800c692:	4a09      	ldr	r2, [pc, #36]	; (800c6b8 <USB_CoreReset+0x60>)
 800c694:	4293      	cmp	r3, r2
 800c696:	d901      	bls.n	800c69c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800c698:	2303      	movs	r3, #3
 800c69a:	e006      	b.n	800c6aa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	691b      	ldr	r3, [r3, #16]
 800c6a0:	f003 0301 	and.w	r3, r3, #1
 800c6a4:	2b01      	cmp	r3, #1
 800c6a6:	d0f1      	beq.n	800c68c <USB_CoreReset+0x34>

  return HAL_OK;
 800c6a8:	2300      	movs	r3, #0
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3714      	adds	r7, #20
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b4:	4770      	bx	lr
 800c6b6:	bf00      	nop
 800c6b8:	00030d40 	.word	0x00030d40

0800c6bc <__errno>:
 800c6bc:	4b01      	ldr	r3, [pc, #4]	; (800c6c4 <__errno+0x8>)
 800c6be:	6818      	ldr	r0, [r3, #0]
 800c6c0:	4770      	bx	lr
 800c6c2:	bf00      	nop
 800c6c4:	24047ba4 	.word	0x24047ba4

0800c6c8 <__libc_init_array>:
 800c6c8:	b570      	push	{r4, r5, r6, lr}
 800c6ca:	4d0d      	ldr	r5, [pc, #52]	; (800c700 <__libc_init_array+0x38>)
 800c6cc:	4c0d      	ldr	r4, [pc, #52]	; (800c704 <__libc_init_array+0x3c>)
 800c6ce:	1b64      	subs	r4, r4, r5
 800c6d0:	10a4      	asrs	r4, r4, #2
 800c6d2:	2600      	movs	r6, #0
 800c6d4:	42a6      	cmp	r6, r4
 800c6d6:	d109      	bne.n	800c6ec <__libc_init_array+0x24>
 800c6d8:	4d0b      	ldr	r5, [pc, #44]	; (800c708 <__libc_init_array+0x40>)
 800c6da:	4c0c      	ldr	r4, [pc, #48]	; (800c70c <__libc_init_array+0x44>)
 800c6dc:	f000 fc4e 	bl	800cf7c <_init>
 800c6e0:	1b64      	subs	r4, r4, r5
 800c6e2:	10a4      	asrs	r4, r4, #2
 800c6e4:	2600      	movs	r6, #0
 800c6e6:	42a6      	cmp	r6, r4
 800c6e8:	d105      	bne.n	800c6f6 <__libc_init_array+0x2e>
 800c6ea:	bd70      	pop	{r4, r5, r6, pc}
 800c6ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6f0:	4798      	blx	r3
 800c6f2:	3601      	adds	r6, #1
 800c6f4:	e7ee      	b.n	800c6d4 <__libc_init_array+0xc>
 800c6f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6fa:	4798      	blx	r3
 800c6fc:	3601      	adds	r6, #1
 800c6fe:	e7f2      	b.n	800c6e6 <__libc_init_array+0x1e>
 800c700:	0800d014 	.word	0x0800d014
 800c704:	0800d014 	.word	0x0800d014
 800c708:	0800d014 	.word	0x0800d014
 800c70c:	0800d018 	.word	0x0800d018

0800c710 <memset>:
 800c710:	4402      	add	r2, r0
 800c712:	4603      	mov	r3, r0
 800c714:	4293      	cmp	r3, r2
 800c716:	d100      	bne.n	800c71a <memset+0xa>
 800c718:	4770      	bx	lr
 800c71a:	f803 1b01 	strb.w	r1, [r3], #1
 800c71e:	e7f9      	b.n	800c714 <memset+0x4>

0800c720 <siprintf>:
 800c720:	b40e      	push	{r1, r2, r3}
 800c722:	b500      	push	{lr}
 800c724:	b09c      	sub	sp, #112	; 0x70
 800c726:	ab1d      	add	r3, sp, #116	; 0x74
 800c728:	9002      	str	r0, [sp, #8]
 800c72a:	9006      	str	r0, [sp, #24]
 800c72c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c730:	4809      	ldr	r0, [pc, #36]	; (800c758 <siprintf+0x38>)
 800c732:	9107      	str	r1, [sp, #28]
 800c734:	9104      	str	r1, [sp, #16]
 800c736:	4909      	ldr	r1, [pc, #36]	; (800c75c <siprintf+0x3c>)
 800c738:	f853 2b04 	ldr.w	r2, [r3], #4
 800c73c:	9105      	str	r1, [sp, #20]
 800c73e:	6800      	ldr	r0, [r0, #0]
 800c740:	9301      	str	r3, [sp, #4]
 800c742:	a902      	add	r1, sp, #8
 800c744:	f000 f868 	bl	800c818 <_svfiprintf_r>
 800c748:	9b02      	ldr	r3, [sp, #8]
 800c74a:	2200      	movs	r2, #0
 800c74c:	701a      	strb	r2, [r3, #0]
 800c74e:	b01c      	add	sp, #112	; 0x70
 800c750:	f85d eb04 	ldr.w	lr, [sp], #4
 800c754:	b003      	add	sp, #12
 800c756:	4770      	bx	lr
 800c758:	24047ba4 	.word	0x24047ba4
 800c75c:	ffff0208 	.word	0xffff0208

0800c760 <__ssputs_r>:
 800c760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c764:	688e      	ldr	r6, [r1, #8]
 800c766:	429e      	cmp	r6, r3
 800c768:	4682      	mov	sl, r0
 800c76a:	460c      	mov	r4, r1
 800c76c:	4690      	mov	r8, r2
 800c76e:	461f      	mov	r7, r3
 800c770:	d838      	bhi.n	800c7e4 <__ssputs_r+0x84>
 800c772:	898a      	ldrh	r2, [r1, #12]
 800c774:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c778:	d032      	beq.n	800c7e0 <__ssputs_r+0x80>
 800c77a:	6825      	ldr	r5, [r4, #0]
 800c77c:	6909      	ldr	r1, [r1, #16]
 800c77e:	eba5 0901 	sub.w	r9, r5, r1
 800c782:	6965      	ldr	r5, [r4, #20]
 800c784:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c788:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c78c:	3301      	adds	r3, #1
 800c78e:	444b      	add	r3, r9
 800c790:	106d      	asrs	r5, r5, #1
 800c792:	429d      	cmp	r5, r3
 800c794:	bf38      	it	cc
 800c796:	461d      	movcc	r5, r3
 800c798:	0553      	lsls	r3, r2, #21
 800c79a:	d531      	bpl.n	800c800 <__ssputs_r+0xa0>
 800c79c:	4629      	mov	r1, r5
 800c79e:	f000 fb47 	bl	800ce30 <_malloc_r>
 800c7a2:	4606      	mov	r6, r0
 800c7a4:	b950      	cbnz	r0, 800c7bc <__ssputs_r+0x5c>
 800c7a6:	230c      	movs	r3, #12
 800c7a8:	f8ca 3000 	str.w	r3, [sl]
 800c7ac:	89a3      	ldrh	r3, [r4, #12]
 800c7ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7b2:	81a3      	strh	r3, [r4, #12]
 800c7b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c7b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7bc:	6921      	ldr	r1, [r4, #16]
 800c7be:	464a      	mov	r2, r9
 800c7c0:	f000 fabe 	bl	800cd40 <memcpy>
 800c7c4:	89a3      	ldrh	r3, [r4, #12]
 800c7c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c7ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7ce:	81a3      	strh	r3, [r4, #12]
 800c7d0:	6126      	str	r6, [r4, #16]
 800c7d2:	6165      	str	r5, [r4, #20]
 800c7d4:	444e      	add	r6, r9
 800c7d6:	eba5 0509 	sub.w	r5, r5, r9
 800c7da:	6026      	str	r6, [r4, #0]
 800c7dc:	60a5      	str	r5, [r4, #8]
 800c7de:	463e      	mov	r6, r7
 800c7e0:	42be      	cmp	r6, r7
 800c7e2:	d900      	bls.n	800c7e6 <__ssputs_r+0x86>
 800c7e4:	463e      	mov	r6, r7
 800c7e6:	4632      	mov	r2, r6
 800c7e8:	6820      	ldr	r0, [r4, #0]
 800c7ea:	4641      	mov	r1, r8
 800c7ec:	f000 fab6 	bl	800cd5c <memmove>
 800c7f0:	68a3      	ldr	r3, [r4, #8]
 800c7f2:	6822      	ldr	r2, [r4, #0]
 800c7f4:	1b9b      	subs	r3, r3, r6
 800c7f6:	4432      	add	r2, r6
 800c7f8:	60a3      	str	r3, [r4, #8]
 800c7fa:	6022      	str	r2, [r4, #0]
 800c7fc:	2000      	movs	r0, #0
 800c7fe:	e7db      	b.n	800c7b8 <__ssputs_r+0x58>
 800c800:	462a      	mov	r2, r5
 800c802:	f000 fb6f 	bl	800cee4 <_realloc_r>
 800c806:	4606      	mov	r6, r0
 800c808:	2800      	cmp	r0, #0
 800c80a:	d1e1      	bne.n	800c7d0 <__ssputs_r+0x70>
 800c80c:	6921      	ldr	r1, [r4, #16]
 800c80e:	4650      	mov	r0, sl
 800c810:	f000 fabe 	bl	800cd90 <_free_r>
 800c814:	e7c7      	b.n	800c7a6 <__ssputs_r+0x46>
	...

0800c818 <_svfiprintf_r>:
 800c818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c81c:	4698      	mov	r8, r3
 800c81e:	898b      	ldrh	r3, [r1, #12]
 800c820:	061b      	lsls	r3, r3, #24
 800c822:	b09d      	sub	sp, #116	; 0x74
 800c824:	4607      	mov	r7, r0
 800c826:	460d      	mov	r5, r1
 800c828:	4614      	mov	r4, r2
 800c82a:	d50e      	bpl.n	800c84a <_svfiprintf_r+0x32>
 800c82c:	690b      	ldr	r3, [r1, #16]
 800c82e:	b963      	cbnz	r3, 800c84a <_svfiprintf_r+0x32>
 800c830:	2140      	movs	r1, #64	; 0x40
 800c832:	f000 fafd 	bl	800ce30 <_malloc_r>
 800c836:	6028      	str	r0, [r5, #0]
 800c838:	6128      	str	r0, [r5, #16]
 800c83a:	b920      	cbnz	r0, 800c846 <_svfiprintf_r+0x2e>
 800c83c:	230c      	movs	r3, #12
 800c83e:	603b      	str	r3, [r7, #0]
 800c840:	f04f 30ff 	mov.w	r0, #4294967295
 800c844:	e0d1      	b.n	800c9ea <_svfiprintf_r+0x1d2>
 800c846:	2340      	movs	r3, #64	; 0x40
 800c848:	616b      	str	r3, [r5, #20]
 800c84a:	2300      	movs	r3, #0
 800c84c:	9309      	str	r3, [sp, #36]	; 0x24
 800c84e:	2320      	movs	r3, #32
 800c850:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c854:	f8cd 800c 	str.w	r8, [sp, #12]
 800c858:	2330      	movs	r3, #48	; 0x30
 800c85a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ca04 <_svfiprintf_r+0x1ec>
 800c85e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c862:	f04f 0901 	mov.w	r9, #1
 800c866:	4623      	mov	r3, r4
 800c868:	469a      	mov	sl, r3
 800c86a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c86e:	b10a      	cbz	r2, 800c874 <_svfiprintf_r+0x5c>
 800c870:	2a25      	cmp	r2, #37	; 0x25
 800c872:	d1f9      	bne.n	800c868 <_svfiprintf_r+0x50>
 800c874:	ebba 0b04 	subs.w	fp, sl, r4
 800c878:	d00b      	beq.n	800c892 <_svfiprintf_r+0x7a>
 800c87a:	465b      	mov	r3, fp
 800c87c:	4622      	mov	r2, r4
 800c87e:	4629      	mov	r1, r5
 800c880:	4638      	mov	r0, r7
 800c882:	f7ff ff6d 	bl	800c760 <__ssputs_r>
 800c886:	3001      	adds	r0, #1
 800c888:	f000 80aa 	beq.w	800c9e0 <_svfiprintf_r+0x1c8>
 800c88c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c88e:	445a      	add	r2, fp
 800c890:	9209      	str	r2, [sp, #36]	; 0x24
 800c892:	f89a 3000 	ldrb.w	r3, [sl]
 800c896:	2b00      	cmp	r3, #0
 800c898:	f000 80a2 	beq.w	800c9e0 <_svfiprintf_r+0x1c8>
 800c89c:	2300      	movs	r3, #0
 800c89e:	f04f 32ff 	mov.w	r2, #4294967295
 800c8a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8a6:	f10a 0a01 	add.w	sl, sl, #1
 800c8aa:	9304      	str	r3, [sp, #16]
 800c8ac:	9307      	str	r3, [sp, #28]
 800c8ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8b2:	931a      	str	r3, [sp, #104]	; 0x68
 800c8b4:	4654      	mov	r4, sl
 800c8b6:	2205      	movs	r2, #5
 800c8b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8bc:	4851      	ldr	r0, [pc, #324]	; (800ca04 <_svfiprintf_r+0x1ec>)
 800c8be:	f7f3 fd0f 	bl	80002e0 <memchr>
 800c8c2:	9a04      	ldr	r2, [sp, #16]
 800c8c4:	b9d8      	cbnz	r0, 800c8fe <_svfiprintf_r+0xe6>
 800c8c6:	06d0      	lsls	r0, r2, #27
 800c8c8:	bf44      	itt	mi
 800c8ca:	2320      	movmi	r3, #32
 800c8cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8d0:	0711      	lsls	r1, r2, #28
 800c8d2:	bf44      	itt	mi
 800c8d4:	232b      	movmi	r3, #43	; 0x2b
 800c8d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8da:	f89a 3000 	ldrb.w	r3, [sl]
 800c8de:	2b2a      	cmp	r3, #42	; 0x2a
 800c8e0:	d015      	beq.n	800c90e <_svfiprintf_r+0xf6>
 800c8e2:	9a07      	ldr	r2, [sp, #28]
 800c8e4:	4654      	mov	r4, sl
 800c8e6:	2000      	movs	r0, #0
 800c8e8:	f04f 0c0a 	mov.w	ip, #10
 800c8ec:	4621      	mov	r1, r4
 800c8ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8f2:	3b30      	subs	r3, #48	; 0x30
 800c8f4:	2b09      	cmp	r3, #9
 800c8f6:	d94e      	bls.n	800c996 <_svfiprintf_r+0x17e>
 800c8f8:	b1b0      	cbz	r0, 800c928 <_svfiprintf_r+0x110>
 800c8fa:	9207      	str	r2, [sp, #28]
 800c8fc:	e014      	b.n	800c928 <_svfiprintf_r+0x110>
 800c8fe:	eba0 0308 	sub.w	r3, r0, r8
 800c902:	fa09 f303 	lsl.w	r3, r9, r3
 800c906:	4313      	orrs	r3, r2
 800c908:	9304      	str	r3, [sp, #16]
 800c90a:	46a2      	mov	sl, r4
 800c90c:	e7d2      	b.n	800c8b4 <_svfiprintf_r+0x9c>
 800c90e:	9b03      	ldr	r3, [sp, #12]
 800c910:	1d19      	adds	r1, r3, #4
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	9103      	str	r1, [sp, #12]
 800c916:	2b00      	cmp	r3, #0
 800c918:	bfbb      	ittet	lt
 800c91a:	425b      	neglt	r3, r3
 800c91c:	f042 0202 	orrlt.w	r2, r2, #2
 800c920:	9307      	strge	r3, [sp, #28]
 800c922:	9307      	strlt	r3, [sp, #28]
 800c924:	bfb8      	it	lt
 800c926:	9204      	strlt	r2, [sp, #16]
 800c928:	7823      	ldrb	r3, [r4, #0]
 800c92a:	2b2e      	cmp	r3, #46	; 0x2e
 800c92c:	d10c      	bne.n	800c948 <_svfiprintf_r+0x130>
 800c92e:	7863      	ldrb	r3, [r4, #1]
 800c930:	2b2a      	cmp	r3, #42	; 0x2a
 800c932:	d135      	bne.n	800c9a0 <_svfiprintf_r+0x188>
 800c934:	9b03      	ldr	r3, [sp, #12]
 800c936:	1d1a      	adds	r2, r3, #4
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	9203      	str	r2, [sp, #12]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	bfb8      	it	lt
 800c940:	f04f 33ff 	movlt.w	r3, #4294967295
 800c944:	3402      	adds	r4, #2
 800c946:	9305      	str	r3, [sp, #20]
 800c948:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ca14 <_svfiprintf_r+0x1fc>
 800c94c:	7821      	ldrb	r1, [r4, #0]
 800c94e:	2203      	movs	r2, #3
 800c950:	4650      	mov	r0, sl
 800c952:	f7f3 fcc5 	bl	80002e0 <memchr>
 800c956:	b140      	cbz	r0, 800c96a <_svfiprintf_r+0x152>
 800c958:	2340      	movs	r3, #64	; 0x40
 800c95a:	eba0 000a 	sub.w	r0, r0, sl
 800c95e:	fa03 f000 	lsl.w	r0, r3, r0
 800c962:	9b04      	ldr	r3, [sp, #16]
 800c964:	4303      	orrs	r3, r0
 800c966:	3401      	adds	r4, #1
 800c968:	9304      	str	r3, [sp, #16]
 800c96a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c96e:	4826      	ldr	r0, [pc, #152]	; (800ca08 <_svfiprintf_r+0x1f0>)
 800c970:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c974:	2206      	movs	r2, #6
 800c976:	f7f3 fcb3 	bl	80002e0 <memchr>
 800c97a:	2800      	cmp	r0, #0
 800c97c:	d038      	beq.n	800c9f0 <_svfiprintf_r+0x1d8>
 800c97e:	4b23      	ldr	r3, [pc, #140]	; (800ca0c <_svfiprintf_r+0x1f4>)
 800c980:	bb1b      	cbnz	r3, 800c9ca <_svfiprintf_r+0x1b2>
 800c982:	9b03      	ldr	r3, [sp, #12]
 800c984:	3307      	adds	r3, #7
 800c986:	f023 0307 	bic.w	r3, r3, #7
 800c98a:	3308      	adds	r3, #8
 800c98c:	9303      	str	r3, [sp, #12]
 800c98e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c990:	4433      	add	r3, r6
 800c992:	9309      	str	r3, [sp, #36]	; 0x24
 800c994:	e767      	b.n	800c866 <_svfiprintf_r+0x4e>
 800c996:	fb0c 3202 	mla	r2, ip, r2, r3
 800c99a:	460c      	mov	r4, r1
 800c99c:	2001      	movs	r0, #1
 800c99e:	e7a5      	b.n	800c8ec <_svfiprintf_r+0xd4>
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	3401      	adds	r4, #1
 800c9a4:	9305      	str	r3, [sp, #20]
 800c9a6:	4619      	mov	r1, r3
 800c9a8:	f04f 0c0a 	mov.w	ip, #10
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9b2:	3a30      	subs	r2, #48	; 0x30
 800c9b4:	2a09      	cmp	r2, #9
 800c9b6:	d903      	bls.n	800c9c0 <_svfiprintf_r+0x1a8>
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d0c5      	beq.n	800c948 <_svfiprintf_r+0x130>
 800c9bc:	9105      	str	r1, [sp, #20]
 800c9be:	e7c3      	b.n	800c948 <_svfiprintf_r+0x130>
 800c9c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9c4:	4604      	mov	r4, r0
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	e7f0      	b.n	800c9ac <_svfiprintf_r+0x194>
 800c9ca:	ab03      	add	r3, sp, #12
 800c9cc:	9300      	str	r3, [sp, #0]
 800c9ce:	462a      	mov	r2, r5
 800c9d0:	4b0f      	ldr	r3, [pc, #60]	; (800ca10 <_svfiprintf_r+0x1f8>)
 800c9d2:	a904      	add	r1, sp, #16
 800c9d4:	4638      	mov	r0, r7
 800c9d6:	f3af 8000 	nop.w
 800c9da:	1c42      	adds	r2, r0, #1
 800c9dc:	4606      	mov	r6, r0
 800c9de:	d1d6      	bne.n	800c98e <_svfiprintf_r+0x176>
 800c9e0:	89ab      	ldrh	r3, [r5, #12]
 800c9e2:	065b      	lsls	r3, r3, #25
 800c9e4:	f53f af2c 	bmi.w	800c840 <_svfiprintf_r+0x28>
 800c9e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9ea:	b01d      	add	sp, #116	; 0x74
 800c9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9f0:	ab03      	add	r3, sp, #12
 800c9f2:	9300      	str	r3, [sp, #0]
 800c9f4:	462a      	mov	r2, r5
 800c9f6:	4b06      	ldr	r3, [pc, #24]	; (800ca10 <_svfiprintf_r+0x1f8>)
 800c9f8:	a904      	add	r1, sp, #16
 800c9fa:	4638      	mov	r0, r7
 800c9fc:	f000 f87a 	bl	800caf4 <_printf_i>
 800ca00:	e7eb      	b.n	800c9da <_svfiprintf_r+0x1c2>
 800ca02:	bf00      	nop
 800ca04:	0800cfd8 	.word	0x0800cfd8
 800ca08:	0800cfe2 	.word	0x0800cfe2
 800ca0c:	00000000 	.word	0x00000000
 800ca10:	0800c761 	.word	0x0800c761
 800ca14:	0800cfde 	.word	0x0800cfde

0800ca18 <_printf_common>:
 800ca18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca1c:	4616      	mov	r6, r2
 800ca1e:	4699      	mov	r9, r3
 800ca20:	688a      	ldr	r2, [r1, #8]
 800ca22:	690b      	ldr	r3, [r1, #16]
 800ca24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	bfb8      	it	lt
 800ca2c:	4613      	movlt	r3, r2
 800ca2e:	6033      	str	r3, [r6, #0]
 800ca30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ca34:	4607      	mov	r7, r0
 800ca36:	460c      	mov	r4, r1
 800ca38:	b10a      	cbz	r2, 800ca3e <_printf_common+0x26>
 800ca3a:	3301      	adds	r3, #1
 800ca3c:	6033      	str	r3, [r6, #0]
 800ca3e:	6823      	ldr	r3, [r4, #0]
 800ca40:	0699      	lsls	r1, r3, #26
 800ca42:	bf42      	ittt	mi
 800ca44:	6833      	ldrmi	r3, [r6, #0]
 800ca46:	3302      	addmi	r3, #2
 800ca48:	6033      	strmi	r3, [r6, #0]
 800ca4a:	6825      	ldr	r5, [r4, #0]
 800ca4c:	f015 0506 	ands.w	r5, r5, #6
 800ca50:	d106      	bne.n	800ca60 <_printf_common+0x48>
 800ca52:	f104 0a19 	add.w	sl, r4, #25
 800ca56:	68e3      	ldr	r3, [r4, #12]
 800ca58:	6832      	ldr	r2, [r6, #0]
 800ca5a:	1a9b      	subs	r3, r3, r2
 800ca5c:	42ab      	cmp	r3, r5
 800ca5e:	dc26      	bgt.n	800caae <_printf_common+0x96>
 800ca60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca64:	1e13      	subs	r3, r2, #0
 800ca66:	6822      	ldr	r2, [r4, #0]
 800ca68:	bf18      	it	ne
 800ca6a:	2301      	movne	r3, #1
 800ca6c:	0692      	lsls	r2, r2, #26
 800ca6e:	d42b      	bmi.n	800cac8 <_printf_common+0xb0>
 800ca70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca74:	4649      	mov	r1, r9
 800ca76:	4638      	mov	r0, r7
 800ca78:	47c0      	blx	r8
 800ca7a:	3001      	adds	r0, #1
 800ca7c:	d01e      	beq.n	800cabc <_printf_common+0xa4>
 800ca7e:	6823      	ldr	r3, [r4, #0]
 800ca80:	68e5      	ldr	r5, [r4, #12]
 800ca82:	6832      	ldr	r2, [r6, #0]
 800ca84:	f003 0306 	and.w	r3, r3, #6
 800ca88:	2b04      	cmp	r3, #4
 800ca8a:	bf08      	it	eq
 800ca8c:	1aad      	subeq	r5, r5, r2
 800ca8e:	68a3      	ldr	r3, [r4, #8]
 800ca90:	6922      	ldr	r2, [r4, #16]
 800ca92:	bf0c      	ite	eq
 800ca94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca98:	2500      	movne	r5, #0
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	bfc4      	itt	gt
 800ca9e:	1a9b      	subgt	r3, r3, r2
 800caa0:	18ed      	addgt	r5, r5, r3
 800caa2:	2600      	movs	r6, #0
 800caa4:	341a      	adds	r4, #26
 800caa6:	42b5      	cmp	r5, r6
 800caa8:	d11a      	bne.n	800cae0 <_printf_common+0xc8>
 800caaa:	2000      	movs	r0, #0
 800caac:	e008      	b.n	800cac0 <_printf_common+0xa8>
 800caae:	2301      	movs	r3, #1
 800cab0:	4652      	mov	r2, sl
 800cab2:	4649      	mov	r1, r9
 800cab4:	4638      	mov	r0, r7
 800cab6:	47c0      	blx	r8
 800cab8:	3001      	adds	r0, #1
 800caba:	d103      	bne.n	800cac4 <_printf_common+0xac>
 800cabc:	f04f 30ff 	mov.w	r0, #4294967295
 800cac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cac4:	3501      	adds	r5, #1
 800cac6:	e7c6      	b.n	800ca56 <_printf_common+0x3e>
 800cac8:	18e1      	adds	r1, r4, r3
 800caca:	1c5a      	adds	r2, r3, #1
 800cacc:	2030      	movs	r0, #48	; 0x30
 800cace:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cad2:	4422      	add	r2, r4
 800cad4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cad8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cadc:	3302      	adds	r3, #2
 800cade:	e7c7      	b.n	800ca70 <_printf_common+0x58>
 800cae0:	2301      	movs	r3, #1
 800cae2:	4622      	mov	r2, r4
 800cae4:	4649      	mov	r1, r9
 800cae6:	4638      	mov	r0, r7
 800cae8:	47c0      	blx	r8
 800caea:	3001      	adds	r0, #1
 800caec:	d0e6      	beq.n	800cabc <_printf_common+0xa4>
 800caee:	3601      	adds	r6, #1
 800caf0:	e7d9      	b.n	800caa6 <_printf_common+0x8e>
	...

0800caf4 <_printf_i>:
 800caf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800caf8:	460c      	mov	r4, r1
 800cafa:	4691      	mov	r9, r2
 800cafc:	7e27      	ldrb	r7, [r4, #24]
 800cafe:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cb00:	2f78      	cmp	r7, #120	; 0x78
 800cb02:	4680      	mov	r8, r0
 800cb04:	469a      	mov	sl, r3
 800cb06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb0a:	d807      	bhi.n	800cb1c <_printf_i+0x28>
 800cb0c:	2f62      	cmp	r7, #98	; 0x62
 800cb0e:	d80a      	bhi.n	800cb26 <_printf_i+0x32>
 800cb10:	2f00      	cmp	r7, #0
 800cb12:	f000 80d8 	beq.w	800ccc6 <_printf_i+0x1d2>
 800cb16:	2f58      	cmp	r7, #88	; 0x58
 800cb18:	f000 80a3 	beq.w	800cc62 <_printf_i+0x16e>
 800cb1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cb20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cb24:	e03a      	b.n	800cb9c <_printf_i+0xa8>
 800cb26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cb2a:	2b15      	cmp	r3, #21
 800cb2c:	d8f6      	bhi.n	800cb1c <_printf_i+0x28>
 800cb2e:	a001      	add	r0, pc, #4	; (adr r0, 800cb34 <_printf_i+0x40>)
 800cb30:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800cb34:	0800cb8d 	.word	0x0800cb8d
 800cb38:	0800cba1 	.word	0x0800cba1
 800cb3c:	0800cb1d 	.word	0x0800cb1d
 800cb40:	0800cb1d 	.word	0x0800cb1d
 800cb44:	0800cb1d 	.word	0x0800cb1d
 800cb48:	0800cb1d 	.word	0x0800cb1d
 800cb4c:	0800cba1 	.word	0x0800cba1
 800cb50:	0800cb1d 	.word	0x0800cb1d
 800cb54:	0800cb1d 	.word	0x0800cb1d
 800cb58:	0800cb1d 	.word	0x0800cb1d
 800cb5c:	0800cb1d 	.word	0x0800cb1d
 800cb60:	0800ccad 	.word	0x0800ccad
 800cb64:	0800cbd1 	.word	0x0800cbd1
 800cb68:	0800cc8f 	.word	0x0800cc8f
 800cb6c:	0800cb1d 	.word	0x0800cb1d
 800cb70:	0800cb1d 	.word	0x0800cb1d
 800cb74:	0800cccf 	.word	0x0800cccf
 800cb78:	0800cb1d 	.word	0x0800cb1d
 800cb7c:	0800cbd1 	.word	0x0800cbd1
 800cb80:	0800cb1d 	.word	0x0800cb1d
 800cb84:	0800cb1d 	.word	0x0800cb1d
 800cb88:	0800cc97 	.word	0x0800cc97
 800cb8c:	680b      	ldr	r3, [r1, #0]
 800cb8e:	1d1a      	adds	r2, r3, #4
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	600a      	str	r2, [r1, #0]
 800cb94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cb98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	e0a3      	b.n	800cce8 <_printf_i+0x1f4>
 800cba0:	6825      	ldr	r5, [r4, #0]
 800cba2:	6808      	ldr	r0, [r1, #0]
 800cba4:	062e      	lsls	r6, r5, #24
 800cba6:	f100 0304 	add.w	r3, r0, #4
 800cbaa:	d50a      	bpl.n	800cbc2 <_printf_i+0xce>
 800cbac:	6805      	ldr	r5, [r0, #0]
 800cbae:	600b      	str	r3, [r1, #0]
 800cbb0:	2d00      	cmp	r5, #0
 800cbb2:	da03      	bge.n	800cbbc <_printf_i+0xc8>
 800cbb4:	232d      	movs	r3, #45	; 0x2d
 800cbb6:	426d      	negs	r5, r5
 800cbb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbbc:	485e      	ldr	r0, [pc, #376]	; (800cd38 <_printf_i+0x244>)
 800cbbe:	230a      	movs	r3, #10
 800cbc0:	e019      	b.n	800cbf6 <_printf_i+0x102>
 800cbc2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800cbc6:	6805      	ldr	r5, [r0, #0]
 800cbc8:	600b      	str	r3, [r1, #0]
 800cbca:	bf18      	it	ne
 800cbcc:	b22d      	sxthne	r5, r5
 800cbce:	e7ef      	b.n	800cbb0 <_printf_i+0xbc>
 800cbd0:	680b      	ldr	r3, [r1, #0]
 800cbd2:	6825      	ldr	r5, [r4, #0]
 800cbd4:	1d18      	adds	r0, r3, #4
 800cbd6:	6008      	str	r0, [r1, #0]
 800cbd8:	0628      	lsls	r0, r5, #24
 800cbda:	d501      	bpl.n	800cbe0 <_printf_i+0xec>
 800cbdc:	681d      	ldr	r5, [r3, #0]
 800cbde:	e002      	b.n	800cbe6 <_printf_i+0xf2>
 800cbe0:	0669      	lsls	r1, r5, #25
 800cbe2:	d5fb      	bpl.n	800cbdc <_printf_i+0xe8>
 800cbe4:	881d      	ldrh	r5, [r3, #0]
 800cbe6:	4854      	ldr	r0, [pc, #336]	; (800cd38 <_printf_i+0x244>)
 800cbe8:	2f6f      	cmp	r7, #111	; 0x6f
 800cbea:	bf0c      	ite	eq
 800cbec:	2308      	moveq	r3, #8
 800cbee:	230a      	movne	r3, #10
 800cbf0:	2100      	movs	r1, #0
 800cbf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cbf6:	6866      	ldr	r6, [r4, #4]
 800cbf8:	60a6      	str	r6, [r4, #8]
 800cbfa:	2e00      	cmp	r6, #0
 800cbfc:	bfa2      	ittt	ge
 800cbfe:	6821      	ldrge	r1, [r4, #0]
 800cc00:	f021 0104 	bicge.w	r1, r1, #4
 800cc04:	6021      	strge	r1, [r4, #0]
 800cc06:	b90d      	cbnz	r5, 800cc0c <_printf_i+0x118>
 800cc08:	2e00      	cmp	r6, #0
 800cc0a:	d04d      	beq.n	800cca8 <_printf_i+0x1b4>
 800cc0c:	4616      	mov	r6, r2
 800cc0e:	fbb5 f1f3 	udiv	r1, r5, r3
 800cc12:	fb03 5711 	mls	r7, r3, r1, r5
 800cc16:	5dc7      	ldrb	r7, [r0, r7]
 800cc18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cc1c:	462f      	mov	r7, r5
 800cc1e:	42bb      	cmp	r3, r7
 800cc20:	460d      	mov	r5, r1
 800cc22:	d9f4      	bls.n	800cc0e <_printf_i+0x11a>
 800cc24:	2b08      	cmp	r3, #8
 800cc26:	d10b      	bne.n	800cc40 <_printf_i+0x14c>
 800cc28:	6823      	ldr	r3, [r4, #0]
 800cc2a:	07df      	lsls	r7, r3, #31
 800cc2c:	d508      	bpl.n	800cc40 <_printf_i+0x14c>
 800cc2e:	6923      	ldr	r3, [r4, #16]
 800cc30:	6861      	ldr	r1, [r4, #4]
 800cc32:	4299      	cmp	r1, r3
 800cc34:	bfde      	ittt	le
 800cc36:	2330      	movle	r3, #48	; 0x30
 800cc38:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cc3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cc40:	1b92      	subs	r2, r2, r6
 800cc42:	6122      	str	r2, [r4, #16]
 800cc44:	f8cd a000 	str.w	sl, [sp]
 800cc48:	464b      	mov	r3, r9
 800cc4a:	aa03      	add	r2, sp, #12
 800cc4c:	4621      	mov	r1, r4
 800cc4e:	4640      	mov	r0, r8
 800cc50:	f7ff fee2 	bl	800ca18 <_printf_common>
 800cc54:	3001      	adds	r0, #1
 800cc56:	d14c      	bne.n	800ccf2 <_printf_i+0x1fe>
 800cc58:	f04f 30ff 	mov.w	r0, #4294967295
 800cc5c:	b004      	add	sp, #16
 800cc5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc62:	4835      	ldr	r0, [pc, #212]	; (800cd38 <_printf_i+0x244>)
 800cc64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cc68:	6823      	ldr	r3, [r4, #0]
 800cc6a:	680e      	ldr	r6, [r1, #0]
 800cc6c:	061f      	lsls	r7, r3, #24
 800cc6e:	f856 5b04 	ldr.w	r5, [r6], #4
 800cc72:	600e      	str	r6, [r1, #0]
 800cc74:	d514      	bpl.n	800cca0 <_printf_i+0x1ac>
 800cc76:	07d9      	lsls	r1, r3, #31
 800cc78:	bf44      	itt	mi
 800cc7a:	f043 0320 	orrmi.w	r3, r3, #32
 800cc7e:	6023      	strmi	r3, [r4, #0]
 800cc80:	b91d      	cbnz	r5, 800cc8a <_printf_i+0x196>
 800cc82:	6823      	ldr	r3, [r4, #0]
 800cc84:	f023 0320 	bic.w	r3, r3, #32
 800cc88:	6023      	str	r3, [r4, #0]
 800cc8a:	2310      	movs	r3, #16
 800cc8c:	e7b0      	b.n	800cbf0 <_printf_i+0xfc>
 800cc8e:	6823      	ldr	r3, [r4, #0]
 800cc90:	f043 0320 	orr.w	r3, r3, #32
 800cc94:	6023      	str	r3, [r4, #0]
 800cc96:	2378      	movs	r3, #120	; 0x78
 800cc98:	4828      	ldr	r0, [pc, #160]	; (800cd3c <_printf_i+0x248>)
 800cc9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cc9e:	e7e3      	b.n	800cc68 <_printf_i+0x174>
 800cca0:	065e      	lsls	r6, r3, #25
 800cca2:	bf48      	it	mi
 800cca4:	b2ad      	uxthmi	r5, r5
 800cca6:	e7e6      	b.n	800cc76 <_printf_i+0x182>
 800cca8:	4616      	mov	r6, r2
 800ccaa:	e7bb      	b.n	800cc24 <_printf_i+0x130>
 800ccac:	680b      	ldr	r3, [r1, #0]
 800ccae:	6826      	ldr	r6, [r4, #0]
 800ccb0:	6960      	ldr	r0, [r4, #20]
 800ccb2:	1d1d      	adds	r5, r3, #4
 800ccb4:	600d      	str	r5, [r1, #0]
 800ccb6:	0635      	lsls	r5, r6, #24
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	d501      	bpl.n	800ccc0 <_printf_i+0x1cc>
 800ccbc:	6018      	str	r0, [r3, #0]
 800ccbe:	e002      	b.n	800ccc6 <_printf_i+0x1d2>
 800ccc0:	0671      	lsls	r1, r6, #25
 800ccc2:	d5fb      	bpl.n	800ccbc <_printf_i+0x1c8>
 800ccc4:	8018      	strh	r0, [r3, #0]
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	6123      	str	r3, [r4, #16]
 800ccca:	4616      	mov	r6, r2
 800cccc:	e7ba      	b.n	800cc44 <_printf_i+0x150>
 800ccce:	680b      	ldr	r3, [r1, #0]
 800ccd0:	1d1a      	adds	r2, r3, #4
 800ccd2:	600a      	str	r2, [r1, #0]
 800ccd4:	681e      	ldr	r6, [r3, #0]
 800ccd6:	6862      	ldr	r2, [r4, #4]
 800ccd8:	2100      	movs	r1, #0
 800ccda:	4630      	mov	r0, r6
 800ccdc:	f7f3 fb00 	bl	80002e0 <memchr>
 800cce0:	b108      	cbz	r0, 800cce6 <_printf_i+0x1f2>
 800cce2:	1b80      	subs	r0, r0, r6
 800cce4:	6060      	str	r0, [r4, #4]
 800cce6:	6863      	ldr	r3, [r4, #4]
 800cce8:	6123      	str	r3, [r4, #16]
 800ccea:	2300      	movs	r3, #0
 800ccec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccf0:	e7a8      	b.n	800cc44 <_printf_i+0x150>
 800ccf2:	6923      	ldr	r3, [r4, #16]
 800ccf4:	4632      	mov	r2, r6
 800ccf6:	4649      	mov	r1, r9
 800ccf8:	4640      	mov	r0, r8
 800ccfa:	47d0      	blx	sl
 800ccfc:	3001      	adds	r0, #1
 800ccfe:	d0ab      	beq.n	800cc58 <_printf_i+0x164>
 800cd00:	6823      	ldr	r3, [r4, #0]
 800cd02:	079b      	lsls	r3, r3, #30
 800cd04:	d413      	bmi.n	800cd2e <_printf_i+0x23a>
 800cd06:	68e0      	ldr	r0, [r4, #12]
 800cd08:	9b03      	ldr	r3, [sp, #12]
 800cd0a:	4298      	cmp	r0, r3
 800cd0c:	bfb8      	it	lt
 800cd0e:	4618      	movlt	r0, r3
 800cd10:	e7a4      	b.n	800cc5c <_printf_i+0x168>
 800cd12:	2301      	movs	r3, #1
 800cd14:	4632      	mov	r2, r6
 800cd16:	4649      	mov	r1, r9
 800cd18:	4640      	mov	r0, r8
 800cd1a:	47d0      	blx	sl
 800cd1c:	3001      	adds	r0, #1
 800cd1e:	d09b      	beq.n	800cc58 <_printf_i+0x164>
 800cd20:	3501      	adds	r5, #1
 800cd22:	68e3      	ldr	r3, [r4, #12]
 800cd24:	9903      	ldr	r1, [sp, #12]
 800cd26:	1a5b      	subs	r3, r3, r1
 800cd28:	42ab      	cmp	r3, r5
 800cd2a:	dcf2      	bgt.n	800cd12 <_printf_i+0x21e>
 800cd2c:	e7eb      	b.n	800cd06 <_printf_i+0x212>
 800cd2e:	2500      	movs	r5, #0
 800cd30:	f104 0619 	add.w	r6, r4, #25
 800cd34:	e7f5      	b.n	800cd22 <_printf_i+0x22e>
 800cd36:	bf00      	nop
 800cd38:	0800cfe9 	.word	0x0800cfe9
 800cd3c:	0800cffa 	.word	0x0800cffa

0800cd40 <memcpy>:
 800cd40:	440a      	add	r2, r1
 800cd42:	4291      	cmp	r1, r2
 800cd44:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd48:	d100      	bne.n	800cd4c <memcpy+0xc>
 800cd4a:	4770      	bx	lr
 800cd4c:	b510      	push	{r4, lr}
 800cd4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd56:	4291      	cmp	r1, r2
 800cd58:	d1f9      	bne.n	800cd4e <memcpy+0xe>
 800cd5a:	bd10      	pop	{r4, pc}

0800cd5c <memmove>:
 800cd5c:	4288      	cmp	r0, r1
 800cd5e:	b510      	push	{r4, lr}
 800cd60:	eb01 0402 	add.w	r4, r1, r2
 800cd64:	d902      	bls.n	800cd6c <memmove+0x10>
 800cd66:	4284      	cmp	r4, r0
 800cd68:	4623      	mov	r3, r4
 800cd6a:	d807      	bhi.n	800cd7c <memmove+0x20>
 800cd6c:	1e43      	subs	r3, r0, #1
 800cd6e:	42a1      	cmp	r1, r4
 800cd70:	d008      	beq.n	800cd84 <memmove+0x28>
 800cd72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd76:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd7a:	e7f8      	b.n	800cd6e <memmove+0x12>
 800cd7c:	4402      	add	r2, r0
 800cd7e:	4601      	mov	r1, r0
 800cd80:	428a      	cmp	r2, r1
 800cd82:	d100      	bne.n	800cd86 <memmove+0x2a>
 800cd84:	bd10      	pop	{r4, pc}
 800cd86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd8e:	e7f7      	b.n	800cd80 <memmove+0x24>

0800cd90 <_free_r>:
 800cd90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd92:	2900      	cmp	r1, #0
 800cd94:	d048      	beq.n	800ce28 <_free_r+0x98>
 800cd96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd9a:	9001      	str	r0, [sp, #4]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	f1a1 0404 	sub.w	r4, r1, #4
 800cda2:	bfb8      	it	lt
 800cda4:	18e4      	addlt	r4, r4, r3
 800cda6:	f000 f8d3 	bl	800cf50 <__malloc_lock>
 800cdaa:	4a20      	ldr	r2, [pc, #128]	; (800ce2c <_free_r+0x9c>)
 800cdac:	9801      	ldr	r0, [sp, #4]
 800cdae:	6813      	ldr	r3, [r2, #0]
 800cdb0:	4615      	mov	r5, r2
 800cdb2:	b933      	cbnz	r3, 800cdc2 <_free_r+0x32>
 800cdb4:	6063      	str	r3, [r4, #4]
 800cdb6:	6014      	str	r4, [r2, #0]
 800cdb8:	b003      	add	sp, #12
 800cdba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cdbe:	f000 b8cd 	b.w	800cf5c <__malloc_unlock>
 800cdc2:	42a3      	cmp	r3, r4
 800cdc4:	d90b      	bls.n	800cdde <_free_r+0x4e>
 800cdc6:	6821      	ldr	r1, [r4, #0]
 800cdc8:	1862      	adds	r2, r4, r1
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	bf04      	itt	eq
 800cdce:	681a      	ldreq	r2, [r3, #0]
 800cdd0:	685b      	ldreq	r3, [r3, #4]
 800cdd2:	6063      	str	r3, [r4, #4]
 800cdd4:	bf04      	itt	eq
 800cdd6:	1852      	addeq	r2, r2, r1
 800cdd8:	6022      	streq	r2, [r4, #0]
 800cdda:	602c      	str	r4, [r5, #0]
 800cddc:	e7ec      	b.n	800cdb8 <_free_r+0x28>
 800cdde:	461a      	mov	r2, r3
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	b10b      	cbz	r3, 800cde8 <_free_r+0x58>
 800cde4:	42a3      	cmp	r3, r4
 800cde6:	d9fa      	bls.n	800cdde <_free_r+0x4e>
 800cde8:	6811      	ldr	r1, [r2, #0]
 800cdea:	1855      	adds	r5, r2, r1
 800cdec:	42a5      	cmp	r5, r4
 800cdee:	d10b      	bne.n	800ce08 <_free_r+0x78>
 800cdf0:	6824      	ldr	r4, [r4, #0]
 800cdf2:	4421      	add	r1, r4
 800cdf4:	1854      	adds	r4, r2, r1
 800cdf6:	42a3      	cmp	r3, r4
 800cdf8:	6011      	str	r1, [r2, #0]
 800cdfa:	d1dd      	bne.n	800cdb8 <_free_r+0x28>
 800cdfc:	681c      	ldr	r4, [r3, #0]
 800cdfe:	685b      	ldr	r3, [r3, #4]
 800ce00:	6053      	str	r3, [r2, #4]
 800ce02:	4421      	add	r1, r4
 800ce04:	6011      	str	r1, [r2, #0]
 800ce06:	e7d7      	b.n	800cdb8 <_free_r+0x28>
 800ce08:	d902      	bls.n	800ce10 <_free_r+0x80>
 800ce0a:	230c      	movs	r3, #12
 800ce0c:	6003      	str	r3, [r0, #0]
 800ce0e:	e7d3      	b.n	800cdb8 <_free_r+0x28>
 800ce10:	6825      	ldr	r5, [r4, #0]
 800ce12:	1961      	adds	r1, r4, r5
 800ce14:	428b      	cmp	r3, r1
 800ce16:	bf04      	itt	eq
 800ce18:	6819      	ldreq	r1, [r3, #0]
 800ce1a:	685b      	ldreq	r3, [r3, #4]
 800ce1c:	6063      	str	r3, [r4, #4]
 800ce1e:	bf04      	itt	eq
 800ce20:	1949      	addeq	r1, r1, r5
 800ce22:	6021      	streq	r1, [r4, #0]
 800ce24:	6054      	str	r4, [r2, #4]
 800ce26:	e7c7      	b.n	800cdb8 <_free_r+0x28>
 800ce28:	b003      	add	sp, #12
 800ce2a:	bd30      	pop	{r4, r5, pc}
 800ce2c:	24053da0 	.word	0x24053da0

0800ce30 <_malloc_r>:
 800ce30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce32:	1ccd      	adds	r5, r1, #3
 800ce34:	f025 0503 	bic.w	r5, r5, #3
 800ce38:	3508      	adds	r5, #8
 800ce3a:	2d0c      	cmp	r5, #12
 800ce3c:	bf38      	it	cc
 800ce3e:	250c      	movcc	r5, #12
 800ce40:	2d00      	cmp	r5, #0
 800ce42:	4606      	mov	r6, r0
 800ce44:	db01      	blt.n	800ce4a <_malloc_r+0x1a>
 800ce46:	42a9      	cmp	r1, r5
 800ce48:	d903      	bls.n	800ce52 <_malloc_r+0x22>
 800ce4a:	230c      	movs	r3, #12
 800ce4c:	6033      	str	r3, [r6, #0]
 800ce4e:	2000      	movs	r0, #0
 800ce50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce52:	f000 f87d 	bl	800cf50 <__malloc_lock>
 800ce56:	4921      	ldr	r1, [pc, #132]	; (800cedc <_malloc_r+0xac>)
 800ce58:	680a      	ldr	r2, [r1, #0]
 800ce5a:	4614      	mov	r4, r2
 800ce5c:	b99c      	cbnz	r4, 800ce86 <_malloc_r+0x56>
 800ce5e:	4f20      	ldr	r7, [pc, #128]	; (800cee0 <_malloc_r+0xb0>)
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	b923      	cbnz	r3, 800ce6e <_malloc_r+0x3e>
 800ce64:	4621      	mov	r1, r4
 800ce66:	4630      	mov	r0, r6
 800ce68:	f000 f862 	bl	800cf30 <_sbrk_r>
 800ce6c:	6038      	str	r0, [r7, #0]
 800ce6e:	4629      	mov	r1, r5
 800ce70:	4630      	mov	r0, r6
 800ce72:	f000 f85d 	bl	800cf30 <_sbrk_r>
 800ce76:	1c43      	adds	r3, r0, #1
 800ce78:	d123      	bne.n	800cec2 <_malloc_r+0x92>
 800ce7a:	230c      	movs	r3, #12
 800ce7c:	6033      	str	r3, [r6, #0]
 800ce7e:	4630      	mov	r0, r6
 800ce80:	f000 f86c 	bl	800cf5c <__malloc_unlock>
 800ce84:	e7e3      	b.n	800ce4e <_malloc_r+0x1e>
 800ce86:	6823      	ldr	r3, [r4, #0]
 800ce88:	1b5b      	subs	r3, r3, r5
 800ce8a:	d417      	bmi.n	800cebc <_malloc_r+0x8c>
 800ce8c:	2b0b      	cmp	r3, #11
 800ce8e:	d903      	bls.n	800ce98 <_malloc_r+0x68>
 800ce90:	6023      	str	r3, [r4, #0]
 800ce92:	441c      	add	r4, r3
 800ce94:	6025      	str	r5, [r4, #0]
 800ce96:	e004      	b.n	800cea2 <_malloc_r+0x72>
 800ce98:	6863      	ldr	r3, [r4, #4]
 800ce9a:	42a2      	cmp	r2, r4
 800ce9c:	bf0c      	ite	eq
 800ce9e:	600b      	streq	r3, [r1, #0]
 800cea0:	6053      	strne	r3, [r2, #4]
 800cea2:	4630      	mov	r0, r6
 800cea4:	f000 f85a 	bl	800cf5c <__malloc_unlock>
 800cea8:	f104 000b 	add.w	r0, r4, #11
 800ceac:	1d23      	adds	r3, r4, #4
 800ceae:	f020 0007 	bic.w	r0, r0, #7
 800ceb2:	1ac2      	subs	r2, r0, r3
 800ceb4:	d0cc      	beq.n	800ce50 <_malloc_r+0x20>
 800ceb6:	1a1b      	subs	r3, r3, r0
 800ceb8:	50a3      	str	r3, [r4, r2]
 800ceba:	e7c9      	b.n	800ce50 <_malloc_r+0x20>
 800cebc:	4622      	mov	r2, r4
 800cebe:	6864      	ldr	r4, [r4, #4]
 800cec0:	e7cc      	b.n	800ce5c <_malloc_r+0x2c>
 800cec2:	1cc4      	adds	r4, r0, #3
 800cec4:	f024 0403 	bic.w	r4, r4, #3
 800cec8:	42a0      	cmp	r0, r4
 800ceca:	d0e3      	beq.n	800ce94 <_malloc_r+0x64>
 800cecc:	1a21      	subs	r1, r4, r0
 800cece:	4630      	mov	r0, r6
 800ced0:	f000 f82e 	bl	800cf30 <_sbrk_r>
 800ced4:	3001      	adds	r0, #1
 800ced6:	d1dd      	bne.n	800ce94 <_malloc_r+0x64>
 800ced8:	e7cf      	b.n	800ce7a <_malloc_r+0x4a>
 800ceda:	bf00      	nop
 800cedc:	24053da0 	.word	0x24053da0
 800cee0:	24053da4 	.word	0x24053da4

0800cee4 <_realloc_r>:
 800cee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cee6:	4607      	mov	r7, r0
 800cee8:	4614      	mov	r4, r2
 800ceea:	460e      	mov	r6, r1
 800ceec:	b921      	cbnz	r1, 800cef8 <_realloc_r+0x14>
 800ceee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cef2:	4611      	mov	r1, r2
 800cef4:	f7ff bf9c 	b.w	800ce30 <_malloc_r>
 800cef8:	b922      	cbnz	r2, 800cf04 <_realloc_r+0x20>
 800cefa:	f7ff ff49 	bl	800cd90 <_free_r>
 800cefe:	4625      	mov	r5, r4
 800cf00:	4628      	mov	r0, r5
 800cf02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf04:	f000 f830 	bl	800cf68 <_malloc_usable_size_r>
 800cf08:	42a0      	cmp	r0, r4
 800cf0a:	d20f      	bcs.n	800cf2c <_realloc_r+0x48>
 800cf0c:	4621      	mov	r1, r4
 800cf0e:	4638      	mov	r0, r7
 800cf10:	f7ff ff8e 	bl	800ce30 <_malloc_r>
 800cf14:	4605      	mov	r5, r0
 800cf16:	2800      	cmp	r0, #0
 800cf18:	d0f2      	beq.n	800cf00 <_realloc_r+0x1c>
 800cf1a:	4631      	mov	r1, r6
 800cf1c:	4622      	mov	r2, r4
 800cf1e:	f7ff ff0f 	bl	800cd40 <memcpy>
 800cf22:	4631      	mov	r1, r6
 800cf24:	4638      	mov	r0, r7
 800cf26:	f7ff ff33 	bl	800cd90 <_free_r>
 800cf2a:	e7e9      	b.n	800cf00 <_realloc_r+0x1c>
 800cf2c:	4635      	mov	r5, r6
 800cf2e:	e7e7      	b.n	800cf00 <_realloc_r+0x1c>

0800cf30 <_sbrk_r>:
 800cf30:	b538      	push	{r3, r4, r5, lr}
 800cf32:	4d06      	ldr	r5, [pc, #24]	; (800cf4c <_sbrk_r+0x1c>)
 800cf34:	2300      	movs	r3, #0
 800cf36:	4604      	mov	r4, r0
 800cf38:	4608      	mov	r0, r1
 800cf3a:	602b      	str	r3, [r5, #0]
 800cf3c:	f7f6 fb2c 	bl	8003598 <_sbrk>
 800cf40:	1c43      	adds	r3, r0, #1
 800cf42:	d102      	bne.n	800cf4a <_sbrk_r+0x1a>
 800cf44:	682b      	ldr	r3, [r5, #0]
 800cf46:	b103      	cbz	r3, 800cf4a <_sbrk_r+0x1a>
 800cf48:	6023      	str	r3, [r4, #0]
 800cf4a:	bd38      	pop	{r3, r4, r5, pc}
 800cf4c:	24054530 	.word	0x24054530

0800cf50 <__malloc_lock>:
 800cf50:	4801      	ldr	r0, [pc, #4]	; (800cf58 <__malloc_lock+0x8>)
 800cf52:	f000 b811 	b.w	800cf78 <__retarget_lock_acquire_recursive>
 800cf56:	bf00      	nop
 800cf58:	24054538 	.word	0x24054538

0800cf5c <__malloc_unlock>:
 800cf5c:	4801      	ldr	r0, [pc, #4]	; (800cf64 <__malloc_unlock+0x8>)
 800cf5e:	f000 b80c 	b.w	800cf7a <__retarget_lock_release_recursive>
 800cf62:	bf00      	nop
 800cf64:	24054538 	.word	0x24054538

0800cf68 <_malloc_usable_size_r>:
 800cf68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf6c:	1f18      	subs	r0, r3, #4
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	bfbc      	itt	lt
 800cf72:	580b      	ldrlt	r3, [r1, r0]
 800cf74:	18c0      	addlt	r0, r0, r3
 800cf76:	4770      	bx	lr

0800cf78 <__retarget_lock_acquire_recursive>:
 800cf78:	4770      	bx	lr

0800cf7a <__retarget_lock_release_recursive>:
 800cf7a:	4770      	bx	lr

0800cf7c <_init>:
 800cf7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf7e:	bf00      	nop
 800cf80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf82:	bc08      	pop	{r3}
 800cf84:	469e      	mov	lr, r3
 800cf86:	4770      	bx	lr

0800cf88 <_fini>:
 800cf88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf8a:	bf00      	nop
 800cf8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf8e:	bc08      	pop	{r3}
 800cf90:	469e      	mov	lr, r3
 800cf92:	4770      	bx	lr
