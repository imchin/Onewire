
Onewire_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd5c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800bffc  0800bffc  0001bffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c074  0800c074  00058548  2**0
                  CONTENTS
  4 .ARM          00000008  0800c074  0800c074  0001c074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c07c  0800c07c  00058548  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c07c  0800c07c  0001c07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c080  0800c080  0001c080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00038488  24000000  0800c084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24038488  0804450c  00058488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240384e8  0804456c  000584e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000c82c  24038548  080445cc  00058548  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  24044d74  080445cc  00064d74  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00058548  2**0
                  CONTENTS, READONLY
 14 .debug_info   000301f7  00000000  00000000  00058576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000042bd  00000000  00000000  0008876d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001890  00000000  00000000  0008ca30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001758  00000000  00000000  0008e2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003c957  00000000  00000000  0008fa18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002058a  00000000  00000000  000cc36f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0019138b  00000000  00000000  000ec8f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  0027dc84  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006e74  00000000  00000000  0027dcd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24038548 	.word	0x24038548
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bfe4 	.word	0x0800bfe4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2403854c 	.word	0x2403854c
 80002dc:	0800bfe4 	.word	0x0800bfe4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b98e 	b.w	80006b4 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f826 	bl	80003f0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_d2ulz>:
 80003b0:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80003e0 <__aeabi_d2ulz+0x30>
 80003b4:	ec41 0b17 	vmov	d7, r0, r1
 80003b8:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80003e8 <__aeabi_d2ulz+0x38>
 80003bc:	ee27 6b06 	vmul.f64	d6, d7, d6
 80003c0:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80003c4:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80003c8:	eea4 7b45 	vfms.f64	d7, d4, d5
 80003cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80003d0:	ee16 1a10 	vmov	r1, s12
 80003d4:	ee17 0a90 	vmov	r0, s15
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	f3af 8000 	nop.w
 80003e0:	00000000 	.word	0x00000000
 80003e4:	3df00000 	.word	0x3df00000
 80003e8:	00000000 	.word	0x00000000
 80003ec:	41f00000 	.word	0x41f00000

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006bc:	4b3f      	ldr	r3, [pc, #252]	; (80007bc <SystemInit+0x104>)
 80006be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006c2:	4a3e      	ldr	r2, [pc, #248]	; (80007bc <SystemInit+0x104>)
 80006c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006cc:	4b3b      	ldr	r3, [pc, #236]	; (80007bc <SystemInit+0x104>)
 80006ce:	691b      	ldr	r3, [r3, #16]
 80006d0:	4a3a      	ldr	r2, [pc, #232]	; (80007bc <SystemInit+0x104>)
 80006d2:	f043 0310 	orr.w	r3, r3, #16
 80006d6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d8:	4b39      	ldr	r3, [pc, #228]	; (80007c0 <SystemInit+0x108>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f003 030f 	and.w	r3, r3, #15
 80006e0:	2b06      	cmp	r3, #6
 80006e2:	d807      	bhi.n	80006f4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e4:	4b36      	ldr	r3, [pc, #216]	; (80007c0 <SystemInit+0x108>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f023 030f 	bic.w	r3, r3, #15
 80006ec:	4a34      	ldr	r2, [pc, #208]	; (80007c0 <SystemInit+0x108>)
 80006ee:	f043 0307 	orr.w	r3, r3, #7
 80006f2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006f4:	4b33      	ldr	r3, [pc, #204]	; (80007c4 <SystemInit+0x10c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a32      	ldr	r2, [pc, #200]	; (80007c4 <SystemInit+0x10c>)
 80006fa:	f043 0301 	orr.w	r3, r3, #1
 80006fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000700:	4b30      	ldr	r3, [pc, #192]	; (80007c4 <SystemInit+0x10c>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000706:	4b2f      	ldr	r3, [pc, #188]	; (80007c4 <SystemInit+0x10c>)
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	492e      	ldr	r1, [pc, #184]	; (80007c4 <SystemInit+0x10c>)
 800070c:	4b2e      	ldr	r3, [pc, #184]	; (80007c8 <SystemInit+0x110>)
 800070e:	4013      	ands	r3, r2
 8000710:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000712:	4b2b      	ldr	r3, [pc, #172]	; (80007c0 <SystemInit+0x108>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f003 0308 	and.w	r3, r3, #8
 800071a:	2b00      	cmp	r3, #0
 800071c:	d007      	beq.n	800072e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800071e:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <SystemInit+0x108>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f023 030f 	bic.w	r3, r3, #15
 8000726:	4a26      	ldr	r2, [pc, #152]	; (80007c0 <SystemInit+0x108>)
 8000728:	f043 0307 	orr.w	r3, r3, #7
 800072c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800072e:	4b25      	ldr	r3, [pc, #148]	; (80007c4 <SystemInit+0x10c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000734:	4b23      	ldr	r3, [pc, #140]	; (80007c4 <SystemInit+0x10c>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800073a:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <SystemInit+0x10c>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000740:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <SystemInit+0x10c>)
 8000742:	4a22      	ldr	r2, [pc, #136]	; (80007cc <SystemInit+0x114>)
 8000744:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000746:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <SystemInit+0x10c>)
 8000748:	4a21      	ldr	r2, [pc, #132]	; (80007d0 <SystemInit+0x118>)
 800074a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800074c:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <SystemInit+0x10c>)
 800074e:	4a21      	ldr	r2, [pc, #132]	; (80007d4 <SystemInit+0x11c>)
 8000750:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000752:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <SystemInit+0x10c>)
 8000754:	2200      	movs	r2, #0
 8000756:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000758:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <SystemInit+0x10c>)
 800075a:	4a1e      	ldr	r2, [pc, #120]	; (80007d4 <SystemInit+0x11c>)
 800075c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800075e:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <SystemInit+0x10c>)
 8000760:	2200      	movs	r2, #0
 8000762:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000764:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <SystemInit+0x10c>)
 8000766:	4a1b      	ldr	r2, [pc, #108]	; (80007d4 <SystemInit+0x11c>)
 8000768:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800076a:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <SystemInit+0x10c>)
 800076c:	2200      	movs	r2, #0
 800076e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <SystemInit+0x10c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a13      	ldr	r2, [pc, #76]	; (80007c4 <SystemInit+0x10c>)
 8000776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800077a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <SystemInit+0x10c>)
 800077e:	2200      	movs	r2, #0
 8000780:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <SystemInit+0x120>)
 8000784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000786:	4a14      	ldr	r2, [pc, #80]	; (80007d8 <SystemInit+0x120>)
 8000788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800078c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800078e:	4b13      	ldr	r3, [pc, #76]	; (80007dc <SystemInit+0x124>)
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <SystemInit+0x128>)
 8000794:	4013      	ands	r3, r2
 8000796:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800079a:	d202      	bcs.n	80007a2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <SystemInit+0x12c>)
 800079e:	2201      	movs	r2, #1
 80007a0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <SystemInit+0x130>)
 80007a4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80007a8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80007aa:	4b04      	ldr	r3, [pc, #16]	; (80007bc <SystemInit+0x104>)
 80007ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007b0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80007b2:	bf00      	nop
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	e000ed00 	.word	0xe000ed00
 80007c0:	52002000 	.word	0x52002000
 80007c4:	58024400 	.word	0x58024400
 80007c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80007cc:	02020200 	.word	0x02020200
 80007d0:	01ff0000 	.word	0x01ff0000
 80007d4:	01010280 	.word	0x01010280
 80007d8:	580000c0 	.word	0x580000c0
 80007dc:	5c001000 	.word	0x5c001000
 80007e0:	ffff0000 	.word	0xffff0000
 80007e4:	51008108 	.word	0x51008108
 80007e8:	52004000 	.word	0x52004000
 80007ec:	00000000 	.word	0x00000000

080007f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007fa:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007fc:	bf00      	nop
 80007fe:	4b44      	ldr	r3, [pc, #272]	; (8000910 <main+0x120>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000806:	2b00      	cmp	r3, #0
 8000808:	d004      	beq.n	8000814 <main+0x24>
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	1e5a      	subs	r2, r3, #1
 800080e:	607a      	str	r2, [r7, #4]
 8000810:	2b00      	cmp	r3, #0
 8000812:	dcf4      	bgt.n	80007fe <main+0xe>
  if ( timeout < 0 )
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b00      	cmp	r3, #0
 8000818:	da01      	bge.n	800081e <main+0x2e>
  {
  Error_Handler();
 800081a:	f001 fb8d 	bl	8001f38 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081e:	f001 ff4f 	bl	80026c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000822:	f000 f883 	bl	800092c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000826:	4b3a      	ldr	r3, [pc, #232]	; (8000910 <main+0x120>)
 8000828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800082c:	4a38      	ldr	r2, [pc, #224]	; (8000910 <main+0x120>)
 800082e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000832:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000836:	4b36      	ldr	r3, [pc, #216]	; (8000910 <main+0x120>)
 8000838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800083c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000844:	2000      	movs	r0, #0
 8000846:	f005 fa41 	bl	8005ccc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800084a:	2100      	movs	r1, #0
 800084c:	2000      	movs	r0, #0
 800084e:	f005 fa57 	bl	8005d00 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000852:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000856:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000858:	bf00      	nop
 800085a:	4b2d      	ldr	r3, [pc, #180]	; (8000910 <main+0x120>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000862:	2b00      	cmp	r3, #0
 8000864:	d104      	bne.n	8000870 <main+0x80>
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	1e5a      	subs	r2, r3, #1
 800086a:	607a      	str	r2, [r7, #4]
 800086c:	2b00      	cmp	r3, #0
 800086e:	dcf4      	bgt.n	800085a <main+0x6a>
if ( timeout < 0 )
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2b00      	cmp	r3, #0
 8000874:	da01      	bge.n	800087a <main+0x8a>
{
Error_Handler();
 8000876:	f001 fb5f 	bl	8001f38 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087a:	f000 fb0b 	bl	8000e94 <MX_GPIO_Init>
  MX_ETH_Init();
 800087e:	f000 f8db 	bl	8000a38 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000882:	f000 fa69 	bl	8000d58 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000886:	f000 fab3 	bl	8000df0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 800088a:	f000 f979 	bl	8000b80 <MX_TIM3_Init>
  MX_TIM5_Init();
 800088e:	f000 f9c5 	bl	8000c1c <MX_TIM5_Init>
  MX_DMA_Init();
 8000892:	f000 fadf 	bl	8000e54 <MX_DMA_Init>
  MX_SPI1_Init();
 8000896:	f000 f91b 	bl	8000ad0 <MX_SPI1_Init>
  MX_TIM15_Init();
 800089a:	f000 fa0d 	bl	8000cb8 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */


  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 1);
 800089e:	2201      	movs	r2, #1
 80008a0:	2102      	movs	r1, #2
 80008a2:	481c      	ldr	r0, [pc, #112]	; (8000914 <main+0x124>)
 80008a4:	f005 f9f8 	bl	8005c98 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim3);
 80008a8:	481b      	ldr	r0, [pc, #108]	; (8000918 <main+0x128>)
 80008aa:	f008 ff33 	bl	8009714 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 80008ae:	481b      	ldr	r0, [pc, #108]	; (800091c <main+0x12c>)
 80008b0:	f008 ff30 	bl	8009714 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim15);
 80008b4:	481a      	ldr	r0, [pc, #104]	; (8000920 <main+0x130>)
 80008b6:	f008 ff2d 	bl	8009714 <HAL_TIM_Base_Start_IT>

  LCD_init();
 80008ba:	f000 fcf3 	bl	80012a4 <LCD_init>
  HAL_Delay(500);
 80008be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008c2:	f001 ff8f 	bl	80027e4 <HAL_Delay>
  fillFrame();
 80008c6:	f001 fb1b 	bl	8001f00 <fillFrame>
  sortt(22.22,42.26);
 80008ca:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 8000900 <main+0x110>
 80008ce:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8000908 <main+0x118>
 80008d2:	f000 fd7d 	bl	80013d0 <sortt>
  makeImg();
 80008d6:	f000 fdd3 	bl	8001480 <makeImg>
  HAL_Delay(2000);
 80008da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008de:	f001 ff81 	bl	80027e4 <HAL_Delay>


  HAL_SPI_Transmit_DMA(&hspi1, Frame, 49152);
 80008e2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80008e6:	490f      	ldr	r1, [pc, #60]	; (8000924 <main+0x134>)
 80008e8:	480f      	ldr	r0, [pc, #60]	; (8000928 <main+0x138>)
 80008ea:	f008 f9e1 	bl	8008cb0 <HAL_SPI_Transmit_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		requestT();
 80008ee:	f000 fbd7 	bl	80010a0 <requestT>
		get_value();
 80008f2:	f000 fbf7 	bl	80010e4 <get_value>
		Update_check_Value();
 80008f6:	f000 fc19 	bl	800112c <Update_check_Value>
		requestT();
 80008fa:	e7f8      	b.n	80008ee <main+0xfe>
 80008fc:	f3af 8000 	nop.w
 8000900:	ae147ae1 	.word	0xae147ae1
 8000904:	40452147 	.word	0x40452147
 8000908:	eb851eb8 	.word	0xeb851eb8
 800090c:	40363851 	.word	0x40363851
 8000910:	58024400 	.word	0x58024400
 8000914:	58020c00 	.word	0x58020c00
 8000918:	24044b58 	.word	0x24044b58
 800091c:	24044b0c 	.word	0x24044b0c
 8000920:	240446b8 	.word	0x240446b8
 8000924:	24038580 	.word	0x24038580
 8000928:	24044ba4 	.word	0x24044ba4

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b09c      	sub	sp, #112	; 0x70
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000936:	224c      	movs	r2, #76	; 0x4c
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f00a ff1c 	bl	800b778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2220      	movs	r2, #32
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f00a ff16 	bl	800b778 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800094c:	2004      	movs	r0, #4
 800094e:	f005 fb33 	bl	8005fb8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4b35      	ldr	r3, [pc, #212]	; (8000a2c <SystemClock_Config+0x100>)
 8000958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800095a:	4a34      	ldr	r2, [pc, #208]	; (8000a2c <SystemClock_Config+0x100>)
 800095c:	f023 0301 	bic.w	r3, r3, #1
 8000960:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000962:	4b32      	ldr	r3, [pc, #200]	; (8000a2c <SystemClock_Config+0x100>)
 8000964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	4b30      	ldr	r3, [pc, #192]	; (8000a30 <SystemClock_Config+0x104>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000974:	4a2e      	ldr	r2, [pc, #184]	; (8000a30 <SystemClock_Config+0x104>)
 8000976:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b2c      	ldr	r3, [pc, #176]	; (8000a30 <SystemClock_Config+0x104>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000984:	603b      	str	r3, [r7, #0]
 8000986:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000988:	bf00      	nop
 800098a:	4b29      	ldr	r3, [pc, #164]	; (8000a30 <SystemClock_Config+0x104>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000996:	d1f8      	bne.n	800098a <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000998:	4b26      	ldr	r3, [pc, #152]	; (8000a34 <SystemClock_Config+0x108>)
 800099a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800099c:	f023 0303 	bic.w	r3, r3, #3
 80009a0:	4a24      	ldr	r2, [pc, #144]	; (8000a34 <SystemClock_Config+0x108>)
 80009a2:	f043 0302 	orr.w	r3, r3, #2
 80009a6:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009a8:	2301      	movs	r3, #1
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b2:	2302      	movs	r3, #2
 80009b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009b6:	2302      	movs	r3, #2
 80009b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009ba:	2301      	movs	r3, #1
 80009bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 80009be:	2319      	movs	r3, #25
 80009c0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009c2:	2302      	movs	r3, #2
 80009c4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009c6:	2302      	movs	r3, #2
 80009c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009ca:	2302      	movs	r3, #2
 80009cc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009ce:	230c      	movs	r3, #12
 80009d0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009d2:	2300      	movs	r3, #0
 80009d4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009de:	4618      	mov	r0, r3
 80009e0:	f005 fb54 	bl	800608c <HAL_RCC_OscConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009ea:	f001 faa5 	bl	8001f38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ee:	233f      	movs	r3, #63	; 0x3f
 80009f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f2:	2303      	movs	r3, #3
 80009f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009fe:	2340      	movs	r3, #64	; 0x40
 8000a00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a02:	2340      	movs	r3, #64	; 0x40
 8000a04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a0a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a0c:	2340      	movs	r3, #64	; 0x40
 8000a0e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2102      	movs	r1, #2
 8000a14:	4618      	mov	r0, r3
 8000a16:	f005 ff65 	bl	80068e4 <HAL_RCC_ClockConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000a20:	f001 fa8a 	bl	8001f38 <Error_Handler>
  }
}
 8000a24:	bf00      	nop
 8000a26:	3770      	adds	r7, #112	; 0x70
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	58000400 	.word	0x58000400
 8000a30:	58024800 	.word	0x58024800
 8000a34:	58024400 	.word	0x58024400

08000a38 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <MX_ETH_Init+0x80>)
 8000a3e:	4a1f      	ldr	r2, [pc, #124]	; (8000abc <MX_ETH_Init+0x84>)
 8000a40:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a42:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <MX_ETH_Init+0x88>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a48:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <MX_ETH_Init+0x88>)
 8000a4a:	2280      	movs	r2, #128	; 0x80
 8000a4c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <MX_ETH_Init+0x88>)
 8000a50:	22e1      	movs	r2, #225	; 0xe1
 8000a52:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a54:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <MX_ETH_Init+0x88>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <MX_ETH_Init+0x88>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a60:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <MX_ETH_Init+0x88>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a66:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_ETH_Init+0x80>)
 8000a68:	4a15      	ldr	r2, [pc, #84]	; (8000ac0 <MX_ETH_Init+0x88>)
 8000a6a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <MX_ETH_Init+0x80>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_ETH_Init+0x80>)
 8000a74:	4a13      	ldr	r2, [pc, #76]	; (8000ac4 <MX_ETH_Init+0x8c>)
 8000a76:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_ETH_Init+0x80>)
 8000a7a:	4a13      	ldr	r2, [pc, #76]	; (8000ac8 <MX_ETH_Init+0x90>)
 8000a7c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_ETH_Init+0x80>)
 8000a80:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a84:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a86:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <MX_ETH_Init+0x80>)
 8000a88:	f004 fb28 	bl	80050dc <HAL_ETH_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000a92:	f001 fa51 	bl	8001f38 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a96:	2234      	movs	r2, #52	; 0x34
 8000a98:	2100      	movs	r1, #0
 8000a9a:	480c      	ldr	r0, [pc, #48]	; (8000acc <MX_ETH_Init+0x94>)
 8000a9c:	f00a fe6c 	bl	800b778 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <MX_ETH_Init+0x94>)
 8000aa2:	2221      	movs	r2, #33	; 0x21
 8000aa4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <MX_ETH_Init+0x94>)
 8000aa8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000aac:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000aae:	4b07      	ldr	r3, [pc, #28]	; (8000acc <MX_ETH_Init+0x94>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	24044c2c 	.word	0x24044c2c
 8000abc:	40028000 	.word	0x40028000
 8000ac0:	24044614 	.word	0x24044614
 8000ac4:	240384e8 	.word	0x240384e8
 8000ac8:	24038488 	.word	0x24038488
 8000acc:	24044cb4 	.word	0x24044cb4

08000ad0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ad4:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <MX_SPI1_Init+0xa8>)
 8000ad6:	4a29      	ldr	r2, [pc, #164]	; (8000b7c <MX_SPI1_Init+0xac>)
 8000ad8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ada:	4b27      	ldr	r3, [pc, #156]	; (8000b78 <MX_SPI1_Init+0xa8>)
 8000adc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ae0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000ae2:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <MX_SPI1_Init+0xa8>)
 8000ae4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ae8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aea:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <MX_SPI1_Init+0xa8>)
 8000aec:	2207      	movs	r2, #7
 8000aee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <MX_SPI1_Init+0xa8>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <MX_SPI1_Init+0xa8>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <MX_SPI1_Init+0xa8>)
 8000afe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b02:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000b04:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <MX_SPI1_Init+0xa8>)
 8000b06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b0c:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <MX_SPI1_Init+0xa8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b12:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <MX_SPI1_Init+0xa8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <MX_SPI1_Init+0xa8>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <MX_SPI1_Init+0xa8>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_SPI1_Init+0xa8>)
 8000b26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b2a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <MX_SPI1_Init+0xa8>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_SPI1_Init+0xa8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_SPI1_Init+0xa8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_SPI1_Init+0xa8>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_SPI1_Init+0xa8>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <MX_SPI1_Init+0xa8>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_SPI1_Init+0xa8>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <MX_SPI1_Init+0xa8>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_SPI1_Init+0xa8>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_SPI1_Init+0xa8>)
 8000b64:	f007 fdac 	bl	80086c0 <HAL_SPI_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000b6e:	f001 f9e3 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	24044ba4 	.word	0x24044ba4
 8000b7c:	40013000 	.word	0x40013000

08000b80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b088      	sub	sp, #32
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b86:	f107 0310 	add.w	r3, r7, #16
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b9e:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <MX_TIM3_Init+0x94>)
 8000ba0:	4a1d      	ldr	r2, [pc, #116]	; (8000c18 <MX_TIM3_Init+0x98>)
 8000ba2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <MX_TIM3_Init+0x94>)
 8000ba6:	2263      	movs	r2, #99	; 0x63
 8000ba8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000baa:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <MX_TIM3_Init+0x94>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000bb0:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <MX_TIM3_Init+0x94>)
 8000bb2:	f242 7210 	movw	r2, #10000	; 0x2710
 8000bb6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb8:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <MX_TIM3_Init+0x94>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <MX_TIM3_Init+0x94>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bc4:	4813      	ldr	r0, [pc, #76]	; (8000c14 <MX_TIM3_Init+0x94>)
 8000bc6:	f008 fd26 	bl	8009616 <HAL_TIM_Base_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000bd0:	f001 f9b2 	bl	8001f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bda:	f107 0310 	add.w	r3, r7, #16
 8000bde:	4619      	mov	r1, r3
 8000be0:	480c      	ldr	r0, [pc, #48]	; (8000c14 <MX_TIM3_Init+0x94>)
 8000be2:	f008 ff2f 	bl	8009a44 <HAL_TIM_ConfigClockSource>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000bec:	f001 f9a4 	bl	8001f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_TIM3_Init+0x94>)
 8000bfe:	f009 f979 	bl	8009ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000c08:	f001 f996 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	3720      	adds	r7, #32
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	24044b58 	.word	0x24044b58
 8000c18:	40000400 	.word	0x40000400

08000c1c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c22:	f107 0310 	add.w	r3, r7, #16
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c3a:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <MX_TIM5_Init+0x94>)
 8000c3c:	4a1d      	ldr	r2, [pc, #116]	; (8000cb4 <MX_TIM5_Init+0x98>)
 8000c3e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 8000c40:	4b1b      	ldr	r3, [pc, #108]	; (8000cb0 <MX_TIM5_Init+0x94>)
 8000c42:	2263      	movs	r2, #99	; 0x63
 8000c44:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c46:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <MX_TIM5_Init+0x94>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000c4c:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <MX_TIM5_Init+0x94>)
 8000c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8000c52:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c54:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <MX_TIM5_Init+0x94>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5a:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <MX_TIM5_Init+0x94>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000c60:	4813      	ldr	r0, [pc, #76]	; (8000cb0 <MX_TIM5_Init+0x94>)
 8000c62:	f008 fcd8 	bl	8009616 <HAL_TIM_Base_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000c6c:	f001 f964 	bl	8001f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000c76:	f107 0310 	add.w	r3, r7, #16
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	480c      	ldr	r0, [pc, #48]	; (8000cb0 <MX_TIM5_Init+0x94>)
 8000c7e:	f008 fee1 	bl	8009a44 <HAL_TIM_ConfigClockSource>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000c88:	f001 f956 	bl	8001f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_TIM5_Init+0x94>)
 8000c9a:	f009 f92b 	bl	8009ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000ca4:	f001 f948 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	3720      	adds	r7, #32
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	24044b0c 	.word	0x24044b0c
 8000cb4:	40000c00 	.word	0x40000c00

08000cb8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b088      	sub	sp, #32
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cbe:	f107 0310 	add.w	r3, r7, #16
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000cd6:	4b1e      	ldr	r3, [pc, #120]	; (8000d50 <MX_TIM15_Init+0x98>)
 8000cd8:	4a1e      	ldr	r2, [pc, #120]	; (8000d54 <MX_TIM15_Init+0x9c>)
 8000cda:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 99;
 8000cdc:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <MX_TIM15_Init+0x98>)
 8000cde:	2263      	movs	r2, #99	; 0x63
 8000ce0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce2:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <MX_TIM15_Init+0x98>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 40;
 8000ce8:	4b19      	ldr	r3, [pc, #100]	; (8000d50 <MX_TIM15_Init+0x98>)
 8000cea:	2228      	movs	r2, #40	; 0x28
 8000cec:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cee:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <MX_TIM15_Init+0x98>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000cf4:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <MX_TIM15_Init+0x98>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <MX_TIM15_Init+0x98>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000d00:	4813      	ldr	r0, [pc, #76]	; (8000d50 <MX_TIM15_Init+0x98>)
 8000d02:	f008 fc88 	bl	8009616 <HAL_TIM_Base_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8000d0c:	f001 f914 	bl	8001f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000d16:	f107 0310 	add.w	r3, r7, #16
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	480c      	ldr	r0, [pc, #48]	; (8000d50 <MX_TIM15_Init+0x98>)
 8000d1e:	f008 fe91 	bl	8009a44 <HAL_TIM_ConfigClockSource>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8000d28:	f001 f906 	bl	8001f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	4619      	mov	r1, r3
 8000d38:	4805      	ldr	r0, [pc, #20]	; (8000d50 <MX_TIM15_Init+0x98>)
 8000d3a:	f009 f8db 	bl	8009ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8000d44:	f001 f8f8 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	3720      	adds	r7, #32
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	240446b8 	.word	0x240446b8
 8000d54:	40014000 	.word	0x40014000

08000d58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d5c:	4b22      	ldr	r3, [pc, #136]	; (8000de8 <MX_USART3_UART_Init+0x90>)
 8000d5e:	4a23      	ldr	r2, [pc, #140]	; (8000dec <MX_USART3_UART_Init+0x94>)
 8000d60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d62:	4b21      	ldr	r3, [pc, #132]	; (8000de8 <MX_USART3_UART_Init+0x90>)
 8000d64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6a:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <MX_USART3_UART_Init+0x90>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d70:	4b1d      	ldr	r3, [pc, #116]	; (8000de8 <MX_USART3_UART_Init+0x90>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d76:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <MX_USART3_UART_Init+0x90>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d7c:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <MX_USART3_UART_Init+0x90>)
 8000d7e:	220c      	movs	r2, #12
 8000d80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d82:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <MX_USART3_UART_Init+0x90>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d88:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <MX_USART3_UART_Init+0x90>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d8e:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <MX_USART3_UART_Init+0x90>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d94:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <MX_USART3_UART_Init+0x90>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d9a:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <MX_USART3_UART_Init+0x90>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000da0:	4811      	ldr	r0, [pc, #68]	; (8000de8 <MX_USART3_UART_Init+0x90>)
 8000da2:	f009 f953 	bl	800a04c <HAL_UART_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000dac:	f001 f8c4 	bl	8001f38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000db0:	2100      	movs	r1, #0
 8000db2:	480d      	ldr	r0, [pc, #52]	; (8000de8 <MX_USART3_UART_Init+0x90>)
 8000db4:	f00a f8e8 	bl	800af88 <HAL_UARTEx_SetTxFifoThreshold>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000dbe:	f001 f8bb 	bl	8001f38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4808      	ldr	r0, [pc, #32]	; (8000de8 <MX_USART3_UART_Init+0x90>)
 8000dc6:	f00a f91d 	bl	800b004 <HAL_UARTEx_SetRxFifoThreshold>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000dd0:	f001 f8b2 	bl	8001f38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000dd4:	4804      	ldr	r0, [pc, #16]	; (8000de8 <MX_USART3_UART_Init+0x90>)
 8000dd6:	f00a f89e 	bl	800af16 <HAL_UARTEx_DisableFifoMode>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000de0:	f001 f8aa 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	24044628 	.word	0x24044628
 8000dec:	40004800 	.word	0x40004800

08000df0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000df4:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000df6:	4a16      	ldr	r2, [pc, #88]	; (8000e50 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000df8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000dfa:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dfc:	2209      	movs	r2, #9
 8000dfe:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e02:	2202      	movs	r2, #2
 8000e04:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e0e:	2202      	movs	r2, #2
 8000e10:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000e24:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e36:	4805      	ldr	r0, [pc, #20]	; (8000e4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e38:	f004 ff76 	bl	8005d28 <HAL_PCD_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000e42:	f001 f879 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	24044704 	.word	0x24044704
 8000e50:	40080000 	.word	0x40080000

08000e54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e5a:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <MX_DMA_Init+0x3c>)
 8000e5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e60:	4a0b      	ldr	r2, [pc, #44]	; (8000e90 <MX_DMA_Init+0x3c>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <MX_DMA_Init+0x3c>)
 8000e6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	200b      	movs	r0, #11
 8000e7e:	f001 fdd0 	bl	8002a22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e82:	200b      	movs	r0, #11
 8000e84:	f001 fde7 	bl	8002a56 <HAL_NVIC_EnableIRQ>

}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	58024400 	.word	0x58024400

08000e94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08c      	sub	sp, #48	; 0x30
 8000e98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9a:	f107 031c 	add.w	r3, r7, #28
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
 8000ea8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eaa:	4b4d      	ldr	r3, [pc, #308]	; (8000fe0 <MX_GPIO_Init+0x14c>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb0:	4a4b      	ldr	r2, [pc, #300]	; (8000fe0 <MX_GPIO_Init+0x14c>)
 8000eb2:	f043 0304 	orr.w	r3, r3, #4
 8000eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eba:	4b49      	ldr	r3, [pc, #292]	; (8000fe0 <MX_GPIO_Init+0x14c>)
 8000ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec0:	f003 0304 	and.w	r3, r3, #4
 8000ec4:	61bb      	str	r3, [r7, #24]
 8000ec6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ec8:	4b45      	ldr	r3, [pc, #276]	; (8000fe0 <MX_GPIO_Init+0x14c>)
 8000eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ece:	4a44      	ldr	r2, [pc, #272]	; (8000fe0 <MX_GPIO_Init+0x14c>)
 8000ed0:	f043 0320 	orr.w	r3, r3, #32
 8000ed4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed8:	4b41      	ldr	r3, [pc, #260]	; (8000fe0 <MX_GPIO_Init+0x14c>)
 8000eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ede:	f003 0320 	and.w	r3, r3, #32
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ee6:	4b3e      	ldr	r3, [pc, #248]	; (8000fe0 <MX_GPIO_Init+0x14c>)
 8000ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eec:	4a3c      	ldr	r2, [pc, #240]	; (8000fe0 <MX_GPIO_Init+0x14c>)
 8000eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef6:	4b3a      	ldr	r3, [pc, #232]	; (8000fe0 <MX_GPIO_Init+0x14c>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f04:	4b36      	ldr	r3, [pc, #216]	; (8000fe0 <MX_GPIO_Init+0x14c>)
 8000f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0a:	4a35      	ldr	r2, [pc, #212]	; (8000fe0 <MX_GPIO_Init+0x14c>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f14:	4b32      	ldr	r3, [pc, #200]	; (8000fe0 <MX_GPIO_Init+0x14c>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f22:	4b2f      	ldr	r3, [pc, #188]	; (8000fe0 <MX_GPIO_Init+0x14c>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f28:	4a2d      	ldr	r2, [pc, #180]	; (8000fe0 <MX_GPIO_Init+0x14c>)
 8000f2a:	f043 0302 	orr.w	r3, r3, #2
 8000f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f32:	4b2b      	ldr	r3, [pc, #172]	; (8000fe0 <MX_GPIO_Init+0x14c>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f38:	f003 0302 	and.w	r3, r3, #2
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f40:	4b27      	ldr	r3, [pc, #156]	; (8000fe0 <MX_GPIO_Init+0x14c>)
 8000f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f46:	4a26      	ldr	r2, [pc, #152]	; (8000fe0 <MX_GPIO_Init+0x14c>)
 8000f48:	f043 0308 	orr.w	r3, r3, #8
 8000f4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f50:	4b23      	ldr	r3, [pc, #140]	; (8000fe0 <MX_GPIO_Init+0x14c>)
 8000f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f56:	f003 0308 	and.w	r3, r3, #8
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f5e:	4b20      	ldr	r3, [pc, #128]	; (8000fe0 <MX_GPIO_Init+0x14c>)
 8000f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f64:	4a1e      	ldr	r2, [pc, #120]	; (8000fe0 <MX_GPIO_Init+0x14c>)
 8000f66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <MX_GPIO_Init+0x14c>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f78:	603b      	str	r3, [r7, #0]
 8000f7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2180      	movs	r1, #128	; 0x80
 8000f80:	4818      	ldr	r0, [pc, #96]	; (8000fe4 <MX_GPIO_Init+0x150>)
 8000f82:	f004 fe89 	bl	8005c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_SET);
 8000f86:	2201      	movs	r2, #1
 8000f88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f8c:	4815      	ldr	r0, [pc, #84]	; (8000fe4 <MX_GPIO_Init+0x150>)
 8000f8e:	f004 fe83 	bl	8005c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8000f92:	2201      	movs	r2, #1
 8000f94:	2102      	movs	r1, #2
 8000f96:	4814      	ldr	r0, [pc, #80]	; (8000fe8 <MX_GPIO_Init+0x154>)
 8000f98:	f004 fe7e 	bl	8005c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF7 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000f9c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000fa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480b      	ldr	r0, [pc, #44]	; (8000fe4 <MX_GPIO_Init+0x150>)
 8000fb6:	f004 fca7 	bl	8005908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000fbe:	2311      	movs	r3, #17
 8000fc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fca:	f107 031c 	add.w	r3, r7, #28
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_GPIO_Init+0x154>)
 8000fd2:	f004 fc99 	bl	8005908 <HAL_GPIO_Init>

}
 8000fd6:	bf00      	nop
 8000fd8:	3730      	adds	r7, #48	; 0x30
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	58024400 	.word	0x58024400
 8000fe4:	58021400 	.word	0x58021400
 8000fe8:	58020c00 	.word	0x58020c00

08000fec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a23      	ldr	r2, [pc, #140]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d10c      	bne.n	8001018 <HAL_TIM_PeriodElapsedCallback+0x2c>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 1);
 8000ffe:	2201      	movs	r2, #1
 8001000:	2102      	movs	r1, #2
 8001002:	4822      	ldr	r0, [pc, #136]	; (800108c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001004:	f004 fe48 	bl	8005c98 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop(&htim3);
 8001008:	481f      	ldr	r0, [pc, #124]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800100a:	f008 fb5b 	bl	80096c4 <HAL_TIM_Base_Stop>
		htim3.Instance->CNT=0;
 800100e:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2200      	movs	r2, #0
 8001014:	625a      	str	r2, [r3, #36]	; 0x24
		value=(value<<1)|HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
		HAL_TIM_Base_Stop(&htim15);
		htim15.Instance->CNT=0;
	}

}
 8001016:	e031      	b.n	800107c <HAL_TIM_PeriodElapsedCallback+0x90>
	}else if(htim== &htim5){
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a1d      	ldr	r2, [pc, #116]	; (8001090 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d10a      	bne.n	8001036 <HAL_TIM_PeriodElapsedCallback+0x4a>
		_micross=_micross+4294967295;
 8001020:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	f112 38ff 	adds.w	r8, r2, #4294967295
 800102a:	f143 0900 	adc.w	r9, r3, #0
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001030:	e9c3 8900 	strd	r8, r9, [r3]
}
 8001034:	e022      	b.n	800107c <HAL_TIM_PeriodElapsedCallback+0x90>
	}else if(htim==&htim15){
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a17      	ldr	r2, [pc, #92]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d11e      	bne.n	800107c <HAL_TIM_PeriodElapsedCallback+0x90>
		value=(value<<1)|HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
 800103e:	4b17      	ldr	r3, [pc, #92]	; (800109c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001044:	eb12 0a02 	adds.w	sl, r2, r2
 8001048:	eb43 0b03 	adc.w	fp, r3, r3
 800104c:	46d0      	mov	r8, sl
 800104e:	46d9      	mov	r9, fp
 8001050:	2102      	movs	r1, #2
 8001052:	480e      	ldr	r0, [pc, #56]	; (800108c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001054:	f004 fe08 	bl	8005c68 <HAL_GPIO_ReadPin>
 8001058:	4603      	mov	r3, r0
 800105a:	b2da      	uxtb	r2, r3
 800105c:	f04f 0300 	mov.w	r3, #0
 8001060:	ea48 0402 	orr.w	r4, r8, r2
 8001064:	ea49 0503 	orr.w	r5, r9, r3
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800106a:	e9c3 4500 	strd	r4, r5, [r3]
		HAL_TIM_Base_Stop(&htim15);
 800106e:	480a      	ldr	r0, [pc, #40]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001070:	f008 fb28 	bl	80096c4 <HAL_TIM_Base_Stop>
		htim15.Instance->CNT=0;
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2200      	movs	r2, #0
 800107a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001086:	bf00      	nop
 8001088:	24044b58 	.word	0x24044b58
 800108c:	58020c00 	.word	0x58020c00
 8001090:	24044b0c 	.word	0x24044b0c
 8001094:	24038578 	.word	0x24038578
 8001098:	240446b8 	.word	0x240446b8
 800109c:	24038568 	.word	0x24038568

080010a0 <requestT>:





void requestT(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	if(flag){
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <requestT+0x34>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d011      	beq.n	80010d0 <requestT+0x30>
		value=0;
 80010ac:	490a      	ldr	r1, [pc, #40]	; (80010d8 <requestT+0x38>)
 80010ae:	f04f 0200 	mov.w	r2, #0
 80010b2:	f04f 0300 	mov.w	r3, #0
 80010b6:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2102      	movs	r1, #2
 80010be:	4807      	ldr	r0, [pc, #28]	; (80010dc <requestT+0x3c>)
 80010c0:	f004 fdea 	bl	8005c98 <HAL_GPIO_WritePin>
//		htim3.Instance->CNT=0;
		HAL_TIM_Base_Start_IT(&htim3);
 80010c4:	4806      	ldr	r0, [pc, #24]	; (80010e0 <requestT+0x40>)
 80010c6:	f008 fb25 	bl	8009714 <HAL_TIM_Base_Start_IT>
		flag=0;
 80010ca:	4b02      	ldr	r3, [pc, #8]	; (80010d4 <requestT+0x34>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]
	}
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	24038564 	.word	0x24038564
 80010d8:	24038568 	.word	0x24038568
 80010dc:	58020c00 	.word	0x58020c00
 80010e0:	24044b58 	.word	0x24044b58

080010e4 <get_value>:

void get_value(){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	now=HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
 80010e8:	2102      	movs	r1, #2
 80010ea:	480c      	ldr	r0, [pc, #48]	; (800111c <get_value+0x38>)
 80010ec:	f004 fdbc 	bl	8005c68 <HAL_GPIO_ReadPin>
 80010f0:	4603      	mov	r3, r0
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <get_value+0x3c>)
 80010f6:	701a      	strb	r2, [r3, #0]
	if(pre==0 && now==1){
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <get_value+0x40>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d106      	bne.n	800110e <get_value+0x2a>
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <get_value+0x3c>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d102      	bne.n	800110e <get_value+0x2a>
//	  startT=micross();
//	  htim15.Instance->CNT=0;
	  HAL_TIM_Base_Start_IT(&htim15);
 8001108:	4807      	ldr	r0, [pc, #28]	; (8001128 <get_value+0x44>)
 800110a:	f008 fb03 	bl	8009714 <HAL_TIM_Base_Start_IT>
//	  flagT=1;
	}
	pre=now;
 800110e:	4b04      	ldr	r3, [pc, #16]	; (8001120 <get_value+0x3c>)
 8001110:	781a      	ldrb	r2, [r3, #0]
 8001112:	4b04      	ldr	r3, [pc, #16]	; (8001124 <get_value+0x40>)
 8001114:	701a      	strb	r2, [r3, #0]
//	if(micross()-startT >=35 && flagT==1){
//	  value=(value<<1)|HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
//	  flagT=0;
//	}
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	58020c00 	.word	0x58020c00
 8001120:	24000008 	.word	0x24000008
 8001124:	24038570 	.word	0x24038570
 8001128:	240446b8 	.word	0x240446b8

0800112c <Update_check_Value>:
uint16_t temp=0;
uint8_t sum=0;
uint8_t realsum=0;
float realtemp=0;
float realhumidity=0;
void Update_check_Value(){
 800112c:	b4b0      	push	{r4, r5, r7}
 800112e:	af00      	add	r7, sp, #0
	if(value>=0b100000000000000000000000000000000000000000){
 8001130:	4954      	ldr	r1, [pc, #336]	; (8001284 <Update_check_Value+0x158>)
 8001132:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001136:	f04f 34ff 	mov.w	r4, #4294967295
 800113a:	f240 15ff 	movw	r5, #511	; 0x1ff
 800113e:	428d      	cmp	r5, r1
 8001140:	bf08      	it	eq
 8001142:	4284      	cmpeq	r4, r0
 8001144:	f080 809a 	bcs.w	800127c <Update_check_Value+0x150>
		value=value&0b01111111111111111111111111111111111111110;
 8001148:	494e      	ldr	r1, [pc, #312]	; (8001284 <Update_check_Value+0x158>)
 800114a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800114e:	f06f 0401 	mvn.w	r4, #1
 8001152:	f04f 05ff 	mov.w	r5, #255	; 0xff
 8001156:	ea00 0204 	and.w	r2, r0, r4
 800115a:	ea01 0305 	and.w	r3, r1, r5
 800115e:	4949      	ldr	r1, [pc, #292]	; (8001284 <Update_check_Value+0x158>)
 8001160:	e9c1 2300 	strd	r2, r3, [r1]
		value=value>>1;
 8001164:	4b47      	ldr	r3, [pc, #284]	; (8001284 <Update_check_Value+0x158>)
 8001166:	e9d3 0100 	ldrd	r0, r1, [r3]
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	f04f 0300 	mov.w	r3, #0
 8001172:	0842      	lsrs	r2, r0, #1
 8001174:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8001178:	084b      	lsrs	r3, r1, #1
 800117a:	4942      	ldr	r1, [pc, #264]	; (8001284 <Update_check_Value+0x158>)
 800117c:	e9c1 2300 	strd	r2, r3, [r1]
		sum=value&0b11111111;
 8001180:	4b40      	ldr	r3, [pc, #256]	; (8001284 <Update_check_Value+0x158>)
 8001182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	4b3f      	ldr	r3, [pc, #252]	; (8001288 <Update_check_Value+0x15c>)
 800118a:	701a      	strb	r2, [r3, #0]
		temp=(value>>8)&0b1111111111111111;
 800118c:	4b3d      	ldr	r3, [pc, #244]	; (8001284 <Update_check_Value+0x158>)
 800118e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	f04f 0300 	mov.w	r3, #0
 800119a:	0a02      	lsrs	r2, r0, #8
 800119c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80011a0:	0a0b      	lsrs	r3, r1, #8
 80011a2:	b292      	uxth	r2, r2
 80011a4:	4b39      	ldr	r3, [pc, #228]	; (800128c <Update_check_Value+0x160>)
 80011a6:	801a      	strh	r2, [r3, #0]
		humidity=(value>>24)&0b1111111111111111;
 80011a8:	4b36      	ldr	r3, [pc, #216]	; (8001284 <Update_check_Value+0x158>)
 80011aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	f04f 0300 	mov.w	r3, #0
 80011b6:	0e02      	lsrs	r2, r0, #24
 80011b8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80011bc:	0e0b      	lsrs	r3, r1, #24
 80011be:	b292      	uxth	r2, r2
 80011c0:	4b33      	ldr	r3, [pc, #204]	; (8001290 <Update_check_Value+0x164>)
 80011c2:	801a      	strh	r2, [r3, #0]
		value=0;
 80011c4:	492f      	ldr	r1, [pc, #188]	; (8001284 <Update_check_Value+0x158>)
 80011c6:	f04f 0200 	mov.w	r2, #0
 80011ca:	f04f 0300 	mov.w	r3, #0
 80011ce:	e9c1 2300 	strd	r2, r3, [r1]
		//check sum
		realsum=((humidity>>8)&0b11111111) + (humidity&0b11111111) +((temp>>8)&0b11111111) + (temp&0b11111111);
 80011d2:	4b2f      	ldr	r3, [pc, #188]	; (8001290 <Update_check_Value+0x164>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	0a1b      	lsrs	r3, r3, #8
 80011d8:	b29b      	uxth	r3, r3
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	4b2c      	ldr	r3, [pc, #176]	; (8001290 <Update_check_Value+0x164>)
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	4413      	add	r3, r2
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4b29      	ldr	r3, [pc, #164]	; (800128c <Update_check_Value+0x160>)
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	0a1b      	lsrs	r3, r3, #8
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	4413      	add	r3, r2
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	4b25      	ldr	r3, [pc, #148]	; (800128c <Update_check_Value+0x160>)
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	4413      	add	r3, r2
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4b25      	ldr	r3, [pc, #148]	; (8001294 <Update_check_Value+0x168>)
 8001200:	701a      	strb	r2, [r3, #0]
		if(sum!=realsum){
 8001202:	4b21      	ldr	r3, [pc, #132]	; (8001288 <Update_check_Value+0x15c>)
 8001204:	781a      	ldrb	r2, [r3, #0]
 8001206:	4b23      	ldr	r3, [pc, #140]	; (8001294 <Update_check_Value+0x168>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	429a      	cmp	r2, r3
 800120c:	d003      	beq.n	8001216 <Update_check_Value+0xea>
			flag=1;  //request again
 800120e:	4b22      	ldr	r3, [pc, #136]	; (8001298 <Update_check_Value+0x16c>)
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]
			}else{
				realtemp=temp/(10.00);//update value
			}
		}
	}
}
 8001214:	e032      	b.n	800127c <Update_check_Value+0x150>
			realhumidity=humidity/10.0;//update value
 8001216:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <Update_check_Value+0x164>)
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	ee07 3a90 	vmov	s15, r3
 800121e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001222:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8001226:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800122a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800122e:	4b1b      	ldr	r3, [pc, #108]	; (800129c <Update_check_Value+0x170>)
 8001230:	edc3 7a00 	vstr	s15, [r3]
			if(temp>0b1000000000000000){
 8001234:	4b15      	ldr	r3, [pc, #84]	; (800128c <Update_check_Value+0x160>)
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800123c:	d90f      	bls.n	800125e <Update_check_Value+0x132>
				realtemp=temp/(-10.00); //update value
 800123e:	4b13      	ldr	r3, [pc, #76]	; (800128c <Update_check_Value+0x160>)
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	ee07 3a90 	vmov	s15, r3
 8001246:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800124a:	eeba 5b04 	vmov.f64	d5, #164	; 0xc1200000 -10.0
 800124e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001252:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <Update_check_Value+0x174>)
 8001258:	edc3 7a00 	vstr	s15, [r3]
}
 800125c:	e00e      	b.n	800127c <Update_check_Value+0x150>
				realtemp=temp/(10.00);//update value
 800125e:	4b0b      	ldr	r3, [pc, #44]	; (800128c <Update_check_Value+0x160>)
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	ee07 3a90 	vmov	s15, r3
 8001266:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800126a:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800126e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001272:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <Update_check_Value+0x174>)
 8001278:	edc3 7a00 	vstr	s15, [r3]
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	bcb0      	pop	{r4, r5, r7}
 8001282:	4770      	bx	lr
 8001284:	24038568 	.word	0x24038568
 8001288:	24044604 	.word	0x24044604
 800128c:	24044602 	.word	0x24044602
 8001290:	24044600 	.word	0x24044600
 8001294:	24044605 	.word	0x24044605
 8001298:	24038564 	.word	0x24038564
 800129c:	2404460c 	.word	0x2404460c
 80012a0:	24044608 	.word	0x24044608

080012a4 <LCD_init>:





void LCD_init(){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0


	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,0);	//ss pin
 80012a8:	2200      	movs	r2, #0
 80012aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ae:	482f      	ldr	r0, [pc, #188]	; (800136c <LCD_init+0xc8>)
 80012b0:	f004 fcf2 	bl	8005c98 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,0);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2180      	movs	r1, #128	; 0x80
 80012b8:	482c      	ldr	r0, [pc, #176]	; (800136c <LCD_init+0xc8>)
 80012ba:	f004 fced 	bl	8005c98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, LCDsetup, 4, 1000);
 80012be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c2:	2204      	movs	r2, #4
 80012c4:	492a      	ldr	r1, [pc, #168]	; (8001370 <LCD_init+0xcc>)
 80012c6:	482b      	ldr	r0, [pc, #172]	; (8001374 <LCD_init+0xd0>)
 80012c8:	f007 fb00 	bl	80088cc <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,1);
 80012cc:	2201      	movs	r2, #1
 80012ce:	2180      	movs	r1, #128	; 0x80
 80012d0:	4826      	ldr	r0, [pc, #152]	; (800136c <LCD_init+0xc8>)
 80012d2:	f004 fce1 	bl	8005c98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &LCDsetup[4], 1, 1000);
 80012d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012da:	2201      	movs	r2, #1
 80012dc:	4926      	ldr	r1, [pc, #152]	; (8001378 <LCD_init+0xd4>)
 80012de:	4825      	ldr	r0, [pc, #148]	; (8001374 <LCD_init+0xd0>)
 80012e0:	f007 faf4 	bl	80088cc <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2180      	movs	r1, #128	; 0x80
 80012e8:	4820      	ldr	r0, [pc, #128]	; (800136c <LCD_init+0xc8>)
 80012ea:	f004 fcd5 	bl	8005c98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &LCDsetup[5], 1, 1000);
 80012ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f2:	2201      	movs	r2, #1
 80012f4:	4921      	ldr	r1, [pc, #132]	; (800137c <LCD_init+0xd8>)
 80012f6:	481f      	ldr	r0, [pc, #124]	; (8001374 <LCD_init+0xd0>)
 80012f8:	f007 fae8 	bl	80088cc <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,1);
 80012fc:	2201      	movs	r2, #1
 80012fe:	2180      	movs	r1, #128	; 0x80
 8001300:	481a      	ldr	r0, [pc, #104]	; (800136c <LCD_init+0xc8>)
 8001302:	f004 fcc9 	bl	8005c98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &LCDsetup[6], 4, 1000);
 8001306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130a:	2204      	movs	r2, #4
 800130c:	491c      	ldr	r1, [pc, #112]	; (8001380 <LCD_init+0xdc>)
 800130e:	4819      	ldr	r0, [pc, #100]	; (8001374 <LCD_init+0xd0>)
 8001310:	f007 fadc 	bl	80088cc <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,0);
 8001314:	2200      	movs	r2, #0
 8001316:	2180      	movs	r1, #128	; 0x80
 8001318:	4814      	ldr	r0, [pc, #80]	; (800136c <LCD_init+0xc8>)
 800131a:	f004 fcbd 	bl	8005c98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &LCDsetup[10], 1, 1000);
 800131e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001322:	2201      	movs	r2, #1
 8001324:	4917      	ldr	r1, [pc, #92]	; (8001384 <LCD_init+0xe0>)
 8001326:	4813      	ldr	r0, [pc, #76]	; (8001374 <LCD_init+0xd0>)
 8001328:	f007 fad0 	bl	80088cc <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,1);
 800132c:	2201      	movs	r2, #1
 800132e:	2180      	movs	r1, #128	; 0x80
 8001330:	480e      	ldr	r0, [pc, #56]	; (800136c <LCD_init+0xc8>)
 8001332:	f004 fcb1 	bl	8005c98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &LCDsetup[11], 4, 1000);
 8001336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133a:	2204      	movs	r2, #4
 800133c:	4912      	ldr	r1, [pc, #72]	; (8001388 <LCD_init+0xe4>)
 800133e:	480d      	ldr	r0, [pc, #52]	; (8001374 <LCD_init+0xd0>)
 8001340:	f007 fac4 	bl	80088cc <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,0);
 8001344:	2200      	movs	r2, #0
 8001346:	2180      	movs	r1, #128	; 0x80
 8001348:	4808      	ldr	r0, [pc, #32]	; (800136c <LCD_init+0xc8>)
 800134a:	f004 fca5 	bl	8005c98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &LCDsetup[15], 1, 1000);
 800134e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001352:	2201      	movs	r2, #1
 8001354:	490d      	ldr	r1, [pc, #52]	; (800138c <LCD_init+0xe8>)
 8001356:	4807      	ldr	r0, [pc, #28]	; (8001374 <LCD_init+0xd0>)
 8001358:	f007 fab8 	bl	80088cc <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,1);
 800135c:	2201      	movs	r2, #1
 800135e:	2180      	movs	r1, #128	; 0x80
 8001360:	4802      	ldr	r0, [pc, #8]	; (800136c <LCD_init+0xc8>)
 8001362:	f004 fc99 	bl	8005c98 <HAL_GPIO_WritePin>


}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	58021400 	.word	0x58021400
 8001370:	2400000c 	.word	0x2400000c
 8001374:	24044ba4 	.word	0x24044ba4
 8001378:	24000010 	.word	0x24000010
 800137c:	24000011 	.word	0x24000011
 8001380:	24000012 	.word	0x24000012
 8001384:	24000016 	.word	0x24000016
 8001388:	24000017 	.word	0x24000017
 800138c:	2400001b 	.word	0x2400001b

08001390 <abss>:
//	 htim4.Instance->CNT=0;
//	 HAL_TIM_Base_Start_IT(&htim4);
// }
//}

uint64_t abss(double q){
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	ed87 0b00 	vstr	d0, [r7]
	if(q<0){
 800139a:	ed97 7b00 	vldr	d7, [r7]
 800139e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80013a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a6:	d505      	bpl.n	80013b4 <abss+0x24>
		q=-1*q;
 80013a8:	ed97 7b00 	vldr	d7, [r7]
 80013ac:	eeb1 7b47 	vneg.f64	d7, d7
 80013b0:	ed87 7b00 	vstr	d7, [r7]
	}else{
		q=q;
	}
	return q;
 80013b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013b8:	f7fe fffa 	bl	80003b0 <__aeabi_d2ulz>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
}
 80013c0:	4610      	mov	r0, r2
 80013c2:	4619      	mov	r1, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	0000      	movs	r0, r0
 80013cc:	0000      	movs	r0, r0
	...

080013d0 <sortt>:
//uint16_t Tt=0;
//uint16_t RH=0;
uint8_t flagMinus=0;

void sortt(double T,double RH){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	ed87 0b02 	vstr	d0, [r7, #8]
 80013da:	ed87 1b00 	vstr	d1, [r7]
	uint16_t Tt=0;
 80013de:	2300      	movs	r3, #0
 80013e0:	82fb      	strh	r3, [r7, #22]
	uint16_t RHH=0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	82bb      	strh	r3, [r7, #20]
	if(T<0){
 80013e6:	ed97 7b02 	vldr	d7, [r7, #8]
 80013ea:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80013ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f2:	d503      	bpl.n	80013fc <sortt+0x2c>
		flagMinus=1;
 80013f4:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <sortt+0xa0>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	701a      	strb	r2, [r3, #0]
 80013fa:	e002      	b.n	8001402 <sortt+0x32>
	}else{
		flagMinus=0;
 80013fc:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <sortt+0xa0>)
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
	}
	T=T*100;
 8001402:	ed97 7b02 	vldr	d7, [r7, #8]
 8001406:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8001468 <sortt+0x98>
 800140a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800140e:	ed87 7b02 	vstr	d7, [r7, #8]
	Tt=(int)abss(T)/1;
 8001412:	ed97 0b02 	vldr	d0, [r7, #8]
 8001416:	f7ff ffbb 	bl	8001390 <abss>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4613      	mov	r3, r2
 8001420:	82fb      	strh	r3, [r7, #22]
	RH=RH*100;
 8001422:	ed97 7b00 	vldr	d7, [r7]
 8001426:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001468 <sortt+0x98>
 800142a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800142e:	ed87 7b00 	vstr	d7, [r7]
	RHH=(int)abss(RH)/1;
 8001432:	ed97 0b00 	vldr	d0, [r7]
 8001436:	f7ff ffab 	bl	8001390 <abss>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4613      	mov	r3, r2
 8001440:	82bb      	strh	r3, [r7, #20]
	sprintf(bufferT,"%d",Tt);
 8001442:	8afb      	ldrh	r3, [r7, #22]
 8001444:	461a      	mov	r2, r3
 8001446:	490b      	ldr	r1, [pc, #44]	; (8001474 <sortt+0xa4>)
 8001448:	480b      	ldr	r0, [pc, #44]	; (8001478 <sortt+0xa8>)
 800144a:	f00a f99d 	bl	800b788 <siprintf>
	sprintf(bufferRH,"%d",RHH);
 800144e:	8abb      	ldrh	r3, [r7, #20]
 8001450:	461a      	mov	r2, r3
 8001452:	4908      	ldr	r1, [pc, #32]	; (8001474 <sortt+0xa4>)
 8001454:	4809      	ldr	r0, [pc, #36]	; (800147c <sortt+0xac>)
 8001456:	f00a f997 	bl	800b788 <siprintf>
}
 800145a:	bf00      	nop
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	f3af 8000 	nop.w
 8001468:	00000000 	.word	0x00000000
 800146c:	40590000 	.word	0x40590000
 8001470:	24044610 	.word	0x24044610
 8001474:	0800bffc 	.word	0x0800bffc
 8001478:	24044580 	.word	0x24044580
 800147c:	240445c0 	.word	0x240445c0

08001480 <makeImg>:

uint8_t Cno=0;

void makeImg(){
 8001480:	b480      	push	{r7}
 8001482:	b0a9      	sub	sp, #164	; 0xa4
 8001484:	af00      	add	r7, sp, #0

	Cno=bufferRH[3];
 8001486:	4bc1      	ldr	r3, [pc, #772]	; (800178c <makeImg+0x30c>)
 8001488:	78da      	ldrb	r2, [r3, #3]
 800148a:	4bc1      	ldr	r3, [pc, #772]	; (8001790 <makeImg+0x310>)
 800148c:	701a      	strb	r2, [r3, #0]
	switch (Cno) {
 800148e:	4bc0      	ldr	r3, [pc, #768]	; (8001790 <makeImg+0x310>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	3b30      	subs	r3, #48	; 0x30
 8001494:	2b09      	cmp	r3, #9
 8001496:	f200 8153 	bhi.w	8001740 <makeImg+0x2c0>
 800149a:	a201      	add	r2, pc, #4	; (adr r2, 80014a0 <makeImg+0x20>)
 800149c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a0:	080014c9 	.word	0x080014c9
 80014a4:	0800150b 	.word	0x0800150b
 80014a8:	0800154d 	.word	0x0800154d
 80014ac:	0800158f 	.word	0x0800158f
 80014b0:	080015d1 	.word	0x080015d1
 80014b4:	08001613 	.word	0x08001613
 80014b8:	08001655 	.word	0x08001655
 80014bc:	08001697 	.word	0x08001697
 80014c0:	080016d9 	.word	0x080016d9
 80014c4:	0800170d 	.word	0x0800170d
		case 48:
			for(int j=0;j<=5760;j++){
 80014c8:	2300      	movs	r3, #0
 80014ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80014ce:	e016      	b.n	80014fe <makeImg+0x7e>
				if(RH_Zero[j]!=0x3f){
 80014d0:	4ab0      	ldr	r2, [pc, #704]	; (8001794 <makeImg+0x314>)
 80014d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014d6:	4413      	add	r3, r2
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b3f      	cmp	r3, #63	; 0x3f
 80014dc:	d00a      	beq.n	80014f4 <makeImg+0x74>
					 Frame[j]=RH_Zero[j];
 80014de:	4aad      	ldr	r2, [pc, #692]	; (8001794 <makeImg+0x314>)
 80014e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014e4:	4413      	add	r3, r2
 80014e6:	7819      	ldrb	r1, [r3, #0]
 80014e8:	4aab      	ldr	r2, [pc, #684]	; (8001798 <makeImg+0x318>)
 80014ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014ee:	4413      	add	r3, r2
 80014f0:	460a      	mov	r2, r1
 80014f2:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<=5760;j++){
 80014f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014f8:	3301      	adds	r3, #1
 80014fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80014fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001502:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001506:	dde3      	ble.n	80014d0 <makeImg+0x50>
				}

			}
		break;
 8001508:	e11a      	b.n	8001740 <makeImg+0x2c0>
		case 49:
			for(int j=0;j<=5760;j++){
 800150a:	2300      	movs	r3, #0
 800150c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001510:	e016      	b.n	8001540 <makeImg+0xc0>
				if(RH_One[j]!=0x3f){
 8001512:	4aa2      	ldr	r2, [pc, #648]	; (800179c <makeImg+0x31c>)
 8001514:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001518:	4413      	add	r3, r2
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b3f      	cmp	r3, #63	; 0x3f
 800151e:	d00a      	beq.n	8001536 <makeImg+0xb6>
				  Frame[j]=RH_One[j];
 8001520:	4a9e      	ldr	r2, [pc, #632]	; (800179c <makeImg+0x31c>)
 8001522:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001526:	4413      	add	r3, r2
 8001528:	7819      	ldrb	r1, [r3, #0]
 800152a:	4a9b      	ldr	r2, [pc, #620]	; (8001798 <makeImg+0x318>)
 800152c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001530:	4413      	add	r3, r2
 8001532:	460a      	mov	r2, r1
 8001534:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<=5760;j++){
 8001536:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800153a:	3301      	adds	r3, #1
 800153c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001540:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001544:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001548:	dde3      	ble.n	8001512 <makeImg+0x92>
				}
			}
		break;
 800154a:	e0f9      	b.n	8001740 <makeImg+0x2c0>
		case 50:
			for(int j=0;j<=5760;j++){
 800154c:	2300      	movs	r3, #0
 800154e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001552:	e016      	b.n	8001582 <makeImg+0x102>
				if(RH_Two[j]!=0x3f){
 8001554:	4a92      	ldr	r2, [pc, #584]	; (80017a0 <makeImg+0x320>)
 8001556:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800155a:	4413      	add	r3, r2
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b3f      	cmp	r3, #63	; 0x3f
 8001560:	d00a      	beq.n	8001578 <makeImg+0xf8>
				  Frame[j]=RH_Two[j];
 8001562:	4a8f      	ldr	r2, [pc, #572]	; (80017a0 <makeImg+0x320>)
 8001564:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001568:	4413      	add	r3, r2
 800156a:	7819      	ldrb	r1, [r3, #0]
 800156c:	4a8a      	ldr	r2, [pc, #552]	; (8001798 <makeImg+0x318>)
 800156e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001572:	4413      	add	r3, r2
 8001574:	460a      	mov	r2, r1
 8001576:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<=5760;j++){
 8001578:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800157c:	3301      	adds	r3, #1
 800157e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001582:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001586:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 800158a:	dde3      	ble.n	8001554 <makeImg+0xd4>
				}
			}
		break;
 800158c:	e0d8      	b.n	8001740 <makeImg+0x2c0>
		case 51:
			for(int j=0;j<=5760;j++){
 800158e:	2300      	movs	r3, #0
 8001590:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001594:	e016      	b.n	80015c4 <makeImg+0x144>
				if(RH_Three[j]!=0x3f){
 8001596:	4a83      	ldr	r2, [pc, #524]	; (80017a4 <makeImg+0x324>)
 8001598:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800159c:	4413      	add	r3, r2
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b3f      	cmp	r3, #63	; 0x3f
 80015a2:	d00a      	beq.n	80015ba <makeImg+0x13a>
				  Frame[j]=RH_Three[j];
 80015a4:	4a7f      	ldr	r2, [pc, #508]	; (80017a4 <makeImg+0x324>)
 80015a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015aa:	4413      	add	r3, r2
 80015ac:	7819      	ldrb	r1, [r3, #0]
 80015ae:	4a7a      	ldr	r2, [pc, #488]	; (8001798 <makeImg+0x318>)
 80015b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015b4:	4413      	add	r3, r2
 80015b6:	460a      	mov	r2, r1
 80015b8:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<=5760;j++){
 80015ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015be:	3301      	adds	r3, #1
 80015c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80015c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015c8:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80015cc:	dde3      	ble.n	8001596 <makeImg+0x116>
				}
			}
		break;
 80015ce:	e0b7      	b.n	8001740 <makeImg+0x2c0>
		case 52:
			for(int j=0;j<=5760;j++){
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80015d6:	e016      	b.n	8001606 <makeImg+0x186>
				if(RH_Four[j]!=0x3f){
 80015d8:	4a73      	ldr	r2, [pc, #460]	; (80017a8 <makeImg+0x328>)
 80015da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015de:	4413      	add	r3, r2
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b3f      	cmp	r3, #63	; 0x3f
 80015e4:	d00a      	beq.n	80015fc <makeImg+0x17c>
				  Frame[j]=RH_Four[j];
 80015e6:	4a70      	ldr	r2, [pc, #448]	; (80017a8 <makeImg+0x328>)
 80015e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015ec:	4413      	add	r3, r2
 80015ee:	7819      	ldrb	r1, [r3, #0]
 80015f0:	4a69      	ldr	r2, [pc, #420]	; (8001798 <makeImg+0x318>)
 80015f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015f6:	4413      	add	r3, r2
 80015f8:	460a      	mov	r2, r1
 80015fa:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<=5760;j++){
 80015fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001600:	3301      	adds	r3, #1
 8001602:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001606:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800160a:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 800160e:	dde3      	ble.n	80015d8 <makeImg+0x158>
				}
			}
		break;
 8001610:	e096      	b.n	8001740 <makeImg+0x2c0>
		case 53:
			for(int j=0;j<=5760;j++){
 8001612:	2300      	movs	r3, #0
 8001614:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001618:	e016      	b.n	8001648 <makeImg+0x1c8>
				if(RH_Five[j]!=0x3f){
 800161a:	4a64      	ldr	r2, [pc, #400]	; (80017ac <makeImg+0x32c>)
 800161c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001620:	4413      	add	r3, r2
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b3f      	cmp	r3, #63	; 0x3f
 8001626:	d00a      	beq.n	800163e <makeImg+0x1be>
				  Frame[j]=RH_Five[j];
 8001628:	4a60      	ldr	r2, [pc, #384]	; (80017ac <makeImg+0x32c>)
 800162a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800162e:	4413      	add	r3, r2
 8001630:	7819      	ldrb	r1, [r3, #0]
 8001632:	4a59      	ldr	r2, [pc, #356]	; (8001798 <makeImg+0x318>)
 8001634:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001638:	4413      	add	r3, r2
 800163a:	460a      	mov	r2, r1
 800163c:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<=5760;j++){
 800163e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001642:	3301      	adds	r3, #1
 8001644:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001648:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800164c:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001650:	dde3      	ble.n	800161a <makeImg+0x19a>
				}
			}
		break;
 8001652:	e075      	b.n	8001740 <makeImg+0x2c0>
		case 54:
			for(int j=0;j<=5760;j++){
 8001654:	2300      	movs	r3, #0
 8001656:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800165a:	e016      	b.n	800168a <makeImg+0x20a>
				if(RH_Six[j]!=0x3f){
 800165c:	4a54      	ldr	r2, [pc, #336]	; (80017b0 <makeImg+0x330>)
 800165e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001662:	4413      	add	r3, r2
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b3f      	cmp	r3, #63	; 0x3f
 8001668:	d00a      	beq.n	8001680 <makeImg+0x200>
				  Frame[j]=RH_Six[j];
 800166a:	4a51      	ldr	r2, [pc, #324]	; (80017b0 <makeImg+0x330>)
 800166c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001670:	4413      	add	r3, r2
 8001672:	7819      	ldrb	r1, [r3, #0]
 8001674:	4a48      	ldr	r2, [pc, #288]	; (8001798 <makeImg+0x318>)
 8001676:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800167a:	4413      	add	r3, r2
 800167c:	460a      	mov	r2, r1
 800167e:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<=5760;j++){
 8001680:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001684:	3301      	adds	r3, #1
 8001686:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800168a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800168e:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001692:	dde3      	ble.n	800165c <makeImg+0x1dc>
				}
			}
		break;
 8001694:	e054      	b.n	8001740 <makeImg+0x2c0>
		case 55:
			for(int j=0;j<=5760;j++){
 8001696:	2300      	movs	r3, #0
 8001698:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800169c:	e016      	b.n	80016cc <makeImg+0x24c>
				if(RH_Seven[j]!=0x3f){
 800169e:	4a45      	ldr	r2, [pc, #276]	; (80017b4 <makeImg+0x334>)
 80016a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80016a4:	4413      	add	r3, r2
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b3f      	cmp	r3, #63	; 0x3f
 80016aa:	d00a      	beq.n	80016c2 <makeImg+0x242>
				  Frame[j]=RH_Seven[j];
 80016ac:	4a41      	ldr	r2, [pc, #260]	; (80017b4 <makeImg+0x334>)
 80016ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80016b2:	4413      	add	r3, r2
 80016b4:	7819      	ldrb	r1, [r3, #0]
 80016b6:	4a38      	ldr	r2, [pc, #224]	; (8001798 <makeImg+0x318>)
 80016b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80016bc:	4413      	add	r3, r2
 80016be:	460a      	mov	r2, r1
 80016c0:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<=5760;j++){
 80016c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80016c6:	3301      	adds	r3, #1
 80016c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80016cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80016d0:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80016d4:	dde3      	ble.n	800169e <makeImg+0x21e>
				}
			}
		break;
 80016d6:	e033      	b.n	8001740 <makeImg+0x2c0>
		case 56:
			for(int j=0;j<=5760;j++){
 80016d8:	2300      	movs	r3, #0
 80016da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80016dc:	e011      	b.n	8001702 <makeImg+0x282>
				if(RH_Egg[j]!=0x3f){
 80016de:	4a36      	ldr	r2, [pc, #216]	; (80017b8 <makeImg+0x338>)
 80016e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80016e2:	4413      	add	r3, r2
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b3f      	cmp	r3, #63	; 0x3f
 80016e8:	d008      	beq.n	80016fc <makeImg+0x27c>
				  Frame[j]=RH_Egg[j];
 80016ea:	4a33      	ldr	r2, [pc, #204]	; (80017b8 <makeImg+0x338>)
 80016ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80016ee:	4413      	add	r3, r2
 80016f0:	7819      	ldrb	r1, [r3, #0]
 80016f2:	4a29      	ldr	r2, [pc, #164]	; (8001798 <makeImg+0x318>)
 80016f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80016f6:	4413      	add	r3, r2
 80016f8:	460a      	mov	r2, r1
 80016fa:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<=5760;j++){
 80016fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80016fe:	3301      	adds	r3, #1
 8001700:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001702:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001704:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001708:	dde9      	ble.n	80016de <makeImg+0x25e>
				}
			}
		break;
 800170a:	e019      	b.n	8001740 <makeImg+0x2c0>
		case 57:
			for(int j=0;j<=5760;j++){
 800170c:	2300      	movs	r3, #0
 800170e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001710:	e011      	b.n	8001736 <makeImg+0x2b6>
				if(RH_Nine[j]!=0x3f){
 8001712:	4a2a      	ldr	r2, [pc, #168]	; (80017bc <makeImg+0x33c>)
 8001714:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001716:	4413      	add	r3, r2
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b3f      	cmp	r3, #63	; 0x3f
 800171c:	d008      	beq.n	8001730 <makeImg+0x2b0>
				  Frame[j]=RH_Nine[j];
 800171e:	4a27      	ldr	r2, [pc, #156]	; (80017bc <makeImg+0x33c>)
 8001720:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001722:	4413      	add	r3, r2
 8001724:	7819      	ldrb	r1, [r3, #0]
 8001726:	4a1c      	ldr	r2, [pc, #112]	; (8001798 <makeImg+0x318>)
 8001728:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800172a:	4413      	add	r3, r2
 800172c:	460a      	mov	r2, r1
 800172e:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<=5760;j++){
 8001730:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001732:	3301      	adds	r3, #1
 8001734:	67bb      	str	r3, [r7, #120]	; 0x78
 8001736:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001738:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 800173c:	dde9      	ble.n	8001712 <makeImg+0x292>
				}
			}
		break;
 800173e:	bf00      	nop
	 }
	Cno=bufferRH[2];
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <makeImg+0x30c>)
 8001742:	789a      	ldrb	r2, [r3, #2]
 8001744:	4b12      	ldr	r3, [pc, #72]	; (8001790 <makeImg+0x310>)
 8001746:	701a      	strb	r2, [r3, #0]
		switch (Cno) {
 8001748:	4b11      	ldr	r3, [pc, #68]	; (8001790 <makeImg+0x310>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	3b30      	subs	r3, #48	; 0x30
 800174e:	2b09      	cmp	r3, #9
 8001750:	f200 8137 	bhi.w	80019c2 <makeImg+0x542>
 8001754:	a201      	add	r2, pc, #4	; (adr r2, 800175c <makeImg+0x2dc>)
 8001756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800175a:	bf00      	nop
 800175c:	08001785 	.word	0x08001785
 8001760:	080017ef 	.word	0x080017ef
 8001764:	08001823 	.word	0x08001823
 8001768:	08001857 	.word	0x08001857
 800176c:	0800188b 	.word	0x0800188b
 8001770:	080018bf 	.word	0x080018bf
 8001774:	080018f3 	.word	0x080018f3
 8001778:	08001927 	.word	0x08001927
 800177c:	0800195b 	.word	0x0800195b
 8001780:	0800198f 	.word	0x0800198f
			case 48:
				for(int j=0;j<=5760;j++){
 8001784:	2300      	movs	r3, #0
 8001786:	677b      	str	r3, [r7, #116]	; 0x74
 8001788:	e02c      	b.n	80017e4 <makeImg+0x364>
 800178a:	bf00      	nop
 800178c:	240445c0 	.word	0x240445c0
 8001790:	24044611 	.word	0x24044611
 8001794:	2402a31c 	.word	0x2402a31c
 8001798:	24038580 	.word	0x24038580
 800179c:	2402b99c 	.word	0x2402b99c
 80017a0:	2402d01c 	.word	0x2402d01c
 80017a4:	2402e69c 	.word	0x2402e69c
 80017a8:	2402fd1c 	.word	0x2402fd1c
 80017ac:	2403139c 	.word	0x2403139c
 80017b0:	24032a1c 	.word	0x24032a1c
 80017b4:	2403409c 	.word	0x2403409c
 80017b8:	2403571c 	.word	0x2403571c
 80017bc:	24036d9c 	.word	0x24036d9c
					if(dot_Zero[j]!=0x3f){
 80017c0:	4aa0      	ldr	r2, [pc, #640]	; (8001a44 <makeImg+0x5c4>)
 80017c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017c4:	4413      	add	r3, r2
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b3f      	cmp	r3, #63	; 0x3f
 80017ca:	d008      	beq.n	80017de <makeImg+0x35e>
						 Frame[j]=dot_Zero[j];
 80017cc:	4a9d      	ldr	r2, [pc, #628]	; (8001a44 <makeImg+0x5c4>)
 80017ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017d0:	4413      	add	r3, r2
 80017d2:	7819      	ldrb	r1, [r3, #0]
 80017d4:	4a9c      	ldr	r2, [pc, #624]	; (8001a48 <makeImg+0x5c8>)
 80017d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017d8:	4413      	add	r3, r2
 80017da:	460a      	mov	r2, r1
 80017dc:	701a      	strb	r2, [r3, #0]
				for(int j=0;j<=5760;j++){
 80017de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017e0:	3301      	adds	r3, #1
 80017e2:	677b      	str	r3, [r7, #116]	; 0x74
 80017e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017e6:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80017ea:	dde9      	ble.n	80017c0 <makeImg+0x340>
					}

				}
			break;
 80017ec:	e0e9      	b.n	80019c2 <makeImg+0x542>
			case 49:
				for(int j=0;j<=5760;j++){
 80017ee:	2300      	movs	r3, #0
 80017f0:	673b      	str	r3, [r7, #112]	; 0x70
 80017f2:	e011      	b.n	8001818 <makeImg+0x398>
					if(dot_One[j]!=0x3f){
 80017f4:	4a95      	ldr	r2, [pc, #596]	; (8001a4c <makeImg+0x5cc>)
 80017f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017f8:	4413      	add	r3, r2
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b3f      	cmp	r3, #63	; 0x3f
 80017fe:	d008      	beq.n	8001812 <makeImg+0x392>
					  Frame[j]=dot_One[j];
 8001800:	4a92      	ldr	r2, [pc, #584]	; (8001a4c <makeImg+0x5cc>)
 8001802:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001804:	4413      	add	r3, r2
 8001806:	7819      	ldrb	r1, [r3, #0]
 8001808:	4a8f      	ldr	r2, [pc, #572]	; (8001a48 <makeImg+0x5c8>)
 800180a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800180c:	4413      	add	r3, r2
 800180e:	460a      	mov	r2, r1
 8001810:	701a      	strb	r2, [r3, #0]
				for(int j=0;j<=5760;j++){
 8001812:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001814:	3301      	adds	r3, #1
 8001816:	673b      	str	r3, [r7, #112]	; 0x70
 8001818:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800181a:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 800181e:	dde9      	ble.n	80017f4 <makeImg+0x374>
					}
				}
			break;
 8001820:	e0cf      	b.n	80019c2 <makeImg+0x542>
			case 50:
				for(int j=0;j<=5760;j++){
 8001822:	2300      	movs	r3, #0
 8001824:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001826:	e011      	b.n	800184c <makeImg+0x3cc>
					if(dot_Two[j]!=0x3f){
 8001828:	4a89      	ldr	r2, [pc, #548]	; (8001a50 <makeImg+0x5d0>)
 800182a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800182c:	4413      	add	r3, r2
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b3f      	cmp	r3, #63	; 0x3f
 8001832:	d008      	beq.n	8001846 <makeImg+0x3c6>
					  Frame[j]=dot_Two[j];
 8001834:	4a86      	ldr	r2, [pc, #536]	; (8001a50 <makeImg+0x5d0>)
 8001836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001838:	4413      	add	r3, r2
 800183a:	7819      	ldrb	r1, [r3, #0]
 800183c:	4a82      	ldr	r2, [pc, #520]	; (8001a48 <makeImg+0x5c8>)
 800183e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001840:	4413      	add	r3, r2
 8001842:	460a      	mov	r2, r1
 8001844:	701a      	strb	r2, [r3, #0]
				for(int j=0;j<=5760;j++){
 8001846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001848:	3301      	adds	r3, #1
 800184a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800184c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800184e:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001852:	dde9      	ble.n	8001828 <makeImg+0x3a8>
					}
				}
			break;
 8001854:	e0b5      	b.n	80019c2 <makeImg+0x542>
			case 51:
				for(int j=0;j<=5760;j++){
 8001856:	2300      	movs	r3, #0
 8001858:	66bb      	str	r3, [r7, #104]	; 0x68
 800185a:	e011      	b.n	8001880 <makeImg+0x400>
					if(dot_Three[j]!=0x3f){
 800185c:	4a7d      	ldr	r2, [pc, #500]	; (8001a54 <makeImg+0x5d4>)
 800185e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001860:	4413      	add	r3, r2
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b3f      	cmp	r3, #63	; 0x3f
 8001866:	d008      	beq.n	800187a <makeImg+0x3fa>
					  Frame[j]=dot_Three[j];
 8001868:	4a7a      	ldr	r2, [pc, #488]	; (8001a54 <makeImg+0x5d4>)
 800186a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800186c:	4413      	add	r3, r2
 800186e:	7819      	ldrb	r1, [r3, #0]
 8001870:	4a75      	ldr	r2, [pc, #468]	; (8001a48 <makeImg+0x5c8>)
 8001872:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001874:	4413      	add	r3, r2
 8001876:	460a      	mov	r2, r1
 8001878:	701a      	strb	r2, [r3, #0]
				for(int j=0;j<=5760;j++){
 800187a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800187c:	3301      	adds	r3, #1
 800187e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001880:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001882:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001886:	dde9      	ble.n	800185c <makeImg+0x3dc>
					}
				}
			break;
 8001888:	e09b      	b.n	80019c2 <makeImg+0x542>
			case 52:
				for(int j=0;j<=5760;j++){
 800188a:	2300      	movs	r3, #0
 800188c:	667b      	str	r3, [r7, #100]	; 0x64
 800188e:	e011      	b.n	80018b4 <makeImg+0x434>
					if(dot_Four[j]!=0x3f){
 8001890:	4a71      	ldr	r2, [pc, #452]	; (8001a58 <makeImg+0x5d8>)
 8001892:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001894:	4413      	add	r3, r2
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b3f      	cmp	r3, #63	; 0x3f
 800189a:	d008      	beq.n	80018ae <makeImg+0x42e>
					  Frame[j]=dot_Four[j];
 800189c:	4a6e      	ldr	r2, [pc, #440]	; (8001a58 <makeImg+0x5d8>)
 800189e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018a0:	4413      	add	r3, r2
 80018a2:	7819      	ldrb	r1, [r3, #0]
 80018a4:	4a68      	ldr	r2, [pc, #416]	; (8001a48 <makeImg+0x5c8>)
 80018a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018a8:	4413      	add	r3, r2
 80018aa:	460a      	mov	r2, r1
 80018ac:	701a      	strb	r2, [r3, #0]
				for(int j=0;j<=5760;j++){
 80018ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018b0:	3301      	adds	r3, #1
 80018b2:	667b      	str	r3, [r7, #100]	; 0x64
 80018b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018b6:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80018ba:	dde9      	ble.n	8001890 <makeImg+0x410>
					}
				}
			break;
 80018bc:	e081      	b.n	80019c2 <makeImg+0x542>
			case 53:
				for(int j=0;j<=5760;j++){
 80018be:	2300      	movs	r3, #0
 80018c0:	663b      	str	r3, [r7, #96]	; 0x60
 80018c2:	e011      	b.n	80018e8 <makeImg+0x468>
					if(dot_Five[j]!=0x3f){
 80018c4:	4a65      	ldr	r2, [pc, #404]	; (8001a5c <makeImg+0x5dc>)
 80018c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018c8:	4413      	add	r3, r2
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b3f      	cmp	r3, #63	; 0x3f
 80018ce:	d008      	beq.n	80018e2 <makeImg+0x462>
					  Frame[j]=dot_Five[j];
 80018d0:	4a62      	ldr	r2, [pc, #392]	; (8001a5c <makeImg+0x5dc>)
 80018d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018d4:	4413      	add	r3, r2
 80018d6:	7819      	ldrb	r1, [r3, #0]
 80018d8:	4a5b      	ldr	r2, [pc, #364]	; (8001a48 <makeImg+0x5c8>)
 80018da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018dc:	4413      	add	r3, r2
 80018de:	460a      	mov	r2, r1
 80018e0:	701a      	strb	r2, [r3, #0]
				for(int j=0;j<=5760;j++){
 80018e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018e4:	3301      	adds	r3, #1
 80018e6:	663b      	str	r3, [r7, #96]	; 0x60
 80018e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018ea:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80018ee:	dde9      	ble.n	80018c4 <makeImg+0x444>
					}
				}
			break;
 80018f0:	e067      	b.n	80019c2 <makeImg+0x542>
			case 54:
				for(int j=0;j<=5760;j++){
 80018f2:	2300      	movs	r3, #0
 80018f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80018f6:	e011      	b.n	800191c <makeImg+0x49c>
					if(dot_Six[j]!=0x3f){
 80018f8:	4a59      	ldr	r2, [pc, #356]	; (8001a60 <makeImg+0x5e0>)
 80018fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018fc:	4413      	add	r3, r2
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b3f      	cmp	r3, #63	; 0x3f
 8001902:	d008      	beq.n	8001916 <makeImg+0x496>
					  Frame[j]=dot_Six[j];
 8001904:	4a56      	ldr	r2, [pc, #344]	; (8001a60 <makeImg+0x5e0>)
 8001906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001908:	4413      	add	r3, r2
 800190a:	7819      	ldrb	r1, [r3, #0]
 800190c:	4a4e      	ldr	r2, [pc, #312]	; (8001a48 <makeImg+0x5c8>)
 800190e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001910:	4413      	add	r3, r2
 8001912:	460a      	mov	r2, r1
 8001914:	701a      	strb	r2, [r3, #0]
				for(int j=0;j<=5760;j++){
 8001916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001918:	3301      	adds	r3, #1
 800191a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800191c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800191e:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001922:	dde9      	ble.n	80018f8 <makeImg+0x478>
					}
				}
			break;
 8001924:	e04d      	b.n	80019c2 <makeImg+0x542>
			case 55:
				for(int j=0;j<=5760;j++){
 8001926:	2300      	movs	r3, #0
 8001928:	65bb      	str	r3, [r7, #88]	; 0x58
 800192a:	e011      	b.n	8001950 <makeImg+0x4d0>
					if(dot_Seven[j]!=0x3f){
 800192c:	4a4d      	ldr	r2, [pc, #308]	; (8001a64 <makeImg+0x5e4>)
 800192e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001930:	4413      	add	r3, r2
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b3f      	cmp	r3, #63	; 0x3f
 8001936:	d008      	beq.n	800194a <makeImg+0x4ca>
					  Frame[j]=dot_Seven[j];
 8001938:	4a4a      	ldr	r2, [pc, #296]	; (8001a64 <makeImg+0x5e4>)
 800193a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800193c:	4413      	add	r3, r2
 800193e:	7819      	ldrb	r1, [r3, #0]
 8001940:	4a41      	ldr	r2, [pc, #260]	; (8001a48 <makeImg+0x5c8>)
 8001942:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001944:	4413      	add	r3, r2
 8001946:	460a      	mov	r2, r1
 8001948:	701a      	strb	r2, [r3, #0]
				for(int j=0;j<=5760;j++){
 800194a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800194c:	3301      	adds	r3, #1
 800194e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001950:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001952:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001956:	dde9      	ble.n	800192c <makeImg+0x4ac>
					}
				}
			break;
 8001958:	e033      	b.n	80019c2 <makeImg+0x542>
			case 56:
				for(int j=0;j<=5760;j++){
 800195a:	2300      	movs	r3, #0
 800195c:	657b      	str	r3, [r7, #84]	; 0x54
 800195e:	e011      	b.n	8001984 <makeImg+0x504>
					if(dot_Egg[j]!=0x3f){
 8001960:	4a41      	ldr	r2, [pc, #260]	; (8001a68 <makeImg+0x5e8>)
 8001962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001964:	4413      	add	r3, r2
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b3f      	cmp	r3, #63	; 0x3f
 800196a:	d008      	beq.n	800197e <makeImg+0x4fe>
					  Frame[j]=dot_Egg[j];
 800196c:	4a3e      	ldr	r2, [pc, #248]	; (8001a68 <makeImg+0x5e8>)
 800196e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001970:	4413      	add	r3, r2
 8001972:	7819      	ldrb	r1, [r3, #0]
 8001974:	4a34      	ldr	r2, [pc, #208]	; (8001a48 <makeImg+0x5c8>)
 8001976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001978:	4413      	add	r3, r2
 800197a:	460a      	mov	r2, r1
 800197c:	701a      	strb	r2, [r3, #0]
				for(int j=0;j<=5760;j++){
 800197e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001980:	3301      	adds	r3, #1
 8001982:	657b      	str	r3, [r7, #84]	; 0x54
 8001984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001986:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 800198a:	dde9      	ble.n	8001960 <makeImg+0x4e0>
					}
				}
			break;
 800198c:	e019      	b.n	80019c2 <makeImg+0x542>
			case 57:
				for(int j=0;j<=5760;j++){
 800198e:	2300      	movs	r3, #0
 8001990:	653b      	str	r3, [r7, #80]	; 0x50
 8001992:	e011      	b.n	80019b8 <makeImg+0x538>
					if(dot_Nine[j]!=0x3f){
 8001994:	4a35      	ldr	r2, [pc, #212]	; (8001a6c <makeImg+0x5ec>)
 8001996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001998:	4413      	add	r3, r2
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b3f      	cmp	r3, #63	; 0x3f
 800199e:	d008      	beq.n	80019b2 <makeImg+0x532>
					  Frame[j]=dot_Nine[j];
 80019a0:	4a32      	ldr	r2, [pc, #200]	; (8001a6c <makeImg+0x5ec>)
 80019a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019a4:	4413      	add	r3, r2
 80019a6:	7819      	ldrb	r1, [r3, #0]
 80019a8:	4a27      	ldr	r2, [pc, #156]	; (8001a48 <makeImg+0x5c8>)
 80019aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019ac:	4413      	add	r3, r2
 80019ae:	460a      	mov	r2, r1
 80019b0:	701a      	strb	r2, [r3, #0]
				for(int j=0;j<=5760;j++){
 80019b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019b4:	3301      	adds	r3, #1
 80019b6:	653b      	str	r3, [r7, #80]	; 0x50
 80019b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019ba:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 80019be:	dde9      	ble.n	8001994 <makeImg+0x514>
					}
				}
			break;
 80019c0:	bf00      	nop
		 }
		Cno=bufferRH[1];
 80019c2:	4b2b      	ldr	r3, [pc, #172]	; (8001a70 <makeImg+0x5f0>)
 80019c4:	785a      	ldrb	r2, [r3, #1]
 80019c6:	4b2b      	ldr	r3, [pc, #172]	; (8001a74 <makeImg+0x5f4>)
 80019c8:	701a      	strb	r2, [r3, #0]
				switch (Cno) {
 80019ca:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <makeImg+0x5f4>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	3b30      	subs	r3, #48	; 0x30
 80019d0:	2b09      	cmp	r3, #9
 80019d2:	f200 813a 	bhi.w	8001c4a <makeImg+0x7ca>
 80019d6:	a201      	add	r2, pc, #4	; (adr r2, 80019dc <makeImg+0x55c>)
 80019d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019dc:	08001a05 	.word	0x08001a05
 80019e0:	08001a3f 	.word	0x08001a3f
 80019e4:	08001aab 	.word	0x08001aab
 80019e8:	08001adf 	.word	0x08001adf
 80019ec:	08001b13 	.word	0x08001b13
 80019f0:	08001b47 	.word	0x08001b47
 80019f4:	08001b7b 	.word	0x08001b7b
 80019f8:	08001baf 	.word	0x08001baf
 80019fc:	08001be3 	.word	0x08001be3
 8001a00:	08001c17 	.word	0x08001c17
					case 48:
						for(int j=0;j<=5760;j++){
 8001a04:	2300      	movs	r3, #0
 8001a06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a08:	e014      	b.n	8001a34 <makeImg+0x5b4>
							if(Zero_sf[j]!=0x3f){
 8001a0a:	4a1b      	ldr	r2, [pc, #108]	; (8001a78 <makeImg+0x5f8>)
 8001a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a0e:	4413      	add	r3, r2
 8001a10:	f993 3000 	ldrsb.w	r3, [r3]
 8001a14:	2b3f      	cmp	r3, #63	; 0x3f
 8001a16:	d00a      	beq.n	8001a2e <makeImg+0x5ae>
								 Frame[j]=Zero_sf[j];
 8001a18:	4a17      	ldr	r2, [pc, #92]	; (8001a78 <makeImg+0x5f8>)
 8001a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a22:	b2d9      	uxtb	r1, r3
 8001a24:	4a08      	ldr	r2, [pc, #32]	; (8001a48 <makeImg+0x5c8>)
 8001a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a28:	4413      	add	r3, r2
 8001a2a:	460a      	mov	r2, r1
 8001a2c:	701a      	strb	r2, [r3, #0]
						for(int j=0;j<=5760;j++){
 8001a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a30:	3301      	adds	r3, #1
 8001a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a36:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001a3a:	dde6      	ble.n	8001a0a <makeImg+0x58a>
							}

						}
					break;
 8001a3c:	e105      	b.n	8001c4a <makeImg+0x7ca>
					case 49:
						for(int j=0;j<=5760;j++){
 8001a3e:	2300      	movs	r3, #0
 8001a40:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a42:	e02d      	b.n	8001aa0 <makeImg+0x620>
 8001a44:	2401c21c 	.word	0x2401c21c
 8001a48:	24038580 	.word	0x24038580
 8001a4c:	2401d89c 	.word	0x2401d89c
 8001a50:	2401ef1c 	.word	0x2401ef1c
 8001a54:	2402059c 	.word	0x2402059c
 8001a58:	24021c1c 	.word	0x24021c1c
 8001a5c:	2402329c 	.word	0x2402329c
 8001a60:	2402491c 	.word	0x2402491c
 8001a64:	24025f9c 	.word	0x24025f9c
 8001a68:	2402761c 	.word	0x2402761c
 8001a6c:	24028c9c 	.word	0x24028c9c
 8001a70:	240445c0 	.word	0x240445c0
 8001a74:	24044611 	.word	0x24044611
 8001a78:	2400e11c 	.word	0x2400e11c
							if(One_sf[j]!=0x3f){
 8001a7c:	4a9f      	ldr	r2, [pc, #636]	; (8001cfc <makeImg+0x87c>)
 8001a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a80:	4413      	add	r3, r2
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b3f      	cmp	r3, #63	; 0x3f
 8001a86:	d008      	beq.n	8001a9a <makeImg+0x61a>
							  Frame[j]=One_sf[j];
 8001a88:	4a9c      	ldr	r2, [pc, #624]	; (8001cfc <makeImg+0x87c>)
 8001a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a8c:	4413      	add	r3, r2
 8001a8e:	7819      	ldrb	r1, [r3, #0]
 8001a90:	4a9b      	ldr	r2, [pc, #620]	; (8001d00 <makeImg+0x880>)
 8001a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a94:	4413      	add	r3, r2
 8001a96:	460a      	mov	r2, r1
 8001a98:	701a      	strb	r2, [r3, #0]
						for(int j=0;j<=5760;j++){
 8001a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001aa2:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001aa6:	dde9      	ble.n	8001a7c <makeImg+0x5fc>
							}
						}
					break;
 8001aa8:	e0cf      	b.n	8001c4a <makeImg+0x7ca>
					case 50:
						for(int j=0;j<=5760;j++){
 8001aaa:	2300      	movs	r3, #0
 8001aac:	647b      	str	r3, [r7, #68]	; 0x44
 8001aae:	e011      	b.n	8001ad4 <makeImg+0x654>
							if(Two_sf[j]!=0x3f){
 8001ab0:	4a94      	ldr	r2, [pc, #592]	; (8001d04 <makeImg+0x884>)
 8001ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab4:	4413      	add	r3, r2
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b3f      	cmp	r3, #63	; 0x3f
 8001aba:	d008      	beq.n	8001ace <makeImg+0x64e>
							  Frame[j]=Two_sf[j];
 8001abc:	4a91      	ldr	r2, [pc, #580]	; (8001d04 <makeImg+0x884>)
 8001abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ac0:	4413      	add	r3, r2
 8001ac2:	7819      	ldrb	r1, [r3, #0]
 8001ac4:	4a8e      	ldr	r2, [pc, #568]	; (8001d00 <makeImg+0x880>)
 8001ac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ac8:	4413      	add	r3, r2
 8001aca:	460a      	mov	r2, r1
 8001acc:	701a      	strb	r2, [r3, #0]
						for(int j=0;j<=5760;j++){
 8001ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	647b      	str	r3, [r7, #68]	; 0x44
 8001ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ad6:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001ada:	dde9      	ble.n	8001ab0 <makeImg+0x630>
							}
						}
					break;
 8001adc:	e0b5      	b.n	8001c4a <makeImg+0x7ca>
					case 51:
						for(int j=0;j<=5760;j++){
 8001ade:	2300      	movs	r3, #0
 8001ae0:	643b      	str	r3, [r7, #64]	; 0x40
 8001ae2:	e011      	b.n	8001b08 <makeImg+0x688>
							if(Three_sf[j]!=0x3f){
 8001ae4:	4a88      	ldr	r2, [pc, #544]	; (8001d08 <makeImg+0x888>)
 8001ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ae8:	4413      	add	r3, r2
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b3f      	cmp	r3, #63	; 0x3f
 8001aee:	d008      	beq.n	8001b02 <makeImg+0x682>
							  Frame[j]=Three_sf[j];
 8001af0:	4a85      	ldr	r2, [pc, #532]	; (8001d08 <makeImg+0x888>)
 8001af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001af4:	4413      	add	r3, r2
 8001af6:	7819      	ldrb	r1, [r3, #0]
 8001af8:	4a81      	ldr	r2, [pc, #516]	; (8001d00 <makeImg+0x880>)
 8001afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001afc:	4413      	add	r3, r2
 8001afe:	460a      	mov	r2, r1
 8001b00:	701a      	strb	r2, [r3, #0]
						for(int j=0;j<=5760;j++){
 8001b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b04:	3301      	adds	r3, #1
 8001b06:	643b      	str	r3, [r7, #64]	; 0x40
 8001b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b0a:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001b0e:	dde9      	ble.n	8001ae4 <makeImg+0x664>
							}
						}
					break;
 8001b10:	e09b      	b.n	8001c4a <makeImg+0x7ca>
					case 52:
						for(int j=0;j<=5760;j++){
 8001b12:	2300      	movs	r3, #0
 8001b14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b16:	e011      	b.n	8001b3c <makeImg+0x6bc>
							if(Four_sf[j]!=0x3f){
 8001b18:	4a7c      	ldr	r2, [pc, #496]	; (8001d0c <makeImg+0x88c>)
 8001b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b1c:	4413      	add	r3, r2
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b3f      	cmp	r3, #63	; 0x3f
 8001b22:	d008      	beq.n	8001b36 <makeImg+0x6b6>
							  Frame[j]=Four_sf[j];
 8001b24:	4a79      	ldr	r2, [pc, #484]	; (8001d0c <makeImg+0x88c>)
 8001b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b28:	4413      	add	r3, r2
 8001b2a:	7819      	ldrb	r1, [r3, #0]
 8001b2c:	4a74      	ldr	r2, [pc, #464]	; (8001d00 <makeImg+0x880>)
 8001b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b30:	4413      	add	r3, r2
 8001b32:	460a      	mov	r2, r1
 8001b34:	701a      	strb	r2, [r3, #0]
						for(int j=0;j<=5760;j++){
 8001b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b38:	3301      	adds	r3, #1
 8001b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b3e:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001b42:	dde9      	ble.n	8001b18 <makeImg+0x698>
							}
						}
					break;
 8001b44:	e081      	b.n	8001c4a <makeImg+0x7ca>
					case 53:
						for(int j=0;j<=5760;j++){
 8001b46:	2300      	movs	r3, #0
 8001b48:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b4a:	e011      	b.n	8001b70 <makeImg+0x6f0>
							if(Five_sf[j]!=0x3f){
 8001b4c:	4a70      	ldr	r2, [pc, #448]	; (8001d10 <makeImg+0x890>)
 8001b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b50:	4413      	add	r3, r2
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b3f      	cmp	r3, #63	; 0x3f
 8001b56:	d008      	beq.n	8001b6a <makeImg+0x6ea>
							  Frame[j]=Five_sf[j];
 8001b58:	4a6d      	ldr	r2, [pc, #436]	; (8001d10 <makeImg+0x890>)
 8001b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b5c:	4413      	add	r3, r2
 8001b5e:	7819      	ldrb	r1, [r3, #0]
 8001b60:	4a67      	ldr	r2, [pc, #412]	; (8001d00 <makeImg+0x880>)
 8001b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b64:	4413      	add	r3, r2
 8001b66:	460a      	mov	r2, r1
 8001b68:	701a      	strb	r2, [r3, #0]
						for(int j=0;j<=5760;j++){
 8001b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b72:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001b76:	dde9      	ble.n	8001b4c <makeImg+0x6cc>
							}
						}
					break;
 8001b78:	e067      	b.n	8001c4a <makeImg+0x7ca>
					case 54:
						for(int j=0;j<=5760;j++){
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b7e:	e011      	b.n	8001ba4 <makeImg+0x724>
							if(six_sf[j]!=0x3f){
 8001b80:	4a64      	ldr	r2, [pc, #400]	; (8001d14 <makeImg+0x894>)
 8001b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b84:	4413      	add	r3, r2
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b3f      	cmp	r3, #63	; 0x3f
 8001b8a:	d008      	beq.n	8001b9e <makeImg+0x71e>
							  Frame[j]=six_sf[j];
 8001b8c:	4a61      	ldr	r2, [pc, #388]	; (8001d14 <makeImg+0x894>)
 8001b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b90:	4413      	add	r3, r2
 8001b92:	7819      	ldrb	r1, [r3, #0]
 8001b94:	4a5a      	ldr	r2, [pc, #360]	; (8001d00 <makeImg+0x880>)
 8001b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b98:	4413      	add	r3, r2
 8001b9a:	460a      	mov	r2, r1
 8001b9c:	701a      	strb	r2, [r3, #0]
						for(int j=0;j<=5760;j++){
 8001b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba6:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001baa:	dde9      	ble.n	8001b80 <makeImg+0x700>
							}
						}
					break;
 8001bac:	e04d      	b.n	8001c4a <makeImg+0x7ca>
					case 55:
						for(int j=0;j<=5760;j++){
 8001bae:	2300      	movs	r3, #0
 8001bb0:	633b      	str	r3, [r7, #48]	; 0x30
 8001bb2:	e011      	b.n	8001bd8 <makeImg+0x758>
							if(seven_sf[j]!=0x3f){
 8001bb4:	4a58      	ldr	r2, [pc, #352]	; (8001d18 <makeImg+0x898>)
 8001bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb8:	4413      	add	r3, r2
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b3f      	cmp	r3, #63	; 0x3f
 8001bbe:	d008      	beq.n	8001bd2 <makeImg+0x752>
							  Frame[j]=seven_sf[j];
 8001bc0:	4a55      	ldr	r2, [pc, #340]	; (8001d18 <makeImg+0x898>)
 8001bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc4:	4413      	add	r3, r2
 8001bc6:	7819      	ldrb	r1, [r3, #0]
 8001bc8:	4a4d      	ldr	r2, [pc, #308]	; (8001d00 <makeImg+0x880>)
 8001bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bcc:	4413      	add	r3, r2
 8001bce:	460a      	mov	r2, r1
 8001bd0:	701a      	strb	r2, [r3, #0]
						for(int j=0;j<=5760;j++){
 8001bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	633b      	str	r3, [r7, #48]	; 0x30
 8001bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bda:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001bde:	dde9      	ble.n	8001bb4 <makeImg+0x734>
							}
						}
					break;
 8001be0:	e033      	b.n	8001c4a <makeImg+0x7ca>
					case 56:
						for(int j=0;j<=5760;j++){
 8001be2:	2300      	movs	r3, #0
 8001be4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001be6:	e011      	b.n	8001c0c <makeImg+0x78c>
							if(egg_sf[j]!=0x3f){
 8001be8:	4a4c      	ldr	r2, [pc, #304]	; (8001d1c <makeImg+0x89c>)
 8001bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bec:	4413      	add	r3, r2
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b3f      	cmp	r3, #63	; 0x3f
 8001bf2:	d008      	beq.n	8001c06 <makeImg+0x786>
							  Frame[j]=egg_sf[j];
 8001bf4:	4a49      	ldr	r2, [pc, #292]	; (8001d1c <makeImg+0x89c>)
 8001bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf8:	4413      	add	r3, r2
 8001bfa:	7819      	ldrb	r1, [r3, #0]
 8001bfc:	4a40      	ldr	r2, [pc, #256]	; (8001d00 <makeImg+0x880>)
 8001bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c00:	4413      	add	r3, r2
 8001c02:	460a      	mov	r2, r1
 8001c04:	701a      	strb	r2, [r3, #0]
						for(int j=0;j<=5760;j++){
 8001c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c08:	3301      	adds	r3, #1
 8001c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0e:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001c12:	dde9      	ble.n	8001be8 <makeImg+0x768>
							}
						}
					break;
 8001c14:	e019      	b.n	8001c4a <makeImg+0x7ca>
					case 57:
						for(int j=0;j<=5760;j++){
 8001c16:	2300      	movs	r3, #0
 8001c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c1a:	e011      	b.n	8001c40 <makeImg+0x7c0>
							if(nine_sf[j]!=0x3f){
 8001c1c:	4a40      	ldr	r2, [pc, #256]	; (8001d20 <makeImg+0x8a0>)
 8001c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c20:	4413      	add	r3, r2
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b3f      	cmp	r3, #63	; 0x3f
 8001c26:	d008      	beq.n	8001c3a <makeImg+0x7ba>
							  Frame[j]=nine_sf[j];
 8001c28:	4a3d      	ldr	r2, [pc, #244]	; (8001d20 <makeImg+0x8a0>)
 8001c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2c:	4413      	add	r3, r2
 8001c2e:	7819      	ldrb	r1, [r3, #0]
 8001c30:	4a33      	ldr	r2, [pc, #204]	; (8001d00 <makeImg+0x880>)
 8001c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c34:	4413      	add	r3, r2
 8001c36:	460a      	mov	r2, r1
 8001c38:	701a      	strb	r2, [r3, #0]
						for(int j=0;j<=5760;j++){
 8001c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c42:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001c46:	dde9      	ble.n	8001c1c <makeImg+0x79c>
							}
						}
					break;
 8001c48:	bf00      	nop
				 }

				Cno=bufferRH[0];
 8001c4a:	4b36      	ldr	r3, [pc, #216]	; (8001d24 <makeImg+0x8a4>)
 8001c4c:	781a      	ldrb	r2, [r3, #0]
 8001c4e:	4b36      	ldr	r3, [pc, #216]	; (8001d28 <makeImg+0x8a8>)
 8001c50:	701a      	strb	r2, [r3, #0]
				switch (Cno) {
 8001c52:	4b35      	ldr	r3, [pc, #212]	; (8001d28 <makeImg+0x8a8>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	3b30      	subs	r3, #48	; 0x30
 8001c58:	2b09      	cmp	r3, #9
 8001c5a:	f200 8138 	bhi.w	8001ece <makeImg+0xa4e>
 8001c5e:	a201      	add	r2, pc, #4	; (adr r2, 8001c64 <makeImg+0x7e4>)
 8001c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c64:	08001c8d 	.word	0x08001c8d
 8001c68:	08001cc1 	.word	0x08001cc1
 8001c6c:	08001cf5 	.word	0x08001cf5
 8001c70:	08001d63 	.word	0x08001d63
 8001c74:	08001d97 	.word	0x08001d97
 8001c78:	08001dcb 	.word	0x08001dcb
 8001c7c:	08001dff 	.word	0x08001dff
 8001c80:	08001e33 	.word	0x08001e33
 8001c84:	08001e67 	.word	0x08001e67
 8001c88:	08001e9b 	.word	0x08001e9b
					case 48:
						for(int j=0;j<=5760;j++){
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c90:	e011      	b.n	8001cb6 <makeImg+0x836>
							if(Zero_mf[j]!=0x3f){
 8001c92:	4a26      	ldr	r2, [pc, #152]	; (8001d2c <makeImg+0x8ac>)
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	4413      	add	r3, r2
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b3f      	cmp	r3, #63	; 0x3f
 8001c9c:	d008      	beq.n	8001cb0 <makeImg+0x830>
								 Frame[j]=Zero_mf[j];
 8001c9e:	4a23      	ldr	r2, [pc, #140]	; (8001d2c <makeImg+0x8ac>)
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	4413      	add	r3, r2
 8001ca4:	7819      	ldrb	r1, [r3, #0]
 8001ca6:	4a16      	ldr	r2, [pc, #88]	; (8001d00 <makeImg+0x880>)
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	4413      	add	r3, r2
 8001cac:	460a      	mov	r2, r1
 8001cae:	701a      	strb	r2, [r3, #0]
						for(int j=0;j<=5760;j++){
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001cbc:	dde9      	ble.n	8001c92 <makeImg+0x812>
							}

						}
					break;
 8001cbe:	e106      	b.n	8001ece <makeImg+0xa4e>
					case 49:
						for(int j=0;j<=5760;j++){
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	623b      	str	r3, [r7, #32]
 8001cc4:	e011      	b.n	8001cea <makeImg+0x86a>
							if(One_mf[j]!=0x3f){
 8001cc6:	4a1a      	ldr	r2, [pc, #104]	; (8001d30 <makeImg+0x8b0>)
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	4413      	add	r3, r2
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b3f      	cmp	r3, #63	; 0x3f
 8001cd0:	d008      	beq.n	8001ce4 <makeImg+0x864>
							  Frame[j]=One_mf[j];
 8001cd2:	4a17      	ldr	r2, [pc, #92]	; (8001d30 <makeImg+0x8b0>)
 8001cd4:	6a3b      	ldr	r3, [r7, #32]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	7819      	ldrb	r1, [r3, #0]
 8001cda:	4a09      	ldr	r2, [pc, #36]	; (8001d00 <makeImg+0x880>)
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
 8001cde:	4413      	add	r3, r2
 8001ce0:	460a      	mov	r2, r1
 8001ce2:	701a      	strb	r2, [r3, #0]
						for(int j=0;j<=5760;j++){
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	623b      	str	r3, [r7, #32]
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001cf0:	dde9      	ble.n	8001cc6 <makeImg+0x846>
							}
						}
					break;
 8001cf2:	e0ec      	b.n	8001ece <makeImg+0xa4e>
					case 50:
						for(int j=0;j<=5760;j++){
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61fb      	str	r3, [r7, #28]
 8001cf8:	e02e      	b.n	8001d58 <makeImg+0x8d8>
 8001cfa:	bf00      	nop
 8001cfc:	2400f79c 	.word	0x2400f79c
 8001d00:	24038580 	.word	0x24038580
 8001d04:	24010e1c 	.word	0x24010e1c
 8001d08:	2401249c 	.word	0x2401249c
 8001d0c:	24013b1c 	.word	0x24013b1c
 8001d10:	2401519c 	.word	0x2401519c
 8001d14:	2401681c 	.word	0x2401681c
 8001d18:	24017e9c 	.word	0x24017e9c
 8001d1c:	2401951c 	.word	0x2401951c
 8001d20:	2401ab9c 	.word	0x2401ab9c
 8001d24:	240445c0 	.word	0x240445c0
 8001d28:	24044611 	.word	0x24044611
 8001d2c:	2400001c 	.word	0x2400001c
 8001d30:	2400169c 	.word	0x2400169c
							if(Two_mf[j]!=0x3f){
 8001d34:	4a69      	ldr	r2, [pc, #420]	; (8001edc <makeImg+0xa5c>)
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	4413      	add	r3, r2
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b3f      	cmp	r3, #63	; 0x3f
 8001d3e:	d008      	beq.n	8001d52 <makeImg+0x8d2>
							  Frame[j]=Two_mf[j];
 8001d40:	4a66      	ldr	r2, [pc, #408]	; (8001edc <makeImg+0xa5c>)
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	4413      	add	r3, r2
 8001d46:	7819      	ldrb	r1, [r3, #0]
 8001d48:	4a65      	ldr	r2, [pc, #404]	; (8001ee0 <makeImg+0xa60>)
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	460a      	mov	r2, r1
 8001d50:	701a      	strb	r2, [r3, #0]
						for(int j=0;j<=5760;j++){
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3301      	adds	r3, #1
 8001d56:	61fb      	str	r3, [r7, #28]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001d5e:	dde9      	ble.n	8001d34 <makeImg+0x8b4>
							}
						}
					break;
 8001d60:	e0b5      	b.n	8001ece <makeImg+0xa4e>
					case 51:
						for(int j=0;j<=5760;j++){
 8001d62:	2300      	movs	r3, #0
 8001d64:	61bb      	str	r3, [r7, #24]
 8001d66:	e011      	b.n	8001d8c <makeImg+0x90c>
							if(Three_mf[j]!=0x3f){
 8001d68:	4a5e      	ldr	r2, [pc, #376]	; (8001ee4 <makeImg+0xa64>)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b3f      	cmp	r3, #63	; 0x3f
 8001d72:	d008      	beq.n	8001d86 <makeImg+0x906>
							  Frame[j]=Three_mf[j];
 8001d74:	4a5b      	ldr	r2, [pc, #364]	; (8001ee4 <makeImg+0xa64>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	4413      	add	r3, r2
 8001d7a:	7819      	ldrb	r1, [r3, #0]
 8001d7c:	4a58      	ldr	r2, [pc, #352]	; (8001ee0 <makeImg+0xa60>)
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	4413      	add	r3, r2
 8001d82:	460a      	mov	r2, r1
 8001d84:	701a      	strb	r2, [r3, #0]
						for(int j=0;j<=5760;j++){
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	61bb      	str	r3, [r7, #24]
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001d92:	dde9      	ble.n	8001d68 <makeImg+0x8e8>
							}
						}
					break;
 8001d94:	e09b      	b.n	8001ece <makeImg+0xa4e>
					case 52:
						for(int j=0;j<=5760;j++){
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
 8001d9a:	e011      	b.n	8001dc0 <makeImg+0x940>
							if(Four_mf[j]!=0x3f){
 8001d9c:	4a52      	ldr	r2, [pc, #328]	; (8001ee8 <makeImg+0xa68>)
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	4413      	add	r3, r2
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b3f      	cmp	r3, #63	; 0x3f
 8001da6:	d008      	beq.n	8001dba <makeImg+0x93a>
							  Frame[j]=Four_mf[j];
 8001da8:	4a4f      	ldr	r2, [pc, #316]	; (8001ee8 <makeImg+0xa68>)
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	4413      	add	r3, r2
 8001dae:	7819      	ldrb	r1, [r3, #0]
 8001db0:	4a4b      	ldr	r2, [pc, #300]	; (8001ee0 <makeImg+0xa60>)
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	4413      	add	r3, r2
 8001db6:	460a      	mov	r2, r1
 8001db8:	701a      	strb	r2, [r3, #0]
						for(int j=0;j<=5760;j++){
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001dc6:	dde9      	ble.n	8001d9c <makeImg+0x91c>
							}
						}
					break;
 8001dc8:	e081      	b.n	8001ece <makeImg+0xa4e>
					case 53:
						for(int j=0;j<=5760;j++){
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	e011      	b.n	8001df4 <makeImg+0x974>
							if(Five_mf[j]!=0x3f){
 8001dd0:	4a46      	ldr	r2, [pc, #280]	; (8001eec <makeImg+0xa6c>)
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b3f      	cmp	r3, #63	; 0x3f
 8001dda:	d008      	beq.n	8001dee <makeImg+0x96e>
							  Frame[j]=Five_mf[j];
 8001ddc:	4a43      	ldr	r2, [pc, #268]	; (8001eec <makeImg+0xa6c>)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4413      	add	r3, r2
 8001de2:	7819      	ldrb	r1, [r3, #0]
 8001de4:	4a3e      	ldr	r2, [pc, #248]	; (8001ee0 <makeImg+0xa60>)
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4413      	add	r3, r2
 8001dea:	460a      	mov	r2, r1
 8001dec:	701a      	strb	r2, [r3, #0]
						for(int j=0;j<=5760;j++){
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	3301      	adds	r3, #1
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001dfa:	dde9      	ble.n	8001dd0 <makeImg+0x950>
							}
						}
					break;
 8001dfc:	e067      	b.n	8001ece <makeImg+0xa4e>
					case 54:
						for(int j=0;j<=5760;j++){
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	e011      	b.n	8001e28 <makeImg+0x9a8>
							if(six_mf[j]!=0x3f){
 8001e04:	4a3a      	ldr	r2, [pc, #232]	; (8001ef0 <makeImg+0xa70>)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	4413      	add	r3, r2
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b3f      	cmp	r3, #63	; 0x3f
 8001e0e:	d008      	beq.n	8001e22 <makeImg+0x9a2>
							  Frame[j]=six_mf[j];
 8001e10:	4a37      	ldr	r2, [pc, #220]	; (8001ef0 <makeImg+0xa70>)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4413      	add	r3, r2
 8001e16:	7819      	ldrb	r1, [r3, #0]
 8001e18:	4a31      	ldr	r2, [pc, #196]	; (8001ee0 <makeImg+0xa60>)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	460a      	mov	r2, r1
 8001e20:	701a      	strb	r2, [r3, #0]
						for(int j=0;j<=5760;j++){
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	3301      	adds	r3, #1
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001e2e:	dde9      	ble.n	8001e04 <makeImg+0x984>
							}
						}
					break;
 8001e30:	e04d      	b.n	8001ece <makeImg+0xa4e>
					case 55:
						for(int j=0;j<=5760;j++){
 8001e32:	2300      	movs	r3, #0
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	e011      	b.n	8001e5c <makeImg+0x9dc>
							if(seven_mf[j]!=0x3f){
 8001e38:	4a2e      	ldr	r2, [pc, #184]	; (8001ef4 <makeImg+0xa74>)
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b3f      	cmp	r3, #63	; 0x3f
 8001e42:	d008      	beq.n	8001e56 <makeImg+0x9d6>
							  Frame[j]=seven_mf[j];
 8001e44:	4a2b      	ldr	r2, [pc, #172]	; (8001ef4 <makeImg+0xa74>)
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	4413      	add	r3, r2
 8001e4a:	7819      	ldrb	r1, [r3, #0]
 8001e4c:	4a24      	ldr	r2, [pc, #144]	; (8001ee0 <makeImg+0xa60>)
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	4413      	add	r3, r2
 8001e52:	460a      	mov	r2, r1
 8001e54:	701a      	strb	r2, [r3, #0]
						for(int j=0;j<=5760;j++){
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001e62:	dde9      	ble.n	8001e38 <makeImg+0x9b8>
							}
						}
					break;
 8001e64:	e033      	b.n	8001ece <makeImg+0xa4e>
					case 56:
						for(int j=0;j<=5760;j++){
 8001e66:	2300      	movs	r3, #0
 8001e68:	607b      	str	r3, [r7, #4]
 8001e6a:	e011      	b.n	8001e90 <makeImg+0xa10>
							if(egg_mf[j]!=0x3f){
 8001e6c:	4a22      	ldr	r2, [pc, #136]	; (8001ef8 <makeImg+0xa78>)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b3f      	cmp	r3, #63	; 0x3f
 8001e76:	d008      	beq.n	8001e8a <makeImg+0xa0a>
							  Frame[j]=egg_mf[j];
 8001e78:	4a1f      	ldr	r2, [pc, #124]	; (8001ef8 <makeImg+0xa78>)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	7819      	ldrb	r1, [r3, #0]
 8001e80:	4a17      	ldr	r2, [pc, #92]	; (8001ee0 <makeImg+0xa60>)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	460a      	mov	r2, r1
 8001e88:	701a      	strb	r2, [r3, #0]
						for(int j=0;j<=5760;j++){
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	607b      	str	r3, [r7, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001e96:	dde9      	ble.n	8001e6c <makeImg+0x9ec>
							}
						}
					break;
 8001e98:	e019      	b.n	8001ece <makeImg+0xa4e>
					case 57:
						for(int j=0;j<=5760;j++){
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	603b      	str	r3, [r7, #0]
 8001e9e:	e011      	b.n	8001ec4 <makeImg+0xa44>
							if(nine_mf[j]!=0x3f){
 8001ea0:	4a16      	ldr	r2, [pc, #88]	; (8001efc <makeImg+0xa7c>)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b3f      	cmp	r3, #63	; 0x3f
 8001eaa:	d008      	beq.n	8001ebe <makeImg+0xa3e>
							  Frame[j]=nine_mf[j];
 8001eac:	4a13      	ldr	r2, [pc, #76]	; (8001efc <makeImg+0xa7c>)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	7819      	ldrb	r1, [r3, #0]
 8001eb4:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <makeImg+0xa60>)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	4413      	add	r3, r2
 8001eba:	460a      	mov	r2, r1
 8001ebc:	701a      	strb	r2, [r3, #0]
						for(int j=0;j<=5760;j++){
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	603b      	str	r3, [r7, #0]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	f5b3 5fb4 	cmp.w	r3, #5760	; 0x1680
 8001eca:	dde9      	ble.n	8001ea0 <makeImg+0xa20>
							}
						}
					break;
 8001ecc:	bf00      	nop
				 }
}
 8001ece:	bf00      	nop
 8001ed0:	37a4      	adds	r7, #164	; 0xa4
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	24002d1c 	.word	0x24002d1c
 8001ee0:	24038580 	.word	0x24038580
 8001ee4:	2400439c 	.word	0x2400439c
 8001ee8:	24005a1c 	.word	0x24005a1c
 8001eec:	2400709c 	.word	0x2400709c
 8001ef0:	2400871c 	.word	0x2400871c
 8001ef4:	24009d9c 	.word	0x24009d9c
 8001ef8:	2400b41c 	.word	0x2400b41c
 8001efc:	2400ca9c 	.word	0x2400ca9c

08001f00 <fillFrame>:





void fillFrame(){
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
	for(int i=0;i<49152;i++){
 8001f06:	2300      	movs	r3, #0
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	e007      	b.n	8001f1c <fillFrame+0x1c>
		Frame[i]=0x3f;
 8001f0c:	4a09      	ldr	r2, [pc, #36]	; (8001f34 <fillFrame+0x34>)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	223f      	movs	r2, #63	; 0x3f
 8001f14:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<49152;i++){
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001f22:	dbf3      	blt.n	8001f0c <fillFrame+0xc>
	}
}
 8001f24:	bf00      	nop
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	24038580 	.word	0x24038580

08001f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f3c:	b672      	cpsid	i
}
 8001f3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f40:	e7fe      	b.n	8001f40 <Error_Handler+0x8>
	...

08001f44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <HAL_MspInit+0x30>)
 8001f4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f50:	4a08      	ldr	r2, [pc, #32]	; (8001f74 <HAL_MspInit+0x30>)
 8001f52:	f043 0302 	orr.w	r3, r3, #2
 8001f56:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_MspInit+0x30>)
 8001f5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	607b      	str	r3, [r7, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	58024400 	.word	0x58024400

08001f78 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08e      	sub	sp, #56	; 0x38
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a59      	ldr	r2, [pc, #356]	; (80020fc <HAL_ETH_MspInit+0x184>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	f040 80ab 	bne.w	80020f2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001f9c:	4b58      	ldr	r3, [pc, #352]	; (8002100 <HAL_ETH_MspInit+0x188>)
 8001f9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fa2:	4a57      	ldr	r2, [pc, #348]	; (8002100 <HAL_ETH_MspInit+0x188>)
 8001fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fa8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001fac:	4b54      	ldr	r3, [pc, #336]	; (8002100 <HAL_ETH_MspInit+0x188>)
 8001fae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fb6:	623b      	str	r3, [r7, #32]
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001fba:	4b51      	ldr	r3, [pc, #324]	; (8002100 <HAL_ETH_MspInit+0x188>)
 8001fbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fc0:	4a4f      	ldr	r2, [pc, #316]	; (8002100 <HAL_ETH_MspInit+0x188>)
 8001fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001fca:	4b4d      	ldr	r3, [pc, #308]	; (8002100 <HAL_ETH_MspInit+0x188>)
 8001fcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd4:	61fb      	str	r3, [r7, #28]
 8001fd6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001fd8:	4b49      	ldr	r3, [pc, #292]	; (8002100 <HAL_ETH_MspInit+0x188>)
 8001fda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fde:	4a48      	ldr	r2, [pc, #288]	; (8002100 <HAL_ETH_MspInit+0x188>)
 8001fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fe4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001fe8:	4b45      	ldr	r3, [pc, #276]	; (8002100 <HAL_ETH_MspInit+0x188>)
 8001fea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff2:	61bb      	str	r3, [r7, #24]
 8001ff4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff6:	4b42      	ldr	r3, [pc, #264]	; (8002100 <HAL_ETH_MspInit+0x188>)
 8001ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ffc:	4a40      	ldr	r2, [pc, #256]	; (8002100 <HAL_ETH_MspInit+0x188>)
 8001ffe:	f043 0304 	orr.w	r3, r3, #4
 8002002:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002006:	4b3e      	ldr	r3, [pc, #248]	; (8002100 <HAL_ETH_MspInit+0x188>)
 8002008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	617b      	str	r3, [r7, #20]
 8002012:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002014:	4b3a      	ldr	r3, [pc, #232]	; (8002100 <HAL_ETH_MspInit+0x188>)
 8002016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800201a:	4a39      	ldr	r2, [pc, #228]	; (8002100 <HAL_ETH_MspInit+0x188>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002024:	4b36      	ldr	r3, [pc, #216]	; (8002100 <HAL_ETH_MspInit+0x188>)
 8002026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002032:	4b33      	ldr	r3, [pc, #204]	; (8002100 <HAL_ETH_MspInit+0x188>)
 8002034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002038:	4a31      	ldr	r2, [pc, #196]	; (8002100 <HAL_ETH_MspInit+0x188>)
 800203a:	f043 0302 	orr.w	r3, r3, #2
 800203e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002042:	4b2f      	ldr	r3, [pc, #188]	; (8002100 <HAL_ETH_MspInit+0x188>)
 8002044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002050:	4b2b      	ldr	r3, [pc, #172]	; (8002100 <HAL_ETH_MspInit+0x188>)
 8002052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002056:	4a2a      	ldr	r2, [pc, #168]	; (8002100 <HAL_ETH_MspInit+0x188>)
 8002058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800205c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002060:	4b27      	ldr	r3, [pc, #156]	; (8002100 <HAL_ETH_MspInit+0x188>)
 8002062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800206e:	2332      	movs	r3, #50	; 0x32
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	2302      	movs	r3, #2
 8002074:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800207e:	230b      	movs	r3, #11
 8002080:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002086:	4619      	mov	r1, r3
 8002088:	481e      	ldr	r0, [pc, #120]	; (8002104 <HAL_ETH_MspInit+0x18c>)
 800208a:	f003 fc3d 	bl	8005908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800208e:	2386      	movs	r3, #134	; 0x86
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209a:	2300      	movs	r3, #0
 800209c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800209e:	230b      	movs	r3, #11
 80020a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a6:	4619      	mov	r1, r3
 80020a8:	4817      	ldr	r0, [pc, #92]	; (8002108 <HAL_ETH_MspInit+0x190>)
 80020aa:	f003 fc2d 	bl	8005908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80020ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	2302      	movs	r3, #2
 80020b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020bc:	2300      	movs	r3, #0
 80020be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020c0:	230b      	movs	r3, #11
 80020c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c8:	4619      	mov	r1, r3
 80020ca:	4810      	ldr	r0, [pc, #64]	; (800210c <HAL_ETH_MspInit+0x194>)
 80020cc:	f003 fc1c 	bl	8005908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80020d0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d6:	2302      	movs	r3, #2
 80020d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020de:	2300      	movs	r3, #0
 80020e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020e2:	230b      	movs	r3, #11
 80020e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ea:	4619      	mov	r1, r3
 80020ec:	4808      	ldr	r0, [pc, #32]	; (8002110 <HAL_ETH_MspInit+0x198>)
 80020ee:	f003 fc0b 	bl	8005908 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80020f2:	bf00      	nop
 80020f4:	3738      	adds	r7, #56	; 0x38
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40028000 	.word	0x40028000
 8002100:	58024400 	.word	0x58024400
 8002104:	58020800 	.word	0x58020800
 8002108:	58020000 	.word	0x58020000
 800210c:	58020400 	.word	0x58020400
 8002110:	58021800 	.word	0x58021800

08002114 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b0ba      	sub	sp, #232	; 0xe8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800212c:	f107 0318 	add.w	r3, r7, #24
 8002130:	22bc      	movs	r2, #188	; 0xbc
 8002132:	2100      	movs	r1, #0
 8002134:	4618      	mov	r0, r3
 8002136:	f009 fb1f 	bl	800b778 <memset>
  if(hspi->Instance==SPI1)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a51      	ldr	r2, [pc, #324]	; (8002284 <HAL_SPI_MspInit+0x170>)
 8002140:	4293      	cmp	r3, r2
 8002142:	f040 809b 	bne.w	800227c <HAL_SPI_MspInit+0x168>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800214a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800214c:	2300      	movs	r3, #0
 800214e:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002150:	f107 0318 	add.w	r3, r7, #24
 8002154:	4618      	mov	r0, r3
 8002156:	f004 ff51 	bl	8006ffc <HAL_RCCEx_PeriphCLKConfig>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8002160:	f7ff feea 	bl	8001f38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002164:	4b48      	ldr	r3, [pc, #288]	; (8002288 <HAL_SPI_MspInit+0x174>)
 8002166:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800216a:	4a47      	ldr	r2, [pc, #284]	; (8002288 <HAL_SPI_MspInit+0x174>)
 800216c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002170:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002174:	4b44      	ldr	r3, [pc, #272]	; (8002288 <HAL_SPI_MspInit+0x174>)
 8002176:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800217a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002182:	4b41      	ldr	r3, [pc, #260]	; (8002288 <HAL_SPI_MspInit+0x174>)
 8002184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002188:	4a3f      	ldr	r2, [pc, #252]	; (8002288 <HAL_SPI_MspInit+0x174>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002192:	4b3d      	ldr	r3, [pc, #244]	; (8002288 <HAL_SPI_MspInit+0x174>)
 8002194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021a0:	4b39      	ldr	r3, [pc, #228]	; (8002288 <HAL_SPI_MspInit+0x174>)
 80021a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a6:	4a38      	ldr	r2, [pc, #224]	; (8002288 <HAL_SPI_MspInit+0x174>)
 80021a8:	f043 0308 	orr.w	r3, r3, #8
 80021ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021b0:	4b35      	ldr	r3, [pc, #212]	; (8002288 <HAL_SPI_MspInit+0x174>)
 80021b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80021be:	2320      	movs	r3, #32
 80021c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c4:	2302      	movs	r3, #2
 80021c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021d6:	2305      	movs	r3, #5
 80021d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021e0:	4619      	mov	r1, r3
 80021e2:	482a      	ldr	r0, [pc, #168]	; (800228c <HAL_SPI_MspInit+0x178>)
 80021e4:	f003 fb90 	bl	8005908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80021e8:	2380      	movs	r3, #128	; 0x80
 80021ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ee:	2302      	movs	r3, #2
 80021f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fa:	2300      	movs	r3, #0
 80021fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002200:	2305      	movs	r3, #5
 8002202:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002206:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800220a:	4619      	mov	r1, r3
 800220c:	4820      	ldr	r0, [pc, #128]	; (8002290 <HAL_SPI_MspInit+0x17c>)
 800220e:	f003 fb7b 	bl	8005908 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8002212:	4b20      	ldr	r3, [pc, #128]	; (8002294 <HAL_SPI_MspInit+0x180>)
 8002214:	4a20      	ldr	r2, [pc, #128]	; (8002298 <HAL_SPI_MspInit+0x184>)
 8002216:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002218:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <HAL_SPI_MspInit+0x180>)
 800221a:	2226      	movs	r2, #38	; 0x26
 800221c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800221e:	4b1d      	ldr	r3, [pc, #116]	; (8002294 <HAL_SPI_MspInit+0x180>)
 8002220:	2240      	movs	r2, #64	; 0x40
 8002222:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002224:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <HAL_SPI_MspInit+0x180>)
 8002226:	2200      	movs	r2, #0
 8002228:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800222a:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <HAL_SPI_MspInit+0x180>)
 800222c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002230:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002232:	4b18      	ldr	r3, [pc, #96]	; (8002294 <HAL_SPI_MspInit+0x180>)
 8002234:	2200      	movs	r2, #0
 8002236:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002238:	4b16      	ldr	r3, [pc, #88]	; (8002294 <HAL_SPI_MspInit+0x180>)
 800223a:	2200      	movs	r2, #0
 800223c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800223e:	4b15      	ldr	r3, [pc, #84]	; (8002294 <HAL_SPI_MspInit+0x180>)
 8002240:	2200      	movs	r2, #0
 8002242:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002244:	4b13      	ldr	r3, [pc, #76]	; (8002294 <HAL_SPI_MspInit+0x180>)
 8002246:	2200      	movs	r2, #0
 8002248:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800224a:	4b12      	ldr	r3, [pc, #72]	; (8002294 <HAL_SPI_MspInit+0x180>)
 800224c:	2200      	movs	r2, #0
 800224e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002250:	4810      	ldr	r0, [pc, #64]	; (8002294 <HAL_SPI_MspInit+0x180>)
 8002252:	f000 fc1b 	bl	8002a8c <HAL_DMA_Init>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <HAL_SPI_MspInit+0x14c>
    {
      Error_Handler();
 800225c:	f7ff fe6c 	bl	8001f38 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a0c      	ldr	r2, [pc, #48]	; (8002294 <HAL_SPI_MspInit+0x180>)
 8002264:	679a      	str	r2, [r3, #120]	; 0x78
 8002266:	4a0b      	ldr	r2, [pc, #44]	; (8002294 <HAL_SPI_MspInit+0x180>)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800226c:	2200      	movs	r2, #0
 800226e:	2100      	movs	r1, #0
 8002270:	2023      	movs	r0, #35	; 0x23
 8002272:	f000 fbd6 	bl	8002a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002276:	2023      	movs	r0, #35	; 0x23
 8002278:	f000 fbed 	bl	8002a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800227c:	bf00      	nop
 800227e:	37e8      	adds	r7, #232	; 0xe8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40013000 	.word	0x40013000
 8002288:	58024400 	.word	0x58024400
 800228c:	58020000 	.word	0x58020000
 8002290:	58020c00 	.word	0x58020c00
 8002294:	24044ce8 	.word	0x24044ce8
 8002298:	40020010 	.word	0x40020010

0800229c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a2b      	ldr	r2, [pc, #172]	; (8002358 <HAL_TIM_Base_MspInit+0xbc>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d117      	bne.n	80022de <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022ae:	4b2b      	ldr	r3, [pc, #172]	; (800235c <HAL_TIM_Base_MspInit+0xc0>)
 80022b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022b4:	4a29      	ldr	r2, [pc, #164]	; (800235c <HAL_TIM_Base_MspInit+0xc0>)
 80022b6:	f043 0302 	orr.w	r3, r3, #2
 80022ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022be:	4b27      	ldr	r3, [pc, #156]	; (800235c <HAL_TIM_Base_MspInit+0xc0>)
 80022c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80022cc:	2200      	movs	r2, #0
 80022ce:	2100      	movs	r1, #0
 80022d0:	201d      	movs	r0, #29
 80022d2:	f000 fba6 	bl	8002a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022d6:	201d      	movs	r0, #29
 80022d8:	f000 fbbd 	bl	8002a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80022dc:	e038      	b.n	8002350 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM5)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a1f      	ldr	r2, [pc, #124]	; (8002360 <HAL_TIM_Base_MspInit+0xc4>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d117      	bne.n	8002318 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80022e8:	4b1c      	ldr	r3, [pc, #112]	; (800235c <HAL_TIM_Base_MspInit+0xc0>)
 80022ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022ee:	4a1b      	ldr	r2, [pc, #108]	; (800235c <HAL_TIM_Base_MspInit+0xc0>)
 80022f0:	f043 0308 	orr.w	r3, r3, #8
 80022f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022f8:	4b18      	ldr	r3, [pc, #96]	; (800235c <HAL_TIM_Base_MspInit+0xc0>)
 80022fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002306:	2200      	movs	r2, #0
 8002308:	2100      	movs	r1, #0
 800230a:	2032      	movs	r0, #50	; 0x32
 800230c:	f000 fb89 	bl	8002a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002310:	2032      	movs	r0, #50	; 0x32
 8002312:	f000 fba0 	bl	8002a56 <HAL_NVIC_EnableIRQ>
}
 8002316:	e01b      	b.n	8002350 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM15)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a11      	ldr	r2, [pc, #68]	; (8002364 <HAL_TIM_Base_MspInit+0xc8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d116      	bne.n	8002350 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002322:	4b0e      	ldr	r3, [pc, #56]	; (800235c <HAL_TIM_Base_MspInit+0xc0>)
 8002324:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002328:	4a0c      	ldr	r2, [pc, #48]	; (800235c <HAL_TIM_Base_MspInit+0xc0>)
 800232a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002332:	4b0a      	ldr	r3, [pc, #40]	; (800235c <HAL_TIM_Base_MspInit+0xc0>)
 8002334:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8002340:	2200      	movs	r2, #0
 8002342:	2100      	movs	r1, #0
 8002344:	2074      	movs	r0, #116	; 0x74
 8002346:	f000 fb6c 	bl	8002a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 800234a:	2074      	movs	r0, #116	; 0x74
 800234c:	f000 fb83 	bl	8002a56 <HAL_NVIC_EnableIRQ>
}
 8002350:	bf00      	nop
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40000400 	.word	0x40000400
 800235c:	58024400 	.word	0x58024400
 8002360:	40000c00 	.word	0x40000c00
 8002364:	40014000 	.word	0x40014000

08002368 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b0b8      	sub	sp, #224	; 0xe0
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002370:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
 800237e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002380:	f107 0310 	add.w	r3, r7, #16
 8002384:	22bc      	movs	r2, #188	; 0xbc
 8002386:	2100      	movs	r1, #0
 8002388:	4618      	mov	r0, r3
 800238a:	f009 f9f5 	bl	800b778 <memset>
  if(huart->Instance==USART3)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a25      	ldr	r2, [pc, #148]	; (8002428 <HAL_UART_MspInit+0xc0>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d142      	bne.n	800241e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002398:	2302      	movs	r3, #2
 800239a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800239c:	2300      	movs	r3, #0
 800239e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023a2:	f107 0310 	add.w	r3, r7, #16
 80023a6:	4618      	mov	r0, r3
 80023a8:	f004 fe28 	bl	8006ffc <HAL_RCCEx_PeriphCLKConfig>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80023b2:	f7ff fdc1 	bl	8001f38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80023b6:	4b1d      	ldr	r3, [pc, #116]	; (800242c <HAL_UART_MspInit+0xc4>)
 80023b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023bc:	4a1b      	ldr	r2, [pc, #108]	; (800242c <HAL_UART_MspInit+0xc4>)
 80023be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023c6:	4b19      	ldr	r3, [pc, #100]	; (800242c <HAL_UART_MspInit+0xc4>)
 80023c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023d4:	4b15      	ldr	r3, [pc, #84]	; (800242c <HAL_UART_MspInit+0xc4>)
 80023d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023da:	4a14      	ldr	r2, [pc, #80]	; (800242c <HAL_UART_MspInit+0xc4>)
 80023dc:	f043 0308 	orr.w	r3, r3, #8
 80023e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <HAL_UART_MspInit+0xc4>)
 80023e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80023f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fa:	2302      	movs	r3, #2
 80023fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002406:	2300      	movs	r3, #0
 8002408:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800240c:	2307      	movs	r3, #7
 800240e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002412:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002416:	4619      	mov	r1, r3
 8002418:	4805      	ldr	r0, [pc, #20]	; (8002430 <HAL_UART_MspInit+0xc8>)
 800241a:	f003 fa75 	bl	8005908 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800241e:	bf00      	nop
 8002420:	37e0      	adds	r7, #224	; 0xe0
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40004800 	.word	0x40004800
 800242c:	58024400 	.word	0x58024400
 8002430:	58020c00 	.word	0x58020c00

08002434 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b0b8      	sub	sp, #224	; 0xe0
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800243c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]
 800244a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800244c:	f107 0310 	add.w	r3, r7, #16
 8002450:	22bc      	movs	r2, #188	; 0xbc
 8002452:	2100      	movs	r1, #0
 8002454:	4618      	mov	r0, r3
 8002456:	f009 f98f 	bl	800b778 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a37      	ldr	r2, [pc, #220]	; (800253c <HAL_PCD_MspInit+0x108>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d166      	bne.n	8002532 <HAL_PCD_MspInit+0xfe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002464:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002468:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800246a:	2301      	movs	r3, #1
 800246c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 800246e:	2312      	movs	r3, #18
 8002470:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002472:	2302      	movs	r3, #2
 8002474:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8002476:	2303      	movs	r3, #3
 8002478:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800247a:	2302      	movs	r3, #2
 800247c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800247e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002482:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8002484:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002488:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800248a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800248e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002492:	f107 0310 	add.w	r3, r7, #16
 8002496:	4618      	mov	r0, r3
 8002498:	f004 fdb0 	bl	8006ffc <HAL_RCCEx_PeriphCLKConfig>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 80024a2:	f7ff fd49 	bl	8001f38 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80024a6:	f003 fde1 	bl	800606c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024aa:	4b25      	ldr	r3, [pc, #148]	; (8002540 <HAL_PCD_MspInit+0x10c>)
 80024ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024b0:	4a23      	ldr	r2, [pc, #140]	; (8002540 <HAL_PCD_MspInit+0x10c>)
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024ba:	4b21      	ldr	r3, [pc, #132]	; (8002540 <HAL_PCD_MspInit+0x10c>)
 80024bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80024c8:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80024cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d0:	2302      	movs	r3, #2
 80024d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024dc:	2300      	movs	r3, #0
 80024de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80024e2:	230a      	movs	r3, #10
 80024e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024ec:	4619      	mov	r1, r3
 80024ee:	4815      	ldr	r0, [pc, #84]	; (8002544 <HAL_PCD_MspInit+0x110>)
 80024f0:	f003 fa0a 	bl	8005908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002508:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800250c:	4619      	mov	r1, r3
 800250e:	480d      	ldr	r0, [pc, #52]	; (8002544 <HAL_PCD_MspInit+0x110>)
 8002510:	f003 f9fa 	bl	8005908 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002514:	4b0a      	ldr	r3, [pc, #40]	; (8002540 <HAL_PCD_MspInit+0x10c>)
 8002516:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800251a:	4a09      	ldr	r2, [pc, #36]	; (8002540 <HAL_PCD_MspInit+0x10c>)
 800251c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002520:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002524:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_PCD_MspInit+0x10c>)
 8002526:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800252a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002532:	bf00      	nop
 8002534:	37e0      	adds	r7, #224	; 0xe0
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40080000 	.word	0x40080000
 8002540:	58024400 	.word	0x58024400
 8002544:	58020000 	.word	0x58020000

08002548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800254c:	e7fe      	b.n	800254c <NMI_Handler+0x4>

0800254e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002552:	e7fe      	b.n	8002552 <HardFault_Handler+0x4>

08002554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002558:	e7fe      	b.n	8002558 <MemManage_Handler+0x4>

0800255a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800255e:	e7fe      	b.n	800255e <BusFault_Handler+0x4>

08002560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002564:	e7fe      	b.n	8002564 <UsageFault_Handler+0x4>

08002566 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002582:	b480      	push	{r7}
 8002584:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002594:	f000 f906 	bl	80027a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002598:	bf00      	nop
 800259a:	bd80      	pop	{r7, pc}

0800259c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80025a0:	4802      	ldr	r0, [pc, #8]	; (80025ac <DMA1_Stream0_IRQHandler+0x10>)
 80025a2:	f001 fa7d 	bl	8003aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	24044ce8 	.word	0x24044ce8

080025b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025b4:	4802      	ldr	r0, [pc, #8]	; (80025c0 <TIM3_IRQHandler+0x10>)
 80025b6:	f007 f925 	bl	8009804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	24044b58 	.word	0x24044b58

080025c4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80025c8:	4802      	ldr	r0, [pc, #8]	; (80025d4 <SPI1_IRQHandler+0x10>)
 80025ca:	f006 fcbb 	bl	8008f44 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	24044ba4 	.word	0x24044ba4

080025d8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80025dc:	4802      	ldr	r0, [pc, #8]	; (80025e8 <TIM5_IRQHandler+0x10>)
 80025de:	f007 f911 	bl	8009804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	24044b0c 	.word	0x24044b0c

080025ec <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80025f0:	4802      	ldr	r0, [pc, #8]	; (80025fc <TIM15_IRQHandler+0x10>)
 80025f2:	f007 f907 	bl	8009804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	240446b8 	.word	0x240446b8

08002600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002608:	4a14      	ldr	r2, [pc, #80]	; (800265c <_sbrk+0x5c>)
 800260a:	4b15      	ldr	r3, [pc, #84]	; (8002660 <_sbrk+0x60>)
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002614:	4b13      	ldr	r3, [pc, #76]	; (8002664 <_sbrk+0x64>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d102      	bne.n	8002622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <_sbrk+0x64>)
 800261e:	4a12      	ldr	r2, [pc, #72]	; (8002668 <_sbrk+0x68>)
 8002620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002622:	4b10      	ldr	r3, [pc, #64]	; (8002664 <_sbrk+0x64>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4413      	add	r3, r2
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	429a      	cmp	r2, r3
 800262e:	d207      	bcs.n	8002640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002630:	f009 f878 	bl	800b724 <__errno>
 8002634:	4603      	mov	r3, r0
 8002636:	220c      	movs	r2, #12
 8002638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800263a:	f04f 33ff 	mov.w	r3, #4294967295
 800263e:	e009      	b.n	8002654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002640:	4b08      	ldr	r3, [pc, #32]	; (8002664 <_sbrk+0x64>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002646:	4b07      	ldr	r3, [pc, #28]	; (8002664 <_sbrk+0x64>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	4a05      	ldr	r2, [pc, #20]	; (8002664 <_sbrk+0x64>)
 8002650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002652:	68fb      	ldr	r3, [r7, #12]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	24080000 	.word	0x24080000
 8002660:	00000400 	.word	0x00000400
 8002664:	2404461c 	.word	0x2404461c
 8002668:	24044d78 	.word	0x24044d78

0800266c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800266c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002670:	f7fe f822 	bl	80006b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002674:	480c      	ldr	r0, [pc, #48]	; (80026a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002676:	490d      	ldr	r1, [pc, #52]	; (80026ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002678:	4a0d      	ldr	r2, [pc, #52]	; (80026b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800267a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800267c:	e002      	b.n	8002684 <LoopCopyDataInit>

0800267e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800267e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002682:	3304      	adds	r3, #4

08002684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002688:	d3f9      	bcc.n	800267e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800268a:	4a0a      	ldr	r2, [pc, #40]	; (80026b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800268c:	4c0a      	ldr	r4, [pc, #40]	; (80026b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800268e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002690:	e001      	b.n	8002696 <LoopFillZerobss>

08002692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002694:	3204      	adds	r2, #4

08002696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002698:	d3fb      	bcc.n	8002692 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800269a:	f009 f849 	bl	800b730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800269e:	f7fe f8a7 	bl	80007f0 <main>
  bx  lr
 80026a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026a4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80026a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80026ac:	24038488 	.word	0x24038488
  ldr r2, =_sidata
 80026b0:	0800c084 	.word	0x0800c084
  ldr r2, =_sbss
 80026b4:	24038548 	.word	0x24038548
  ldr r4, =_ebss
 80026b8:	24044d74 	.word	0x24044d74

080026bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026bc:	e7fe      	b.n	80026bc <ADC3_IRQHandler>
	...

080026c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026c6:	2003      	movs	r0, #3
 80026c8:	f000 f9a0 	bl	8002a0c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026cc:	f004 fac0 	bl	8006c50 <HAL_RCC_GetSysClockFreq>
 80026d0:	4602      	mov	r2, r0
 80026d2:	4b15      	ldr	r3, [pc, #84]	; (8002728 <HAL_Init+0x68>)
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	0a1b      	lsrs	r3, r3, #8
 80026d8:	f003 030f 	and.w	r3, r3, #15
 80026dc:	4913      	ldr	r1, [pc, #76]	; (800272c <HAL_Init+0x6c>)
 80026de:	5ccb      	ldrb	r3, [r1, r3]
 80026e0:	f003 031f 	and.w	r3, r3, #31
 80026e4:	fa22 f303 	lsr.w	r3, r2, r3
 80026e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026ea:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <HAL_Init+0x68>)
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	4a0e      	ldr	r2, [pc, #56]	; (800272c <HAL_Init+0x6c>)
 80026f4:	5cd3      	ldrb	r3, [r2, r3]
 80026f6:	f003 031f 	and.w	r3, r3, #31
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002700:	4a0b      	ldr	r2, [pc, #44]	; (8002730 <HAL_Init+0x70>)
 8002702:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002704:	4a0b      	ldr	r2, [pc, #44]	; (8002734 <HAL_Init+0x74>)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800270a:	2000      	movs	r0, #0
 800270c:	f000 f814 	bl	8002738 <HAL_InitTick>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e002      	b.n	8002720 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800271a:	f7ff fc13 	bl	8001f44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	58024400 	.word	0x58024400
 800272c:	0800c000 	.word	0x0800c000
 8002730:	24000004 	.word	0x24000004
 8002734:	24000000 	.word	0x24000000

08002738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002740:	4b15      	ldr	r3, [pc, #84]	; (8002798 <HAL_InitTick+0x60>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e021      	b.n	8002790 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800274c:	4b13      	ldr	r3, [pc, #76]	; (800279c <HAL_InitTick+0x64>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4b11      	ldr	r3, [pc, #68]	; (8002798 <HAL_InitTick+0x60>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	4619      	mov	r1, r3
 8002756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800275a:	fbb3 f3f1 	udiv	r3, r3, r1
 800275e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002762:	4618      	mov	r0, r3
 8002764:	f000 f985 	bl	8002a72 <HAL_SYSTICK_Config>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e00e      	b.n	8002790 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b0f      	cmp	r3, #15
 8002776:	d80a      	bhi.n	800278e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002778:	2200      	movs	r2, #0
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	f04f 30ff 	mov.w	r0, #4294967295
 8002780:	f000 f94f 	bl	8002a22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002784:	4a06      	ldr	r2, [pc, #24]	; (80027a0 <HAL_InitTick+0x68>)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	e000      	b.n	8002790 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
}
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	24038420 	.word	0x24038420
 800279c:	24000000 	.word	0x24000000
 80027a0:	2403841c 	.word	0x2403841c

080027a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027a8:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <HAL_IncTick+0x20>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	461a      	mov	r2, r3
 80027ae:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <HAL_IncTick+0x24>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4413      	add	r3, r2
 80027b4:	4a04      	ldr	r2, [pc, #16]	; (80027c8 <HAL_IncTick+0x24>)
 80027b6:	6013      	str	r3, [r2, #0]
}
 80027b8:	bf00      	nop
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	24038420 	.word	0x24038420
 80027c8:	24044d60 	.word	0x24044d60

080027cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  return uwTick;
 80027d0:	4b03      	ldr	r3, [pc, #12]	; (80027e0 <HAL_GetTick+0x14>)
 80027d2:	681b      	ldr	r3, [r3, #0]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	24044d60 	.word	0x24044d60

080027e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027ec:	f7ff ffee 	bl	80027cc <HAL_GetTick>
 80027f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fc:	d005      	beq.n	800280a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027fe:	4b0a      	ldr	r3, [pc, #40]	; (8002828 <HAL_Delay+0x44>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4413      	add	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800280a:	bf00      	nop
 800280c:	f7ff ffde 	bl	80027cc <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	429a      	cmp	r2, r3
 800281a:	d8f7      	bhi.n	800280c <HAL_Delay+0x28>
  {
  }
}
 800281c:	bf00      	nop
 800281e:	bf00      	nop
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	24038420 	.word	0x24038420

0800282c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002830:	4b03      	ldr	r3, [pc, #12]	; (8002840 <HAL_GetREVID+0x14>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	0c1b      	lsrs	r3, r3, #16
}
 8002836:	4618      	mov	r0, r3
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	5c001000 	.word	0x5c001000

08002844 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002854:	4904      	ldr	r1, [pc, #16]	; (8002868 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4313      	orrs	r3, r2
 800285a:	604b      	str	r3, [r1, #4]
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	58000400 	.word	0x58000400

0800286c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800287c:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <__NVIC_SetPriorityGrouping+0x40>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002888:	4013      	ands	r3, r2
 800288a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002894:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <__NVIC_SetPriorityGrouping+0x44>)
 8002896:	4313      	orrs	r3, r2
 8002898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800289a:	4a04      	ldr	r2, [pc, #16]	; (80028ac <__NVIC_SetPriorityGrouping+0x40>)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	60d3      	str	r3, [r2, #12]
}
 80028a0:	bf00      	nop
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	e000ed00 	.word	0xe000ed00
 80028b0:	05fa0000 	.word	0x05fa0000

080028b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028b8:	4b04      	ldr	r3, [pc, #16]	; (80028cc <__NVIC_GetPriorityGrouping+0x18>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	0a1b      	lsrs	r3, r3, #8
 80028be:	f003 0307 	and.w	r3, r3, #7
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	db0b      	blt.n	80028fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e2:	88fb      	ldrh	r3, [r7, #6]
 80028e4:	f003 021f 	and.w	r2, r3, #31
 80028e8:	4907      	ldr	r1, [pc, #28]	; (8002908 <__NVIC_EnableIRQ+0x38>)
 80028ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	2001      	movs	r0, #1
 80028f2:	fa00 f202 	lsl.w	r2, r0, r2
 80028f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	e000e100 	.word	0xe000e100

0800290c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	6039      	str	r1, [r7, #0]
 8002916:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002918:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800291c:	2b00      	cmp	r3, #0
 800291e:	db0a      	blt.n	8002936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	b2da      	uxtb	r2, r3
 8002924:	490c      	ldr	r1, [pc, #48]	; (8002958 <__NVIC_SetPriority+0x4c>)
 8002926:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800292a:	0112      	lsls	r2, r2, #4
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	440b      	add	r3, r1
 8002930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002934:	e00a      	b.n	800294c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	b2da      	uxtb	r2, r3
 800293a:	4908      	ldr	r1, [pc, #32]	; (800295c <__NVIC_SetPriority+0x50>)
 800293c:	88fb      	ldrh	r3, [r7, #6]
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	3b04      	subs	r3, #4
 8002944:	0112      	lsls	r2, r2, #4
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	440b      	add	r3, r1
 800294a:	761a      	strb	r2, [r3, #24]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	e000e100 	.word	0xe000e100
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002960:	b480      	push	{r7}
 8002962:	b089      	sub	sp, #36	; 0x24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f1c3 0307 	rsb	r3, r3, #7
 800297a:	2b04      	cmp	r3, #4
 800297c:	bf28      	it	cs
 800297e:	2304      	movcs	r3, #4
 8002980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	3304      	adds	r3, #4
 8002986:	2b06      	cmp	r3, #6
 8002988:	d902      	bls.n	8002990 <NVIC_EncodePriority+0x30>
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3b03      	subs	r3, #3
 800298e:	e000      	b.n	8002992 <NVIC_EncodePriority+0x32>
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002994:	f04f 32ff 	mov.w	r2, #4294967295
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43da      	mvns	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	401a      	ands	r2, r3
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029a8:	f04f 31ff 	mov.w	r1, #4294967295
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	fa01 f303 	lsl.w	r3, r1, r3
 80029b2:	43d9      	mvns	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b8:	4313      	orrs	r3, r2
         );
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3724      	adds	r7, #36	; 0x24
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
	...

080029c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029d8:	d301      	bcc.n	80029de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029da:	2301      	movs	r3, #1
 80029dc:	e00f      	b.n	80029fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029de:	4a0a      	ldr	r2, [pc, #40]	; (8002a08 <SysTick_Config+0x40>)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029e6:	210f      	movs	r1, #15
 80029e8:	f04f 30ff 	mov.w	r0, #4294967295
 80029ec:	f7ff ff8e 	bl	800290c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029f0:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <SysTick_Config+0x40>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029f6:	4b04      	ldr	r3, [pc, #16]	; (8002a08 <SysTick_Config+0x40>)
 80029f8:	2207      	movs	r2, #7
 80029fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	e000e010 	.word	0xe000e010

08002a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7ff ff29 	bl	800286c <__NVIC_SetPriorityGrouping>
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b086      	sub	sp, #24
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	4603      	mov	r3, r0
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
 8002a2e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a30:	f7ff ff40 	bl	80028b4 <__NVIC_GetPriorityGrouping>
 8002a34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	68b9      	ldr	r1, [r7, #8]
 8002a3a:	6978      	ldr	r0, [r7, #20]
 8002a3c:	f7ff ff90 	bl	8002960 <NVIC_EncodePriority>
 8002a40:	4602      	mov	r2, r0
 8002a42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a46:	4611      	mov	r1, r2
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ff5f 	bl	800290c <__NVIC_SetPriority>
}
 8002a4e:	bf00      	nop
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff ff33 	bl	80028d0 <__NVIC_EnableIRQ>
}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b082      	sub	sp, #8
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff ffa4 	bl	80029c8 <SysTick_Config>
 8002a80:	4603      	mov	r3, r0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
	...

08002a8c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002a94:	f7ff fe9a 	bl	80027cc <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e316      	b.n	80030d2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a66      	ldr	r2, [pc, #408]	; (8002c44 <HAL_DMA_Init+0x1b8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d04a      	beq.n	8002b44 <HAL_DMA_Init+0xb8>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a65      	ldr	r2, [pc, #404]	; (8002c48 <HAL_DMA_Init+0x1bc>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d045      	beq.n	8002b44 <HAL_DMA_Init+0xb8>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a63      	ldr	r2, [pc, #396]	; (8002c4c <HAL_DMA_Init+0x1c0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d040      	beq.n	8002b44 <HAL_DMA_Init+0xb8>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a62      	ldr	r2, [pc, #392]	; (8002c50 <HAL_DMA_Init+0x1c4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d03b      	beq.n	8002b44 <HAL_DMA_Init+0xb8>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a60      	ldr	r2, [pc, #384]	; (8002c54 <HAL_DMA_Init+0x1c8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d036      	beq.n	8002b44 <HAL_DMA_Init+0xb8>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a5f      	ldr	r2, [pc, #380]	; (8002c58 <HAL_DMA_Init+0x1cc>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d031      	beq.n	8002b44 <HAL_DMA_Init+0xb8>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a5d      	ldr	r2, [pc, #372]	; (8002c5c <HAL_DMA_Init+0x1d0>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d02c      	beq.n	8002b44 <HAL_DMA_Init+0xb8>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a5c      	ldr	r2, [pc, #368]	; (8002c60 <HAL_DMA_Init+0x1d4>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d027      	beq.n	8002b44 <HAL_DMA_Init+0xb8>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a5a      	ldr	r2, [pc, #360]	; (8002c64 <HAL_DMA_Init+0x1d8>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d022      	beq.n	8002b44 <HAL_DMA_Init+0xb8>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a59      	ldr	r2, [pc, #356]	; (8002c68 <HAL_DMA_Init+0x1dc>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d01d      	beq.n	8002b44 <HAL_DMA_Init+0xb8>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a57      	ldr	r2, [pc, #348]	; (8002c6c <HAL_DMA_Init+0x1e0>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d018      	beq.n	8002b44 <HAL_DMA_Init+0xb8>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a56      	ldr	r2, [pc, #344]	; (8002c70 <HAL_DMA_Init+0x1e4>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d013      	beq.n	8002b44 <HAL_DMA_Init+0xb8>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a54      	ldr	r2, [pc, #336]	; (8002c74 <HAL_DMA_Init+0x1e8>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d00e      	beq.n	8002b44 <HAL_DMA_Init+0xb8>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a53      	ldr	r2, [pc, #332]	; (8002c78 <HAL_DMA_Init+0x1ec>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d009      	beq.n	8002b44 <HAL_DMA_Init+0xb8>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a51      	ldr	r2, [pc, #324]	; (8002c7c <HAL_DMA_Init+0x1f0>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d004      	beq.n	8002b44 <HAL_DMA_Init+0xb8>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a50      	ldr	r2, [pc, #320]	; (8002c80 <HAL_DMA_Init+0x1f4>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d101      	bne.n	8002b48 <HAL_DMA_Init+0xbc>
 8002b44:	2301      	movs	r3, #1
 8002b46:	e000      	b.n	8002b4a <HAL_DMA_Init+0xbe>
 8002b48:	2300      	movs	r3, #0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 813b 	beq.w	8002dc6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a37      	ldr	r2, [pc, #220]	; (8002c44 <HAL_DMA_Init+0x1b8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d04a      	beq.n	8002c00 <HAL_DMA_Init+0x174>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a36      	ldr	r2, [pc, #216]	; (8002c48 <HAL_DMA_Init+0x1bc>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d045      	beq.n	8002c00 <HAL_DMA_Init+0x174>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a34      	ldr	r2, [pc, #208]	; (8002c4c <HAL_DMA_Init+0x1c0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d040      	beq.n	8002c00 <HAL_DMA_Init+0x174>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a33      	ldr	r2, [pc, #204]	; (8002c50 <HAL_DMA_Init+0x1c4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d03b      	beq.n	8002c00 <HAL_DMA_Init+0x174>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a31      	ldr	r2, [pc, #196]	; (8002c54 <HAL_DMA_Init+0x1c8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d036      	beq.n	8002c00 <HAL_DMA_Init+0x174>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a30      	ldr	r2, [pc, #192]	; (8002c58 <HAL_DMA_Init+0x1cc>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d031      	beq.n	8002c00 <HAL_DMA_Init+0x174>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a2e      	ldr	r2, [pc, #184]	; (8002c5c <HAL_DMA_Init+0x1d0>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d02c      	beq.n	8002c00 <HAL_DMA_Init+0x174>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a2d      	ldr	r2, [pc, #180]	; (8002c60 <HAL_DMA_Init+0x1d4>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d027      	beq.n	8002c00 <HAL_DMA_Init+0x174>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a2b      	ldr	r2, [pc, #172]	; (8002c64 <HAL_DMA_Init+0x1d8>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d022      	beq.n	8002c00 <HAL_DMA_Init+0x174>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a2a      	ldr	r2, [pc, #168]	; (8002c68 <HAL_DMA_Init+0x1dc>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d01d      	beq.n	8002c00 <HAL_DMA_Init+0x174>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a28      	ldr	r2, [pc, #160]	; (8002c6c <HAL_DMA_Init+0x1e0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d018      	beq.n	8002c00 <HAL_DMA_Init+0x174>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a27      	ldr	r2, [pc, #156]	; (8002c70 <HAL_DMA_Init+0x1e4>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d013      	beq.n	8002c00 <HAL_DMA_Init+0x174>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a25      	ldr	r2, [pc, #148]	; (8002c74 <HAL_DMA_Init+0x1e8>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d00e      	beq.n	8002c00 <HAL_DMA_Init+0x174>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a24      	ldr	r2, [pc, #144]	; (8002c78 <HAL_DMA_Init+0x1ec>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d009      	beq.n	8002c00 <HAL_DMA_Init+0x174>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a22      	ldr	r2, [pc, #136]	; (8002c7c <HAL_DMA_Init+0x1f0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d004      	beq.n	8002c00 <HAL_DMA_Init+0x174>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a21      	ldr	r2, [pc, #132]	; (8002c80 <HAL_DMA_Init+0x1f4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d108      	bne.n	8002c12 <HAL_DMA_Init+0x186>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0201 	bic.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	e007      	b.n	8002c22 <HAL_DMA_Init+0x196>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0201 	bic.w	r2, r2, #1
 8002c20:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c22:	e02f      	b.n	8002c84 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c24:	f7ff fdd2 	bl	80027cc <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b05      	cmp	r3, #5
 8002c30:	d928      	bls.n	8002c84 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2220      	movs	r2, #32
 8002c36:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2203      	movs	r2, #3
 8002c3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e246      	b.n	80030d2 <HAL_DMA_Init+0x646>
 8002c44:	40020010 	.word	0x40020010
 8002c48:	40020028 	.word	0x40020028
 8002c4c:	40020040 	.word	0x40020040
 8002c50:	40020058 	.word	0x40020058
 8002c54:	40020070 	.word	0x40020070
 8002c58:	40020088 	.word	0x40020088
 8002c5c:	400200a0 	.word	0x400200a0
 8002c60:	400200b8 	.word	0x400200b8
 8002c64:	40020410 	.word	0x40020410
 8002c68:	40020428 	.word	0x40020428
 8002c6c:	40020440 	.word	0x40020440
 8002c70:	40020458 	.word	0x40020458
 8002c74:	40020470 	.word	0x40020470
 8002c78:	40020488 	.word	0x40020488
 8002c7c:	400204a0 	.word	0x400204a0
 8002c80:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1c8      	bne.n	8002c24 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	4b83      	ldr	r3, [pc, #524]	; (8002eac <HAL_DMA_Init+0x420>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002caa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cb6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cc2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	2b04      	cmp	r3, #4
 8002cd6:	d107      	bne.n	8002ce8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002ce8:	4b71      	ldr	r3, [pc, #452]	; (8002eb0 <HAL_DMA_Init+0x424>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	4b71      	ldr	r3, [pc, #452]	; (8002eb4 <HAL_DMA_Init+0x428>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cf4:	d328      	bcc.n	8002d48 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b28      	cmp	r3, #40	; 0x28
 8002cfc:	d903      	bls.n	8002d06 <HAL_DMA_Init+0x27a>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b2e      	cmp	r3, #46	; 0x2e
 8002d04:	d917      	bls.n	8002d36 <HAL_DMA_Init+0x2aa>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b3e      	cmp	r3, #62	; 0x3e
 8002d0c:	d903      	bls.n	8002d16 <HAL_DMA_Init+0x28a>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b42      	cmp	r3, #66	; 0x42
 8002d14:	d90f      	bls.n	8002d36 <HAL_DMA_Init+0x2aa>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b46      	cmp	r3, #70	; 0x46
 8002d1c:	d903      	bls.n	8002d26 <HAL_DMA_Init+0x29a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b48      	cmp	r3, #72	; 0x48
 8002d24:	d907      	bls.n	8002d36 <HAL_DMA_Init+0x2aa>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b4e      	cmp	r3, #78	; 0x4e
 8002d2c:	d905      	bls.n	8002d3a <HAL_DMA_Init+0x2ae>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b52      	cmp	r3, #82	; 0x52
 8002d34:	d801      	bhi.n	8002d3a <HAL_DMA_Init+0x2ae>
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <HAL_DMA_Init+0x2b0>
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d46:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	f023 0307 	bic.w	r3, r3, #7
 8002d5e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d117      	bne.n	8002da2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00e      	beq.n	8002da2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f002 f81f 	bl	8004dc8 <DMA_CheckFifoParam>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2240      	movs	r2, #64	; 0x40
 8002d94:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e197      	b.n	80030d2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f001 ff5a 	bl	8004c64 <DMA_CalcBaseAndBitshift>
 8002db0:	4603      	mov	r3, r0
 8002db2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db8:	f003 031f 	and.w	r3, r3, #31
 8002dbc:	223f      	movs	r2, #63	; 0x3f
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	e0cd      	b.n	8002f62 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a3b      	ldr	r2, [pc, #236]	; (8002eb8 <HAL_DMA_Init+0x42c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d022      	beq.n	8002e16 <HAL_DMA_Init+0x38a>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a39      	ldr	r2, [pc, #228]	; (8002ebc <HAL_DMA_Init+0x430>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d01d      	beq.n	8002e16 <HAL_DMA_Init+0x38a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a38      	ldr	r2, [pc, #224]	; (8002ec0 <HAL_DMA_Init+0x434>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d018      	beq.n	8002e16 <HAL_DMA_Init+0x38a>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a36      	ldr	r2, [pc, #216]	; (8002ec4 <HAL_DMA_Init+0x438>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d013      	beq.n	8002e16 <HAL_DMA_Init+0x38a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a35      	ldr	r2, [pc, #212]	; (8002ec8 <HAL_DMA_Init+0x43c>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d00e      	beq.n	8002e16 <HAL_DMA_Init+0x38a>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a33      	ldr	r2, [pc, #204]	; (8002ecc <HAL_DMA_Init+0x440>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d009      	beq.n	8002e16 <HAL_DMA_Init+0x38a>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a32      	ldr	r2, [pc, #200]	; (8002ed0 <HAL_DMA_Init+0x444>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d004      	beq.n	8002e16 <HAL_DMA_Init+0x38a>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a30      	ldr	r2, [pc, #192]	; (8002ed4 <HAL_DMA_Init+0x448>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d101      	bne.n	8002e1a <HAL_DMA_Init+0x38e>
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <HAL_DMA_Init+0x390>
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 8097 	beq.w	8002f50 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a24      	ldr	r2, [pc, #144]	; (8002eb8 <HAL_DMA_Init+0x42c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d021      	beq.n	8002e70 <HAL_DMA_Init+0x3e4>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a22      	ldr	r2, [pc, #136]	; (8002ebc <HAL_DMA_Init+0x430>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d01c      	beq.n	8002e70 <HAL_DMA_Init+0x3e4>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a21      	ldr	r2, [pc, #132]	; (8002ec0 <HAL_DMA_Init+0x434>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d017      	beq.n	8002e70 <HAL_DMA_Init+0x3e4>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a1f      	ldr	r2, [pc, #124]	; (8002ec4 <HAL_DMA_Init+0x438>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d012      	beq.n	8002e70 <HAL_DMA_Init+0x3e4>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a1e      	ldr	r2, [pc, #120]	; (8002ec8 <HAL_DMA_Init+0x43c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d00d      	beq.n	8002e70 <HAL_DMA_Init+0x3e4>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a1c      	ldr	r2, [pc, #112]	; (8002ecc <HAL_DMA_Init+0x440>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d008      	beq.n	8002e70 <HAL_DMA_Init+0x3e4>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a1b      	ldr	r2, [pc, #108]	; (8002ed0 <HAL_DMA_Init+0x444>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d003      	beq.n	8002e70 <HAL_DMA_Init+0x3e4>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a19      	ldr	r2, [pc, #100]	; (8002ed4 <HAL_DMA_Init+0x448>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2202      	movs	r2, #2
 8002e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	4b12      	ldr	r3, [pc, #72]	; (8002ed8 <HAL_DMA_Init+0x44c>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2b40      	cmp	r3, #64	; 0x40
 8002e98:	d020      	beq.n	8002edc <HAL_DMA_Init+0x450>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b80      	cmp	r3, #128	; 0x80
 8002ea0:	d102      	bne.n	8002ea8 <HAL_DMA_Init+0x41c>
 8002ea2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ea6:	e01a      	b.n	8002ede <HAL_DMA_Init+0x452>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	e018      	b.n	8002ede <HAL_DMA_Init+0x452>
 8002eac:	fe10803f 	.word	0xfe10803f
 8002eb0:	5c001000 	.word	0x5c001000
 8002eb4:	ffff0000 	.word	0xffff0000
 8002eb8:	58025408 	.word	0x58025408
 8002ebc:	5802541c 	.word	0x5802541c
 8002ec0:	58025430 	.word	0x58025430
 8002ec4:	58025444 	.word	0x58025444
 8002ec8:	58025458 	.word	0x58025458
 8002ecc:	5802546c 	.word	0x5802546c
 8002ed0:	58025480 	.word	0x58025480
 8002ed4:	58025494 	.word	0x58025494
 8002ed8:	fffe000f 	.word	0xfffe000f
 8002edc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	68d2      	ldr	r2, [r2, #12]
 8002ee2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ee4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002eec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002ef4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002efc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002f04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002f0c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	4b6e      	ldr	r3, [pc, #440]	; (80030dc <HAL_DMA_Init+0x650>)
 8002f24:	4413      	add	r3, r2
 8002f26:	4a6e      	ldr	r2, [pc, #440]	; (80030e0 <HAL_DMA_Init+0x654>)
 8002f28:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2c:	091b      	lsrs	r3, r3, #4
 8002f2e:	009a      	lsls	r2, r3, #2
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f001 fe95 	bl	8004c64 <DMA_CalcBaseAndBitshift>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f42:	f003 031f 	and.w	r3, r3, #31
 8002f46:	2201      	movs	r2, #1
 8002f48:	409a      	lsls	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	e008      	b.n	8002f62 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2240      	movs	r2, #64	; 0x40
 8002f54:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2203      	movs	r2, #3
 8002f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e0b7      	b.n	80030d2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a5f      	ldr	r2, [pc, #380]	; (80030e4 <HAL_DMA_Init+0x658>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d072      	beq.n	8003052 <HAL_DMA_Init+0x5c6>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a5d      	ldr	r2, [pc, #372]	; (80030e8 <HAL_DMA_Init+0x65c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d06d      	beq.n	8003052 <HAL_DMA_Init+0x5c6>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a5c      	ldr	r2, [pc, #368]	; (80030ec <HAL_DMA_Init+0x660>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d068      	beq.n	8003052 <HAL_DMA_Init+0x5c6>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a5a      	ldr	r2, [pc, #360]	; (80030f0 <HAL_DMA_Init+0x664>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d063      	beq.n	8003052 <HAL_DMA_Init+0x5c6>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a59      	ldr	r2, [pc, #356]	; (80030f4 <HAL_DMA_Init+0x668>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d05e      	beq.n	8003052 <HAL_DMA_Init+0x5c6>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a57      	ldr	r2, [pc, #348]	; (80030f8 <HAL_DMA_Init+0x66c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d059      	beq.n	8003052 <HAL_DMA_Init+0x5c6>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a56      	ldr	r2, [pc, #344]	; (80030fc <HAL_DMA_Init+0x670>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d054      	beq.n	8003052 <HAL_DMA_Init+0x5c6>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a54      	ldr	r2, [pc, #336]	; (8003100 <HAL_DMA_Init+0x674>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d04f      	beq.n	8003052 <HAL_DMA_Init+0x5c6>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a53      	ldr	r2, [pc, #332]	; (8003104 <HAL_DMA_Init+0x678>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d04a      	beq.n	8003052 <HAL_DMA_Init+0x5c6>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a51      	ldr	r2, [pc, #324]	; (8003108 <HAL_DMA_Init+0x67c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d045      	beq.n	8003052 <HAL_DMA_Init+0x5c6>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a50      	ldr	r2, [pc, #320]	; (800310c <HAL_DMA_Init+0x680>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d040      	beq.n	8003052 <HAL_DMA_Init+0x5c6>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a4e      	ldr	r2, [pc, #312]	; (8003110 <HAL_DMA_Init+0x684>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d03b      	beq.n	8003052 <HAL_DMA_Init+0x5c6>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a4d      	ldr	r2, [pc, #308]	; (8003114 <HAL_DMA_Init+0x688>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d036      	beq.n	8003052 <HAL_DMA_Init+0x5c6>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a4b      	ldr	r2, [pc, #300]	; (8003118 <HAL_DMA_Init+0x68c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d031      	beq.n	8003052 <HAL_DMA_Init+0x5c6>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a4a      	ldr	r2, [pc, #296]	; (800311c <HAL_DMA_Init+0x690>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d02c      	beq.n	8003052 <HAL_DMA_Init+0x5c6>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a48      	ldr	r2, [pc, #288]	; (8003120 <HAL_DMA_Init+0x694>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d027      	beq.n	8003052 <HAL_DMA_Init+0x5c6>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a47      	ldr	r2, [pc, #284]	; (8003124 <HAL_DMA_Init+0x698>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d022      	beq.n	8003052 <HAL_DMA_Init+0x5c6>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a45      	ldr	r2, [pc, #276]	; (8003128 <HAL_DMA_Init+0x69c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d01d      	beq.n	8003052 <HAL_DMA_Init+0x5c6>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a44      	ldr	r2, [pc, #272]	; (800312c <HAL_DMA_Init+0x6a0>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d018      	beq.n	8003052 <HAL_DMA_Init+0x5c6>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a42      	ldr	r2, [pc, #264]	; (8003130 <HAL_DMA_Init+0x6a4>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d013      	beq.n	8003052 <HAL_DMA_Init+0x5c6>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a41      	ldr	r2, [pc, #260]	; (8003134 <HAL_DMA_Init+0x6a8>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00e      	beq.n	8003052 <HAL_DMA_Init+0x5c6>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a3f      	ldr	r2, [pc, #252]	; (8003138 <HAL_DMA_Init+0x6ac>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d009      	beq.n	8003052 <HAL_DMA_Init+0x5c6>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a3e      	ldr	r2, [pc, #248]	; (800313c <HAL_DMA_Init+0x6b0>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d004      	beq.n	8003052 <HAL_DMA_Init+0x5c6>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a3c      	ldr	r2, [pc, #240]	; (8003140 <HAL_DMA_Init+0x6b4>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d101      	bne.n	8003056 <HAL_DMA_Init+0x5ca>
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <HAL_DMA_Init+0x5cc>
 8003056:	2300      	movs	r3, #0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d032      	beq.n	80030c2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f001 ff2f 	bl	8004ec0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2b80      	cmp	r3, #128	; 0x80
 8003068:	d102      	bne.n	8003070 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003078:	b2d2      	uxtb	r2, r2
 800307a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003084:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d010      	beq.n	80030b0 <HAL_DMA_Init+0x624>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b08      	cmp	r3, #8
 8003094:	d80c      	bhi.n	80030b0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f001 ffac 	bl	8004ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80030ac:	605a      	str	r2, [r3, #4]
 80030ae:	e008      	b.n	80030c2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	a7fdabf8 	.word	0xa7fdabf8
 80030e0:	cccccccd 	.word	0xcccccccd
 80030e4:	40020010 	.word	0x40020010
 80030e8:	40020028 	.word	0x40020028
 80030ec:	40020040 	.word	0x40020040
 80030f0:	40020058 	.word	0x40020058
 80030f4:	40020070 	.word	0x40020070
 80030f8:	40020088 	.word	0x40020088
 80030fc:	400200a0 	.word	0x400200a0
 8003100:	400200b8 	.word	0x400200b8
 8003104:	40020410 	.word	0x40020410
 8003108:	40020428 	.word	0x40020428
 800310c:	40020440 	.word	0x40020440
 8003110:	40020458 	.word	0x40020458
 8003114:	40020470 	.word	0x40020470
 8003118:	40020488 	.word	0x40020488
 800311c:	400204a0 	.word	0x400204a0
 8003120:	400204b8 	.word	0x400204b8
 8003124:	58025408 	.word	0x58025408
 8003128:	5802541c 	.word	0x5802541c
 800312c:	58025430 	.word	0x58025430
 8003130:	58025444 	.word	0x58025444
 8003134:	58025458 	.word	0x58025458
 8003138:	5802546c 	.word	0x5802546c
 800313c:	58025480 	.word	0x58025480
 8003140:	58025494 	.word	0x58025494

08003144 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
 8003150:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e226      	b.n	80035ae <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003166:	2b01      	cmp	r3, #1
 8003168:	d101      	bne.n	800316e <HAL_DMA_Start_IT+0x2a>
 800316a:	2302      	movs	r3, #2
 800316c:	e21f      	b.n	80035ae <HAL_DMA_Start_IT+0x46a>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b01      	cmp	r3, #1
 8003180:	f040 820a 	bne.w	8003598 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2202      	movs	r2, #2
 8003188:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a68      	ldr	r2, [pc, #416]	; (8003338 <HAL_DMA_Start_IT+0x1f4>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d04a      	beq.n	8003232 <HAL_DMA_Start_IT+0xee>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a66      	ldr	r2, [pc, #408]	; (800333c <HAL_DMA_Start_IT+0x1f8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d045      	beq.n	8003232 <HAL_DMA_Start_IT+0xee>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a65      	ldr	r2, [pc, #404]	; (8003340 <HAL_DMA_Start_IT+0x1fc>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d040      	beq.n	8003232 <HAL_DMA_Start_IT+0xee>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a63      	ldr	r2, [pc, #396]	; (8003344 <HAL_DMA_Start_IT+0x200>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d03b      	beq.n	8003232 <HAL_DMA_Start_IT+0xee>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a62      	ldr	r2, [pc, #392]	; (8003348 <HAL_DMA_Start_IT+0x204>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d036      	beq.n	8003232 <HAL_DMA_Start_IT+0xee>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a60      	ldr	r2, [pc, #384]	; (800334c <HAL_DMA_Start_IT+0x208>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d031      	beq.n	8003232 <HAL_DMA_Start_IT+0xee>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a5f      	ldr	r2, [pc, #380]	; (8003350 <HAL_DMA_Start_IT+0x20c>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d02c      	beq.n	8003232 <HAL_DMA_Start_IT+0xee>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a5d      	ldr	r2, [pc, #372]	; (8003354 <HAL_DMA_Start_IT+0x210>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d027      	beq.n	8003232 <HAL_DMA_Start_IT+0xee>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a5c      	ldr	r2, [pc, #368]	; (8003358 <HAL_DMA_Start_IT+0x214>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d022      	beq.n	8003232 <HAL_DMA_Start_IT+0xee>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a5a      	ldr	r2, [pc, #360]	; (800335c <HAL_DMA_Start_IT+0x218>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d01d      	beq.n	8003232 <HAL_DMA_Start_IT+0xee>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a59      	ldr	r2, [pc, #356]	; (8003360 <HAL_DMA_Start_IT+0x21c>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d018      	beq.n	8003232 <HAL_DMA_Start_IT+0xee>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a57      	ldr	r2, [pc, #348]	; (8003364 <HAL_DMA_Start_IT+0x220>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d013      	beq.n	8003232 <HAL_DMA_Start_IT+0xee>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a56      	ldr	r2, [pc, #344]	; (8003368 <HAL_DMA_Start_IT+0x224>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d00e      	beq.n	8003232 <HAL_DMA_Start_IT+0xee>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a54      	ldr	r2, [pc, #336]	; (800336c <HAL_DMA_Start_IT+0x228>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d009      	beq.n	8003232 <HAL_DMA_Start_IT+0xee>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a53      	ldr	r2, [pc, #332]	; (8003370 <HAL_DMA_Start_IT+0x22c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d004      	beq.n	8003232 <HAL_DMA_Start_IT+0xee>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a51      	ldr	r2, [pc, #324]	; (8003374 <HAL_DMA_Start_IT+0x230>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d108      	bne.n	8003244 <HAL_DMA_Start_IT+0x100>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 0201 	bic.w	r2, r2, #1
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	e007      	b.n	8003254 <HAL_DMA_Start_IT+0x110>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0201 	bic.w	r2, r2, #1
 8003252:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f001 fb56 	bl	800490c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a34      	ldr	r2, [pc, #208]	; (8003338 <HAL_DMA_Start_IT+0x1f4>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d04a      	beq.n	8003300 <HAL_DMA_Start_IT+0x1bc>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a33      	ldr	r2, [pc, #204]	; (800333c <HAL_DMA_Start_IT+0x1f8>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d045      	beq.n	8003300 <HAL_DMA_Start_IT+0x1bc>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a31      	ldr	r2, [pc, #196]	; (8003340 <HAL_DMA_Start_IT+0x1fc>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d040      	beq.n	8003300 <HAL_DMA_Start_IT+0x1bc>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a30      	ldr	r2, [pc, #192]	; (8003344 <HAL_DMA_Start_IT+0x200>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d03b      	beq.n	8003300 <HAL_DMA_Start_IT+0x1bc>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a2e      	ldr	r2, [pc, #184]	; (8003348 <HAL_DMA_Start_IT+0x204>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d036      	beq.n	8003300 <HAL_DMA_Start_IT+0x1bc>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a2d      	ldr	r2, [pc, #180]	; (800334c <HAL_DMA_Start_IT+0x208>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d031      	beq.n	8003300 <HAL_DMA_Start_IT+0x1bc>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a2b      	ldr	r2, [pc, #172]	; (8003350 <HAL_DMA_Start_IT+0x20c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d02c      	beq.n	8003300 <HAL_DMA_Start_IT+0x1bc>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a2a      	ldr	r2, [pc, #168]	; (8003354 <HAL_DMA_Start_IT+0x210>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d027      	beq.n	8003300 <HAL_DMA_Start_IT+0x1bc>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a28      	ldr	r2, [pc, #160]	; (8003358 <HAL_DMA_Start_IT+0x214>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d022      	beq.n	8003300 <HAL_DMA_Start_IT+0x1bc>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a27      	ldr	r2, [pc, #156]	; (800335c <HAL_DMA_Start_IT+0x218>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d01d      	beq.n	8003300 <HAL_DMA_Start_IT+0x1bc>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a25      	ldr	r2, [pc, #148]	; (8003360 <HAL_DMA_Start_IT+0x21c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d018      	beq.n	8003300 <HAL_DMA_Start_IT+0x1bc>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a24      	ldr	r2, [pc, #144]	; (8003364 <HAL_DMA_Start_IT+0x220>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d013      	beq.n	8003300 <HAL_DMA_Start_IT+0x1bc>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a22      	ldr	r2, [pc, #136]	; (8003368 <HAL_DMA_Start_IT+0x224>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d00e      	beq.n	8003300 <HAL_DMA_Start_IT+0x1bc>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a21      	ldr	r2, [pc, #132]	; (800336c <HAL_DMA_Start_IT+0x228>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d009      	beq.n	8003300 <HAL_DMA_Start_IT+0x1bc>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a1f      	ldr	r2, [pc, #124]	; (8003370 <HAL_DMA_Start_IT+0x22c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d004      	beq.n	8003300 <HAL_DMA_Start_IT+0x1bc>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a1e      	ldr	r2, [pc, #120]	; (8003374 <HAL_DMA_Start_IT+0x230>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d101      	bne.n	8003304 <HAL_DMA_Start_IT+0x1c0>
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <HAL_DMA_Start_IT+0x1c2>
 8003304:	2300      	movs	r3, #0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d036      	beq.n	8003378 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f023 021e 	bic.w	r2, r3, #30
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f042 0216 	orr.w	r2, r2, #22
 800331c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	2b00      	cmp	r3, #0
 8003324:	d03e      	beq.n	80033a4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0208 	orr.w	r2, r2, #8
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	e035      	b.n	80033a4 <HAL_DMA_Start_IT+0x260>
 8003338:	40020010 	.word	0x40020010
 800333c:	40020028 	.word	0x40020028
 8003340:	40020040 	.word	0x40020040
 8003344:	40020058 	.word	0x40020058
 8003348:	40020070 	.word	0x40020070
 800334c:	40020088 	.word	0x40020088
 8003350:	400200a0 	.word	0x400200a0
 8003354:	400200b8 	.word	0x400200b8
 8003358:	40020410 	.word	0x40020410
 800335c:	40020428 	.word	0x40020428
 8003360:	40020440 	.word	0x40020440
 8003364:	40020458 	.word	0x40020458
 8003368:	40020470 	.word	0x40020470
 800336c:	40020488 	.word	0x40020488
 8003370:	400204a0 	.word	0x400204a0
 8003374:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f023 020e 	bic.w	r2, r3, #14
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 020a 	orr.w	r2, r2, #10
 800338a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	2b00      	cmp	r3, #0
 8003392:	d007      	beq.n	80033a4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0204 	orr.w	r2, r2, #4
 80033a2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a83      	ldr	r2, [pc, #524]	; (80035b8 <HAL_DMA_Start_IT+0x474>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d072      	beq.n	8003494 <HAL_DMA_Start_IT+0x350>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a82      	ldr	r2, [pc, #520]	; (80035bc <HAL_DMA_Start_IT+0x478>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d06d      	beq.n	8003494 <HAL_DMA_Start_IT+0x350>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a80      	ldr	r2, [pc, #512]	; (80035c0 <HAL_DMA_Start_IT+0x47c>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d068      	beq.n	8003494 <HAL_DMA_Start_IT+0x350>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a7f      	ldr	r2, [pc, #508]	; (80035c4 <HAL_DMA_Start_IT+0x480>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d063      	beq.n	8003494 <HAL_DMA_Start_IT+0x350>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a7d      	ldr	r2, [pc, #500]	; (80035c8 <HAL_DMA_Start_IT+0x484>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d05e      	beq.n	8003494 <HAL_DMA_Start_IT+0x350>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a7c      	ldr	r2, [pc, #496]	; (80035cc <HAL_DMA_Start_IT+0x488>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d059      	beq.n	8003494 <HAL_DMA_Start_IT+0x350>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a7a      	ldr	r2, [pc, #488]	; (80035d0 <HAL_DMA_Start_IT+0x48c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d054      	beq.n	8003494 <HAL_DMA_Start_IT+0x350>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a79      	ldr	r2, [pc, #484]	; (80035d4 <HAL_DMA_Start_IT+0x490>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d04f      	beq.n	8003494 <HAL_DMA_Start_IT+0x350>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a77      	ldr	r2, [pc, #476]	; (80035d8 <HAL_DMA_Start_IT+0x494>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d04a      	beq.n	8003494 <HAL_DMA_Start_IT+0x350>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a76      	ldr	r2, [pc, #472]	; (80035dc <HAL_DMA_Start_IT+0x498>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d045      	beq.n	8003494 <HAL_DMA_Start_IT+0x350>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a74      	ldr	r2, [pc, #464]	; (80035e0 <HAL_DMA_Start_IT+0x49c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d040      	beq.n	8003494 <HAL_DMA_Start_IT+0x350>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a73      	ldr	r2, [pc, #460]	; (80035e4 <HAL_DMA_Start_IT+0x4a0>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d03b      	beq.n	8003494 <HAL_DMA_Start_IT+0x350>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a71      	ldr	r2, [pc, #452]	; (80035e8 <HAL_DMA_Start_IT+0x4a4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d036      	beq.n	8003494 <HAL_DMA_Start_IT+0x350>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a70      	ldr	r2, [pc, #448]	; (80035ec <HAL_DMA_Start_IT+0x4a8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d031      	beq.n	8003494 <HAL_DMA_Start_IT+0x350>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a6e      	ldr	r2, [pc, #440]	; (80035f0 <HAL_DMA_Start_IT+0x4ac>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d02c      	beq.n	8003494 <HAL_DMA_Start_IT+0x350>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a6d      	ldr	r2, [pc, #436]	; (80035f4 <HAL_DMA_Start_IT+0x4b0>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d027      	beq.n	8003494 <HAL_DMA_Start_IT+0x350>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a6b      	ldr	r2, [pc, #428]	; (80035f8 <HAL_DMA_Start_IT+0x4b4>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d022      	beq.n	8003494 <HAL_DMA_Start_IT+0x350>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a6a      	ldr	r2, [pc, #424]	; (80035fc <HAL_DMA_Start_IT+0x4b8>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d01d      	beq.n	8003494 <HAL_DMA_Start_IT+0x350>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a68      	ldr	r2, [pc, #416]	; (8003600 <HAL_DMA_Start_IT+0x4bc>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d018      	beq.n	8003494 <HAL_DMA_Start_IT+0x350>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a67      	ldr	r2, [pc, #412]	; (8003604 <HAL_DMA_Start_IT+0x4c0>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d013      	beq.n	8003494 <HAL_DMA_Start_IT+0x350>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a65      	ldr	r2, [pc, #404]	; (8003608 <HAL_DMA_Start_IT+0x4c4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d00e      	beq.n	8003494 <HAL_DMA_Start_IT+0x350>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a64      	ldr	r2, [pc, #400]	; (800360c <HAL_DMA_Start_IT+0x4c8>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d009      	beq.n	8003494 <HAL_DMA_Start_IT+0x350>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a62      	ldr	r2, [pc, #392]	; (8003610 <HAL_DMA_Start_IT+0x4cc>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d004      	beq.n	8003494 <HAL_DMA_Start_IT+0x350>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a61      	ldr	r2, [pc, #388]	; (8003614 <HAL_DMA_Start_IT+0x4d0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d101      	bne.n	8003498 <HAL_DMA_Start_IT+0x354>
 8003494:	2301      	movs	r3, #1
 8003496:	e000      	b.n	800349a <HAL_DMA_Start_IT+0x356>
 8003498:	2300      	movs	r3, #0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d01a      	beq.n	80034d4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d007      	beq.n	80034bc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034ba:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d007      	beq.n	80034d4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034d2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a37      	ldr	r2, [pc, #220]	; (80035b8 <HAL_DMA_Start_IT+0x474>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d04a      	beq.n	8003574 <HAL_DMA_Start_IT+0x430>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a36      	ldr	r2, [pc, #216]	; (80035bc <HAL_DMA_Start_IT+0x478>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d045      	beq.n	8003574 <HAL_DMA_Start_IT+0x430>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a34      	ldr	r2, [pc, #208]	; (80035c0 <HAL_DMA_Start_IT+0x47c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d040      	beq.n	8003574 <HAL_DMA_Start_IT+0x430>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a33      	ldr	r2, [pc, #204]	; (80035c4 <HAL_DMA_Start_IT+0x480>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d03b      	beq.n	8003574 <HAL_DMA_Start_IT+0x430>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a31      	ldr	r2, [pc, #196]	; (80035c8 <HAL_DMA_Start_IT+0x484>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d036      	beq.n	8003574 <HAL_DMA_Start_IT+0x430>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a30      	ldr	r2, [pc, #192]	; (80035cc <HAL_DMA_Start_IT+0x488>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d031      	beq.n	8003574 <HAL_DMA_Start_IT+0x430>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a2e      	ldr	r2, [pc, #184]	; (80035d0 <HAL_DMA_Start_IT+0x48c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d02c      	beq.n	8003574 <HAL_DMA_Start_IT+0x430>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a2d      	ldr	r2, [pc, #180]	; (80035d4 <HAL_DMA_Start_IT+0x490>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d027      	beq.n	8003574 <HAL_DMA_Start_IT+0x430>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a2b      	ldr	r2, [pc, #172]	; (80035d8 <HAL_DMA_Start_IT+0x494>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d022      	beq.n	8003574 <HAL_DMA_Start_IT+0x430>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a2a      	ldr	r2, [pc, #168]	; (80035dc <HAL_DMA_Start_IT+0x498>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d01d      	beq.n	8003574 <HAL_DMA_Start_IT+0x430>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a28      	ldr	r2, [pc, #160]	; (80035e0 <HAL_DMA_Start_IT+0x49c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d018      	beq.n	8003574 <HAL_DMA_Start_IT+0x430>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a27      	ldr	r2, [pc, #156]	; (80035e4 <HAL_DMA_Start_IT+0x4a0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d013      	beq.n	8003574 <HAL_DMA_Start_IT+0x430>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a25      	ldr	r2, [pc, #148]	; (80035e8 <HAL_DMA_Start_IT+0x4a4>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00e      	beq.n	8003574 <HAL_DMA_Start_IT+0x430>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a24      	ldr	r2, [pc, #144]	; (80035ec <HAL_DMA_Start_IT+0x4a8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d009      	beq.n	8003574 <HAL_DMA_Start_IT+0x430>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a22      	ldr	r2, [pc, #136]	; (80035f0 <HAL_DMA_Start_IT+0x4ac>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d004      	beq.n	8003574 <HAL_DMA_Start_IT+0x430>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a21      	ldr	r2, [pc, #132]	; (80035f4 <HAL_DMA_Start_IT+0x4b0>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d108      	bne.n	8003586 <HAL_DMA_Start_IT+0x442>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	e012      	b.n	80035ac <HAL_DMA_Start_IT+0x468>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0201 	orr.w	r2, r2, #1
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	e009      	b.n	80035ac <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800359e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80035ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3718      	adds	r7, #24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40020010 	.word	0x40020010
 80035bc:	40020028 	.word	0x40020028
 80035c0:	40020040 	.word	0x40020040
 80035c4:	40020058 	.word	0x40020058
 80035c8:	40020070 	.word	0x40020070
 80035cc:	40020088 	.word	0x40020088
 80035d0:	400200a0 	.word	0x400200a0
 80035d4:	400200b8 	.word	0x400200b8
 80035d8:	40020410 	.word	0x40020410
 80035dc:	40020428 	.word	0x40020428
 80035e0:	40020440 	.word	0x40020440
 80035e4:	40020458 	.word	0x40020458
 80035e8:	40020470 	.word	0x40020470
 80035ec:	40020488 	.word	0x40020488
 80035f0:	400204a0 	.word	0x400204a0
 80035f4:	400204b8 	.word	0x400204b8
 80035f8:	58025408 	.word	0x58025408
 80035fc:	5802541c 	.word	0x5802541c
 8003600:	58025430 	.word	0x58025430
 8003604:	58025444 	.word	0x58025444
 8003608:	58025458 	.word	0x58025458
 800360c:	5802546c 	.word	0x5802546c
 8003610:	58025480 	.word	0x58025480
 8003614:	58025494 	.word	0x58025494

08003618 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e205      	b.n	8003a36 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d004      	beq.n	8003640 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2280      	movs	r2, #128	; 0x80
 800363a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e1fa      	b.n	8003a36 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a8c      	ldr	r2, [pc, #560]	; (8003878 <HAL_DMA_Abort_IT+0x260>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d04a      	beq.n	80036e0 <HAL_DMA_Abort_IT+0xc8>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a8b      	ldr	r2, [pc, #556]	; (800387c <HAL_DMA_Abort_IT+0x264>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d045      	beq.n	80036e0 <HAL_DMA_Abort_IT+0xc8>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a89      	ldr	r2, [pc, #548]	; (8003880 <HAL_DMA_Abort_IT+0x268>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d040      	beq.n	80036e0 <HAL_DMA_Abort_IT+0xc8>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a88      	ldr	r2, [pc, #544]	; (8003884 <HAL_DMA_Abort_IT+0x26c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d03b      	beq.n	80036e0 <HAL_DMA_Abort_IT+0xc8>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a86      	ldr	r2, [pc, #536]	; (8003888 <HAL_DMA_Abort_IT+0x270>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d036      	beq.n	80036e0 <HAL_DMA_Abort_IT+0xc8>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a85      	ldr	r2, [pc, #532]	; (800388c <HAL_DMA_Abort_IT+0x274>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d031      	beq.n	80036e0 <HAL_DMA_Abort_IT+0xc8>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a83      	ldr	r2, [pc, #524]	; (8003890 <HAL_DMA_Abort_IT+0x278>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d02c      	beq.n	80036e0 <HAL_DMA_Abort_IT+0xc8>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a82      	ldr	r2, [pc, #520]	; (8003894 <HAL_DMA_Abort_IT+0x27c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d027      	beq.n	80036e0 <HAL_DMA_Abort_IT+0xc8>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a80      	ldr	r2, [pc, #512]	; (8003898 <HAL_DMA_Abort_IT+0x280>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d022      	beq.n	80036e0 <HAL_DMA_Abort_IT+0xc8>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a7f      	ldr	r2, [pc, #508]	; (800389c <HAL_DMA_Abort_IT+0x284>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d01d      	beq.n	80036e0 <HAL_DMA_Abort_IT+0xc8>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a7d      	ldr	r2, [pc, #500]	; (80038a0 <HAL_DMA_Abort_IT+0x288>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d018      	beq.n	80036e0 <HAL_DMA_Abort_IT+0xc8>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a7c      	ldr	r2, [pc, #496]	; (80038a4 <HAL_DMA_Abort_IT+0x28c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d013      	beq.n	80036e0 <HAL_DMA_Abort_IT+0xc8>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a7a      	ldr	r2, [pc, #488]	; (80038a8 <HAL_DMA_Abort_IT+0x290>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d00e      	beq.n	80036e0 <HAL_DMA_Abort_IT+0xc8>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a79      	ldr	r2, [pc, #484]	; (80038ac <HAL_DMA_Abort_IT+0x294>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d009      	beq.n	80036e0 <HAL_DMA_Abort_IT+0xc8>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a77      	ldr	r2, [pc, #476]	; (80038b0 <HAL_DMA_Abort_IT+0x298>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d004      	beq.n	80036e0 <HAL_DMA_Abort_IT+0xc8>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a76      	ldr	r2, [pc, #472]	; (80038b4 <HAL_DMA_Abort_IT+0x29c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d101      	bne.n	80036e4 <HAL_DMA_Abort_IT+0xcc>
 80036e0:	2301      	movs	r3, #1
 80036e2:	e000      	b.n	80036e6 <HAL_DMA_Abort_IT+0xce>
 80036e4:	2300      	movs	r3, #0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d065      	beq.n	80037b6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2204      	movs	r2, #4
 80036ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a60      	ldr	r2, [pc, #384]	; (8003878 <HAL_DMA_Abort_IT+0x260>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d04a      	beq.n	8003792 <HAL_DMA_Abort_IT+0x17a>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a5e      	ldr	r2, [pc, #376]	; (800387c <HAL_DMA_Abort_IT+0x264>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d045      	beq.n	8003792 <HAL_DMA_Abort_IT+0x17a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a5d      	ldr	r2, [pc, #372]	; (8003880 <HAL_DMA_Abort_IT+0x268>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d040      	beq.n	8003792 <HAL_DMA_Abort_IT+0x17a>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a5b      	ldr	r2, [pc, #364]	; (8003884 <HAL_DMA_Abort_IT+0x26c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d03b      	beq.n	8003792 <HAL_DMA_Abort_IT+0x17a>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a5a      	ldr	r2, [pc, #360]	; (8003888 <HAL_DMA_Abort_IT+0x270>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d036      	beq.n	8003792 <HAL_DMA_Abort_IT+0x17a>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a58      	ldr	r2, [pc, #352]	; (800388c <HAL_DMA_Abort_IT+0x274>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d031      	beq.n	8003792 <HAL_DMA_Abort_IT+0x17a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a57      	ldr	r2, [pc, #348]	; (8003890 <HAL_DMA_Abort_IT+0x278>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d02c      	beq.n	8003792 <HAL_DMA_Abort_IT+0x17a>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a55      	ldr	r2, [pc, #340]	; (8003894 <HAL_DMA_Abort_IT+0x27c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d027      	beq.n	8003792 <HAL_DMA_Abort_IT+0x17a>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a54      	ldr	r2, [pc, #336]	; (8003898 <HAL_DMA_Abort_IT+0x280>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d022      	beq.n	8003792 <HAL_DMA_Abort_IT+0x17a>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a52      	ldr	r2, [pc, #328]	; (800389c <HAL_DMA_Abort_IT+0x284>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d01d      	beq.n	8003792 <HAL_DMA_Abort_IT+0x17a>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a51      	ldr	r2, [pc, #324]	; (80038a0 <HAL_DMA_Abort_IT+0x288>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d018      	beq.n	8003792 <HAL_DMA_Abort_IT+0x17a>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a4f      	ldr	r2, [pc, #316]	; (80038a4 <HAL_DMA_Abort_IT+0x28c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d013      	beq.n	8003792 <HAL_DMA_Abort_IT+0x17a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a4e      	ldr	r2, [pc, #312]	; (80038a8 <HAL_DMA_Abort_IT+0x290>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d00e      	beq.n	8003792 <HAL_DMA_Abort_IT+0x17a>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a4c      	ldr	r2, [pc, #304]	; (80038ac <HAL_DMA_Abort_IT+0x294>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d009      	beq.n	8003792 <HAL_DMA_Abort_IT+0x17a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a4b      	ldr	r2, [pc, #300]	; (80038b0 <HAL_DMA_Abort_IT+0x298>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d004      	beq.n	8003792 <HAL_DMA_Abort_IT+0x17a>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a49      	ldr	r2, [pc, #292]	; (80038b4 <HAL_DMA_Abort_IT+0x29c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d108      	bne.n	80037a4 <HAL_DMA_Abort_IT+0x18c>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0201 	bic.w	r2, r2, #1
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	e147      	b.n	8003a34 <HAL_DMA_Abort_IT+0x41c>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	e13e      	b.n	8003a34 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 020e 	bic.w	r2, r2, #14
 80037c4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a2b      	ldr	r2, [pc, #172]	; (8003878 <HAL_DMA_Abort_IT+0x260>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d04a      	beq.n	8003866 <HAL_DMA_Abort_IT+0x24e>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a29      	ldr	r2, [pc, #164]	; (800387c <HAL_DMA_Abort_IT+0x264>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d045      	beq.n	8003866 <HAL_DMA_Abort_IT+0x24e>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a28      	ldr	r2, [pc, #160]	; (8003880 <HAL_DMA_Abort_IT+0x268>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d040      	beq.n	8003866 <HAL_DMA_Abort_IT+0x24e>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a26      	ldr	r2, [pc, #152]	; (8003884 <HAL_DMA_Abort_IT+0x26c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d03b      	beq.n	8003866 <HAL_DMA_Abort_IT+0x24e>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a25      	ldr	r2, [pc, #148]	; (8003888 <HAL_DMA_Abort_IT+0x270>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d036      	beq.n	8003866 <HAL_DMA_Abort_IT+0x24e>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a23      	ldr	r2, [pc, #140]	; (800388c <HAL_DMA_Abort_IT+0x274>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d031      	beq.n	8003866 <HAL_DMA_Abort_IT+0x24e>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a22      	ldr	r2, [pc, #136]	; (8003890 <HAL_DMA_Abort_IT+0x278>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d02c      	beq.n	8003866 <HAL_DMA_Abort_IT+0x24e>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a20      	ldr	r2, [pc, #128]	; (8003894 <HAL_DMA_Abort_IT+0x27c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d027      	beq.n	8003866 <HAL_DMA_Abort_IT+0x24e>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a1f      	ldr	r2, [pc, #124]	; (8003898 <HAL_DMA_Abort_IT+0x280>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d022      	beq.n	8003866 <HAL_DMA_Abort_IT+0x24e>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a1d      	ldr	r2, [pc, #116]	; (800389c <HAL_DMA_Abort_IT+0x284>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d01d      	beq.n	8003866 <HAL_DMA_Abort_IT+0x24e>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a1c      	ldr	r2, [pc, #112]	; (80038a0 <HAL_DMA_Abort_IT+0x288>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d018      	beq.n	8003866 <HAL_DMA_Abort_IT+0x24e>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a1a      	ldr	r2, [pc, #104]	; (80038a4 <HAL_DMA_Abort_IT+0x28c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d013      	beq.n	8003866 <HAL_DMA_Abort_IT+0x24e>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a19      	ldr	r2, [pc, #100]	; (80038a8 <HAL_DMA_Abort_IT+0x290>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d00e      	beq.n	8003866 <HAL_DMA_Abort_IT+0x24e>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a17      	ldr	r2, [pc, #92]	; (80038ac <HAL_DMA_Abort_IT+0x294>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d009      	beq.n	8003866 <HAL_DMA_Abort_IT+0x24e>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a16      	ldr	r2, [pc, #88]	; (80038b0 <HAL_DMA_Abort_IT+0x298>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d004      	beq.n	8003866 <HAL_DMA_Abort_IT+0x24e>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a14      	ldr	r2, [pc, #80]	; (80038b4 <HAL_DMA_Abort_IT+0x29c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d128      	bne.n	80038b8 <HAL_DMA_Abort_IT+0x2a0>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0201 	bic.w	r2, r2, #1
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	e027      	b.n	80038c8 <HAL_DMA_Abort_IT+0x2b0>
 8003878:	40020010 	.word	0x40020010
 800387c:	40020028 	.word	0x40020028
 8003880:	40020040 	.word	0x40020040
 8003884:	40020058 	.word	0x40020058
 8003888:	40020070 	.word	0x40020070
 800388c:	40020088 	.word	0x40020088
 8003890:	400200a0 	.word	0x400200a0
 8003894:	400200b8 	.word	0x400200b8
 8003898:	40020410 	.word	0x40020410
 800389c:	40020428 	.word	0x40020428
 80038a0:	40020440 	.word	0x40020440
 80038a4:	40020458 	.word	0x40020458
 80038a8:	40020470 	.word	0x40020470
 80038ac:	40020488 	.word	0x40020488
 80038b0:	400204a0 	.word	0x400204a0
 80038b4:	400204b8 	.word	0x400204b8
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0201 	bic.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a5c      	ldr	r2, [pc, #368]	; (8003a40 <HAL_DMA_Abort_IT+0x428>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d072      	beq.n	80039b8 <HAL_DMA_Abort_IT+0x3a0>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a5b      	ldr	r2, [pc, #364]	; (8003a44 <HAL_DMA_Abort_IT+0x42c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d06d      	beq.n	80039b8 <HAL_DMA_Abort_IT+0x3a0>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a59      	ldr	r2, [pc, #356]	; (8003a48 <HAL_DMA_Abort_IT+0x430>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d068      	beq.n	80039b8 <HAL_DMA_Abort_IT+0x3a0>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a58      	ldr	r2, [pc, #352]	; (8003a4c <HAL_DMA_Abort_IT+0x434>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d063      	beq.n	80039b8 <HAL_DMA_Abort_IT+0x3a0>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a56      	ldr	r2, [pc, #344]	; (8003a50 <HAL_DMA_Abort_IT+0x438>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d05e      	beq.n	80039b8 <HAL_DMA_Abort_IT+0x3a0>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a55      	ldr	r2, [pc, #340]	; (8003a54 <HAL_DMA_Abort_IT+0x43c>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d059      	beq.n	80039b8 <HAL_DMA_Abort_IT+0x3a0>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a53      	ldr	r2, [pc, #332]	; (8003a58 <HAL_DMA_Abort_IT+0x440>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d054      	beq.n	80039b8 <HAL_DMA_Abort_IT+0x3a0>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a52      	ldr	r2, [pc, #328]	; (8003a5c <HAL_DMA_Abort_IT+0x444>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d04f      	beq.n	80039b8 <HAL_DMA_Abort_IT+0x3a0>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a50      	ldr	r2, [pc, #320]	; (8003a60 <HAL_DMA_Abort_IT+0x448>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d04a      	beq.n	80039b8 <HAL_DMA_Abort_IT+0x3a0>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a4f      	ldr	r2, [pc, #316]	; (8003a64 <HAL_DMA_Abort_IT+0x44c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d045      	beq.n	80039b8 <HAL_DMA_Abort_IT+0x3a0>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a4d      	ldr	r2, [pc, #308]	; (8003a68 <HAL_DMA_Abort_IT+0x450>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d040      	beq.n	80039b8 <HAL_DMA_Abort_IT+0x3a0>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a4c      	ldr	r2, [pc, #304]	; (8003a6c <HAL_DMA_Abort_IT+0x454>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d03b      	beq.n	80039b8 <HAL_DMA_Abort_IT+0x3a0>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a4a      	ldr	r2, [pc, #296]	; (8003a70 <HAL_DMA_Abort_IT+0x458>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d036      	beq.n	80039b8 <HAL_DMA_Abort_IT+0x3a0>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a49      	ldr	r2, [pc, #292]	; (8003a74 <HAL_DMA_Abort_IT+0x45c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d031      	beq.n	80039b8 <HAL_DMA_Abort_IT+0x3a0>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a47      	ldr	r2, [pc, #284]	; (8003a78 <HAL_DMA_Abort_IT+0x460>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d02c      	beq.n	80039b8 <HAL_DMA_Abort_IT+0x3a0>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a46      	ldr	r2, [pc, #280]	; (8003a7c <HAL_DMA_Abort_IT+0x464>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d027      	beq.n	80039b8 <HAL_DMA_Abort_IT+0x3a0>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a44      	ldr	r2, [pc, #272]	; (8003a80 <HAL_DMA_Abort_IT+0x468>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d022      	beq.n	80039b8 <HAL_DMA_Abort_IT+0x3a0>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a43      	ldr	r2, [pc, #268]	; (8003a84 <HAL_DMA_Abort_IT+0x46c>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d01d      	beq.n	80039b8 <HAL_DMA_Abort_IT+0x3a0>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a41      	ldr	r2, [pc, #260]	; (8003a88 <HAL_DMA_Abort_IT+0x470>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d018      	beq.n	80039b8 <HAL_DMA_Abort_IT+0x3a0>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a40      	ldr	r2, [pc, #256]	; (8003a8c <HAL_DMA_Abort_IT+0x474>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d013      	beq.n	80039b8 <HAL_DMA_Abort_IT+0x3a0>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a3e      	ldr	r2, [pc, #248]	; (8003a90 <HAL_DMA_Abort_IT+0x478>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d00e      	beq.n	80039b8 <HAL_DMA_Abort_IT+0x3a0>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a3d      	ldr	r2, [pc, #244]	; (8003a94 <HAL_DMA_Abort_IT+0x47c>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d009      	beq.n	80039b8 <HAL_DMA_Abort_IT+0x3a0>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a3b      	ldr	r2, [pc, #236]	; (8003a98 <HAL_DMA_Abort_IT+0x480>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d004      	beq.n	80039b8 <HAL_DMA_Abort_IT+0x3a0>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a3a      	ldr	r2, [pc, #232]	; (8003a9c <HAL_DMA_Abort_IT+0x484>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d101      	bne.n	80039bc <HAL_DMA_Abort_IT+0x3a4>
 80039b8:	2301      	movs	r3, #1
 80039ba:	e000      	b.n	80039be <HAL_DMA_Abort_IT+0x3a6>
 80039bc:	2300      	movs	r3, #0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d028      	beq.n	8003a14 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039d0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039dc:	f003 031f 	and.w	r3, r3, #31
 80039e0:	2201      	movs	r2, #1
 80039e2:	409a      	lsls	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80039f0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00c      	beq.n	8003a14 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a08:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003a12:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40020010 	.word	0x40020010
 8003a44:	40020028 	.word	0x40020028
 8003a48:	40020040 	.word	0x40020040
 8003a4c:	40020058 	.word	0x40020058
 8003a50:	40020070 	.word	0x40020070
 8003a54:	40020088 	.word	0x40020088
 8003a58:	400200a0 	.word	0x400200a0
 8003a5c:	400200b8 	.word	0x400200b8
 8003a60:	40020410 	.word	0x40020410
 8003a64:	40020428 	.word	0x40020428
 8003a68:	40020440 	.word	0x40020440
 8003a6c:	40020458 	.word	0x40020458
 8003a70:	40020470 	.word	0x40020470
 8003a74:	40020488 	.word	0x40020488
 8003a78:	400204a0 	.word	0x400204a0
 8003a7c:	400204b8 	.word	0x400204b8
 8003a80:	58025408 	.word	0x58025408
 8003a84:	5802541c 	.word	0x5802541c
 8003a88:	58025430 	.word	0x58025430
 8003a8c:	58025444 	.word	0x58025444
 8003a90:	58025458 	.word	0x58025458
 8003a94:	5802546c 	.word	0x5802546c
 8003a98:	58025480 	.word	0x58025480
 8003a9c:	58025494 	.word	0x58025494

08003aa0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08a      	sub	sp, #40	; 0x28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003aac:	4b67      	ldr	r3, [pc, #412]	; (8003c4c <HAL_DMA_IRQHandler+0x1ac>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a67      	ldr	r2, [pc, #412]	; (8003c50 <HAL_DMA_IRQHandler+0x1b0>)
 8003ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab6:	0a9b      	lsrs	r3, r3, #10
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a5f      	ldr	r2, [pc, #380]	; (8003c54 <HAL_DMA_IRQHandler+0x1b4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d04a      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xd2>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a5d      	ldr	r2, [pc, #372]	; (8003c58 <HAL_DMA_IRQHandler+0x1b8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d045      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xd2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a5c      	ldr	r2, [pc, #368]	; (8003c5c <HAL_DMA_IRQHandler+0x1bc>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d040      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xd2>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a5a      	ldr	r2, [pc, #360]	; (8003c60 <HAL_DMA_IRQHandler+0x1c0>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d03b      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xd2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a59      	ldr	r2, [pc, #356]	; (8003c64 <HAL_DMA_IRQHandler+0x1c4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d036      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xd2>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a57      	ldr	r2, [pc, #348]	; (8003c68 <HAL_DMA_IRQHandler+0x1c8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d031      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xd2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a56      	ldr	r2, [pc, #344]	; (8003c6c <HAL_DMA_IRQHandler+0x1cc>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d02c      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xd2>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a54      	ldr	r2, [pc, #336]	; (8003c70 <HAL_DMA_IRQHandler+0x1d0>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d027      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xd2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a53      	ldr	r2, [pc, #332]	; (8003c74 <HAL_DMA_IRQHandler+0x1d4>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d022      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xd2>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a51      	ldr	r2, [pc, #324]	; (8003c78 <HAL_DMA_IRQHandler+0x1d8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d01d      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xd2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a50      	ldr	r2, [pc, #320]	; (8003c7c <HAL_DMA_IRQHandler+0x1dc>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d018      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xd2>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a4e      	ldr	r2, [pc, #312]	; (8003c80 <HAL_DMA_IRQHandler+0x1e0>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d013      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xd2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a4d      	ldr	r2, [pc, #308]	; (8003c84 <HAL_DMA_IRQHandler+0x1e4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d00e      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xd2>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a4b      	ldr	r2, [pc, #300]	; (8003c88 <HAL_DMA_IRQHandler+0x1e8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d009      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xd2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a4a      	ldr	r2, [pc, #296]	; (8003c8c <HAL_DMA_IRQHandler+0x1ec>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d004      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xd2>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a48      	ldr	r2, [pc, #288]	; (8003c90 <HAL_DMA_IRQHandler+0x1f0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d101      	bne.n	8003b76 <HAL_DMA_IRQHandler+0xd6>
 8003b72:	2301      	movs	r3, #1
 8003b74:	e000      	b.n	8003b78 <HAL_DMA_IRQHandler+0xd8>
 8003b76:	2300      	movs	r3, #0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 842b 	beq.w	80043d4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b82:	f003 031f 	and.w	r3, r3, #31
 8003b86:	2208      	movs	r2, #8
 8003b88:	409a      	lsls	r2, r3
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 80a2 	beq.w	8003cd8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a2e      	ldr	r2, [pc, #184]	; (8003c54 <HAL_DMA_IRQHandler+0x1b4>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d04a      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x194>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a2d      	ldr	r2, [pc, #180]	; (8003c58 <HAL_DMA_IRQHandler+0x1b8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d045      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x194>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a2b      	ldr	r2, [pc, #172]	; (8003c5c <HAL_DMA_IRQHandler+0x1bc>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d040      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x194>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a2a      	ldr	r2, [pc, #168]	; (8003c60 <HAL_DMA_IRQHandler+0x1c0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d03b      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x194>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a28      	ldr	r2, [pc, #160]	; (8003c64 <HAL_DMA_IRQHandler+0x1c4>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d036      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x194>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a27      	ldr	r2, [pc, #156]	; (8003c68 <HAL_DMA_IRQHandler+0x1c8>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d031      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x194>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a25      	ldr	r2, [pc, #148]	; (8003c6c <HAL_DMA_IRQHandler+0x1cc>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d02c      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x194>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a24      	ldr	r2, [pc, #144]	; (8003c70 <HAL_DMA_IRQHandler+0x1d0>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d027      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x194>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a22      	ldr	r2, [pc, #136]	; (8003c74 <HAL_DMA_IRQHandler+0x1d4>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d022      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x194>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a21      	ldr	r2, [pc, #132]	; (8003c78 <HAL_DMA_IRQHandler+0x1d8>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d01d      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x194>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a1f      	ldr	r2, [pc, #124]	; (8003c7c <HAL_DMA_IRQHandler+0x1dc>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d018      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x194>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a1e      	ldr	r2, [pc, #120]	; (8003c80 <HAL_DMA_IRQHandler+0x1e0>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d013      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x194>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a1c      	ldr	r2, [pc, #112]	; (8003c84 <HAL_DMA_IRQHandler+0x1e4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d00e      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x194>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a1b      	ldr	r2, [pc, #108]	; (8003c88 <HAL_DMA_IRQHandler+0x1e8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d009      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x194>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a19      	ldr	r2, [pc, #100]	; (8003c8c <HAL_DMA_IRQHandler+0x1ec>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d004      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x194>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a18      	ldr	r2, [pc, #96]	; (8003c90 <HAL_DMA_IRQHandler+0x1f0>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d12f      	bne.n	8003c94 <HAL_DMA_IRQHandler+0x1f4>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0304 	and.w	r3, r3, #4
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	bf14      	ite	ne
 8003c42:	2301      	movne	r3, #1
 8003c44:	2300      	moveq	r3, #0
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	e02e      	b.n	8003ca8 <HAL_DMA_IRQHandler+0x208>
 8003c4a:	bf00      	nop
 8003c4c:	24000000 	.word	0x24000000
 8003c50:	1b4e81b5 	.word	0x1b4e81b5
 8003c54:	40020010 	.word	0x40020010
 8003c58:	40020028 	.word	0x40020028
 8003c5c:	40020040 	.word	0x40020040
 8003c60:	40020058 	.word	0x40020058
 8003c64:	40020070 	.word	0x40020070
 8003c68:	40020088 	.word	0x40020088
 8003c6c:	400200a0 	.word	0x400200a0
 8003c70:	400200b8 	.word	0x400200b8
 8003c74:	40020410 	.word	0x40020410
 8003c78:	40020428 	.word	0x40020428
 8003c7c:	40020440 	.word	0x40020440
 8003c80:	40020458 	.word	0x40020458
 8003c84:	40020470 	.word	0x40020470
 8003c88:	40020488 	.word	0x40020488
 8003c8c:	400204a0 	.word	0x400204a0
 8003c90:	400204b8 	.word	0x400204b8
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0308 	and.w	r3, r3, #8
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	bf14      	ite	ne
 8003ca2:	2301      	movne	r3, #1
 8003ca4:	2300      	moveq	r3, #0
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d015      	beq.n	8003cd8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 0204 	bic.w	r2, r2, #4
 8003cba:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc0:	f003 031f 	and.w	r3, r3, #31
 8003cc4:	2208      	movs	r2, #8
 8003cc6:	409a      	lsls	r2, r3
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd0:	f043 0201 	orr.w	r2, r3, #1
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cdc:	f003 031f 	and.w	r3, r3, #31
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d06e      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a69      	ldr	r2, [pc, #420]	; (8003e98 <HAL_DMA_IRQHandler+0x3f8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d04a      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x2ee>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a67      	ldr	r2, [pc, #412]	; (8003e9c <HAL_DMA_IRQHandler+0x3fc>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d045      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x2ee>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a66      	ldr	r2, [pc, #408]	; (8003ea0 <HAL_DMA_IRQHandler+0x400>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d040      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x2ee>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a64      	ldr	r2, [pc, #400]	; (8003ea4 <HAL_DMA_IRQHandler+0x404>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d03b      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x2ee>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a63      	ldr	r2, [pc, #396]	; (8003ea8 <HAL_DMA_IRQHandler+0x408>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d036      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x2ee>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a61      	ldr	r2, [pc, #388]	; (8003eac <HAL_DMA_IRQHandler+0x40c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d031      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x2ee>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a60      	ldr	r2, [pc, #384]	; (8003eb0 <HAL_DMA_IRQHandler+0x410>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d02c      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x2ee>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a5e      	ldr	r2, [pc, #376]	; (8003eb4 <HAL_DMA_IRQHandler+0x414>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d027      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x2ee>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a5d      	ldr	r2, [pc, #372]	; (8003eb8 <HAL_DMA_IRQHandler+0x418>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d022      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x2ee>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a5b      	ldr	r2, [pc, #364]	; (8003ebc <HAL_DMA_IRQHandler+0x41c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d01d      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x2ee>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a5a      	ldr	r2, [pc, #360]	; (8003ec0 <HAL_DMA_IRQHandler+0x420>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d018      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x2ee>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a58      	ldr	r2, [pc, #352]	; (8003ec4 <HAL_DMA_IRQHandler+0x424>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d013      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x2ee>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a57      	ldr	r2, [pc, #348]	; (8003ec8 <HAL_DMA_IRQHandler+0x428>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00e      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x2ee>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a55      	ldr	r2, [pc, #340]	; (8003ecc <HAL_DMA_IRQHandler+0x42c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d009      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x2ee>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a54      	ldr	r2, [pc, #336]	; (8003ed0 <HAL_DMA_IRQHandler+0x430>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d004      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x2ee>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a52      	ldr	r2, [pc, #328]	; (8003ed4 <HAL_DMA_IRQHandler+0x434>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d10a      	bne.n	8003da4 <HAL_DMA_IRQHandler+0x304>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	bf14      	ite	ne
 8003d9c:	2301      	movne	r3, #1
 8003d9e:	2300      	moveq	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	e003      	b.n	8003dac <HAL_DMA_IRQHandler+0x30c>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2300      	movs	r3, #0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00d      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db4:	f003 031f 	and.w	r3, r3, #31
 8003db8:	2201      	movs	r2, #1
 8003dba:	409a      	lsls	r2, r3
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc4:	f043 0202 	orr.w	r2, r3, #2
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd0:	f003 031f 	and.w	r3, r3, #31
 8003dd4:	2204      	movs	r2, #4
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 808f 	beq.w	8003f00 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a2c      	ldr	r2, [pc, #176]	; (8003e98 <HAL_DMA_IRQHandler+0x3f8>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d04a      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x3e2>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a2a      	ldr	r2, [pc, #168]	; (8003e9c <HAL_DMA_IRQHandler+0x3fc>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d045      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x3e2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a29      	ldr	r2, [pc, #164]	; (8003ea0 <HAL_DMA_IRQHandler+0x400>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d040      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x3e2>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a27      	ldr	r2, [pc, #156]	; (8003ea4 <HAL_DMA_IRQHandler+0x404>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d03b      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x3e2>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a26      	ldr	r2, [pc, #152]	; (8003ea8 <HAL_DMA_IRQHandler+0x408>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d036      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x3e2>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a24      	ldr	r2, [pc, #144]	; (8003eac <HAL_DMA_IRQHandler+0x40c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d031      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x3e2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a23      	ldr	r2, [pc, #140]	; (8003eb0 <HAL_DMA_IRQHandler+0x410>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d02c      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x3e2>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a21      	ldr	r2, [pc, #132]	; (8003eb4 <HAL_DMA_IRQHandler+0x414>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d027      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x3e2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a20      	ldr	r2, [pc, #128]	; (8003eb8 <HAL_DMA_IRQHandler+0x418>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d022      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x3e2>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a1e      	ldr	r2, [pc, #120]	; (8003ebc <HAL_DMA_IRQHandler+0x41c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d01d      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x3e2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a1d      	ldr	r2, [pc, #116]	; (8003ec0 <HAL_DMA_IRQHandler+0x420>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d018      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x3e2>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a1b      	ldr	r2, [pc, #108]	; (8003ec4 <HAL_DMA_IRQHandler+0x424>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d013      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x3e2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a1a      	ldr	r2, [pc, #104]	; (8003ec8 <HAL_DMA_IRQHandler+0x428>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d00e      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x3e2>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a18      	ldr	r2, [pc, #96]	; (8003ecc <HAL_DMA_IRQHandler+0x42c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d009      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x3e2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a17      	ldr	r2, [pc, #92]	; (8003ed0 <HAL_DMA_IRQHandler+0x430>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d004      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x3e2>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a15      	ldr	r2, [pc, #84]	; (8003ed4 <HAL_DMA_IRQHandler+0x434>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d12a      	bne.n	8003ed8 <HAL_DMA_IRQHandler+0x438>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	bf14      	ite	ne
 8003e90:	2301      	movne	r3, #1
 8003e92:	2300      	moveq	r3, #0
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	e023      	b.n	8003ee0 <HAL_DMA_IRQHandler+0x440>
 8003e98:	40020010 	.word	0x40020010
 8003e9c:	40020028 	.word	0x40020028
 8003ea0:	40020040 	.word	0x40020040
 8003ea4:	40020058 	.word	0x40020058
 8003ea8:	40020070 	.word	0x40020070
 8003eac:	40020088 	.word	0x40020088
 8003eb0:	400200a0 	.word	0x400200a0
 8003eb4:	400200b8 	.word	0x400200b8
 8003eb8:	40020410 	.word	0x40020410
 8003ebc:	40020428 	.word	0x40020428
 8003ec0:	40020440 	.word	0x40020440
 8003ec4:	40020458 	.word	0x40020458
 8003ec8:	40020470 	.word	0x40020470
 8003ecc:	40020488 	.word	0x40020488
 8003ed0:	400204a0 	.word	0x400204a0
 8003ed4:	400204b8 	.word	0x400204b8
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2300      	movs	r3, #0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00d      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee8:	f003 031f 	and.w	r3, r3, #31
 8003eec:	2204      	movs	r2, #4
 8003eee:	409a      	lsls	r2, r3
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
 8003ef2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef8:	f043 0204 	orr.w	r2, r3, #4
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	2210      	movs	r2, #16
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 80a6 	beq.w	8004062 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a85      	ldr	r2, [pc, #532]	; (8004130 <HAL_DMA_IRQHandler+0x690>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d04a      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x516>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a83      	ldr	r2, [pc, #524]	; (8004134 <HAL_DMA_IRQHandler+0x694>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d045      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x516>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a82      	ldr	r2, [pc, #520]	; (8004138 <HAL_DMA_IRQHandler+0x698>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d040      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x516>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a80      	ldr	r2, [pc, #512]	; (800413c <HAL_DMA_IRQHandler+0x69c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d03b      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x516>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a7f      	ldr	r2, [pc, #508]	; (8004140 <HAL_DMA_IRQHandler+0x6a0>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d036      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x516>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a7d      	ldr	r2, [pc, #500]	; (8004144 <HAL_DMA_IRQHandler+0x6a4>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d031      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x516>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a7c      	ldr	r2, [pc, #496]	; (8004148 <HAL_DMA_IRQHandler+0x6a8>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d02c      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x516>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a7a      	ldr	r2, [pc, #488]	; (800414c <HAL_DMA_IRQHandler+0x6ac>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d027      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x516>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a79      	ldr	r2, [pc, #484]	; (8004150 <HAL_DMA_IRQHandler+0x6b0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d022      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x516>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a77      	ldr	r2, [pc, #476]	; (8004154 <HAL_DMA_IRQHandler+0x6b4>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d01d      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x516>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a76      	ldr	r2, [pc, #472]	; (8004158 <HAL_DMA_IRQHandler+0x6b8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d018      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x516>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a74      	ldr	r2, [pc, #464]	; (800415c <HAL_DMA_IRQHandler+0x6bc>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d013      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x516>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a73      	ldr	r2, [pc, #460]	; (8004160 <HAL_DMA_IRQHandler+0x6c0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d00e      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x516>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a71      	ldr	r2, [pc, #452]	; (8004164 <HAL_DMA_IRQHandler+0x6c4>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d009      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x516>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a70      	ldr	r2, [pc, #448]	; (8004168 <HAL_DMA_IRQHandler+0x6c8>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d004      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x516>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a6e      	ldr	r2, [pc, #440]	; (800416c <HAL_DMA_IRQHandler+0x6cc>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d10a      	bne.n	8003fcc <HAL_DMA_IRQHandler+0x52c>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	bf14      	ite	ne
 8003fc4:	2301      	movne	r3, #1
 8003fc6:	2300      	moveq	r3, #0
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	e009      	b.n	8003fe0 <HAL_DMA_IRQHandler+0x540>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0304 	and.w	r3, r3, #4
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	bf14      	ite	ne
 8003fda:	2301      	movne	r3, #1
 8003fdc:	2300      	moveq	r3, #0
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d03e      	beq.n	8004062 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe8:	f003 031f 	and.w	r3, r3, #31
 8003fec:	2210      	movs	r2, #16
 8003fee:	409a      	lsls	r2, r3
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d018      	beq.n	8004034 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d108      	bne.n	8004022 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004014:	2b00      	cmp	r3, #0
 8004016:	d024      	beq.n	8004062 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	4798      	blx	r3
 8004020:	e01f      	b.n	8004062 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004026:	2b00      	cmp	r3, #0
 8004028:	d01b      	beq.n	8004062 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	4798      	blx	r3
 8004032:	e016      	b.n	8004062 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403e:	2b00      	cmp	r3, #0
 8004040:	d107      	bne.n	8004052 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0208 	bic.w	r2, r2, #8
 8004050:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004066:	f003 031f 	and.w	r3, r3, #31
 800406a:	2220      	movs	r2, #32
 800406c:	409a      	lsls	r2, r3
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	4013      	ands	r3, r2
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 8110 	beq.w	8004298 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a2c      	ldr	r2, [pc, #176]	; (8004130 <HAL_DMA_IRQHandler+0x690>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d04a      	beq.n	8004118 <HAL_DMA_IRQHandler+0x678>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a2b      	ldr	r2, [pc, #172]	; (8004134 <HAL_DMA_IRQHandler+0x694>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d045      	beq.n	8004118 <HAL_DMA_IRQHandler+0x678>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a29      	ldr	r2, [pc, #164]	; (8004138 <HAL_DMA_IRQHandler+0x698>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d040      	beq.n	8004118 <HAL_DMA_IRQHandler+0x678>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a28      	ldr	r2, [pc, #160]	; (800413c <HAL_DMA_IRQHandler+0x69c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d03b      	beq.n	8004118 <HAL_DMA_IRQHandler+0x678>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a26      	ldr	r2, [pc, #152]	; (8004140 <HAL_DMA_IRQHandler+0x6a0>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d036      	beq.n	8004118 <HAL_DMA_IRQHandler+0x678>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a25      	ldr	r2, [pc, #148]	; (8004144 <HAL_DMA_IRQHandler+0x6a4>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d031      	beq.n	8004118 <HAL_DMA_IRQHandler+0x678>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a23      	ldr	r2, [pc, #140]	; (8004148 <HAL_DMA_IRQHandler+0x6a8>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d02c      	beq.n	8004118 <HAL_DMA_IRQHandler+0x678>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a22      	ldr	r2, [pc, #136]	; (800414c <HAL_DMA_IRQHandler+0x6ac>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d027      	beq.n	8004118 <HAL_DMA_IRQHandler+0x678>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a20      	ldr	r2, [pc, #128]	; (8004150 <HAL_DMA_IRQHandler+0x6b0>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d022      	beq.n	8004118 <HAL_DMA_IRQHandler+0x678>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a1f      	ldr	r2, [pc, #124]	; (8004154 <HAL_DMA_IRQHandler+0x6b4>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d01d      	beq.n	8004118 <HAL_DMA_IRQHandler+0x678>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a1d      	ldr	r2, [pc, #116]	; (8004158 <HAL_DMA_IRQHandler+0x6b8>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d018      	beq.n	8004118 <HAL_DMA_IRQHandler+0x678>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a1c      	ldr	r2, [pc, #112]	; (800415c <HAL_DMA_IRQHandler+0x6bc>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d013      	beq.n	8004118 <HAL_DMA_IRQHandler+0x678>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a1a      	ldr	r2, [pc, #104]	; (8004160 <HAL_DMA_IRQHandler+0x6c0>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d00e      	beq.n	8004118 <HAL_DMA_IRQHandler+0x678>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a19      	ldr	r2, [pc, #100]	; (8004164 <HAL_DMA_IRQHandler+0x6c4>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d009      	beq.n	8004118 <HAL_DMA_IRQHandler+0x678>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a17      	ldr	r2, [pc, #92]	; (8004168 <HAL_DMA_IRQHandler+0x6c8>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d004      	beq.n	8004118 <HAL_DMA_IRQHandler+0x678>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a16      	ldr	r2, [pc, #88]	; (800416c <HAL_DMA_IRQHandler+0x6cc>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d12b      	bne.n	8004170 <HAL_DMA_IRQHandler+0x6d0>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0310 	and.w	r3, r3, #16
 8004122:	2b00      	cmp	r3, #0
 8004124:	bf14      	ite	ne
 8004126:	2301      	movne	r3, #1
 8004128:	2300      	moveq	r3, #0
 800412a:	b2db      	uxtb	r3, r3
 800412c:	e02a      	b.n	8004184 <HAL_DMA_IRQHandler+0x6e4>
 800412e:	bf00      	nop
 8004130:	40020010 	.word	0x40020010
 8004134:	40020028 	.word	0x40020028
 8004138:	40020040 	.word	0x40020040
 800413c:	40020058 	.word	0x40020058
 8004140:	40020070 	.word	0x40020070
 8004144:	40020088 	.word	0x40020088
 8004148:	400200a0 	.word	0x400200a0
 800414c:	400200b8 	.word	0x400200b8
 8004150:	40020410 	.word	0x40020410
 8004154:	40020428 	.word	0x40020428
 8004158:	40020440 	.word	0x40020440
 800415c:	40020458 	.word	0x40020458
 8004160:	40020470 	.word	0x40020470
 8004164:	40020488 	.word	0x40020488
 8004168:	400204a0 	.word	0x400204a0
 800416c:	400204b8 	.word	0x400204b8
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	bf14      	ite	ne
 800417e:	2301      	movne	r3, #1
 8004180:	2300      	moveq	r3, #0
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	f000 8087 	beq.w	8004298 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418e:	f003 031f 	and.w	r3, r3, #31
 8004192:	2220      	movs	r2, #32
 8004194:	409a      	lsls	r2, r3
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d139      	bne.n	800421a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0216 	bic.w	r2, r2, #22
 80041b4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	695a      	ldr	r2, [r3, #20]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041c4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d103      	bne.n	80041d6 <HAL_DMA_IRQHandler+0x736>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d007      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0208 	bic.w	r2, r2, #8
 80041e4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ea:	f003 031f 	and.w	r3, r3, #31
 80041ee:	223f      	movs	r2, #63	; 0x3f
 80041f0:	409a      	lsls	r2, r3
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 834a 	beq.w	80048a4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	4798      	blx	r3
          }
          return;
 8004218:	e344      	b.n	80048a4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d018      	beq.n	800425a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d108      	bne.n	8004248 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423a:	2b00      	cmp	r3, #0
 800423c:	d02c      	beq.n	8004298 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	4798      	blx	r3
 8004246:	e027      	b.n	8004298 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424c:	2b00      	cmp	r3, #0
 800424e:	d023      	beq.n	8004298 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	4798      	blx	r3
 8004258:	e01e      	b.n	8004298 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10f      	bne.n	8004288 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0210 	bic.w	r2, r2, #16
 8004276:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 8306 	beq.w	80048ae <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 8088 	beq.w	80043c0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2204      	movs	r2, #4
 80042b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a7a      	ldr	r2, [pc, #488]	; (80044a8 <HAL_DMA_IRQHandler+0xa08>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d04a      	beq.n	8004358 <HAL_DMA_IRQHandler+0x8b8>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a79      	ldr	r2, [pc, #484]	; (80044ac <HAL_DMA_IRQHandler+0xa0c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d045      	beq.n	8004358 <HAL_DMA_IRQHandler+0x8b8>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a77      	ldr	r2, [pc, #476]	; (80044b0 <HAL_DMA_IRQHandler+0xa10>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d040      	beq.n	8004358 <HAL_DMA_IRQHandler+0x8b8>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a76      	ldr	r2, [pc, #472]	; (80044b4 <HAL_DMA_IRQHandler+0xa14>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d03b      	beq.n	8004358 <HAL_DMA_IRQHandler+0x8b8>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a74      	ldr	r2, [pc, #464]	; (80044b8 <HAL_DMA_IRQHandler+0xa18>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d036      	beq.n	8004358 <HAL_DMA_IRQHandler+0x8b8>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a73      	ldr	r2, [pc, #460]	; (80044bc <HAL_DMA_IRQHandler+0xa1c>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d031      	beq.n	8004358 <HAL_DMA_IRQHandler+0x8b8>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a71      	ldr	r2, [pc, #452]	; (80044c0 <HAL_DMA_IRQHandler+0xa20>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d02c      	beq.n	8004358 <HAL_DMA_IRQHandler+0x8b8>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a70      	ldr	r2, [pc, #448]	; (80044c4 <HAL_DMA_IRQHandler+0xa24>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d027      	beq.n	8004358 <HAL_DMA_IRQHandler+0x8b8>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a6e      	ldr	r2, [pc, #440]	; (80044c8 <HAL_DMA_IRQHandler+0xa28>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d022      	beq.n	8004358 <HAL_DMA_IRQHandler+0x8b8>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a6d      	ldr	r2, [pc, #436]	; (80044cc <HAL_DMA_IRQHandler+0xa2c>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d01d      	beq.n	8004358 <HAL_DMA_IRQHandler+0x8b8>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a6b      	ldr	r2, [pc, #428]	; (80044d0 <HAL_DMA_IRQHandler+0xa30>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d018      	beq.n	8004358 <HAL_DMA_IRQHandler+0x8b8>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a6a      	ldr	r2, [pc, #424]	; (80044d4 <HAL_DMA_IRQHandler+0xa34>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d013      	beq.n	8004358 <HAL_DMA_IRQHandler+0x8b8>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a68      	ldr	r2, [pc, #416]	; (80044d8 <HAL_DMA_IRQHandler+0xa38>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d00e      	beq.n	8004358 <HAL_DMA_IRQHandler+0x8b8>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a67      	ldr	r2, [pc, #412]	; (80044dc <HAL_DMA_IRQHandler+0xa3c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d009      	beq.n	8004358 <HAL_DMA_IRQHandler+0x8b8>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a65      	ldr	r2, [pc, #404]	; (80044e0 <HAL_DMA_IRQHandler+0xa40>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d004      	beq.n	8004358 <HAL_DMA_IRQHandler+0x8b8>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a64      	ldr	r2, [pc, #400]	; (80044e4 <HAL_DMA_IRQHandler+0xa44>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d108      	bne.n	800436a <HAL_DMA_IRQHandler+0x8ca>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 0201 	bic.w	r2, r2, #1
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	e007      	b.n	800437a <HAL_DMA_IRQHandler+0x8da>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0201 	bic.w	r2, r2, #1
 8004378:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	3301      	adds	r3, #1
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004382:	429a      	cmp	r2, r3
 8004384:	d307      	bcc.n	8004396 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1f2      	bne.n	800437a <HAL_DMA_IRQHandler+0x8da>
 8004394:	e000      	b.n	8004398 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004396:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d004      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2203      	movs	r2, #3
 80043aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80043ae:	e003      	b.n	80043b8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 8272 	beq.w	80048ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	4798      	blx	r3
 80043d2:	e26c      	b.n	80048ae <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a43      	ldr	r2, [pc, #268]	; (80044e8 <HAL_DMA_IRQHandler+0xa48>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d022      	beq.n	8004424 <HAL_DMA_IRQHandler+0x984>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a42      	ldr	r2, [pc, #264]	; (80044ec <HAL_DMA_IRQHandler+0xa4c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d01d      	beq.n	8004424 <HAL_DMA_IRQHandler+0x984>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a40      	ldr	r2, [pc, #256]	; (80044f0 <HAL_DMA_IRQHandler+0xa50>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d018      	beq.n	8004424 <HAL_DMA_IRQHandler+0x984>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a3f      	ldr	r2, [pc, #252]	; (80044f4 <HAL_DMA_IRQHandler+0xa54>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d013      	beq.n	8004424 <HAL_DMA_IRQHandler+0x984>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a3d      	ldr	r2, [pc, #244]	; (80044f8 <HAL_DMA_IRQHandler+0xa58>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d00e      	beq.n	8004424 <HAL_DMA_IRQHandler+0x984>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a3c      	ldr	r2, [pc, #240]	; (80044fc <HAL_DMA_IRQHandler+0xa5c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d009      	beq.n	8004424 <HAL_DMA_IRQHandler+0x984>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a3a      	ldr	r2, [pc, #232]	; (8004500 <HAL_DMA_IRQHandler+0xa60>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d004      	beq.n	8004424 <HAL_DMA_IRQHandler+0x984>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a39      	ldr	r2, [pc, #228]	; (8004504 <HAL_DMA_IRQHandler+0xa64>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d101      	bne.n	8004428 <HAL_DMA_IRQHandler+0x988>
 8004424:	2301      	movs	r3, #1
 8004426:	e000      	b.n	800442a <HAL_DMA_IRQHandler+0x98a>
 8004428:	2300      	movs	r3, #0
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 823f 	beq.w	80048ae <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800443c:	f003 031f 	and.w	r3, r3, #31
 8004440:	2204      	movs	r2, #4
 8004442:	409a      	lsls	r2, r3
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	4013      	ands	r3, r2
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 80cd 	beq.w	80045e8 <HAL_DMA_IRQHandler+0xb48>
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	f003 0304 	and.w	r3, r3, #4
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 80c7 	beq.w	80045e8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800445e:	f003 031f 	and.w	r3, r3, #31
 8004462:	2204      	movs	r2, #4
 8004464:	409a      	lsls	r2, r3
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d049      	beq.n	8004508 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d109      	bne.n	8004492 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 8210 	beq.w	80048a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004490:	e20a      	b.n	80048a8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 8206 	beq.w	80048a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044a4:	e200      	b.n	80048a8 <HAL_DMA_IRQHandler+0xe08>
 80044a6:	bf00      	nop
 80044a8:	40020010 	.word	0x40020010
 80044ac:	40020028 	.word	0x40020028
 80044b0:	40020040 	.word	0x40020040
 80044b4:	40020058 	.word	0x40020058
 80044b8:	40020070 	.word	0x40020070
 80044bc:	40020088 	.word	0x40020088
 80044c0:	400200a0 	.word	0x400200a0
 80044c4:	400200b8 	.word	0x400200b8
 80044c8:	40020410 	.word	0x40020410
 80044cc:	40020428 	.word	0x40020428
 80044d0:	40020440 	.word	0x40020440
 80044d4:	40020458 	.word	0x40020458
 80044d8:	40020470 	.word	0x40020470
 80044dc:	40020488 	.word	0x40020488
 80044e0:	400204a0 	.word	0x400204a0
 80044e4:	400204b8 	.word	0x400204b8
 80044e8:	58025408 	.word	0x58025408
 80044ec:	5802541c 	.word	0x5802541c
 80044f0:	58025430 	.word	0x58025430
 80044f4:	58025444 	.word	0x58025444
 80044f8:	58025458 	.word	0x58025458
 80044fc:	5802546c 	.word	0x5802546c
 8004500:	58025480 	.word	0x58025480
 8004504:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	f003 0320 	and.w	r3, r3, #32
 800450e:	2b00      	cmp	r3, #0
 8004510:	d160      	bne.n	80045d4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a8c      	ldr	r2, [pc, #560]	; (8004748 <HAL_DMA_IRQHandler+0xca8>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d04a      	beq.n	80045b2 <HAL_DMA_IRQHandler+0xb12>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a8a      	ldr	r2, [pc, #552]	; (800474c <HAL_DMA_IRQHandler+0xcac>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d045      	beq.n	80045b2 <HAL_DMA_IRQHandler+0xb12>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a89      	ldr	r2, [pc, #548]	; (8004750 <HAL_DMA_IRQHandler+0xcb0>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d040      	beq.n	80045b2 <HAL_DMA_IRQHandler+0xb12>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a87      	ldr	r2, [pc, #540]	; (8004754 <HAL_DMA_IRQHandler+0xcb4>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d03b      	beq.n	80045b2 <HAL_DMA_IRQHandler+0xb12>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a86      	ldr	r2, [pc, #536]	; (8004758 <HAL_DMA_IRQHandler+0xcb8>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d036      	beq.n	80045b2 <HAL_DMA_IRQHandler+0xb12>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a84      	ldr	r2, [pc, #528]	; (800475c <HAL_DMA_IRQHandler+0xcbc>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d031      	beq.n	80045b2 <HAL_DMA_IRQHandler+0xb12>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a83      	ldr	r2, [pc, #524]	; (8004760 <HAL_DMA_IRQHandler+0xcc0>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d02c      	beq.n	80045b2 <HAL_DMA_IRQHandler+0xb12>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a81      	ldr	r2, [pc, #516]	; (8004764 <HAL_DMA_IRQHandler+0xcc4>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d027      	beq.n	80045b2 <HAL_DMA_IRQHandler+0xb12>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a80      	ldr	r2, [pc, #512]	; (8004768 <HAL_DMA_IRQHandler+0xcc8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d022      	beq.n	80045b2 <HAL_DMA_IRQHandler+0xb12>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a7e      	ldr	r2, [pc, #504]	; (800476c <HAL_DMA_IRQHandler+0xccc>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d01d      	beq.n	80045b2 <HAL_DMA_IRQHandler+0xb12>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a7d      	ldr	r2, [pc, #500]	; (8004770 <HAL_DMA_IRQHandler+0xcd0>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d018      	beq.n	80045b2 <HAL_DMA_IRQHandler+0xb12>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a7b      	ldr	r2, [pc, #492]	; (8004774 <HAL_DMA_IRQHandler+0xcd4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d013      	beq.n	80045b2 <HAL_DMA_IRQHandler+0xb12>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a7a      	ldr	r2, [pc, #488]	; (8004778 <HAL_DMA_IRQHandler+0xcd8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d00e      	beq.n	80045b2 <HAL_DMA_IRQHandler+0xb12>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a78      	ldr	r2, [pc, #480]	; (800477c <HAL_DMA_IRQHandler+0xcdc>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d009      	beq.n	80045b2 <HAL_DMA_IRQHandler+0xb12>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a77      	ldr	r2, [pc, #476]	; (8004780 <HAL_DMA_IRQHandler+0xce0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d004      	beq.n	80045b2 <HAL_DMA_IRQHandler+0xb12>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a75      	ldr	r2, [pc, #468]	; (8004784 <HAL_DMA_IRQHandler+0xce4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d108      	bne.n	80045c4 <HAL_DMA_IRQHandler+0xb24>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 0208 	bic.w	r2, r2, #8
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	e007      	b.n	80045d4 <HAL_DMA_IRQHandler+0xb34>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0204 	bic.w	r2, r2, #4
 80045d2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 8165 	beq.w	80048a8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045e6:	e15f      	b.n	80048a8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ec:	f003 031f 	and.w	r3, r3, #31
 80045f0:	2202      	movs	r2, #2
 80045f2:	409a      	lsls	r2, r3
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	4013      	ands	r3, r2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 80c5 	beq.w	8004788 <HAL_DMA_IRQHandler+0xce8>
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 80bf 	beq.w	8004788 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800460e:	f003 031f 	and.w	r3, r3, #31
 8004612:	2202      	movs	r2, #2
 8004614:	409a      	lsls	r2, r3
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d018      	beq.n	8004656 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d109      	bne.n	8004642 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 813a 	beq.w	80048ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004640:	e134      	b.n	80048ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 8130 	beq.w	80048ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004654:	e12a      	b.n	80048ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f003 0320 	and.w	r3, r3, #32
 800465c:	2b00      	cmp	r3, #0
 800465e:	d168      	bne.n	8004732 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a38      	ldr	r2, [pc, #224]	; (8004748 <HAL_DMA_IRQHandler+0xca8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d04a      	beq.n	8004700 <HAL_DMA_IRQHandler+0xc60>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a37      	ldr	r2, [pc, #220]	; (800474c <HAL_DMA_IRQHandler+0xcac>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d045      	beq.n	8004700 <HAL_DMA_IRQHandler+0xc60>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a35      	ldr	r2, [pc, #212]	; (8004750 <HAL_DMA_IRQHandler+0xcb0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d040      	beq.n	8004700 <HAL_DMA_IRQHandler+0xc60>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a34      	ldr	r2, [pc, #208]	; (8004754 <HAL_DMA_IRQHandler+0xcb4>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d03b      	beq.n	8004700 <HAL_DMA_IRQHandler+0xc60>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a32      	ldr	r2, [pc, #200]	; (8004758 <HAL_DMA_IRQHandler+0xcb8>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d036      	beq.n	8004700 <HAL_DMA_IRQHandler+0xc60>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a31      	ldr	r2, [pc, #196]	; (800475c <HAL_DMA_IRQHandler+0xcbc>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d031      	beq.n	8004700 <HAL_DMA_IRQHandler+0xc60>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a2f      	ldr	r2, [pc, #188]	; (8004760 <HAL_DMA_IRQHandler+0xcc0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d02c      	beq.n	8004700 <HAL_DMA_IRQHandler+0xc60>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a2e      	ldr	r2, [pc, #184]	; (8004764 <HAL_DMA_IRQHandler+0xcc4>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d027      	beq.n	8004700 <HAL_DMA_IRQHandler+0xc60>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a2c      	ldr	r2, [pc, #176]	; (8004768 <HAL_DMA_IRQHandler+0xcc8>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d022      	beq.n	8004700 <HAL_DMA_IRQHandler+0xc60>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a2b      	ldr	r2, [pc, #172]	; (800476c <HAL_DMA_IRQHandler+0xccc>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d01d      	beq.n	8004700 <HAL_DMA_IRQHandler+0xc60>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a29      	ldr	r2, [pc, #164]	; (8004770 <HAL_DMA_IRQHandler+0xcd0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d018      	beq.n	8004700 <HAL_DMA_IRQHandler+0xc60>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a28      	ldr	r2, [pc, #160]	; (8004774 <HAL_DMA_IRQHandler+0xcd4>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d013      	beq.n	8004700 <HAL_DMA_IRQHandler+0xc60>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a26      	ldr	r2, [pc, #152]	; (8004778 <HAL_DMA_IRQHandler+0xcd8>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d00e      	beq.n	8004700 <HAL_DMA_IRQHandler+0xc60>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a25      	ldr	r2, [pc, #148]	; (800477c <HAL_DMA_IRQHandler+0xcdc>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d009      	beq.n	8004700 <HAL_DMA_IRQHandler+0xc60>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a23      	ldr	r2, [pc, #140]	; (8004780 <HAL_DMA_IRQHandler+0xce0>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d004      	beq.n	8004700 <HAL_DMA_IRQHandler+0xc60>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a22      	ldr	r2, [pc, #136]	; (8004784 <HAL_DMA_IRQHandler+0xce4>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d108      	bne.n	8004712 <HAL_DMA_IRQHandler+0xc72>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0214 	bic.w	r2, r2, #20
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	e007      	b.n	8004722 <HAL_DMA_IRQHandler+0xc82>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 020a 	bic.w	r2, r2, #10
 8004720:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 80b8 	beq.w	80048ac <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004744:	e0b2      	b.n	80048ac <HAL_DMA_IRQHandler+0xe0c>
 8004746:	bf00      	nop
 8004748:	40020010 	.word	0x40020010
 800474c:	40020028 	.word	0x40020028
 8004750:	40020040 	.word	0x40020040
 8004754:	40020058 	.word	0x40020058
 8004758:	40020070 	.word	0x40020070
 800475c:	40020088 	.word	0x40020088
 8004760:	400200a0 	.word	0x400200a0
 8004764:	400200b8 	.word	0x400200b8
 8004768:	40020410 	.word	0x40020410
 800476c:	40020428 	.word	0x40020428
 8004770:	40020440 	.word	0x40020440
 8004774:	40020458 	.word	0x40020458
 8004778:	40020470 	.word	0x40020470
 800477c:	40020488 	.word	0x40020488
 8004780:	400204a0 	.word	0x400204a0
 8004784:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800478c:	f003 031f 	and.w	r3, r3, #31
 8004790:	2208      	movs	r2, #8
 8004792:	409a      	lsls	r2, r3
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	4013      	ands	r3, r2
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 8088 	beq.w	80048ae <HAL_DMA_IRQHandler+0xe0e>
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	f003 0308 	and.w	r3, r3, #8
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 8082 	beq.w	80048ae <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a41      	ldr	r2, [pc, #260]	; (80048b4 <HAL_DMA_IRQHandler+0xe14>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d04a      	beq.n	800484a <HAL_DMA_IRQHandler+0xdaa>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a3f      	ldr	r2, [pc, #252]	; (80048b8 <HAL_DMA_IRQHandler+0xe18>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d045      	beq.n	800484a <HAL_DMA_IRQHandler+0xdaa>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a3e      	ldr	r2, [pc, #248]	; (80048bc <HAL_DMA_IRQHandler+0xe1c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d040      	beq.n	800484a <HAL_DMA_IRQHandler+0xdaa>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a3c      	ldr	r2, [pc, #240]	; (80048c0 <HAL_DMA_IRQHandler+0xe20>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d03b      	beq.n	800484a <HAL_DMA_IRQHandler+0xdaa>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a3b      	ldr	r2, [pc, #236]	; (80048c4 <HAL_DMA_IRQHandler+0xe24>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d036      	beq.n	800484a <HAL_DMA_IRQHandler+0xdaa>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a39      	ldr	r2, [pc, #228]	; (80048c8 <HAL_DMA_IRQHandler+0xe28>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d031      	beq.n	800484a <HAL_DMA_IRQHandler+0xdaa>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a38      	ldr	r2, [pc, #224]	; (80048cc <HAL_DMA_IRQHandler+0xe2c>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d02c      	beq.n	800484a <HAL_DMA_IRQHandler+0xdaa>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a36      	ldr	r2, [pc, #216]	; (80048d0 <HAL_DMA_IRQHandler+0xe30>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d027      	beq.n	800484a <HAL_DMA_IRQHandler+0xdaa>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a35      	ldr	r2, [pc, #212]	; (80048d4 <HAL_DMA_IRQHandler+0xe34>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d022      	beq.n	800484a <HAL_DMA_IRQHandler+0xdaa>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a33      	ldr	r2, [pc, #204]	; (80048d8 <HAL_DMA_IRQHandler+0xe38>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d01d      	beq.n	800484a <HAL_DMA_IRQHandler+0xdaa>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a32      	ldr	r2, [pc, #200]	; (80048dc <HAL_DMA_IRQHandler+0xe3c>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d018      	beq.n	800484a <HAL_DMA_IRQHandler+0xdaa>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a30      	ldr	r2, [pc, #192]	; (80048e0 <HAL_DMA_IRQHandler+0xe40>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d013      	beq.n	800484a <HAL_DMA_IRQHandler+0xdaa>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a2f      	ldr	r2, [pc, #188]	; (80048e4 <HAL_DMA_IRQHandler+0xe44>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d00e      	beq.n	800484a <HAL_DMA_IRQHandler+0xdaa>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a2d      	ldr	r2, [pc, #180]	; (80048e8 <HAL_DMA_IRQHandler+0xe48>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d009      	beq.n	800484a <HAL_DMA_IRQHandler+0xdaa>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a2c      	ldr	r2, [pc, #176]	; (80048ec <HAL_DMA_IRQHandler+0xe4c>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d004      	beq.n	800484a <HAL_DMA_IRQHandler+0xdaa>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a2a      	ldr	r2, [pc, #168]	; (80048f0 <HAL_DMA_IRQHandler+0xe50>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d108      	bne.n	800485c <HAL_DMA_IRQHandler+0xdbc>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 021c 	bic.w	r2, r2, #28
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	e007      	b.n	800486c <HAL_DMA_IRQHandler+0xdcc>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 020e 	bic.w	r2, r2, #14
 800486a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004870:	f003 031f 	and.w	r3, r3, #31
 8004874:	2201      	movs	r2, #1
 8004876:	409a      	lsls	r2, r3
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004896:	2b00      	cmp	r3, #0
 8004898:	d009      	beq.n	80048ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	4798      	blx	r3
 80048a2:	e004      	b.n	80048ae <HAL_DMA_IRQHandler+0xe0e>
          return;
 80048a4:	bf00      	nop
 80048a6:	e002      	b.n	80048ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048a8:	bf00      	nop
 80048aa:	e000      	b.n	80048ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048ac:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80048ae:	3728      	adds	r7, #40	; 0x28
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	40020010 	.word	0x40020010
 80048b8:	40020028 	.word	0x40020028
 80048bc:	40020040 	.word	0x40020040
 80048c0:	40020058 	.word	0x40020058
 80048c4:	40020070 	.word	0x40020070
 80048c8:	40020088 	.word	0x40020088
 80048cc:	400200a0 	.word	0x400200a0
 80048d0:	400200b8 	.word	0x400200b8
 80048d4:	40020410 	.word	0x40020410
 80048d8:	40020428 	.word	0x40020428
 80048dc:	40020440 	.word	0x40020440
 80048e0:	40020458 	.word	0x40020458
 80048e4:	40020470 	.word	0x40020470
 80048e8:	40020488 	.word	0x40020488
 80048ec:	400204a0 	.word	0x400204a0
 80048f0:	400204b8 	.word	0x400204b8

080048f4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004900:	4618      	mov	r0, r3
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800490c:	b480      	push	{r7}
 800490e:	b087      	sub	sp, #28
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
 8004918:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800491e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004924:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a84      	ldr	r2, [pc, #528]	; (8004b3c <DMA_SetConfig+0x230>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d072      	beq.n	8004a16 <DMA_SetConfig+0x10a>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a82      	ldr	r2, [pc, #520]	; (8004b40 <DMA_SetConfig+0x234>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d06d      	beq.n	8004a16 <DMA_SetConfig+0x10a>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a81      	ldr	r2, [pc, #516]	; (8004b44 <DMA_SetConfig+0x238>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d068      	beq.n	8004a16 <DMA_SetConfig+0x10a>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a7f      	ldr	r2, [pc, #508]	; (8004b48 <DMA_SetConfig+0x23c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d063      	beq.n	8004a16 <DMA_SetConfig+0x10a>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a7e      	ldr	r2, [pc, #504]	; (8004b4c <DMA_SetConfig+0x240>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d05e      	beq.n	8004a16 <DMA_SetConfig+0x10a>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a7c      	ldr	r2, [pc, #496]	; (8004b50 <DMA_SetConfig+0x244>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d059      	beq.n	8004a16 <DMA_SetConfig+0x10a>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a7b      	ldr	r2, [pc, #492]	; (8004b54 <DMA_SetConfig+0x248>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d054      	beq.n	8004a16 <DMA_SetConfig+0x10a>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a79      	ldr	r2, [pc, #484]	; (8004b58 <DMA_SetConfig+0x24c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d04f      	beq.n	8004a16 <DMA_SetConfig+0x10a>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a78      	ldr	r2, [pc, #480]	; (8004b5c <DMA_SetConfig+0x250>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d04a      	beq.n	8004a16 <DMA_SetConfig+0x10a>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a76      	ldr	r2, [pc, #472]	; (8004b60 <DMA_SetConfig+0x254>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d045      	beq.n	8004a16 <DMA_SetConfig+0x10a>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a75      	ldr	r2, [pc, #468]	; (8004b64 <DMA_SetConfig+0x258>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d040      	beq.n	8004a16 <DMA_SetConfig+0x10a>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a73      	ldr	r2, [pc, #460]	; (8004b68 <DMA_SetConfig+0x25c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d03b      	beq.n	8004a16 <DMA_SetConfig+0x10a>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a72      	ldr	r2, [pc, #456]	; (8004b6c <DMA_SetConfig+0x260>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d036      	beq.n	8004a16 <DMA_SetConfig+0x10a>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a70      	ldr	r2, [pc, #448]	; (8004b70 <DMA_SetConfig+0x264>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d031      	beq.n	8004a16 <DMA_SetConfig+0x10a>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a6f      	ldr	r2, [pc, #444]	; (8004b74 <DMA_SetConfig+0x268>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d02c      	beq.n	8004a16 <DMA_SetConfig+0x10a>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a6d      	ldr	r2, [pc, #436]	; (8004b78 <DMA_SetConfig+0x26c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d027      	beq.n	8004a16 <DMA_SetConfig+0x10a>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a6c      	ldr	r2, [pc, #432]	; (8004b7c <DMA_SetConfig+0x270>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d022      	beq.n	8004a16 <DMA_SetConfig+0x10a>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a6a      	ldr	r2, [pc, #424]	; (8004b80 <DMA_SetConfig+0x274>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d01d      	beq.n	8004a16 <DMA_SetConfig+0x10a>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a69      	ldr	r2, [pc, #420]	; (8004b84 <DMA_SetConfig+0x278>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d018      	beq.n	8004a16 <DMA_SetConfig+0x10a>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a67      	ldr	r2, [pc, #412]	; (8004b88 <DMA_SetConfig+0x27c>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d013      	beq.n	8004a16 <DMA_SetConfig+0x10a>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a66      	ldr	r2, [pc, #408]	; (8004b8c <DMA_SetConfig+0x280>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d00e      	beq.n	8004a16 <DMA_SetConfig+0x10a>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a64      	ldr	r2, [pc, #400]	; (8004b90 <DMA_SetConfig+0x284>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d009      	beq.n	8004a16 <DMA_SetConfig+0x10a>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a63      	ldr	r2, [pc, #396]	; (8004b94 <DMA_SetConfig+0x288>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d004      	beq.n	8004a16 <DMA_SetConfig+0x10a>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a61      	ldr	r2, [pc, #388]	; (8004b98 <DMA_SetConfig+0x28c>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d101      	bne.n	8004a1a <DMA_SetConfig+0x10e>
 8004a16:	2301      	movs	r3, #1
 8004a18:	e000      	b.n	8004a1c <DMA_SetConfig+0x110>
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00d      	beq.n	8004a3c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004a28:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d004      	beq.n	8004a3c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004a3a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a3e      	ldr	r2, [pc, #248]	; (8004b3c <DMA_SetConfig+0x230>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d04a      	beq.n	8004adc <DMA_SetConfig+0x1d0>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a3d      	ldr	r2, [pc, #244]	; (8004b40 <DMA_SetConfig+0x234>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d045      	beq.n	8004adc <DMA_SetConfig+0x1d0>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a3b      	ldr	r2, [pc, #236]	; (8004b44 <DMA_SetConfig+0x238>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d040      	beq.n	8004adc <DMA_SetConfig+0x1d0>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a3a      	ldr	r2, [pc, #232]	; (8004b48 <DMA_SetConfig+0x23c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d03b      	beq.n	8004adc <DMA_SetConfig+0x1d0>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a38      	ldr	r2, [pc, #224]	; (8004b4c <DMA_SetConfig+0x240>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d036      	beq.n	8004adc <DMA_SetConfig+0x1d0>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a37      	ldr	r2, [pc, #220]	; (8004b50 <DMA_SetConfig+0x244>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d031      	beq.n	8004adc <DMA_SetConfig+0x1d0>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a35      	ldr	r2, [pc, #212]	; (8004b54 <DMA_SetConfig+0x248>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d02c      	beq.n	8004adc <DMA_SetConfig+0x1d0>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a34      	ldr	r2, [pc, #208]	; (8004b58 <DMA_SetConfig+0x24c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d027      	beq.n	8004adc <DMA_SetConfig+0x1d0>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a32      	ldr	r2, [pc, #200]	; (8004b5c <DMA_SetConfig+0x250>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d022      	beq.n	8004adc <DMA_SetConfig+0x1d0>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a31      	ldr	r2, [pc, #196]	; (8004b60 <DMA_SetConfig+0x254>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d01d      	beq.n	8004adc <DMA_SetConfig+0x1d0>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a2f      	ldr	r2, [pc, #188]	; (8004b64 <DMA_SetConfig+0x258>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d018      	beq.n	8004adc <DMA_SetConfig+0x1d0>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a2e      	ldr	r2, [pc, #184]	; (8004b68 <DMA_SetConfig+0x25c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d013      	beq.n	8004adc <DMA_SetConfig+0x1d0>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a2c      	ldr	r2, [pc, #176]	; (8004b6c <DMA_SetConfig+0x260>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d00e      	beq.n	8004adc <DMA_SetConfig+0x1d0>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a2b      	ldr	r2, [pc, #172]	; (8004b70 <DMA_SetConfig+0x264>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d009      	beq.n	8004adc <DMA_SetConfig+0x1d0>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a29      	ldr	r2, [pc, #164]	; (8004b74 <DMA_SetConfig+0x268>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d004      	beq.n	8004adc <DMA_SetConfig+0x1d0>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a28      	ldr	r2, [pc, #160]	; (8004b78 <DMA_SetConfig+0x26c>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d101      	bne.n	8004ae0 <DMA_SetConfig+0x1d4>
 8004adc:	2301      	movs	r3, #1
 8004ade:	e000      	b.n	8004ae2 <DMA_SetConfig+0x1d6>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d05a      	beq.n	8004b9c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aea:	f003 031f 	and.w	r3, r3, #31
 8004aee:	223f      	movs	r2, #63	; 0x3f
 8004af0:	409a      	lsls	r2, r3
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b04:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	2b40      	cmp	r3, #64	; 0x40
 8004b14:	d108      	bne.n	8004b28 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b26:	e087      	b.n	8004c38 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	60da      	str	r2, [r3, #12]
}
 8004b38:	e07e      	b.n	8004c38 <DMA_SetConfig+0x32c>
 8004b3a:	bf00      	nop
 8004b3c:	40020010 	.word	0x40020010
 8004b40:	40020028 	.word	0x40020028
 8004b44:	40020040 	.word	0x40020040
 8004b48:	40020058 	.word	0x40020058
 8004b4c:	40020070 	.word	0x40020070
 8004b50:	40020088 	.word	0x40020088
 8004b54:	400200a0 	.word	0x400200a0
 8004b58:	400200b8 	.word	0x400200b8
 8004b5c:	40020410 	.word	0x40020410
 8004b60:	40020428 	.word	0x40020428
 8004b64:	40020440 	.word	0x40020440
 8004b68:	40020458 	.word	0x40020458
 8004b6c:	40020470 	.word	0x40020470
 8004b70:	40020488 	.word	0x40020488
 8004b74:	400204a0 	.word	0x400204a0
 8004b78:	400204b8 	.word	0x400204b8
 8004b7c:	58025408 	.word	0x58025408
 8004b80:	5802541c 	.word	0x5802541c
 8004b84:	58025430 	.word	0x58025430
 8004b88:	58025444 	.word	0x58025444
 8004b8c:	58025458 	.word	0x58025458
 8004b90:	5802546c 	.word	0x5802546c
 8004b94:	58025480 	.word	0x58025480
 8004b98:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a28      	ldr	r2, [pc, #160]	; (8004c44 <DMA_SetConfig+0x338>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d022      	beq.n	8004bec <DMA_SetConfig+0x2e0>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a27      	ldr	r2, [pc, #156]	; (8004c48 <DMA_SetConfig+0x33c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d01d      	beq.n	8004bec <DMA_SetConfig+0x2e0>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a25      	ldr	r2, [pc, #148]	; (8004c4c <DMA_SetConfig+0x340>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d018      	beq.n	8004bec <DMA_SetConfig+0x2e0>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a24      	ldr	r2, [pc, #144]	; (8004c50 <DMA_SetConfig+0x344>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d013      	beq.n	8004bec <DMA_SetConfig+0x2e0>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a22      	ldr	r2, [pc, #136]	; (8004c54 <DMA_SetConfig+0x348>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d00e      	beq.n	8004bec <DMA_SetConfig+0x2e0>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a21      	ldr	r2, [pc, #132]	; (8004c58 <DMA_SetConfig+0x34c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d009      	beq.n	8004bec <DMA_SetConfig+0x2e0>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a1f      	ldr	r2, [pc, #124]	; (8004c5c <DMA_SetConfig+0x350>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d004      	beq.n	8004bec <DMA_SetConfig+0x2e0>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a1e      	ldr	r2, [pc, #120]	; (8004c60 <DMA_SetConfig+0x354>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d101      	bne.n	8004bf0 <DMA_SetConfig+0x2e4>
 8004bec:	2301      	movs	r3, #1
 8004bee:	e000      	b.n	8004bf2 <DMA_SetConfig+0x2e6>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d020      	beq.n	8004c38 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bfa:	f003 031f 	and.w	r3, r3, #31
 8004bfe:	2201      	movs	r2, #1
 8004c00:	409a      	lsls	r2, r3
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	2b40      	cmp	r3, #64	; 0x40
 8004c14:	d108      	bne.n	8004c28 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	60da      	str	r2, [r3, #12]
}
 8004c26:	e007      	b.n	8004c38 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	60da      	str	r2, [r3, #12]
}
 8004c38:	bf00      	nop
 8004c3a:	371c      	adds	r7, #28
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	58025408 	.word	0x58025408
 8004c48:	5802541c 	.word	0x5802541c
 8004c4c:	58025430 	.word	0x58025430
 8004c50:	58025444 	.word	0x58025444
 8004c54:	58025458 	.word	0x58025458
 8004c58:	5802546c 	.word	0x5802546c
 8004c5c:	58025480 	.word	0x58025480
 8004c60:	58025494 	.word	0x58025494

08004c64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a42      	ldr	r2, [pc, #264]	; (8004d7c <DMA_CalcBaseAndBitshift+0x118>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d04a      	beq.n	8004d0c <DMA_CalcBaseAndBitshift+0xa8>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a41      	ldr	r2, [pc, #260]	; (8004d80 <DMA_CalcBaseAndBitshift+0x11c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d045      	beq.n	8004d0c <DMA_CalcBaseAndBitshift+0xa8>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a3f      	ldr	r2, [pc, #252]	; (8004d84 <DMA_CalcBaseAndBitshift+0x120>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d040      	beq.n	8004d0c <DMA_CalcBaseAndBitshift+0xa8>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a3e      	ldr	r2, [pc, #248]	; (8004d88 <DMA_CalcBaseAndBitshift+0x124>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d03b      	beq.n	8004d0c <DMA_CalcBaseAndBitshift+0xa8>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a3c      	ldr	r2, [pc, #240]	; (8004d8c <DMA_CalcBaseAndBitshift+0x128>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d036      	beq.n	8004d0c <DMA_CalcBaseAndBitshift+0xa8>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a3b      	ldr	r2, [pc, #236]	; (8004d90 <DMA_CalcBaseAndBitshift+0x12c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d031      	beq.n	8004d0c <DMA_CalcBaseAndBitshift+0xa8>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a39      	ldr	r2, [pc, #228]	; (8004d94 <DMA_CalcBaseAndBitshift+0x130>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d02c      	beq.n	8004d0c <DMA_CalcBaseAndBitshift+0xa8>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a38      	ldr	r2, [pc, #224]	; (8004d98 <DMA_CalcBaseAndBitshift+0x134>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d027      	beq.n	8004d0c <DMA_CalcBaseAndBitshift+0xa8>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a36      	ldr	r2, [pc, #216]	; (8004d9c <DMA_CalcBaseAndBitshift+0x138>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d022      	beq.n	8004d0c <DMA_CalcBaseAndBitshift+0xa8>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a35      	ldr	r2, [pc, #212]	; (8004da0 <DMA_CalcBaseAndBitshift+0x13c>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d01d      	beq.n	8004d0c <DMA_CalcBaseAndBitshift+0xa8>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a33      	ldr	r2, [pc, #204]	; (8004da4 <DMA_CalcBaseAndBitshift+0x140>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d018      	beq.n	8004d0c <DMA_CalcBaseAndBitshift+0xa8>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a32      	ldr	r2, [pc, #200]	; (8004da8 <DMA_CalcBaseAndBitshift+0x144>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d013      	beq.n	8004d0c <DMA_CalcBaseAndBitshift+0xa8>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a30      	ldr	r2, [pc, #192]	; (8004dac <DMA_CalcBaseAndBitshift+0x148>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d00e      	beq.n	8004d0c <DMA_CalcBaseAndBitshift+0xa8>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a2f      	ldr	r2, [pc, #188]	; (8004db0 <DMA_CalcBaseAndBitshift+0x14c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d009      	beq.n	8004d0c <DMA_CalcBaseAndBitshift+0xa8>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a2d      	ldr	r2, [pc, #180]	; (8004db4 <DMA_CalcBaseAndBitshift+0x150>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d004      	beq.n	8004d0c <DMA_CalcBaseAndBitshift+0xa8>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a2c      	ldr	r2, [pc, #176]	; (8004db8 <DMA_CalcBaseAndBitshift+0x154>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d101      	bne.n	8004d10 <DMA_CalcBaseAndBitshift+0xac>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e000      	b.n	8004d12 <DMA_CalcBaseAndBitshift+0xae>
 8004d10:	2300      	movs	r3, #0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d024      	beq.n	8004d60 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	3b10      	subs	r3, #16
 8004d1e:	4a27      	ldr	r2, [pc, #156]	; (8004dbc <DMA_CalcBaseAndBitshift+0x158>)
 8004d20:	fba2 2303 	umull	r2, r3, r2, r3
 8004d24:	091b      	lsrs	r3, r3, #4
 8004d26:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f003 0307 	and.w	r3, r3, #7
 8004d2e:	4a24      	ldr	r2, [pc, #144]	; (8004dc0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004d30:	5cd3      	ldrb	r3, [r2, r3]
 8004d32:	461a      	mov	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	d908      	bls.n	8004d50 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	461a      	mov	r2, r3
 8004d44:	4b1f      	ldr	r3, [pc, #124]	; (8004dc4 <DMA_CalcBaseAndBitshift+0x160>)
 8004d46:	4013      	ands	r3, r2
 8004d48:	1d1a      	adds	r2, r3, #4
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	659a      	str	r2, [r3, #88]	; 0x58
 8004d4e:	e00d      	b.n	8004d6c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	461a      	mov	r2, r3
 8004d56:	4b1b      	ldr	r3, [pc, #108]	; (8004dc4 <DMA_CalcBaseAndBitshift+0x160>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6593      	str	r3, [r2, #88]	; 0x58
 8004d5e:	e005      	b.n	8004d6c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3714      	adds	r7, #20
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	40020010 	.word	0x40020010
 8004d80:	40020028 	.word	0x40020028
 8004d84:	40020040 	.word	0x40020040
 8004d88:	40020058 	.word	0x40020058
 8004d8c:	40020070 	.word	0x40020070
 8004d90:	40020088 	.word	0x40020088
 8004d94:	400200a0 	.word	0x400200a0
 8004d98:	400200b8 	.word	0x400200b8
 8004d9c:	40020410 	.word	0x40020410
 8004da0:	40020428 	.word	0x40020428
 8004da4:	40020440 	.word	0x40020440
 8004da8:	40020458 	.word	0x40020458
 8004dac:	40020470 	.word	0x40020470
 8004db0:	40020488 	.word	0x40020488
 8004db4:	400204a0 	.word	0x400204a0
 8004db8:	400204b8 	.word	0x400204b8
 8004dbc:	aaaaaaab 	.word	0xaaaaaaab
 8004dc0:	0800c010 	.word	0x0800c010
 8004dc4:	fffffc00 	.word	0xfffffc00

08004dc8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d120      	bne.n	8004e1e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de0:	2b03      	cmp	r3, #3
 8004de2:	d858      	bhi.n	8004e96 <DMA_CheckFifoParam+0xce>
 8004de4:	a201      	add	r2, pc, #4	; (adr r2, 8004dec <DMA_CheckFifoParam+0x24>)
 8004de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dea:	bf00      	nop
 8004dec:	08004dfd 	.word	0x08004dfd
 8004df0:	08004e0f 	.word	0x08004e0f
 8004df4:	08004dfd 	.word	0x08004dfd
 8004df8:	08004e97 	.word	0x08004e97
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d048      	beq.n	8004e9a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e0c:	e045      	b.n	8004e9a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e16:	d142      	bne.n	8004e9e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e1c:	e03f      	b.n	8004e9e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e26:	d123      	bne.n	8004e70 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d838      	bhi.n	8004ea2 <DMA_CheckFifoParam+0xda>
 8004e30:	a201      	add	r2, pc, #4	; (adr r2, 8004e38 <DMA_CheckFifoParam+0x70>)
 8004e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e36:	bf00      	nop
 8004e38:	08004e49 	.word	0x08004e49
 8004e3c:	08004e4f 	.word	0x08004e4f
 8004e40:	08004e49 	.word	0x08004e49
 8004e44:	08004e61 	.word	0x08004e61
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	73fb      	strb	r3, [r7, #15]
        break;
 8004e4c:	e030      	b.n	8004eb0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d025      	beq.n	8004ea6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e5e:	e022      	b.n	8004ea6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e68:	d11f      	bne.n	8004eaa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e6e:	e01c      	b.n	8004eaa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d902      	bls.n	8004e7e <DMA_CheckFifoParam+0xb6>
 8004e78:	2b03      	cmp	r3, #3
 8004e7a:	d003      	beq.n	8004e84 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004e7c:	e018      	b.n	8004eb0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	73fb      	strb	r3, [r7, #15]
        break;
 8004e82:	e015      	b.n	8004eb0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00e      	beq.n	8004eae <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	73fb      	strb	r3, [r7, #15]
    break;
 8004e94:	e00b      	b.n	8004eae <DMA_CheckFifoParam+0xe6>
        break;
 8004e96:	bf00      	nop
 8004e98:	e00a      	b.n	8004eb0 <DMA_CheckFifoParam+0xe8>
        break;
 8004e9a:	bf00      	nop
 8004e9c:	e008      	b.n	8004eb0 <DMA_CheckFifoParam+0xe8>
        break;
 8004e9e:	bf00      	nop
 8004ea0:	e006      	b.n	8004eb0 <DMA_CheckFifoParam+0xe8>
        break;
 8004ea2:	bf00      	nop
 8004ea4:	e004      	b.n	8004eb0 <DMA_CheckFifoParam+0xe8>
        break;
 8004ea6:	bf00      	nop
 8004ea8:	e002      	b.n	8004eb0 <DMA_CheckFifoParam+0xe8>
        break;
 8004eaa:	bf00      	nop
 8004eac:	e000      	b.n	8004eb0 <DMA_CheckFifoParam+0xe8>
    break;
 8004eae:	bf00      	nop
    }
  }

  return status;
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop

08004ec0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a38      	ldr	r2, [pc, #224]	; (8004fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d022      	beq.n	8004f1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a36      	ldr	r2, [pc, #216]	; (8004fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d01d      	beq.n	8004f1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a35      	ldr	r2, [pc, #212]	; (8004fbc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d018      	beq.n	8004f1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a33      	ldr	r2, [pc, #204]	; (8004fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d013      	beq.n	8004f1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a32      	ldr	r2, [pc, #200]	; (8004fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d00e      	beq.n	8004f1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a30      	ldr	r2, [pc, #192]	; (8004fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d009      	beq.n	8004f1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a2f      	ldr	r2, [pc, #188]	; (8004fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d004      	beq.n	8004f1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a2d      	ldr	r2, [pc, #180]	; (8004fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d101      	bne.n	8004f22 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e000      	b.n	8004f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004f22:	2300      	movs	r3, #0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d01a      	beq.n	8004f5e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	3b08      	subs	r3, #8
 8004f30:	4a28      	ldr	r2, [pc, #160]	; (8004fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004f32:	fba2 2303 	umull	r2, r3, r2, r3
 8004f36:	091b      	lsrs	r3, r3, #4
 8004f38:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	4b26      	ldr	r3, [pc, #152]	; (8004fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004f3e:	4413      	add	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	461a      	mov	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a24      	ldr	r2, [pc, #144]	; (8004fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004f4c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f003 031f 	and.w	r3, r3, #31
 8004f54:	2201      	movs	r2, #1
 8004f56:	409a      	lsls	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004f5c:	e024      	b.n	8004fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	3b10      	subs	r3, #16
 8004f66:	4a1e      	ldr	r2, [pc, #120]	; (8004fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004f68:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6c:	091b      	lsrs	r3, r3, #4
 8004f6e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	4a1c      	ldr	r2, [pc, #112]	; (8004fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d806      	bhi.n	8004f86 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	4a1b      	ldr	r2, [pc, #108]	; (8004fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d902      	bls.n	8004f86 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	3308      	adds	r3, #8
 8004f84:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	4b18      	ldr	r3, [pc, #96]	; (8004fec <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004f8a:	4413      	add	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	461a      	mov	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a16      	ldr	r2, [pc, #88]	; (8004ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004f98:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f003 031f 	and.w	r3, r3, #31
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	409a      	lsls	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004fa8:	bf00      	nop
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	58025408 	.word	0x58025408
 8004fb8:	5802541c 	.word	0x5802541c
 8004fbc:	58025430 	.word	0x58025430
 8004fc0:	58025444 	.word	0x58025444
 8004fc4:	58025458 	.word	0x58025458
 8004fc8:	5802546c 	.word	0x5802546c
 8004fcc:	58025480 	.word	0x58025480
 8004fd0:	58025494 	.word	0x58025494
 8004fd4:	cccccccd 	.word	0xcccccccd
 8004fd8:	16009600 	.word	0x16009600
 8004fdc:	58025880 	.word	0x58025880
 8004fe0:	aaaaaaab 	.word	0xaaaaaaab
 8004fe4:	400204b8 	.word	0x400204b8
 8004fe8:	4002040f 	.word	0x4002040f
 8004fec:	10008200 	.word	0x10008200
 8004ff0:	40020880 	.word	0x40020880

08004ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	b2db      	uxtb	r3, r3
 8005002:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d04a      	beq.n	80050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2b08      	cmp	r3, #8
 800500e:	d847      	bhi.n	80050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a25      	ldr	r2, [pc, #148]	; (80050ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d022      	beq.n	8005060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a24      	ldr	r2, [pc, #144]	; (80050b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d01d      	beq.n	8005060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a22      	ldr	r2, [pc, #136]	; (80050b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d018      	beq.n	8005060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a21      	ldr	r2, [pc, #132]	; (80050b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d013      	beq.n	8005060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a1f      	ldr	r2, [pc, #124]	; (80050bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d00e      	beq.n	8005060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a1e      	ldr	r2, [pc, #120]	; (80050c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d009      	beq.n	8005060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a1c      	ldr	r2, [pc, #112]	; (80050c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d004      	beq.n	8005060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a1b      	ldr	r2, [pc, #108]	; (80050c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d101      	bne.n	8005064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005060:	2301      	movs	r3, #1
 8005062:	e000      	b.n	8005066 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005064:	2300      	movs	r3, #0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00a      	beq.n	8005080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	4b17      	ldr	r3, [pc, #92]	; (80050cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800506e:	4413      	add	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	461a      	mov	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a15      	ldr	r2, [pc, #84]	; (80050d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800507c:	671a      	str	r2, [r3, #112]	; 0x70
 800507e:	e009      	b.n	8005094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	4b14      	ldr	r3, [pc, #80]	; (80050d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005084:	4413      	add	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	461a      	mov	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a11      	ldr	r2, [pc, #68]	; (80050d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005092:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	3b01      	subs	r3, #1
 8005098:	2201      	movs	r2, #1
 800509a:	409a      	lsls	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80050a0:	bf00      	nop
 80050a2:	3714      	adds	r7, #20
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	58025408 	.word	0x58025408
 80050b0:	5802541c 	.word	0x5802541c
 80050b4:	58025430 	.word	0x58025430
 80050b8:	58025444 	.word	0x58025444
 80050bc:	58025458 	.word	0x58025458
 80050c0:	5802546c 	.word	0x5802546c
 80050c4:	58025480 	.word	0x58025480
 80050c8:	58025494 	.word	0x58025494
 80050cc:	1600963f 	.word	0x1600963f
 80050d0:	58025940 	.word	0x58025940
 80050d4:	1000823f 	.word	0x1000823f
 80050d8:	40020940 	.word	0x40020940

080050dc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e0c6      	b.n	800527c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d102      	bne.n	80050fc <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7fc ff3e 	bl	8001f78 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2223      	movs	r2, #35	; 0x23
 8005100:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005102:	4b60      	ldr	r3, [pc, #384]	; (8005284 <HAL_ETH_Init+0x1a8>)
 8005104:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005108:	4a5e      	ldr	r2, [pc, #376]	; (8005284 <HAL_ETH_Init+0x1a8>)
 800510a:	f043 0302 	orr.w	r3, r3, #2
 800510e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005112:	4b5c      	ldr	r3, [pc, #368]	; (8005284 <HAL_ETH_Init+0x1a8>)
 8005114:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	60bb      	str	r3, [r7, #8]
 800511e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	7a1b      	ldrb	r3, [r3, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d103      	bne.n	8005130 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005128:	2000      	movs	r0, #0
 800512a:	f7fd fb8b 	bl	8002844 <HAL_SYSCFG_ETHInterfaceSelect>
 800512e:	e003      	b.n	8005138 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005130:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005134:	f7fd fb86 	bl	8002844 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f042 0201 	orr.w	r2, r2, #1
 800514a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800514e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005150:	f7fd fb3c 	bl	80027cc <HAL_GetTick>
 8005154:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005156:	e00f      	b.n	8005178 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8005158:	f7fd fb38 	bl	80027cc <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005166:	d907      	bls.n	8005178 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2204      	movs	r2, #4
 800516c:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	22e0      	movs	r2, #224	; 0xe0
 8005172:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e081      	b.n	800527c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1e6      	bne.n	8005158 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 fac0 	bl	8005710 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005190:	f001 fed8 	bl	8006f44 <HAL_RCC_GetHCLKFreq>
 8005194:	4603      	mov	r3, r0
 8005196:	4a3c      	ldr	r2, [pc, #240]	; (8005288 <HAL_ETH_Init+0x1ac>)
 8005198:	fba2 2303 	umull	r2, r3, r2, r3
 800519c:	0c9a      	lsrs	r2, r3, #18
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	3a01      	subs	r2, #1
 80051a4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 fa13 	bl	80055d4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80051c4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80051c8:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	f003 0303 	and.w	r3, r3, #3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d007      	beq.n	80051e6 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	22e0      	movs	r2, #224	; 0xe0
 80051e0:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e04a      	b.n	800527c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	f241 1308 	movw	r3, #4360	; 0x1108
 80051ee:	4413      	add	r3, r2
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	4b26      	ldr	r3, [pc, #152]	; (800528c <HAL_ETH_Init+0x1b0>)
 80051f4:	4013      	ands	r3, r2
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	6952      	ldr	r2, [r2, #20]
 80051fa:	0052      	lsls	r2, r2, #1
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	6809      	ldr	r1, [r1, #0]
 8005200:	431a      	orrs	r2, r3
 8005202:	f241 1308 	movw	r3, #4360	; 0x1108
 8005206:	440b      	add	r3, r1
 8005208:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fad8 	bl	80057c0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 fb1c 	bl	800584e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	3305      	adds	r3, #5
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	021a      	lsls	r2, r3, #8
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	3304      	adds	r3, #4
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	4619      	mov	r1, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	3303      	adds	r3, #3
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	061a      	lsls	r2, r3, #24
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	3302      	adds	r3, #2
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	041b      	lsls	r3, r3, #16
 8005248:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	3301      	adds	r3, #1
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005254:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005262:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005264:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2210      	movs	r2, #16
 8005272:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2210      	movs	r2, #16
 8005278:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	58024400 	.word	0x58024400
 8005288:	431bde83 	.word	0x431bde83
 800528c:	ffff8001 	.word	0xffff8001

08005290 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80052a2:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	791b      	ldrb	r3, [r3, #4]
 80052a8:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80052aa:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	7b1b      	ldrb	r3, [r3, #12]
 80052b0:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80052b2:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	7b5b      	ldrb	r3, [r3, #13]
 80052b8:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80052ba:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	7b9b      	ldrb	r3, [r3, #14]
 80052c0:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80052c2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	7bdb      	ldrb	r3, [r3, #15]
 80052c8:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80052ca:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80052cc:	683a      	ldr	r2, [r7, #0]
 80052ce:	7c12      	ldrb	r2, [r2, #16]
 80052d0:	2a00      	cmp	r2, #0
 80052d2:	d102      	bne.n	80052da <ETH_SetMACConfig+0x4a>
 80052d4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80052d8:	e000      	b.n	80052dc <ETH_SetMACConfig+0x4c>
 80052da:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80052dc:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	7c52      	ldrb	r2, [r2, #17]
 80052e2:	2a00      	cmp	r2, #0
 80052e4:	d102      	bne.n	80052ec <ETH_SetMACConfig+0x5c>
 80052e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80052ea:	e000      	b.n	80052ee <ETH_SetMACConfig+0x5e>
 80052ec:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80052ee:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	7c9b      	ldrb	r3, [r3, #18]
 80052f4:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80052f6:	431a      	orrs	r2, r3
                                macconf->Speed |
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80052fc:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8005302:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	7f1b      	ldrb	r3, [r3, #28]
 8005308:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800530a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	7f5b      	ldrb	r3, [r3, #29]
 8005310:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005312:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	7f92      	ldrb	r2, [r2, #30]
 8005318:	2a00      	cmp	r2, #0
 800531a:	d102      	bne.n	8005322 <ETH_SetMACConfig+0x92>
 800531c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005320:	e000      	b.n	8005324 <ETH_SetMACConfig+0x94>
 8005322:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005324:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	7fdb      	ldrb	r3, [r3, #31]
 800532a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800532c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005334:	2a00      	cmp	r2, #0
 8005336:	d102      	bne.n	800533e <ETH_SetMACConfig+0xae>
 8005338:	f44f 7280 	mov.w	r2, #256	; 0x100
 800533c:	e000      	b.n	8005340 <ETH_SetMACConfig+0xb0>
 800533e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005340:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005346:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800534e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8005350:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8005356:	4313      	orrs	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	4b56      	ldr	r3, [pc, #344]	; (80054bc <ETH_SetMACConfig+0x22c>)
 8005362:	4013      	ands	r3, r2
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	6812      	ldr	r2, [r2, #0]
 8005368:	68f9      	ldr	r1, [r7, #12]
 800536a:	430b      	orrs	r3, r1
 800536c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005372:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800537a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800537c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005384:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005386:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800538e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8005390:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005398:	2a00      	cmp	r2, #0
 800539a:	d102      	bne.n	80053a2 <ETH_SetMACConfig+0x112>
 800539c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80053a0:	e000      	b.n	80053a4 <ETH_SetMACConfig+0x114>
 80053a2:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80053a4:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	4b42      	ldr	r3, [pc, #264]	; (80054c0 <ETH_SetMACConfig+0x230>)
 80053b6:	4013      	ands	r3, r2
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	6812      	ldr	r2, [r2, #0]
 80053bc:	68f9      	ldr	r1, [r7, #12]
 80053be:	430b      	orrs	r3, r1
 80053c0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053c8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68da      	ldr	r2, [r3, #12]
 80053d8:	4b3a      	ldr	r3, [pc, #232]	; (80054c4 <ETH_SetMACConfig+0x234>)
 80053da:	4013      	ands	r3, r2
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	6812      	ldr	r2, [r2, #0]
 80053e0:	68f9      	ldr	r1, [r7, #12]
 80053e2:	430b      	orrs	r3, r1
 80053e4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80053ec:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80053f2:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80053fa:	2a00      	cmp	r2, #0
 80053fc:	d101      	bne.n	8005402 <ETH_SetMACConfig+0x172>
 80053fe:	2280      	movs	r2, #128	; 0x80
 8005400:	e000      	b.n	8005404 <ETH_SetMACConfig+0x174>
 8005402:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005404:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800540a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800540c:	4313      	orrs	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005416:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800541a:	4013      	ands	r3, r2
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	6812      	ldr	r2, [r2, #0]
 8005420:	68f9      	ldr	r1, [r7, #12]
 8005422:	430b      	orrs	r3, r1
 8005424:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800542c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005434:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005436:	4313      	orrs	r3, r2
 8005438:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005442:	f023 0103 	bic.w	r1, r3, #3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	430a      	orrs	r2, r1
 800544e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800545a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005476:	2a00      	cmp	r2, #0
 8005478:	d101      	bne.n	800547e <ETH_SetMACConfig+0x1ee>
 800547a:	2240      	movs	r2, #64	; 0x40
 800547c:	e000      	b.n	8005480 <ETH_SetMACConfig+0x1f0>
 800547e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005480:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005488:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800548a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005492:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005494:	4313      	orrs	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80054a0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80054b0:	bf00      	nop
 80054b2:	3714      	adds	r7, #20
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	00048083 	.word	0x00048083
 80054c0:	c0f88000 	.word	0xc0f88000
 80054c4:	fffffef0 	.word	0xfffffef0

080054c8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	4b38      	ldr	r3, [pc, #224]	; (80055c0 <ETH_SetDMAConfig+0xf8>)
 80054de:	4013      	ands	r3, r2
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	6812      	ldr	r2, [r2, #0]
 80054e4:	6879      	ldr	r1, [r7, #4]
 80054e6:	6809      	ldr	r1, [r1, #0]
 80054e8:	431a      	orrs	r2, r3
 80054ea:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80054ee:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	791b      	ldrb	r3, [r3, #4]
 80054f4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80054fa:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	7b1b      	ldrb	r3, [r3, #12]
 8005500:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005502:	4313      	orrs	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	f241 0304 	movw	r3, #4100	; 0x1004
 800550e:	4413      	add	r3, r2
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	4b2c      	ldr	r3, [pc, #176]	; (80055c4 <ETH_SetDMAConfig+0xfc>)
 8005514:	4013      	ands	r3, r2
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6811      	ldr	r1, [r2, #0]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	431a      	orrs	r2, r3
 800551e:	f241 0304 	movw	r3, #4100	; 0x1004
 8005522:	440b      	add	r3, r1
 8005524:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	7b5b      	ldrb	r3, [r3, #13]
 800552a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005530:	4313      	orrs	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	4b22      	ldr	r3, [pc, #136]	; (80055c8 <ETH_SetDMAConfig+0x100>)
 8005540:	4013      	ands	r3, r2
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	6811      	ldr	r1, [r2, #0]
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	431a      	orrs	r2, r3
 800554a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800554e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	7d1b      	ldrb	r3, [r3, #20]
 8005558:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800555a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	7f5b      	ldrb	r3, [r3, #29]
 8005560:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	f241 1304 	movw	r3, #4356	; 0x1104
 800556e:	4413      	add	r3, r2
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	4b16      	ldr	r3, [pc, #88]	; (80055cc <ETH_SetDMAConfig+0x104>)
 8005574:	4013      	ands	r3, r2
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	6811      	ldr	r1, [r2, #0]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	431a      	orrs	r2, r3
 800557e:	f241 1304 	movw	r3, #4356	; 0x1104
 8005582:	440b      	add	r3, r1
 8005584:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	7f1b      	ldrb	r3, [r3, #28]
 800558a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005590:	4313      	orrs	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	f241 1308 	movw	r3, #4360	; 0x1108
 800559c:	4413      	add	r3, r2
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	4b0b      	ldr	r3, [pc, #44]	; (80055d0 <ETH_SetDMAConfig+0x108>)
 80055a2:	4013      	ands	r3, r2
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6811      	ldr	r1, [r2, #0]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	431a      	orrs	r2, r3
 80055ac:	f241 1308 	movw	r3, #4360	; 0x1108
 80055b0:	440b      	add	r3, r1
 80055b2:	601a      	str	r2, [r3, #0]
}
 80055b4:	bf00      	nop
 80055b6:	3714      	adds	r7, #20
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	ffff87fd 	.word	0xffff87fd
 80055c4:	ffff2ffe 	.word	0xffff2ffe
 80055c8:	fffec000 	.word	0xfffec000
 80055cc:	ffc0efef 	.word	0xffc0efef
 80055d0:	7fc0ffff 	.word	0x7fc0ffff

080055d4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b0a4      	sub	sp, #144	; 0x90
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80055dc:	2301      	movs	r3, #1
 80055de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80055e2:	2300      	movs	r3, #0
 80055e4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80055e6:	2300      	movs	r3, #0
 80055e8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80055ec:	2300      	movs	r3, #0
 80055ee:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80055f2:	2301      	movs	r3, #1
 80055f4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80055f8:	2301      	movs	r3, #1
 80055fa:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80055fe:	2301      	movs	r3, #1
 8005600:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005604:	2300      	movs	r3, #0
 8005606:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800560a:	2301      	movs	r3, #1
 800560c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005610:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005614:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005616:	2300      	movs	r3, #0
 8005618:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800561c:	2300      	movs	r3, #0
 800561e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005620:	2300      	movs	r3, #0
 8005622:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005626:	2300      	movs	r3, #0
 8005628:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800562c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005630:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005632:	2300      	movs	r3, #0
 8005634:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005638:	2300      	movs	r3, #0
 800563a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800563c:	2301      	movs	r3, #1
 800563e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005642:	2300      	movs	r3, #0
 8005644:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005648:	2300      	movs	r3, #0
 800564a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800564e:	2300      	movs	r3, #0
 8005650:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8005652:	2300      	movs	r3, #0
 8005654:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005656:	2300      	movs	r3, #0
 8005658:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800565a:	2300      	movs	r3, #0
 800565c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005660:	2300      	movs	r3, #0
 8005662:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005666:	2301      	movs	r3, #1
 8005668:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800566c:	2320      	movs	r3, #32
 800566e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005672:	2301      	movs	r3, #1
 8005674:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005678:	2300      	movs	r3, #0
 800567a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800567e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005682:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005684:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005688:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800568a:	2300      	movs	r3, #0
 800568c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005690:	2302      	movs	r3, #2
 8005692:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005696:	2300      	movs	r3, #0
 8005698:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800569c:	2300      	movs	r3, #0
 800569e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80056a2:	2300      	movs	r3, #0
 80056a4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80056a8:	2301      	movs	r3, #1
 80056aa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80056ae:	2300      	movs	r3, #0
 80056b0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80056b2:	2301      	movs	r3, #1
 80056b4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80056b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056bc:	4619      	mov	r1, r3
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7ff fde6 	bl	8005290 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80056c4:	2301      	movs	r3, #1
 80056c6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80056c8:	2301      	movs	r3, #1
 80056ca:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80056cc:	2300      	movs	r3, #0
 80056ce:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80056d0:	2300      	movs	r3, #0
 80056d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80056d6:	2300      	movs	r3, #0
 80056d8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80056da:	2300      	movs	r3, #0
 80056dc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80056de:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80056e2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80056e4:	2300      	movs	r3, #0
 80056e6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80056e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80056ec:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80056ee:	2300      	movs	r3, #0
 80056f0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80056f4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80056f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80056fa:	f107 0308 	add.w	r3, r7, #8
 80056fe:	4619      	mov	r1, r3
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7ff fee1 	bl	80054c8 <ETH_SetDMAConfig>
}
 8005706:	bf00      	nop
 8005708:	3790      	adds	r7, #144	; 0x90
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
	...

08005710 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005720:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005728:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800572a:	f001 fc0b 	bl	8006f44 <HAL_RCC_GetHCLKFreq>
 800572e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	4a1e      	ldr	r2, [pc, #120]	; (80057ac <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d908      	bls.n	800574a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	4a1d      	ldr	r2, [pc, #116]	; (80057b0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d804      	bhi.n	800574a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	e027      	b.n	800579a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	4a18      	ldr	r2, [pc, #96]	; (80057b0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d908      	bls.n	8005764 <ETH_MAC_MDIO_ClkConfig+0x54>
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	4a17      	ldr	r2, [pc, #92]	; (80057b4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d204      	bcs.n	8005764 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005760:	60fb      	str	r3, [r7, #12]
 8005762:	e01a      	b.n	800579a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	4a13      	ldr	r2, [pc, #76]	; (80057b4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d303      	bcc.n	8005774 <ETH_MAC_MDIO_ClkConfig+0x64>
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	4a12      	ldr	r2, [pc, #72]	; (80057b8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d911      	bls.n	8005798 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	4a10      	ldr	r2, [pc, #64]	; (80057b8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d908      	bls.n	800578e <ETH_MAC_MDIO_ClkConfig+0x7e>
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	4a0f      	ldr	r2, [pc, #60]	; (80057bc <ETH_MAC_MDIO_ClkConfig+0xac>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d804      	bhi.n	800578e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	e005      	b.n	800579a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005794:	60fb      	str	r3, [r7, #12]
 8005796:	e000      	b.n	800579a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005798:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80057a4:	bf00      	nop
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	01312cff 	.word	0x01312cff
 80057b0:	02160ebf 	.word	0x02160ebf
 80057b4:	03938700 	.word	0x03938700
 80057b8:	05f5e0ff 	.word	0x05f5e0ff
 80057bc:	08f0d17f 	.word	0x08f0d17f

080057c0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80057c8:	2300      	movs	r3, #0
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	e01d      	b.n	800580a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68d9      	ldr	r1, [r3, #12]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	4613      	mov	r3, r2
 80057d6:	005b      	lsls	r3, r3, #1
 80057d8:	4413      	add	r3, r2
 80057da:	00db      	lsls	r3, r3, #3
 80057dc:	440b      	add	r3, r1
 80057de:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2200      	movs	r2, #0
 80057e4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	2200      	movs	r2, #0
 80057ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	2200      	movs	r2, #0
 80057f0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	2200      	movs	r2, #0
 80057f6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80057f8:	68b9      	ldr	r1, [r7, #8]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	3206      	adds	r2, #6
 8005800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	3301      	adds	r3, #1
 8005808:	60fb      	str	r3, [r7, #12]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2b03      	cmp	r3, #3
 800580e:	d9de      	bls.n	80057ce <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	f241 132c 	movw	r3, #4396	; 0x112c
 800581e:	4413      	add	r3, r2
 8005820:	2203      	movs	r2, #3
 8005822:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68d9      	ldr	r1, [r3, #12]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	f241 1314 	movw	r3, #4372	; 0x1114
 8005830:	4413      	add	r3, r2
 8005832:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68da      	ldr	r2, [r3, #12]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005840:	601a      	str	r2, [r3, #0]
}
 8005842:	bf00      	nop
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800584e:	b480      	push	{r7}
 8005850:	b085      	sub	sp, #20
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005856:	2300      	movs	r3, #0
 8005858:	60fb      	str	r3, [r7, #12]
 800585a:	e024      	b.n	80058a6 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6919      	ldr	r1, [r3, #16]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	4613      	mov	r3, r2
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	4413      	add	r3, r2
 8005868:	00db      	lsls	r3, r3, #3
 800586a:	440b      	add	r3, r1
 800586c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	2200      	movs	r2, #0
 8005872:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	2200      	movs	r2, #0
 8005878:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2200      	movs	r2, #0
 800587e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2200      	movs	r2, #0
 8005884:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	2200      	movs	r2, #0
 800588a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2200      	movs	r2, #0
 8005890:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	6879      	ldr	r1, [r7, #4]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	3310      	adds	r3, #16
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	440b      	add	r3, r1
 800589e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	3301      	adds	r3, #1
 80058a4:	60fb      	str	r3, [r7, #12]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2b03      	cmp	r3, #3
 80058aa:	d9d7      	bls.n	800585c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	f241 1330 	movw	r3, #4400	; 0x1130
 80058d2:	4413      	add	r3, r2
 80058d4:	2203      	movs	r2, #3
 80058d6:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6919      	ldr	r1, [r3, #16]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	f241 131c 	movw	r3, #4380	; 0x111c
 80058e4:	4413      	add	r3, r2
 80058e6:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	f241 1328 	movw	r3, #4392	; 0x1128
 80058f8:	4413      	add	r3, r2
 80058fa:	6019      	str	r1, [r3, #0]
}
 80058fc:	bf00      	nop
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005908:	b480      	push	{r7}
 800590a:	b089      	sub	sp, #36	; 0x24
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005912:	2300      	movs	r3, #0
 8005914:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005916:	4b89      	ldr	r3, [pc, #548]	; (8005b3c <HAL_GPIO_Init+0x234>)
 8005918:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800591a:	e194      	b.n	8005c46 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	2101      	movs	r1, #1
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	fa01 f303 	lsl.w	r3, r1, r3
 8005928:	4013      	ands	r3, r2
 800592a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	2b00      	cmp	r3, #0
 8005930:	f000 8186 	beq.w	8005c40 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f003 0303 	and.w	r3, r3, #3
 800593c:	2b01      	cmp	r3, #1
 800593e:	d005      	beq.n	800594c <HAL_GPIO_Init+0x44>
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f003 0303 	and.w	r3, r3, #3
 8005948:	2b02      	cmp	r3, #2
 800594a:	d130      	bne.n	80059ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	2203      	movs	r2, #3
 8005958:	fa02 f303 	lsl.w	r3, r2, r3
 800595c:	43db      	mvns	r3, r3
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	4013      	ands	r3, r2
 8005962:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	68da      	ldr	r2, [r3, #12]
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	005b      	lsls	r3, r3, #1
 800596c:	fa02 f303 	lsl.w	r3, r2, r3
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	4313      	orrs	r3, r2
 8005974:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	69ba      	ldr	r2, [r7, #24]
 800597a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005982:	2201      	movs	r2, #1
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	fa02 f303 	lsl.w	r3, r2, r3
 800598a:	43db      	mvns	r3, r3
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	4013      	ands	r3, r2
 8005990:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	091b      	lsrs	r3, r3, #4
 8005998:	f003 0201 	and.w	r2, r3, #1
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	fa02 f303 	lsl.w	r3, r2, r3
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	69ba      	ldr	r2, [r7, #24]
 80059ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f003 0303 	and.w	r3, r3, #3
 80059b6:	2b03      	cmp	r3, #3
 80059b8:	d017      	beq.n	80059ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	005b      	lsls	r3, r3, #1
 80059c4:	2203      	movs	r2, #3
 80059c6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ca:	43db      	mvns	r3, r3
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	4013      	ands	r3, r2
 80059d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	689a      	ldr	r2, [r3, #8]
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	fa02 f303 	lsl.w	r3, r2, r3
 80059de:	69ba      	ldr	r2, [r7, #24]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f003 0303 	and.w	r3, r3, #3
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d123      	bne.n	8005a3e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	08da      	lsrs	r2, r3, #3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	3208      	adds	r2, #8
 80059fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	f003 0307 	and.w	r3, r3, #7
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	220f      	movs	r2, #15
 8005a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a12:	43db      	mvns	r3, r3
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	4013      	ands	r3, r2
 8005a18:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	691a      	ldr	r2, [r3, #16]
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	f003 0307 	and.w	r3, r3, #7
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	08da      	lsrs	r2, r3, #3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	3208      	adds	r2, #8
 8005a38:	69b9      	ldr	r1, [r7, #24]
 8005a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	005b      	lsls	r3, r3, #1
 8005a48:	2203      	movs	r2, #3
 8005a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4e:	43db      	mvns	r3, r3
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	4013      	ands	r3, r2
 8005a54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f003 0203 	and.w	r2, r3, #3
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	fa02 f303 	lsl.w	r3, r2, r3
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 80e0 	beq.w	8005c40 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a80:	4b2f      	ldr	r3, [pc, #188]	; (8005b40 <HAL_GPIO_Init+0x238>)
 8005a82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a86:	4a2e      	ldr	r2, [pc, #184]	; (8005b40 <HAL_GPIO_Init+0x238>)
 8005a88:	f043 0302 	orr.w	r3, r3, #2
 8005a8c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005a90:	4b2b      	ldr	r3, [pc, #172]	; (8005b40 <HAL_GPIO_Init+0x238>)
 8005a92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a96:	f003 0302 	and.w	r3, r3, #2
 8005a9a:	60fb      	str	r3, [r7, #12]
 8005a9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a9e:	4a29      	ldr	r2, [pc, #164]	; (8005b44 <HAL_GPIO_Init+0x23c>)
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	089b      	lsrs	r3, r3, #2
 8005aa4:	3302      	adds	r3, #2
 8005aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	f003 0303 	and.w	r3, r3, #3
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	220f      	movs	r2, #15
 8005ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aba:	43db      	mvns	r3, r3
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	4013      	ands	r3, r2
 8005ac0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a20      	ldr	r2, [pc, #128]	; (8005b48 <HAL_GPIO_Init+0x240>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d052      	beq.n	8005b70 <HAL_GPIO_Init+0x268>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a1f      	ldr	r2, [pc, #124]	; (8005b4c <HAL_GPIO_Init+0x244>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d031      	beq.n	8005b36 <HAL_GPIO_Init+0x22e>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a1e      	ldr	r2, [pc, #120]	; (8005b50 <HAL_GPIO_Init+0x248>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d02b      	beq.n	8005b32 <HAL_GPIO_Init+0x22a>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a1d      	ldr	r2, [pc, #116]	; (8005b54 <HAL_GPIO_Init+0x24c>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d025      	beq.n	8005b2e <HAL_GPIO_Init+0x226>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a1c      	ldr	r2, [pc, #112]	; (8005b58 <HAL_GPIO_Init+0x250>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d01f      	beq.n	8005b2a <HAL_GPIO_Init+0x222>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a1b      	ldr	r2, [pc, #108]	; (8005b5c <HAL_GPIO_Init+0x254>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d019      	beq.n	8005b26 <HAL_GPIO_Init+0x21e>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a1a      	ldr	r2, [pc, #104]	; (8005b60 <HAL_GPIO_Init+0x258>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d013      	beq.n	8005b22 <HAL_GPIO_Init+0x21a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a19      	ldr	r2, [pc, #100]	; (8005b64 <HAL_GPIO_Init+0x25c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d00d      	beq.n	8005b1e <HAL_GPIO_Init+0x216>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a18      	ldr	r2, [pc, #96]	; (8005b68 <HAL_GPIO_Init+0x260>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d007      	beq.n	8005b1a <HAL_GPIO_Init+0x212>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a17      	ldr	r2, [pc, #92]	; (8005b6c <HAL_GPIO_Init+0x264>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d101      	bne.n	8005b16 <HAL_GPIO_Init+0x20e>
 8005b12:	2309      	movs	r3, #9
 8005b14:	e02d      	b.n	8005b72 <HAL_GPIO_Init+0x26a>
 8005b16:	230a      	movs	r3, #10
 8005b18:	e02b      	b.n	8005b72 <HAL_GPIO_Init+0x26a>
 8005b1a:	2308      	movs	r3, #8
 8005b1c:	e029      	b.n	8005b72 <HAL_GPIO_Init+0x26a>
 8005b1e:	2307      	movs	r3, #7
 8005b20:	e027      	b.n	8005b72 <HAL_GPIO_Init+0x26a>
 8005b22:	2306      	movs	r3, #6
 8005b24:	e025      	b.n	8005b72 <HAL_GPIO_Init+0x26a>
 8005b26:	2305      	movs	r3, #5
 8005b28:	e023      	b.n	8005b72 <HAL_GPIO_Init+0x26a>
 8005b2a:	2304      	movs	r3, #4
 8005b2c:	e021      	b.n	8005b72 <HAL_GPIO_Init+0x26a>
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e01f      	b.n	8005b72 <HAL_GPIO_Init+0x26a>
 8005b32:	2302      	movs	r3, #2
 8005b34:	e01d      	b.n	8005b72 <HAL_GPIO_Init+0x26a>
 8005b36:	2301      	movs	r3, #1
 8005b38:	e01b      	b.n	8005b72 <HAL_GPIO_Init+0x26a>
 8005b3a:	bf00      	nop
 8005b3c:	58000080 	.word	0x58000080
 8005b40:	58024400 	.word	0x58024400
 8005b44:	58000400 	.word	0x58000400
 8005b48:	58020000 	.word	0x58020000
 8005b4c:	58020400 	.word	0x58020400
 8005b50:	58020800 	.word	0x58020800
 8005b54:	58020c00 	.word	0x58020c00
 8005b58:	58021000 	.word	0x58021000
 8005b5c:	58021400 	.word	0x58021400
 8005b60:	58021800 	.word	0x58021800
 8005b64:	58021c00 	.word	0x58021c00
 8005b68:	58022000 	.word	0x58022000
 8005b6c:	58022400 	.word	0x58022400
 8005b70:	2300      	movs	r3, #0
 8005b72:	69fa      	ldr	r2, [r7, #28]
 8005b74:	f002 0203 	and.w	r2, r2, #3
 8005b78:	0092      	lsls	r2, r2, #2
 8005b7a:	4093      	lsls	r3, r2
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b82:	4938      	ldr	r1, [pc, #224]	; (8005c64 <HAL_GPIO_Init+0x35c>)
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	089b      	lsrs	r3, r3, #2
 8005b88:	3302      	adds	r3, #2
 8005b8a:	69ba      	ldr	r2, [r7, #24]
 8005b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	43db      	mvns	r3, r3
 8005b9c:	69ba      	ldr	r2, [r7, #24]
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005bb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	43db      	mvns	r3, r3
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	4013      	ands	r3, r2
 8005bce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d003      	beq.n	8005be4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005be4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	43db      	mvns	r3, r3
 8005bf6:	69ba      	ldr	r2, [r7, #24]
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d003      	beq.n	8005c10 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	43db      	mvns	r3, r3
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	4013      	ands	r3, r2
 8005c24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	3301      	adds	r3, #1
 8005c44:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f47f ae63 	bne.w	800591c <HAL_GPIO_Init+0x14>
  }
}
 8005c56:	bf00      	nop
 8005c58:	bf00      	nop
 8005c5a:	3724      	adds	r7, #36	; 0x24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	58000400 	.word	0x58000400

08005c68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	460b      	mov	r3, r1
 8005c72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	691a      	ldr	r2, [r3, #16]
 8005c78:	887b      	ldrh	r3, [r7, #2]
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d002      	beq.n	8005c86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005c80:	2301      	movs	r3, #1
 8005c82:	73fb      	strb	r3, [r7, #15]
 8005c84:	e001      	b.n	8005c8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005c86:	2300      	movs	r3, #0
 8005c88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3714      	adds	r7, #20
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	807b      	strh	r3, [r7, #2]
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ca8:	787b      	ldrb	r3, [r7, #1]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d003      	beq.n	8005cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cae:	887a      	ldrh	r2, [r7, #2]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005cb4:	e003      	b.n	8005cbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005cb6:	887b      	ldrh	r3, [r7, #2]
 8005cb8:	041a      	lsls	r2, r3, #16
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	619a      	str	r2, [r3, #24]
}
 8005cbe:	bf00      	nop
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
	...

08005ccc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005cd4:	4a08      	ldr	r2, [pc, #32]	; (8005cf8 <HAL_HSEM_FastTake+0x2c>)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	3320      	adds	r3, #32
 8005cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cde:	4a07      	ldr	r2, [pc, #28]	; (8005cfc <HAL_HSEM_FastTake+0x30>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d101      	bne.n	8005ce8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	e000      	b.n	8005cea <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	58026400 	.word	0x58026400
 8005cfc:	80000300 	.word	0x80000300

08005d00 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005d0a:	4906      	ldr	r1, [pc, #24]	; (8005d24 <HAL_HSEM_Release+0x24>)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr
 8005d24:	58026400 	.word	0x58026400

08005d28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d2a:	b08f      	sub	sp, #60	; 0x3c
 8005d2c:	af0a      	add	r7, sp, #40	; 0x28
 8005d2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e116      	b.n	8005f68 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d106      	bne.n	8005d5a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f7fc fb6d 	bl	8002434 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2203      	movs	r2, #3
 8005d5e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d102      	bne.n	8005d74 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f005 fa3d 	bl	800b1f8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	603b      	str	r3, [r7, #0]
 8005d84:	687e      	ldr	r6, [r7, #4]
 8005d86:	466d      	mov	r5, sp
 8005d88:	f106 0410 	add.w	r4, r6, #16
 8005d8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005d98:	e885 0003 	stmia.w	r5, {r0, r1}
 8005d9c:	1d33      	adds	r3, r6, #4
 8005d9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005da0:	6838      	ldr	r0, [r7, #0]
 8005da2:	f005 f9bb 	bl	800b11c <USB_CoreInit>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d005      	beq.n	8005db8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2202      	movs	r2, #2
 8005db0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e0d7      	b.n	8005f68 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f005 fa2b 	bl	800b21a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	73fb      	strb	r3, [r7, #15]
 8005dc8:	e04a      	b.n	8005e60 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005dca:	7bfa      	ldrb	r2, [r7, #15]
 8005dcc:	6879      	ldr	r1, [r7, #4]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	00db      	lsls	r3, r3, #3
 8005dd2:	1a9b      	subs	r3, r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	440b      	add	r3, r1
 8005dd8:	333d      	adds	r3, #61	; 0x3d
 8005dda:	2201      	movs	r2, #1
 8005ddc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005dde:	7bfa      	ldrb	r2, [r7, #15]
 8005de0:	6879      	ldr	r1, [r7, #4]
 8005de2:	4613      	mov	r3, r2
 8005de4:	00db      	lsls	r3, r3, #3
 8005de6:	1a9b      	subs	r3, r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	440b      	add	r3, r1
 8005dec:	333c      	adds	r3, #60	; 0x3c
 8005dee:	7bfa      	ldrb	r2, [r7, #15]
 8005df0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005df2:	7bfa      	ldrb	r2, [r7, #15]
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
 8005df6:	b298      	uxth	r0, r3
 8005df8:	6879      	ldr	r1, [r7, #4]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	00db      	lsls	r3, r3, #3
 8005dfe:	1a9b      	subs	r3, r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	440b      	add	r3, r1
 8005e04:	3342      	adds	r3, #66	; 0x42
 8005e06:	4602      	mov	r2, r0
 8005e08:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005e0a:	7bfa      	ldrb	r2, [r7, #15]
 8005e0c:	6879      	ldr	r1, [r7, #4]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	1a9b      	subs	r3, r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	440b      	add	r3, r1
 8005e18:	333f      	adds	r3, #63	; 0x3f
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005e1e:	7bfa      	ldrb	r2, [r7, #15]
 8005e20:	6879      	ldr	r1, [r7, #4]
 8005e22:	4613      	mov	r3, r2
 8005e24:	00db      	lsls	r3, r3, #3
 8005e26:	1a9b      	subs	r3, r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	440b      	add	r3, r1
 8005e2c:	3344      	adds	r3, #68	; 0x44
 8005e2e:	2200      	movs	r2, #0
 8005e30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005e32:	7bfa      	ldrb	r2, [r7, #15]
 8005e34:	6879      	ldr	r1, [r7, #4]
 8005e36:	4613      	mov	r3, r2
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	1a9b      	subs	r3, r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	440b      	add	r3, r1
 8005e40:	3348      	adds	r3, #72	; 0x48
 8005e42:	2200      	movs	r2, #0
 8005e44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005e46:	7bfa      	ldrb	r2, [r7, #15]
 8005e48:	6879      	ldr	r1, [r7, #4]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	00db      	lsls	r3, r3, #3
 8005e4e:	1a9b      	subs	r3, r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	440b      	add	r3, r1
 8005e54:	3350      	adds	r3, #80	; 0x50
 8005e56:	2200      	movs	r2, #0
 8005e58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e5a:	7bfb      	ldrb	r3, [r7, #15]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	73fb      	strb	r3, [r7, #15]
 8005e60:	7bfa      	ldrb	r2, [r7, #15]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d3af      	bcc.n	8005dca <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	73fb      	strb	r3, [r7, #15]
 8005e6e:	e044      	b.n	8005efa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005e70:	7bfa      	ldrb	r2, [r7, #15]
 8005e72:	6879      	ldr	r1, [r7, #4]
 8005e74:	4613      	mov	r3, r2
 8005e76:	00db      	lsls	r3, r3, #3
 8005e78:	1a9b      	subs	r3, r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	440b      	add	r3, r1
 8005e7e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005e82:	2200      	movs	r2, #0
 8005e84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005e86:	7bfa      	ldrb	r2, [r7, #15]
 8005e88:	6879      	ldr	r1, [r7, #4]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	00db      	lsls	r3, r3, #3
 8005e8e:	1a9b      	subs	r3, r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	440b      	add	r3, r1
 8005e94:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005e98:	7bfa      	ldrb	r2, [r7, #15]
 8005e9a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005e9c:	7bfa      	ldrb	r2, [r7, #15]
 8005e9e:	6879      	ldr	r1, [r7, #4]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	1a9b      	subs	r3, r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	440b      	add	r3, r1
 8005eaa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005eae:	2200      	movs	r2, #0
 8005eb0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005eb2:	7bfa      	ldrb	r2, [r7, #15]
 8005eb4:	6879      	ldr	r1, [r7, #4]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	00db      	lsls	r3, r3, #3
 8005eba:	1a9b      	subs	r3, r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	440b      	add	r3, r1
 8005ec0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005ec8:	7bfa      	ldrb	r2, [r7, #15]
 8005eca:	6879      	ldr	r1, [r7, #4]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	00db      	lsls	r3, r3, #3
 8005ed0:	1a9b      	subs	r3, r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	440b      	add	r3, r1
 8005ed6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005eda:	2200      	movs	r2, #0
 8005edc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005ede:	7bfa      	ldrb	r2, [r7, #15]
 8005ee0:	6879      	ldr	r1, [r7, #4]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	1a9b      	subs	r3, r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	440b      	add	r3, r1
 8005eec:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	73fb      	strb	r3, [r7, #15]
 8005efa:	7bfa      	ldrb	r2, [r7, #15]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d3b5      	bcc.n	8005e70 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	603b      	str	r3, [r7, #0]
 8005f0a:	687e      	ldr	r6, [r7, #4]
 8005f0c:	466d      	mov	r5, sp
 8005f0e:	f106 0410 	add.w	r4, r6, #16
 8005f12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005f1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005f22:	1d33      	adds	r3, r6, #4
 8005f24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f26:	6838      	ldr	r0, [r7, #0]
 8005f28:	f005 f9c4 	bl	800b2b4 <USB_DevInit>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d005      	beq.n	8005f3e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2202      	movs	r2, #2
 8005f36:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e014      	b.n	8005f68 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d102      	bne.n	8005f5c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f80a 	bl	8005f70 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4618      	mov	r0, r3
 8005f62:	f005 fb7e 	bl	800b662 <USB_DevDisconnect>

  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f70 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f9e:	4b05      	ldr	r3, [pc, #20]	; (8005fb4 <HAL_PCDEx_ActivateLPM+0x44>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3714      	adds	r7, #20
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr
 8005fb4:	10000003 	.word	0x10000003

08005fb8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005fc0:	4b29      	ldr	r3, [pc, #164]	; (8006068 <HAL_PWREx_ConfigSupply+0xb0>)
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	f003 0307 	and.w	r3, r3, #7
 8005fc8:	2b06      	cmp	r3, #6
 8005fca:	d00a      	beq.n	8005fe2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005fcc:	4b26      	ldr	r3, [pc, #152]	; (8006068 <HAL_PWREx_ConfigSupply+0xb0>)
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d001      	beq.n	8005fde <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e040      	b.n	8006060 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	e03e      	b.n	8006060 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005fe2:	4b21      	ldr	r3, [pc, #132]	; (8006068 <HAL_PWREx_ConfigSupply+0xb0>)
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005fea:	491f      	ldr	r1, [pc, #124]	; (8006068 <HAL_PWREx_ConfigSupply+0xb0>)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005ff2:	f7fc fbeb 	bl	80027cc <HAL_GetTick>
 8005ff6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ff8:	e009      	b.n	800600e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005ffa:	f7fc fbe7 	bl	80027cc <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006008:	d901      	bls.n	800600e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e028      	b.n	8006060 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800600e:	4b16      	ldr	r3, [pc, #88]	; (8006068 <HAL_PWREx_ConfigSupply+0xb0>)
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800601a:	d1ee      	bne.n	8005ffa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b1e      	cmp	r3, #30
 8006020:	d008      	beq.n	8006034 <HAL_PWREx_ConfigSupply+0x7c>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2b2e      	cmp	r3, #46	; 0x2e
 8006026:	d005      	beq.n	8006034 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b1d      	cmp	r3, #29
 800602c:	d002      	beq.n	8006034 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2b2d      	cmp	r3, #45	; 0x2d
 8006032:	d114      	bne.n	800605e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006034:	f7fc fbca 	bl	80027cc <HAL_GetTick>
 8006038:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800603a:	e009      	b.n	8006050 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800603c:	f7fc fbc6 	bl	80027cc <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800604a:	d901      	bls.n	8006050 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e007      	b.n	8006060 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006050:	4b05      	ldr	r3, [pc, #20]	; (8006068 <HAL_PWREx_ConfigSupply+0xb0>)
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800605c:	d1ee      	bne.n	800603c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	58024800 	.word	0x58024800

0800606c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800606c:	b480      	push	{r7}
 800606e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006070:	4b05      	ldr	r3, [pc, #20]	; (8006088 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	4a04      	ldr	r2, [pc, #16]	; (8006088 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006076:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800607a:	60d3      	str	r3, [r2, #12]
}
 800607c:	bf00      	nop
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	58024800 	.word	0x58024800

0800608c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08c      	sub	sp, #48	; 0x30
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d102      	bne.n	80060a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	f000 bc1c 	b.w	80068d8 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0301 	and.w	r3, r3, #1
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 8087 	beq.w	80061bc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060ae:	4b9e      	ldr	r3, [pc, #632]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060b8:	4b9b      	ldr	r3, [pc, #620]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 80060ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060bc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80060be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c0:	2b10      	cmp	r3, #16
 80060c2:	d007      	beq.n	80060d4 <HAL_RCC_OscConfig+0x48>
 80060c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c6:	2b18      	cmp	r3, #24
 80060c8:	d110      	bne.n	80060ec <HAL_RCC_OscConfig+0x60>
 80060ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060cc:	f003 0303 	and.w	r3, r3, #3
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d10b      	bne.n	80060ec <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060d4:	4b94      	ldr	r3, [pc, #592]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d06c      	beq.n	80061ba <HAL_RCC_OscConfig+0x12e>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d168      	bne.n	80061ba <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e3f5      	b.n	80068d8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060f4:	d106      	bne.n	8006104 <HAL_RCC_OscConfig+0x78>
 80060f6:	4b8c      	ldr	r3, [pc, #560]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a8b      	ldr	r2, [pc, #556]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 80060fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006100:	6013      	str	r3, [r2, #0]
 8006102:	e02e      	b.n	8006162 <HAL_RCC_OscConfig+0xd6>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10c      	bne.n	8006126 <HAL_RCC_OscConfig+0x9a>
 800610c:	4b86      	ldr	r3, [pc, #536]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a85      	ldr	r2, [pc, #532]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 8006112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006116:	6013      	str	r3, [r2, #0]
 8006118:	4b83      	ldr	r3, [pc, #524]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a82      	ldr	r2, [pc, #520]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 800611e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006122:	6013      	str	r3, [r2, #0]
 8006124:	e01d      	b.n	8006162 <HAL_RCC_OscConfig+0xd6>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800612e:	d10c      	bne.n	800614a <HAL_RCC_OscConfig+0xbe>
 8006130:	4b7d      	ldr	r3, [pc, #500]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a7c      	ldr	r2, [pc, #496]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 8006136:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800613a:	6013      	str	r3, [r2, #0]
 800613c:	4b7a      	ldr	r3, [pc, #488]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a79      	ldr	r2, [pc, #484]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 8006142:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006146:	6013      	str	r3, [r2, #0]
 8006148:	e00b      	b.n	8006162 <HAL_RCC_OscConfig+0xd6>
 800614a:	4b77      	ldr	r3, [pc, #476]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a76      	ldr	r2, [pc, #472]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 8006150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006154:	6013      	str	r3, [r2, #0]
 8006156:	4b74      	ldr	r3, [pc, #464]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a73      	ldr	r2, [pc, #460]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 800615c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006160:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d013      	beq.n	8006192 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800616a:	f7fc fb2f 	bl	80027cc <HAL_GetTick>
 800616e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006170:	e008      	b.n	8006184 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006172:	f7fc fb2b 	bl	80027cc <HAL_GetTick>
 8006176:	4602      	mov	r2, r0
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	2b64      	cmp	r3, #100	; 0x64
 800617e:	d901      	bls.n	8006184 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e3a9      	b.n	80068d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006184:	4b68      	ldr	r3, [pc, #416]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d0f0      	beq.n	8006172 <HAL_RCC_OscConfig+0xe6>
 8006190:	e014      	b.n	80061bc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006192:	f7fc fb1b 	bl	80027cc <HAL_GetTick>
 8006196:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006198:	e008      	b.n	80061ac <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800619a:	f7fc fb17 	bl	80027cc <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b64      	cmp	r3, #100	; 0x64
 80061a6:	d901      	bls.n	80061ac <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e395      	b.n	80068d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80061ac:	4b5e      	ldr	r3, [pc, #376]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1f0      	bne.n	800619a <HAL_RCC_OscConfig+0x10e>
 80061b8:	e000      	b.n	80061bc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061ba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0302 	and.w	r3, r3, #2
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 80ca 	beq.w	800635e <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061ca:	4b57      	ldr	r3, [pc, #348]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061d2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80061d4:	4b54      	ldr	r3, [pc, #336]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 80061d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80061da:	6a3b      	ldr	r3, [r7, #32]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d007      	beq.n	80061f0 <HAL_RCC_OscConfig+0x164>
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	2b18      	cmp	r3, #24
 80061e4:	d156      	bne.n	8006294 <HAL_RCC_OscConfig+0x208>
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	f003 0303 	and.w	r3, r3, #3
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d151      	bne.n	8006294 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061f0:	4b4d      	ldr	r3, [pc, #308]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0304 	and.w	r3, r3, #4
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d005      	beq.n	8006208 <HAL_RCC_OscConfig+0x17c>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d101      	bne.n	8006208 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e367      	b.n	80068d8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006208:	4b47      	ldr	r3, [pc, #284]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f023 0219 	bic.w	r2, r3, #25
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	4944      	ldr	r1, [pc, #272]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 8006216:	4313      	orrs	r3, r2
 8006218:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800621a:	f7fc fad7 	bl	80027cc <HAL_GetTick>
 800621e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006220:	e008      	b.n	8006234 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006222:	f7fc fad3 	bl	80027cc <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	2b02      	cmp	r3, #2
 800622e:	d901      	bls.n	8006234 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e351      	b.n	80068d8 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006234:	4b3c      	ldr	r3, [pc, #240]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0304 	and.w	r3, r3, #4
 800623c:	2b00      	cmp	r3, #0
 800623e:	d0f0      	beq.n	8006222 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006240:	f7fc faf4 	bl	800282c <HAL_GetREVID>
 8006244:	4603      	mov	r3, r0
 8006246:	f241 0203 	movw	r2, #4099	; 0x1003
 800624a:	4293      	cmp	r3, r2
 800624c:	d817      	bhi.n	800627e <HAL_RCC_OscConfig+0x1f2>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	2b40      	cmp	r3, #64	; 0x40
 8006254:	d108      	bne.n	8006268 <HAL_RCC_OscConfig+0x1dc>
 8006256:	4b34      	ldr	r3, [pc, #208]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800625e:	4a32      	ldr	r2, [pc, #200]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 8006260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006264:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006266:	e07a      	b.n	800635e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006268:	4b2f      	ldr	r3, [pc, #188]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	031b      	lsls	r3, r3, #12
 8006276:	492c      	ldr	r1, [pc, #176]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 8006278:	4313      	orrs	r3, r2
 800627a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800627c:	e06f      	b.n	800635e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800627e:	4b2a      	ldr	r3, [pc, #168]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	061b      	lsls	r3, r3, #24
 800628c:	4926      	ldr	r1, [pc, #152]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 800628e:	4313      	orrs	r3, r2
 8006290:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006292:	e064      	b.n	800635e <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d047      	beq.n	800632c <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800629c:	4b22      	ldr	r3, [pc, #136]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f023 0219 	bic.w	r2, r3, #25
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	491f      	ldr	r1, [pc, #124]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ae:	f7fc fa8d 	bl	80027cc <HAL_GetTick>
 80062b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062b4:	e008      	b.n	80062c8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062b6:	f7fc fa89 	bl	80027cc <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d901      	bls.n	80062c8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e307      	b.n	80068d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062c8:	4b17      	ldr	r3, [pc, #92]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0304 	and.w	r3, r3, #4
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d0f0      	beq.n	80062b6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062d4:	f7fc faaa 	bl	800282c <HAL_GetREVID>
 80062d8:	4603      	mov	r3, r0
 80062da:	f241 0203 	movw	r2, #4099	; 0x1003
 80062de:	4293      	cmp	r3, r2
 80062e0:	d817      	bhi.n	8006312 <HAL_RCC_OscConfig+0x286>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	2b40      	cmp	r3, #64	; 0x40
 80062e8:	d108      	bne.n	80062fc <HAL_RCC_OscConfig+0x270>
 80062ea:	4b0f      	ldr	r3, [pc, #60]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80062f2:	4a0d      	ldr	r2, [pc, #52]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 80062f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062f8:	6053      	str	r3, [r2, #4]
 80062fa:	e030      	b.n	800635e <HAL_RCC_OscConfig+0x2d2>
 80062fc:	4b0a      	ldr	r3, [pc, #40]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	031b      	lsls	r3, r3, #12
 800630a:	4907      	ldr	r1, [pc, #28]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 800630c:	4313      	orrs	r3, r2
 800630e:	604b      	str	r3, [r1, #4]
 8006310:	e025      	b.n	800635e <HAL_RCC_OscConfig+0x2d2>
 8006312:	4b05      	ldr	r3, [pc, #20]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	061b      	lsls	r3, r3, #24
 8006320:	4901      	ldr	r1, [pc, #4]	; (8006328 <HAL_RCC_OscConfig+0x29c>)
 8006322:	4313      	orrs	r3, r2
 8006324:	604b      	str	r3, [r1, #4]
 8006326:	e01a      	b.n	800635e <HAL_RCC_OscConfig+0x2d2>
 8006328:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800632c:	4b9e      	ldr	r3, [pc, #632]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a9d      	ldr	r2, [pc, #628]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 8006332:	f023 0301 	bic.w	r3, r3, #1
 8006336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006338:	f7fc fa48 	bl	80027cc <HAL_GetTick>
 800633c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800633e:	e008      	b.n	8006352 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006340:	f7fc fa44 	bl	80027cc <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	2b02      	cmp	r3, #2
 800634c:	d901      	bls.n	8006352 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e2c2      	b.n	80068d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006352:	4b95      	ldr	r3, [pc, #596]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0304 	and.w	r3, r3, #4
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1f0      	bne.n	8006340 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0310 	and.w	r3, r3, #16
 8006366:	2b00      	cmp	r3, #0
 8006368:	f000 80a9 	beq.w	80064be <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800636c:	4b8e      	ldr	r3, [pc, #568]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006374:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006376:	4b8c      	ldr	r3, [pc, #560]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 8006378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	2b08      	cmp	r3, #8
 8006380:	d007      	beq.n	8006392 <HAL_RCC_OscConfig+0x306>
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	2b18      	cmp	r3, #24
 8006386:	d13a      	bne.n	80063fe <HAL_RCC_OscConfig+0x372>
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	f003 0303 	and.w	r3, r3, #3
 800638e:	2b01      	cmp	r3, #1
 8006390:	d135      	bne.n	80063fe <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006392:	4b85      	ldr	r3, [pc, #532]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800639a:	2b00      	cmp	r3, #0
 800639c:	d005      	beq.n	80063aa <HAL_RCC_OscConfig+0x31e>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	2b80      	cmp	r3, #128	; 0x80
 80063a4:	d001      	beq.n	80063aa <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e296      	b.n	80068d8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80063aa:	f7fc fa3f 	bl	800282c <HAL_GetREVID>
 80063ae:	4603      	mov	r3, r0
 80063b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d817      	bhi.n	80063e8 <HAL_RCC_OscConfig+0x35c>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	2b20      	cmp	r3, #32
 80063be:	d108      	bne.n	80063d2 <HAL_RCC_OscConfig+0x346>
 80063c0:	4b79      	ldr	r3, [pc, #484]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80063c8:	4a77      	ldr	r2, [pc, #476]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 80063ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063ce:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80063d0:	e075      	b.n	80064be <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80063d2:	4b75      	ldr	r3, [pc, #468]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	069b      	lsls	r3, r3, #26
 80063e0:	4971      	ldr	r1, [pc, #452]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80063e6:	e06a      	b.n	80064be <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80063e8:	4b6f      	ldr	r3, [pc, #444]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a1b      	ldr	r3, [r3, #32]
 80063f4:	061b      	lsls	r3, r3, #24
 80063f6:	496c      	ldr	r1, [pc, #432]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 80063f8:	4313      	orrs	r3, r2
 80063fa:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80063fc:	e05f      	b.n	80064be <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	69db      	ldr	r3, [r3, #28]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d042      	beq.n	800648c <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006406:	4b68      	ldr	r3, [pc, #416]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a67      	ldr	r2, [pc, #412]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 800640c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006412:	f7fc f9db 	bl	80027cc <HAL_GetTick>
 8006416:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006418:	e008      	b.n	800642c <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800641a:	f7fc f9d7 	bl	80027cc <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	2b02      	cmp	r3, #2
 8006426:	d901      	bls.n	800642c <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e255      	b.n	80068d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800642c:	4b5e      	ldr	r3, [pc, #376]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006434:	2b00      	cmp	r3, #0
 8006436:	d0f0      	beq.n	800641a <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006438:	f7fc f9f8 	bl	800282c <HAL_GetREVID>
 800643c:	4603      	mov	r3, r0
 800643e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006442:	4293      	cmp	r3, r2
 8006444:	d817      	bhi.n	8006476 <HAL_RCC_OscConfig+0x3ea>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	2b20      	cmp	r3, #32
 800644c:	d108      	bne.n	8006460 <HAL_RCC_OscConfig+0x3d4>
 800644e:	4b56      	ldr	r3, [pc, #344]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006456:	4a54      	ldr	r2, [pc, #336]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 8006458:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800645c:	6053      	str	r3, [r2, #4]
 800645e:	e02e      	b.n	80064be <HAL_RCC_OscConfig+0x432>
 8006460:	4b51      	ldr	r3, [pc, #324]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a1b      	ldr	r3, [r3, #32]
 800646c:	069b      	lsls	r3, r3, #26
 800646e:	494e      	ldr	r1, [pc, #312]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 8006470:	4313      	orrs	r3, r2
 8006472:	604b      	str	r3, [r1, #4]
 8006474:	e023      	b.n	80064be <HAL_RCC_OscConfig+0x432>
 8006476:	4b4c      	ldr	r3, [pc, #304]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	061b      	lsls	r3, r3, #24
 8006484:	4948      	ldr	r1, [pc, #288]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 8006486:	4313      	orrs	r3, r2
 8006488:	60cb      	str	r3, [r1, #12]
 800648a:	e018      	b.n	80064be <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800648c:	4b46      	ldr	r3, [pc, #280]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a45      	ldr	r2, [pc, #276]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 8006492:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006498:	f7fc f998 	bl	80027cc <HAL_GetTick>
 800649c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800649e:	e008      	b.n	80064b2 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80064a0:	f7fc f994 	bl	80027cc <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d901      	bls.n	80064b2 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e212      	b.n	80068d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80064b2:	4b3d      	ldr	r3, [pc, #244]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1f0      	bne.n	80064a0 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0308 	and.w	r3, r3, #8
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d036      	beq.n	8006538 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d019      	beq.n	8006506 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064d2:	4b35      	ldr	r3, [pc, #212]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 80064d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064d6:	4a34      	ldr	r2, [pc, #208]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 80064d8:	f043 0301 	orr.w	r3, r3, #1
 80064dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064de:	f7fc f975 	bl	80027cc <HAL_GetTick>
 80064e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80064e4:	e008      	b.n	80064f8 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064e6:	f7fc f971 	bl	80027cc <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d901      	bls.n	80064f8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e1ef      	b.n	80068d8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80064f8:	4b2b      	ldr	r3, [pc, #172]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 80064fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d0f0      	beq.n	80064e6 <HAL_RCC_OscConfig+0x45a>
 8006504:	e018      	b.n	8006538 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006506:	4b28      	ldr	r3, [pc, #160]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 8006508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800650a:	4a27      	ldr	r2, [pc, #156]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 800650c:	f023 0301 	bic.w	r3, r3, #1
 8006510:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006512:	f7fc f95b 	bl	80027cc <HAL_GetTick>
 8006516:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006518:	e008      	b.n	800652c <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800651a:	f7fc f957 	bl	80027cc <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	2b02      	cmp	r3, #2
 8006526:	d901      	bls.n	800652c <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e1d5      	b.n	80068d8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800652c:	4b1e      	ldr	r3, [pc, #120]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 800652e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1f0      	bne.n	800651a <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0320 	and.w	r3, r3, #32
 8006540:	2b00      	cmp	r3, #0
 8006542:	d039      	beq.n	80065b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d019      	beq.n	8006580 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800654c:	4b16      	ldr	r3, [pc, #88]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a15      	ldr	r2, [pc, #84]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 8006552:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006556:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006558:	f7fc f938 	bl	80027cc <HAL_GetTick>
 800655c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800655e:	e008      	b.n	8006572 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006560:	f7fc f934 	bl	80027cc <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	2b02      	cmp	r3, #2
 800656c:	d901      	bls.n	8006572 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e1b2      	b.n	80068d8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006572:	4b0d      	ldr	r3, [pc, #52]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d0f0      	beq.n	8006560 <HAL_RCC_OscConfig+0x4d4>
 800657e:	e01b      	b.n	80065b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006580:	4b09      	ldr	r3, [pc, #36]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a08      	ldr	r2, [pc, #32]	; (80065a8 <HAL_RCC_OscConfig+0x51c>)
 8006586:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800658a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800658c:	f7fc f91e 	bl	80027cc <HAL_GetTick>
 8006590:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006592:	e00b      	b.n	80065ac <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006594:	f7fc f91a 	bl	80027cc <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d904      	bls.n	80065ac <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e198      	b.n	80068d8 <HAL_RCC_OscConfig+0x84c>
 80065a6:	bf00      	nop
 80065a8:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80065ac:	4ba3      	ldr	r3, [pc, #652]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1ed      	bne.n	8006594 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0304 	and.w	r3, r3, #4
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 8081 	beq.w	80066c8 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80065c6:	4b9e      	ldr	r3, [pc, #632]	; (8006840 <HAL_RCC_OscConfig+0x7b4>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a9d      	ldr	r2, [pc, #628]	; (8006840 <HAL_RCC_OscConfig+0x7b4>)
 80065cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065d2:	f7fc f8fb 	bl	80027cc <HAL_GetTick>
 80065d6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065d8:	e008      	b.n	80065ec <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80065da:	f7fc f8f7 	bl	80027cc <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	2b64      	cmp	r3, #100	; 0x64
 80065e6:	d901      	bls.n	80065ec <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e175      	b.n	80068d8 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065ec:	4b94      	ldr	r3, [pc, #592]	; (8006840 <HAL_RCC_OscConfig+0x7b4>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d0f0      	beq.n	80065da <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d106      	bne.n	800660e <HAL_RCC_OscConfig+0x582>
 8006600:	4b8e      	ldr	r3, [pc, #568]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 8006602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006604:	4a8d      	ldr	r2, [pc, #564]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 8006606:	f043 0301 	orr.w	r3, r3, #1
 800660a:	6713      	str	r3, [r2, #112]	; 0x70
 800660c:	e02d      	b.n	800666a <HAL_RCC_OscConfig+0x5de>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10c      	bne.n	8006630 <HAL_RCC_OscConfig+0x5a4>
 8006616:	4b89      	ldr	r3, [pc, #548]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 8006618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800661a:	4a88      	ldr	r2, [pc, #544]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 800661c:	f023 0301 	bic.w	r3, r3, #1
 8006620:	6713      	str	r3, [r2, #112]	; 0x70
 8006622:	4b86      	ldr	r3, [pc, #536]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 8006624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006626:	4a85      	ldr	r2, [pc, #532]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 8006628:	f023 0304 	bic.w	r3, r3, #4
 800662c:	6713      	str	r3, [r2, #112]	; 0x70
 800662e:	e01c      	b.n	800666a <HAL_RCC_OscConfig+0x5de>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	2b05      	cmp	r3, #5
 8006636:	d10c      	bne.n	8006652 <HAL_RCC_OscConfig+0x5c6>
 8006638:	4b80      	ldr	r3, [pc, #512]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 800663a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800663c:	4a7f      	ldr	r2, [pc, #508]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 800663e:	f043 0304 	orr.w	r3, r3, #4
 8006642:	6713      	str	r3, [r2, #112]	; 0x70
 8006644:	4b7d      	ldr	r3, [pc, #500]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 8006646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006648:	4a7c      	ldr	r2, [pc, #496]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 800664a:	f043 0301 	orr.w	r3, r3, #1
 800664e:	6713      	str	r3, [r2, #112]	; 0x70
 8006650:	e00b      	b.n	800666a <HAL_RCC_OscConfig+0x5de>
 8006652:	4b7a      	ldr	r3, [pc, #488]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 8006654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006656:	4a79      	ldr	r2, [pc, #484]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 8006658:	f023 0301 	bic.w	r3, r3, #1
 800665c:	6713      	str	r3, [r2, #112]	; 0x70
 800665e:	4b77      	ldr	r3, [pc, #476]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 8006660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006662:	4a76      	ldr	r2, [pc, #472]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 8006664:	f023 0304 	bic.w	r3, r3, #4
 8006668:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d015      	beq.n	800669e <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006672:	f7fc f8ab 	bl	80027cc <HAL_GetTick>
 8006676:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006678:	e00a      	b.n	8006690 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800667a:	f7fc f8a7 	bl	80027cc <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	f241 3288 	movw	r2, #5000	; 0x1388
 8006688:	4293      	cmp	r3, r2
 800668a:	d901      	bls.n	8006690 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e123      	b.n	80068d8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006690:	4b6a      	ldr	r3, [pc, #424]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 8006692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b00      	cmp	r3, #0
 800669a:	d0ee      	beq.n	800667a <HAL_RCC_OscConfig+0x5ee>
 800669c:	e014      	b.n	80066c8 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800669e:	f7fc f895 	bl	80027cc <HAL_GetTick>
 80066a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80066a4:	e00a      	b.n	80066bc <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066a6:	f7fc f891 	bl	80027cc <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d901      	bls.n	80066bc <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e10d      	b.n	80068d8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80066bc:	4b5f      	ldr	r3, [pc, #380]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 80066be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c0:	f003 0302 	and.w	r3, r3, #2
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1ee      	bne.n	80066a6 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 8102 	beq.w	80068d6 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80066d2:	4b5a      	ldr	r3, [pc, #360]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066da:	2b18      	cmp	r3, #24
 80066dc:	f000 80bd 	beq.w	800685a <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	f040 8095 	bne.w	8006814 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066ea:	4b54      	ldr	r3, [pc, #336]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a53      	ldr	r2, [pc, #332]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 80066f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f6:	f7fc f869 	bl	80027cc <HAL_GetTick>
 80066fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80066fc:	e008      	b.n	8006710 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066fe:	f7fc f865 	bl	80027cc <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	2b02      	cmp	r3, #2
 800670a:	d901      	bls.n	8006710 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e0e3      	b.n	80068d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006710:	4b4a      	ldr	r3, [pc, #296]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1f0      	bne.n	80066fe <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800671c:	4b47      	ldr	r3, [pc, #284]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 800671e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006720:	4b48      	ldr	r3, [pc, #288]	; (8006844 <HAL_RCC_OscConfig+0x7b8>)
 8006722:	4013      	ands	r3, r2
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800672c:	0112      	lsls	r2, r2, #4
 800672e:	430a      	orrs	r2, r1
 8006730:	4942      	ldr	r1, [pc, #264]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 8006732:	4313      	orrs	r3, r2
 8006734:	628b      	str	r3, [r1, #40]	; 0x28
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673a:	3b01      	subs	r3, #1
 800673c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006744:	3b01      	subs	r3, #1
 8006746:	025b      	lsls	r3, r3, #9
 8006748:	b29b      	uxth	r3, r3
 800674a:	431a      	orrs	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006750:	3b01      	subs	r3, #1
 8006752:	041b      	lsls	r3, r3, #16
 8006754:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006758:	431a      	orrs	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800675e:	3b01      	subs	r3, #1
 8006760:	061b      	lsls	r3, r3, #24
 8006762:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006766:	4935      	ldr	r1, [pc, #212]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 8006768:	4313      	orrs	r3, r2
 800676a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800676c:	4b33      	ldr	r3, [pc, #204]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 800676e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006770:	4a32      	ldr	r2, [pc, #200]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 8006772:	f023 0301 	bic.w	r3, r3, #1
 8006776:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006778:	4b30      	ldr	r3, [pc, #192]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 800677a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800677c:	4b32      	ldr	r3, [pc, #200]	; (8006848 <HAL_RCC_OscConfig+0x7bc>)
 800677e:	4013      	ands	r3, r2
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006784:	00d2      	lsls	r2, r2, #3
 8006786:	492d      	ldr	r1, [pc, #180]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 8006788:	4313      	orrs	r3, r2
 800678a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800678c:	4b2b      	ldr	r3, [pc, #172]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 800678e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006790:	f023 020c 	bic.w	r2, r3, #12
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006798:	4928      	ldr	r1, [pc, #160]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 800679a:	4313      	orrs	r3, r2
 800679c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800679e:	4b27      	ldr	r3, [pc, #156]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 80067a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a2:	f023 0202 	bic.w	r2, r3, #2
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067aa:	4924      	ldr	r1, [pc, #144]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 80067ac:	4313      	orrs	r3, r2
 80067ae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80067b0:	4b22      	ldr	r3, [pc, #136]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 80067b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b4:	4a21      	ldr	r2, [pc, #132]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 80067b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067bc:	4b1f      	ldr	r3, [pc, #124]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 80067be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c0:	4a1e      	ldr	r2, [pc, #120]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 80067c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80067c8:	4b1c      	ldr	r3, [pc, #112]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 80067ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067cc:	4a1b      	ldr	r2, [pc, #108]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 80067ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80067d4:	4b19      	ldr	r3, [pc, #100]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 80067d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d8:	4a18      	ldr	r2, [pc, #96]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 80067da:	f043 0301 	orr.w	r3, r3, #1
 80067de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067e0:	4b16      	ldr	r3, [pc, #88]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a15      	ldr	r2, [pc, #84]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 80067e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ec:	f7fb ffee 	bl	80027cc <HAL_GetTick>
 80067f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80067f2:	e008      	b.n	8006806 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067f4:	f7fb ffea 	bl	80027cc <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d901      	bls.n	8006806 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e068      	b.n	80068d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006806:	4b0d      	ldr	r3, [pc, #52]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d0f0      	beq.n	80067f4 <HAL_RCC_OscConfig+0x768>
 8006812:	e060      	b.n	80068d6 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006814:	4b09      	ldr	r3, [pc, #36]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a08      	ldr	r2, [pc, #32]	; (800683c <HAL_RCC_OscConfig+0x7b0>)
 800681a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800681e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006820:	f7fb ffd4 	bl	80027cc <HAL_GetTick>
 8006824:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006826:	e011      	b.n	800684c <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006828:	f7fb ffd0 	bl	80027cc <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	2b02      	cmp	r3, #2
 8006834:	d90a      	bls.n	800684c <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e04e      	b.n	80068d8 <HAL_RCC_OscConfig+0x84c>
 800683a:	bf00      	nop
 800683c:	58024400 	.word	0x58024400
 8006840:	58024800 	.word	0x58024800
 8006844:	fffffc0c 	.word	0xfffffc0c
 8006848:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800684c:	4b24      	ldr	r3, [pc, #144]	; (80068e0 <HAL_RCC_OscConfig+0x854>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1e7      	bne.n	8006828 <HAL_RCC_OscConfig+0x79c>
 8006858:	e03d      	b.n	80068d6 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800685a:	4b21      	ldr	r3, [pc, #132]	; (80068e0 <HAL_RCC_OscConfig+0x854>)
 800685c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006860:	4b1f      	ldr	r3, [pc, #124]	; (80068e0 <HAL_RCC_OscConfig+0x854>)
 8006862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006864:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686a:	2b01      	cmp	r3, #1
 800686c:	d031      	beq.n	80068d2 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	f003 0203 	and.w	r2, r3, #3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006878:	429a      	cmp	r2, r3
 800687a:	d12a      	bne.n	80068d2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	091b      	lsrs	r3, r3, #4
 8006880:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006888:	429a      	cmp	r2, r3
 800688a:	d122      	bne.n	80068d2 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006896:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006898:	429a      	cmp	r2, r3
 800689a:	d11a      	bne.n	80068d2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	0a5b      	lsrs	r3, r3, #9
 80068a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d111      	bne.n	80068d2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	0c1b      	lsrs	r3, r3, #16
 80068b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ba:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80068bc:	429a      	cmp	r2, r3
 80068be:	d108      	bne.n	80068d2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	0e1b      	lsrs	r3, r3, #24
 80068c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068cc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d001      	beq.n	80068d6 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e000      	b.n	80068d8 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3730      	adds	r7, #48	; 0x30
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	58024400 	.word	0x58024400

080068e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b086      	sub	sp, #24
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e19c      	b.n	8006c32 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068f8:	4b8a      	ldr	r3, [pc, #552]	; (8006b24 <HAL_RCC_ClockConfig+0x240>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 030f 	and.w	r3, r3, #15
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	429a      	cmp	r2, r3
 8006904:	d910      	bls.n	8006928 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006906:	4b87      	ldr	r3, [pc, #540]	; (8006b24 <HAL_RCC_ClockConfig+0x240>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f023 020f 	bic.w	r2, r3, #15
 800690e:	4985      	ldr	r1, [pc, #532]	; (8006b24 <HAL_RCC_ClockConfig+0x240>)
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	4313      	orrs	r3, r2
 8006914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006916:	4b83      	ldr	r3, [pc, #524]	; (8006b24 <HAL_RCC_ClockConfig+0x240>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 030f 	and.w	r3, r3, #15
 800691e:	683a      	ldr	r2, [r7, #0]
 8006920:	429a      	cmp	r2, r3
 8006922:	d001      	beq.n	8006928 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e184      	b.n	8006c32 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0304 	and.w	r3, r3, #4
 8006930:	2b00      	cmp	r3, #0
 8006932:	d010      	beq.n	8006956 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	691a      	ldr	r2, [r3, #16]
 8006938:	4b7b      	ldr	r3, [pc, #492]	; (8006b28 <HAL_RCC_ClockConfig+0x244>)
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006940:	429a      	cmp	r2, r3
 8006942:	d908      	bls.n	8006956 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006944:	4b78      	ldr	r3, [pc, #480]	; (8006b28 <HAL_RCC_ClockConfig+0x244>)
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	4975      	ldr	r1, [pc, #468]	; (8006b28 <HAL_RCC_ClockConfig+0x244>)
 8006952:	4313      	orrs	r3, r2
 8006954:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0308 	and.w	r3, r3, #8
 800695e:	2b00      	cmp	r3, #0
 8006960:	d010      	beq.n	8006984 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	695a      	ldr	r2, [r3, #20]
 8006966:	4b70      	ldr	r3, [pc, #448]	; (8006b28 <HAL_RCC_ClockConfig+0x244>)
 8006968:	69db      	ldr	r3, [r3, #28]
 800696a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800696e:	429a      	cmp	r2, r3
 8006970:	d908      	bls.n	8006984 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006972:	4b6d      	ldr	r3, [pc, #436]	; (8006b28 <HAL_RCC_ClockConfig+0x244>)
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	496a      	ldr	r1, [pc, #424]	; (8006b28 <HAL_RCC_ClockConfig+0x244>)
 8006980:	4313      	orrs	r3, r2
 8006982:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0310 	and.w	r3, r3, #16
 800698c:	2b00      	cmp	r3, #0
 800698e:	d010      	beq.n	80069b2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	699a      	ldr	r2, [r3, #24]
 8006994:	4b64      	ldr	r3, [pc, #400]	; (8006b28 <HAL_RCC_ClockConfig+0x244>)
 8006996:	69db      	ldr	r3, [r3, #28]
 8006998:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800699c:	429a      	cmp	r2, r3
 800699e:	d908      	bls.n	80069b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80069a0:	4b61      	ldr	r3, [pc, #388]	; (8006b28 <HAL_RCC_ClockConfig+0x244>)
 80069a2:	69db      	ldr	r3, [r3, #28]
 80069a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	495e      	ldr	r1, [pc, #376]	; (8006b28 <HAL_RCC_ClockConfig+0x244>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0320 	and.w	r3, r3, #32
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d010      	beq.n	80069e0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	69da      	ldr	r2, [r3, #28]
 80069c2:	4b59      	ldr	r3, [pc, #356]	; (8006b28 <HAL_RCC_ClockConfig+0x244>)
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d908      	bls.n	80069e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80069ce:	4b56      	ldr	r3, [pc, #344]	; (8006b28 <HAL_RCC_ClockConfig+0x244>)
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	69db      	ldr	r3, [r3, #28]
 80069da:	4953      	ldr	r1, [pc, #332]	; (8006b28 <HAL_RCC_ClockConfig+0x244>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0302 	and.w	r3, r3, #2
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d010      	beq.n	8006a0e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	68da      	ldr	r2, [r3, #12]
 80069f0:	4b4d      	ldr	r3, [pc, #308]	; (8006b28 <HAL_RCC_ClockConfig+0x244>)
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	f003 030f 	and.w	r3, r3, #15
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d908      	bls.n	8006a0e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069fc:	4b4a      	ldr	r3, [pc, #296]	; (8006b28 <HAL_RCC_ClockConfig+0x244>)
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	f023 020f 	bic.w	r2, r3, #15
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	4947      	ldr	r1, [pc, #284]	; (8006b28 <HAL_RCC_ClockConfig+0x244>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d055      	beq.n	8006ac6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006a1a:	4b43      	ldr	r3, [pc, #268]	; (8006b28 <HAL_RCC_ClockConfig+0x244>)
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	4940      	ldr	r1, [pc, #256]	; (8006b28 <HAL_RCC_ClockConfig+0x244>)
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d107      	bne.n	8006a44 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a34:	4b3c      	ldr	r3, [pc, #240]	; (8006b28 <HAL_RCC_ClockConfig+0x244>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d121      	bne.n	8006a84 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e0f6      	b.n	8006c32 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	2b03      	cmp	r3, #3
 8006a4a:	d107      	bne.n	8006a5c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a4c:	4b36      	ldr	r3, [pc, #216]	; (8006b28 <HAL_RCC_ClockConfig+0x244>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d115      	bne.n	8006a84 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e0ea      	b.n	8006c32 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d107      	bne.n	8006a74 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006a64:	4b30      	ldr	r3, [pc, #192]	; (8006b28 <HAL_RCC_ClockConfig+0x244>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d109      	bne.n	8006a84 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e0de      	b.n	8006c32 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a74:	4b2c      	ldr	r3, [pc, #176]	; (8006b28 <HAL_RCC_ClockConfig+0x244>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0304 	and.w	r3, r3, #4
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d101      	bne.n	8006a84 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e0d6      	b.n	8006c32 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a84:	4b28      	ldr	r3, [pc, #160]	; (8006b28 <HAL_RCC_ClockConfig+0x244>)
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	f023 0207 	bic.w	r2, r3, #7
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	4925      	ldr	r1, [pc, #148]	; (8006b28 <HAL_RCC_ClockConfig+0x244>)
 8006a92:	4313      	orrs	r3, r2
 8006a94:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a96:	f7fb fe99 	bl	80027cc <HAL_GetTick>
 8006a9a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a9c:	e00a      	b.n	8006ab4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a9e:	f7fb fe95 	bl	80027cc <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d901      	bls.n	8006ab4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e0be      	b.n	8006c32 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ab4:	4b1c      	ldr	r3, [pc, #112]	; (8006b28 <HAL_RCC_ClockConfig+0x244>)
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	00db      	lsls	r3, r3, #3
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d1eb      	bne.n	8006a9e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0302 	and.w	r3, r3, #2
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d010      	beq.n	8006af4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68da      	ldr	r2, [r3, #12]
 8006ad6:	4b14      	ldr	r3, [pc, #80]	; (8006b28 <HAL_RCC_ClockConfig+0x244>)
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	f003 030f 	and.w	r3, r3, #15
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d208      	bcs.n	8006af4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ae2:	4b11      	ldr	r3, [pc, #68]	; (8006b28 <HAL_RCC_ClockConfig+0x244>)
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	f023 020f 	bic.w	r2, r3, #15
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	490e      	ldr	r1, [pc, #56]	; (8006b28 <HAL_RCC_ClockConfig+0x244>)
 8006af0:	4313      	orrs	r3, r2
 8006af2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006af4:	4b0b      	ldr	r3, [pc, #44]	; (8006b24 <HAL_RCC_ClockConfig+0x240>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 030f 	and.w	r3, r3, #15
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d214      	bcs.n	8006b2c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b02:	4b08      	ldr	r3, [pc, #32]	; (8006b24 <HAL_RCC_ClockConfig+0x240>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f023 020f 	bic.w	r2, r3, #15
 8006b0a:	4906      	ldr	r1, [pc, #24]	; (8006b24 <HAL_RCC_ClockConfig+0x240>)
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b12:	4b04      	ldr	r3, [pc, #16]	; (8006b24 <HAL_RCC_ClockConfig+0x240>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 030f 	and.w	r3, r3, #15
 8006b1a:	683a      	ldr	r2, [r7, #0]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d005      	beq.n	8006b2c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e086      	b.n	8006c32 <HAL_RCC_ClockConfig+0x34e>
 8006b24:	52002000 	.word	0x52002000
 8006b28:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0304 	and.w	r3, r3, #4
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d010      	beq.n	8006b5a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	691a      	ldr	r2, [r3, #16]
 8006b3c:	4b3f      	ldr	r3, [pc, #252]	; (8006c3c <HAL_RCC_ClockConfig+0x358>)
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d208      	bcs.n	8006b5a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006b48:	4b3c      	ldr	r3, [pc, #240]	; (8006c3c <HAL_RCC_ClockConfig+0x358>)
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	4939      	ldr	r1, [pc, #228]	; (8006c3c <HAL_RCC_ClockConfig+0x358>)
 8006b56:	4313      	orrs	r3, r2
 8006b58:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0308 	and.w	r3, r3, #8
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d010      	beq.n	8006b88 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	695a      	ldr	r2, [r3, #20]
 8006b6a:	4b34      	ldr	r3, [pc, #208]	; (8006c3c <HAL_RCC_ClockConfig+0x358>)
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d208      	bcs.n	8006b88 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006b76:	4b31      	ldr	r3, [pc, #196]	; (8006c3c <HAL_RCC_ClockConfig+0x358>)
 8006b78:	69db      	ldr	r3, [r3, #28]
 8006b7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	492e      	ldr	r1, [pc, #184]	; (8006c3c <HAL_RCC_ClockConfig+0x358>)
 8006b84:	4313      	orrs	r3, r2
 8006b86:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0310 	and.w	r3, r3, #16
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d010      	beq.n	8006bb6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	699a      	ldr	r2, [r3, #24]
 8006b98:	4b28      	ldr	r3, [pc, #160]	; (8006c3c <HAL_RCC_ClockConfig+0x358>)
 8006b9a:	69db      	ldr	r3, [r3, #28]
 8006b9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d208      	bcs.n	8006bb6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ba4:	4b25      	ldr	r3, [pc, #148]	; (8006c3c <HAL_RCC_ClockConfig+0x358>)
 8006ba6:	69db      	ldr	r3, [r3, #28]
 8006ba8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	4922      	ldr	r1, [pc, #136]	; (8006c3c <HAL_RCC_ClockConfig+0x358>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0320 	and.w	r3, r3, #32
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d010      	beq.n	8006be4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	69da      	ldr	r2, [r3, #28]
 8006bc6:	4b1d      	ldr	r3, [pc, #116]	; (8006c3c <HAL_RCC_ClockConfig+0x358>)
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d208      	bcs.n	8006be4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006bd2:	4b1a      	ldr	r3, [pc, #104]	; (8006c3c <HAL_RCC_ClockConfig+0x358>)
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	69db      	ldr	r3, [r3, #28]
 8006bde:	4917      	ldr	r1, [pc, #92]	; (8006c3c <HAL_RCC_ClockConfig+0x358>)
 8006be0:	4313      	orrs	r3, r2
 8006be2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006be4:	f000 f834 	bl	8006c50 <HAL_RCC_GetSysClockFreq>
 8006be8:	4602      	mov	r2, r0
 8006bea:	4b14      	ldr	r3, [pc, #80]	; (8006c3c <HAL_RCC_ClockConfig+0x358>)
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	0a1b      	lsrs	r3, r3, #8
 8006bf0:	f003 030f 	and.w	r3, r3, #15
 8006bf4:	4912      	ldr	r1, [pc, #72]	; (8006c40 <HAL_RCC_ClockConfig+0x35c>)
 8006bf6:	5ccb      	ldrb	r3, [r1, r3]
 8006bf8:	f003 031f 	and.w	r3, r3, #31
 8006bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8006c00:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c02:	4b0e      	ldr	r3, [pc, #56]	; (8006c3c <HAL_RCC_ClockConfig+0x358>)
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	f003 030f 	and.w	r3, r3, #15
 8006c0a:	4a0d      	ldr	r2, [pc, #52]	; (8006c40 <HAL_RCC_ClockConfig+0x35c>)
 8006c0c:	5cd3      	ldrb	r3, [r2, r3]
 8006c0e:	f003 031f 	and.w	r3, r3, #31
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	fa22 f303 	lsr.w	r3, r2, r3
 8006c18:	4a0a      	ldr	r2, [pc, #40]	; (8006c44 <HAL_RCC_ClockConfig+0x360>)
 8006c1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c1c:	4a0a      	ldr	r2, [pc, #40]	; (8006c48 <HAL_RCC_ClockConfig+0x364>)
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006c22:	4b0a      	ldr	r3, [pc, #40]	; (8006c4c <HAL_RCC_ClockConfig+0x368>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fb fd86 	bl	8002738 <HAL_InitTick>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3718      	adds	r7, #24
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	58024400 	.word	0x58024400
 8006c40:	0800c000 	.word	0x0800c000
 8006c44:	24000004 	.word	0x24000004
 8006c48:	24000000 	.word	0x24000000
 8006c4c:	2403841c 	.word	0x2403841c

08006c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b089      	sub	sp, #36	; 0x24
 8006c54:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c56:	4bb3      	ldr	r3, [pc, #716]	; (8006f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c5e:	2b18      	cmp	r3, #24
 8006c60:	f200 8155 	bhi.w	8006f0e <HAL_RCC_GetSysClockFreq+0x2be>
 8006c64:	a201      	add	r2, pc, #4	; (adr r2, 8006c6c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6a:	bf00      	nop
 8006c6c:	08006cd1 	.word	0x08006cd1
 8006c70:	08006f0f 	.word	0x08006f0f
 8006c74:	08006f0f 	.word	0x08006f0f
 8006c78:	08006f0f 	.word	0x08006f0f
 8006c7c:	08006f0f 	.word	0x08006f0f
 8006c80:	08006f0f 	.word	0x08006f0f
 8006c84:	08006f0f 	.word	0x08006f0f
 8006c88:	08006f0f 	.word	0x08006f0f
 8006c8c:	08006cf7 	.word	0x08006cf7
 8006c90:	08006f0f 	.word	0x08006f0f
 8006c94:	08006f0f 	.word	0x08006f0f
 8006c98:	08006f0f 	.word	0x08006f0f
 8006c9c:	08006f0f 	.word	0x08006f0f
 8006ca0:	08006f0f 	.word	0x08006f0f
 8006ca4:	08006f0f 	.word	0x08006f0f
 8006ca8:	08006f0f 	.word	0x08006f0f
 8006cac:	08006cfd 	.word	0x08006cfd
 8006cb0:	08006f0f 	.word	0x08006f0f
 8006cb4:	08006f0f 	.word	0x08006f0f
 8006cb8:	08006f0f 	.word	0x08006f0f
 8006cbc:	08006f0f 	.word	0x08006f0f
 8006cc0:	08006f0f 	.word	0x08006f0f
 8006cc4:	08006f0f 	.word	0x08006f0f
 8006cc8:	08006f0f 	.word	0x08006f0f
 8006ccc:	08006d03 	.word	0x08006d03
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cd0:	4b94      	ldr	r3, [pc, #592]	; (8006f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0320 	and.w	r3, r3, #32
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d009      	beq.n	8006cf0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006cdc:	4b91      	ldr	r3, [pc, #580]	; (8006f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	08db      	lsrs	r3, r3, #3
 8006ce2:	f003 0303 	and.w	r3, r3, #3
 8006ce6:	4a90      	ldr	r2, [pc, #576]	; (8006f28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8006cec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006cee:	e111      	b.n	8006f14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006cf0:	4b8d      	ldr	r3, [pc, #564]	; (8006f28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006cf2:	61bb      	str	r3, [r7, #24]
    break;
 8006cf4:	e10e      	b.n	8006f14 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006cf6:	4b8d      	ldr	r3, [pc, #564]	; (8006f2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006cf8:	61bb      	str	r3, [r7, #24]
    break;
 8006cfa:	e10b      	b.n	8006f14 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006cfc:	4b8c      	ldr	r3, [pc, #560]	; (8006f30 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006cfe:	61bb      	str	r3, [r7, #24]
    break;
 8006d00:	e108      	b.n	8006f14 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d02:	4b88      	ldr	r3, [pc, #544]	; (8006f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d06:	f003 0303 	and.w	r3, r3, #3
 8006d0a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006d0c:	4b85      	ldr	r3, [pc, #532]	; (8006f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d10:	091b      	lsrs	r3, r3, #4
 8006d12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d16:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006d18:	4b82      	ldr	r3, [pc, #520]	; (8006f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d1c:	f003 0301 	and.w	r3, r3, #1
 8006d20:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006d22:	4b80      	ldr	r3, [pc, #512]	; (8006f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d26:	08db      	lsrs	r3, r3, #3
 8006d28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	fb02 f303 	mul.w	r3, r2, r3
 8006d32:	ee07 3a90 	vmov	s15, r3
 8006d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d3a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 80e1 	beq.w	8006f08 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	f000 8083 	beq.w	8006e54 <HAL_RCC_GetSysClockFreq+0x204>
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	f200 80a1 	bhi.w	8006e98 <HAL_RCC_GetSysClockFreq+0x248>
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d003      	beq.n	8006d64 <HAL_RCC_GetSysClockFreq+0x114>
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d056      	beq.n	8006e10 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006d62:	e099      	b.n	8006e98 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d64:	4b6f      	ldr	r3, [pc, #444]	; (8006f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0320 	and.w	r3, r3, #32
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d02d      	beq.n	8006dcc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d70:	4b6c      	ldr	r3, [pc, #432]	; (8006f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	08db      	lsrs	r3, r3, #3
 8006d76:	f003 0303 	and.w	r3, r3, #3
 8006d7a:	4a6b      	ldr	r2, [pc, #428]	; (8006f28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d80:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	ee07 3a90 	vmov	s15, r3
 8006d88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	ee07 3a90 	vmov	s15, r3
 8006d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d9a:	4b62      	ldr	r3, [pc, #392]	; (8006f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006da2:	ee07 3a90 	vmov	s15, r3
 8006da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006daa:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dae:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006f34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dc6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006dca:	e087      	b.n	8006edc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	ee07 3a90 	vmov	s15, r3
 8006dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dd6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006f38 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dde:	4b51      	ldr	r3, [pc, #324]	; (8006f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006de6:	ee07 3a90 	vmov	s15, r3
 8006dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dee:	ed97 6a02 	vldr	s12, [r7, #8]
 8006df2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006f34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e0e:	e065      	b.n	8006edc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	ee07 3a90 	vmov	s15, r3
 8006e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e1a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006f3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e22:	4b40      	ldr	r3, [pc, #256]	; (8006f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e2a:	ee07 3a90 	vmov	s15, r3
 8006e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e32:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e36:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006f34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e52:	e043      	b.n	8006edc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	ee07 3a90 	vmov	s15, r3
 8006e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e5e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006f40 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e66:	4b2f      	ldr	r3, [pc, #188]	; (8006f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e6e:	ee07 3a90 	vmov	s15, r3
 8006e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e76:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e7a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006f34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e96:	e021      	b.n	8006edc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	ee07 3a90 	vmov	s15, r3
 8006e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ea2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006f3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eaa:	4b1e      	ldr	r3, [pc, #120]	; (8006f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eb2:	ee07 3a90 	vmov	s15, r3
 8006eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eba:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ebe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006f34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ed6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006eda:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006edc:	4b11      	ldr	r3, [pc, #68]	; (8006f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee0:	0a5b      	lsrs	r3, r3, #9
 8006ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	ee07 3a90 	vmov	s15, r3
 8006ef0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006ef4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ef8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006efc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f00:	ee17 3a90 	vmov	r3, s15
 8006f04:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006f06:	e005      	b.n	8006f14 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	61bb      	str	r3, [r7, #24]
    break;
 8006f0c:	e002      	b.n	8006f14 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006f0e:	4b07      	ldr	r3, [pc, #28]	; (8006f2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006f10:	61bb      	str	r3, [r7, #24]
    break;
 8006f12:	bf00      	nop
  }

  return sysclockfreq;
 8006f14:	69bb      	ldr	r3, [r7, #24]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3724      	adds	r7, #36	; 0x24
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	58024400 	.word	0x58024400
 8006f28:	03d09000 	.word	0x03d09000
 8006f2c:	003d0900 	.word	0x003d0900
 8006f30:	007a1200 	.word	0x007a1200
 8006f34:	46000000 	.word	0x46000000
 8006f38:	4c742400 	.word	0x4c742400
 8006f3c:	4a742400 	.word	0x4a742400
 8006f40:	4af42400 	.word	0x4af42400

08006f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006f4a:	f7ff fe81 	bl	8006c50 <HAL_RCC_GetSysClockFreq>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	4b10      	ldr	r3, [pc, #64]	; (8006f94 <HAL_RCC_GetHCLKFreq+0x50>)
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	0a1b      	lsrs	r3, r3, #8
 8006f56:	f003 030f 	and.w	r3, r3, #15
 8006f5a:	490f      	ldr	r1, [pc, #60]	; (8006f98 <HAL_RCC_GetHCLKFreq+0x54>)
 8006f5c:	5ccb      	ldrb	r3, [r1, r3]
 8006f5e:	f003 031f 	and.w	r3, r3, #31
 8006f62:	fa22 f303 	lsr.w	r3, r2, r3
 8006f66:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f68:	4b0a      	ldr	r3, [pc, #40]	; (8006f94 <HAL_RCC_GetHCLKFreq+0x50>)
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	f003 030f 	and.w	r3, r3, #15
 8006f70:	4a09      	ldr	r2, [pc, #36]	; (8006f98 <HAL_RCC_GetHCLKFreq+0x54>)
 8006f72:	5cd3      	ldrb	r3, [r2, r3]
 8006f74:	f003 031f 	and.w	r3, r3, #31
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f7e:	4a07      	ldr	r2, [pc, #28]	; (8006f9c <HAL_RCC_GetHCLKFreq+0x58>)
 8006f80:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f82:	4a07      	ldr	r2, [pc, #28]	; (8006fa0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006f88:	4b04      	ldr	r3, [pc, #16]	; (8006f9c <HAL_RCC_GetHCLKFreq+0x58>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	58024400 	.word	0x58024400
 8006f98:	0800c000 	.word	0x0800c000
 8006f9c:	24000004 	.word	0x24000004
 8006fa0:	24000000 	.word	0x24000000

08006fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006fa8:	f7ff ffcc 	bl	8006f44 <HAL_RCC_GetHCLKFreq>
 8006fac:	4602      	mov	r2, r0
 8006fae:	4b06      	ldr	r3, [pc, #24]	; (8006fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006fb0:	69db      	ldr	r3, [r3, #28]
 8006fb2:	091b      	lsrs	r3, r3, #4
 8006fb4:	f003 0307 	and.w	r3, r3, #7
 8006fb8:	4904      	ldr	r1, [pc, #16]	; (8006fcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8006fba:	5ccb      	ldrb	r3, [r1, r3]
 8006fbc:	f003 031f 	and.w	r3, r3, #31
 8006fc0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	58024400 	.word	0x58024400
 8006fcc:	0800c000 	.word	0x0800c000

08006fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006fd4:	f7ff ffb6 	bl	8006f44 <HAL_RCC_GetHCLKFreq>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	4b06      	ldr	r3, [pc, #24]	; (8006ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	0a1b      	lsrs	r3, r3, #8
 8006fe0:	f003 0307 	and.w	r3, r3, #7
 8006fe4:	4904      	ldr	r1, [pc, #16]	; (8006ff8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006fe6:	5ccb      	ldrb	r3, [r1, r3]
 8006fe8:	f003 031f 	and.w	r3, r3, #31
 8006fec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	58024400 	.word	0x58024400
 8006ff8:	0800c000 	.word	0x0800c000

08006ffc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b086      	sub	sp, #24
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007004:	2300      	movs	r3, #0
 8007006:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007008:	2300      	movs	r3, #0
 800700a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d03f      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800701c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007020:	d02a      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007022:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007026:	d824      	bhi.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007028:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800702c:	d018      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800702e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007032:	d81e      	bhi.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007034:	2b00      	cmp	r3, #0
 8007036:	d003      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007038:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800703c:	d007      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800703e:	e018      	b.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007040:	4bab      	ldr	r3, [pc, #684]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007044:	4aaa      	ldr	r2, [pc, #680]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800704a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800704c:	e015      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	3304      	adds	r3, #4
 8007052:	2102      	movs	r1, #2
 8007054:	4618      	mov	r0, r3
 8007056:	f001 f9cf 	bl	80083f8 <RCCEx_PLL2_Config>
 800705a:	4603      	mov	r3, r0
 800705c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800705e:	e00c      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	3324      	adds	r3, #36	; 0x24
 8007064:	2102      	movs	r1, #2
 8007066:	4618      	mov	r0, r3
 8007068:	f001 fa78 	bl	800855c <RCCEx_PLL3_Config>
 800706c:	4603      	mov	r3, r0
 800706e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007070:	e003      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	75fb      	strb	r3, [r7, #23]
      break;
 8007076:	e000      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007078:	bf00      	nop
    }

    if(ret == HAL_OK)
 800707a:	7dfb      	ldrb	r3, [r7, #23]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d109      	bne.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007080:	4b9b      	ldr	r3, [pc, #620]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007084:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800708c:	4998      	ldr	r1, [pc, #608]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800708e:	4313      	orrs	r3, r2
 8007090:	650b      	str	r3, [r1, #80]	; 0x50
 8007092:	e001      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007094:	7dfb      	ldrb	r3, [r7, #23]
 8007096:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d03d      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a8:	2b04      	cmp	r3, #4
 80070aa:	d826      	bhi.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80070ac:	a201      	add	r2, pc, #4	; (adr r2, 80070b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80070ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b2:	bf00      	nop
 80070b4:	080070c9 	.word	0x080070c9
 80070b8:	080070d7 	.word	0x080070d7
 80070bc:	080070e9 	.word	0x080070e9
 80070c0:	08007101 	.word	0x08007101
 80070c4:	08007101 	.word	0x08007101
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070c8:	4b89      	ldr	r3, [pc, #548]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070cc:	4a88      	ldr	r2, [pc, #544]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80070d4:	e015      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	3304      	adds	r3, #4
 80070da:	2100      	movs	r1, #0
 80070dc:	4618      	mov	r0, r3
 80070de:	f001 f98b 	bl	80083f8 <RCCEx_PLL2_Config>
 80070e2:	4603      	mov	r3, r0
 80070e4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80070e6:	e00c      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	3324      	adds	r3, #36	; 0x24
 80070ec:	2100      	movs	r1, #0
 80070ee:	4618      	mov	r0, r3
 80070f0:	f001 fa34 	bl	800855c <RCCEx_PLL3_Config>
 80070f4:	4603      	mov	r3, r0
 80070f6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80070f8:	e003      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	75fb      	strb	r3, [r7, #23]
      break;
 80070fe:	e000      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007100:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007102:	7dfb      	ldrb	r3, [r7, #23]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d109      	bne.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007108:	4b79      	ldr	r3, [pc, #484]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800710a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800710c:	f023 0207 	bic.w	r2, r3, #7
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007114:	4976      	ldr	r1, [pc, #472]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007116:	4313      	orrs	r3, r2
 8007118:	650b      	str	r3, [r1, #80]	; 0x50
 800711a:	e001      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800711c:	7dfb      	ldrb	r3, [r7, #23]
 800711e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007128:	2b00      	cmp	r3, #0
 800712a:	d042      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007134:	d02b      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800713a:	d825      	bhi.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800713c:	2bc0      	cmp	r3, #192	; 0xc0
 800713e:	d028      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007140:	2bc0      	cmp	r3, #192	; 0xc0
 8007142:	d821      	bhi.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007144:	2b80      	cmp	r3, #128	; 0x80
 8007146:	d016      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007148:	2b80      	cmp	r3, #128	; 0x80
 800714a:	d81d      	bhi.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800714c:	2b00      	cmp	r3, #0
 800714e:	d002      	beq.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007150:	2b40      	cmp	r3, #64	; 0x40
 8007152:	d007      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007154:	e018      	b.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007156:	4b66      	ldr	r3, [pc, #408]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715a:	4a65      	ldr	r2, [pc, #404]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800715c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007160:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007162:	e017      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	3304      	adds	r3, #4
 8007168:	2100      	movs	r1, #0
 800716a:	4618      	mov	r0, r3
 800716c:	f001 f944 	bl	80083f8 <RCCEx_PLL2_Config>
 8007170:	4603      	mov	r3, r0
 8007172:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007174:	e00e      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	3324      	adds	r3, #36	; 0x24
 800717a:	2100      	movs	r1, #0
 800717c:	4618      	mov	r0, r3
 800717e:	f001 f9ed 	bl	800855c <RCCEx_PLL3_Config>
 8007182:	4603      	mov	r3, r0
 8007184:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007186:	e005      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	75fb      	strb	r3, [r7, #23]
      break;
 800718c:	e002      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800718e:	bf00      	nop
 8007190:	e000      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007192:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007194:	7dfb      	ldrb	r3, [r7, #23]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d109      	bne.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800719a:	4b55      	ldr	r3, [pc, #340]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800719c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800719e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071a6:	4952      	ldr	r1, [pc, #328]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071a8:	4313      	orrs	r3, r2
 80071aa:	650b      	str	r3, [r1, #80]	; 0x50
 80071ac:	e001      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ae:	7dfb      	ldrb	r3, [r7, #23]
 80071b0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d049      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80071c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80071c8:	d030      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80071ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80071ce:	d82a      	bhi.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80071d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80071d4:	d02c      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80071d6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80071da:	d824      	bhi.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80071dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071e0:	d018      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80071e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071e6:	d81e      	bhi.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d003      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80071ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071f0:	d007      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80071f2:	e018      	b.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071f4:	4b3e      	ldr	r3, [pc, #248]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f8:	4a3d      	ldr	r2, [pc, #244]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007200:	e017      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	3304      	adds	r3, #4
 8007206:	2100      	movs	r1, #0
 8007208:	4618      	mov	r0, r3
 800720a:	f001 f8f5 	bl	80083f8 <RCCEx_PLL2_Config>
 800720e:	4603      	mov	r3, r0
 8007210:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007212:	e00e      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	3324      	adds	r3, #36	; 0x24
 8007218:	2100      	movs	r1, #0
 800721a:	4618      	mov	r0, r3
 800721c:	f001 f99e 	bl	800855c <RCCEx_PLL3_Config>
 8007220:	4603      	mov	r3, r0
 8007222:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007224:	e005      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	75fb      	strb	r3, [r7, #23]
      break;
 800722a:	e002      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800722c:	bf00      	nop
 800722e:	e000      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007230:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007232:	7dfb      	ldrb	r3, [r7, #23]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10a      	bne.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007238:	4b2d      	ldr	r3, [pc, #180]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800723a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800723c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007246:	492a      	ldr	r1, [pc, #168]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007248:	4313      	orrs	r3, r2
 800724a:	658b      	str	r3, [r1, #88]	; 0x58
 800724c:	e001      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800724e:	7dfb      	ldrb	r3, [r7, #23]
 8007250:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800725a:	2b00      	cmp	r3, #0
 800725c:	d04c      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007264:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007268:	d030      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800726a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800726e:	d82a      	bhi.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007270:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007274:	d02c      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007276:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800727a:	d824      	bhi.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800727c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007280:	d018      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007282:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007286:	d81e      	bhi.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007288:	2b00      	cmp	r3, #0
 800728a:	d003      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800728c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007290:	d007      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007292:	e018      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007294:	4b16      	ldr	r3, [pc, #88]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007298:	4a15      	ldr	r2, [pc, #84]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800729a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800729e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80072a0:	e017      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	3304      	adds	r3, #4
 80072a6:	2100      	movs	r1, #0
 80072a8:	4618      	mov	r0, r3
 80072aa:	f001 f8a5 	bl	80083f8 <RCCEx_PLL2_Config>
 80072ae:	4603      	mov	r3, r0
 80072b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80072b2:	e00e      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	3324      	adds	r3, #36	; 0x24
 80072b8:	2100      	movs	r1, #0
 80072ba:	4618      	mov	r0, r3
 80072bc:	f001 f94e 	bl	800855c <RCCEx_PLL3_Config>
 80072c0:	4603      	mov	r3, r0
 80072c2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80072c4:	e005      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	75fb      	strb	r3, [r7, #23]
      break;
 80072ca:	e002      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80072cc:	bf00      	nop
 80072ce:	e000      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80072d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072d2:	7dfb      	ldrb	r3, [r7, #23]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10d      	bne.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80072d8:	4b05      	ldr	r3, [pc, #20]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072dc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80072e6:	4902      	ldr	r1, [pc, #8]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072e8:	4313      	orrs	r3, r2
 80072ea:	658b      	str	r3, [r1, #88]	; 0x58
 80072ec:	e004      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80072ee:	bf00      	nop
 80072f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072f4:	7dfb      	ldrb	r3, [r7, #23]
 80072f6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d032      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007308:	2b30      	cmp	r3, #48	; 0x30
 800730a:	d01c      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800730c:	2b30      	cmp	r3, #48	; 0x30
 800730e:	d817      	bhi.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007310:	2b20      	cmp	r3, #32
 8007312:	d00c      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007314:	2b20      	cmp	r3, #32
 8007316:	d813      	bhi.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007318:	2b00      	cmp	r3, #0
 800731a:	d016      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800731c:	2b10      	cmp	r3, #16
 800731e:	d10f      	bne.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007320:	4baf      	ldr	r3, [pc, #700]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007324:	4aae      	ldr	r2, [pc, #696]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800732a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800732c:	e00e      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	3304      	adds	r3, #4
 8007332:	2102      	movs	r1, #2
 8007334:	4618      	mov	r0, r3
 8007336:	f001 f85f 	bl	80083f8 <RCCEx_PLL2_Config>
 800733a:	4603      	mov	r3, r0
 800733c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800733e:	e005      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	75fb      	strb	r3, [r7, #23]
      break;
 8007344:	e002      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007346:	bf00      	nop
 8007348:	e000      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800734a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800734c:	7dfb      	ldrb	r3, [r7, #23]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d109      	bne.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007352:	4ba3      	ldr	r3, [pc, #652]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007356:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800735e:	49a0      	ldr	r1, [pc, #640]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007360:	4313      	orrs	r3, r2
 8007362:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007364:	e001      	b.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007366:	7dfb      	ldrb	r3, [r7, #23]
 8007368:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d047      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800737a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800737e:	d030      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007380:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007384:	d82a      	bhi.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007386:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800738a:	d02c      	beq.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800738c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007390:	d824      	bhi.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007396:	d018      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800739c:	d81e      	bhi.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d003      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80073a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073a6:	d007      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80073a8:	e018      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073aa:	4b8d      	ldr	r3, [pc, #564]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80073ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ae:	4a8c      	ldr	r2, [pc, #560]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80073b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80073b6:	e017      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	3304      	adds	r3, #4
 80073bc:	2100      	movs	r1, #0
 80073be:	4618      	mov	r0, r3
 80073c0:	f001 f81a 	bl	80083f8 <RCCEx_PLL2_Config>
 80073c4:	4603      	mov	r3, r0
 80073c6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80073c8:	e00e      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	3324      	adds	r3, #36	; 0x24
 80073ce:	2100      	movs	r1, #0
 80073d0:	4618      	mov	r0, r3
 80073d2:	f001 f8c3 	bl	800855c <RCCEx_PLL3_Config>
 80073d6:	4603      	mov	r3, r0
 80073d8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80073da:	e005      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	75fb      	strb	r3, [r7, #23]
      break;
 80073e0:	e002      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80073e2:	bf00      	nop
 80073e4:	e000      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80073e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073e8:	7dfb      	ldrb	r3, [r7, #23]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d109      	bne.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80073ee:	4b7c      	ldr	r3, [pc, #496]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80073f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073f2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073fa:	4979      	ldr	r1, [pc, #484]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80073fc:	4313      	orrs	r3, r2
 80073fe:	650b      	str	r3, [r1, #80]	; 0x50
 8007400:	e001      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007402:	7dfb      	ldrb	r3, [r7, #23]
 8007404:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d049      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007416:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800741a:	d02e      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800741c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007420:	d828      	bhi.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007422:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007426:	d02a      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007428:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800742c:	d822      	bhi.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800742e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007432:	d026      	beq.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007434:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007438:	d81c      	bhi.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800743a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800743e:	d010      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007440:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007444:	d816      	bhi.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007446:	2b00      	cmp	r3, #0
 8007448:	d01d      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800744a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800744e:	d111      	bne.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	3304      	adds	r3, #4
 8007454:	2101      	movs	r1, #1
 8007456:	4618      	mov	r0, r3
 8007458:	f000 ffce 	bl	80083f8 <RCCEx_PLL2_Config>
 800745c:	4603      	mov	r3, r0
 800745e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007460:	e012      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	3324      	adds	r3, #36	; 0x24
 8007466:	2101      	movs	r1, #1
 8007468:	4618      	mov	r0, r3
 800746a:	f001 f877 	bl	800855c <RCCEx_PLL3_Config>
 800746e:	4603      	mov	r3, r0
 8007470:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007472:	e009      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	75fb      	strb	r3, [r7, #23]
      break;
 8007478:	e006      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800747a:	bf00      	nop
 800747c:	e004      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800747e:	bf00      	nop
 8007480:	e002      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007482:	bf00      	nop
 8007484:	e000      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007486:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007488:	7dfb      	ldrb	r3, [r7, #23]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d109      	bne.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800748e:	4b54      	ldr	r3, [pc, #336]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007492:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800749a:	4951      	ldr	r1, [pc, #324]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800749c:	4313      	orrs	r3, r2
 800749e:	650b      	str	r3, [r1, #80]	; 0x50
 80074a0:	e001      	b.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a2:	7dfb      	ldrb	r3, [r7, #23]
 80074a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d04b      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80074b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074bc:	d02e      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x520>
 80074be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074c2:	d828      	bhi.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80074c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074c8:	d02a      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80074ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ce:	d822      	bhi.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80074d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80074d4:	d026      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80074d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80074da:	d81c      	bhi.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80074dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074e0:	d010      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80074e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074e6:	d816      	bhi.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d01d      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80074ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074f0:	d111      	bne.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	3304      	adds	r3, #4
 80074f6:	2101      	movs	r1, #1
 80074f8:	4618      	mov	r0, r3
 80074fa:	f000 ff7d 	bl	80083f8 <RCCEx_PLL2_Config>
 80074fe:	4603      	mov	r3, r0
 8007500:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007502:	e012      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	3324      	adds	r3, #36	; 0x24
 8007508:	2101      	movs	r1, #1
 800750a:	4618      	mov	r0, r3
 800750c:	f001 f826 	bl	800855c <RCCEx_PLL3_Config>
 8007510:	4603      	mov	r3, r0
 8007512:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007514:	e009      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	75fb      	strb	r3, [r7, #23]
      break;
 800751a:	e006      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800751c:	bf00      	nop
 800751e:	e004      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007520:	bf00      	nop
 8007522:	e002      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007524:	bf00      	nop
 8007526:	e000      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007528:	bf00      	nop
    }

    if(ret == HAL_OK)
 800752a:	7dfb      	ldrb	r3, [r7, #23]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d10a      	bne.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007530:	4b2b      	ldr	r3, [pc, #172]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007534:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800753e:	4928      	ldr	r1, [pc, #160]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007540:	4313      	orrs	r3, r2
 8007542:	658b      	str	r3, [r1, #88]	; 0x58
 8007544:	e001      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007546:	7dfb      	ldrb	r3, [r7, #23]
 8007548:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007552:	2b00      	cmp	r3, #0
 8007554:	d02f      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800755a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800755e:	d00e      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007560:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007564:	d814      	bhi.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007566:	2b00      	cmp	r3, #0
 8007568:	d015      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800756a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800756e:	d10f      	bne.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007570:	4b1b      	ldr	r3, [pc, #108]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007574:	4a1a      	ldr	r2, [pc, #104]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800757a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800757c:	e00c      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	3304      	adds	r3, #4
 8007582:	2101      	movs	r1, #1
 8007584:	4618      	mov	r0, r3
 8007586:	f000 ff37 	bl	80083f8 <RCCEx_PLL2_Config>
 800758a:	4603      	mov	r3, r0
 800758c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800758e:	e003      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	75fb      	strb	r3, [r7, #23]
      break;
 8007594:	e000      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007596:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007598:	7dfb      	ldrb	r3, [r7, #23]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d109      	bne.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800759e:	4b10      	ldr	r3, [pc, #64]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80075a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075aa:	490d      	ldr	r1, [pc, #52]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	650b      	str	r3, [r1, #80]	; 0x50
 80075b0:	e001      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075b2:	7dfb      	ldrb	r3, [r7, #23]
 80075b4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d033      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075c6:	2b03      	cmp	r3, #3
 80075c8:	d81c      	bhi.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80075ca:	a201      	add	r2, pc, #4	; (adr r2, 80075d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80075cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d0:	0800760b 	.word	0x0800760b
 80075d4:	080075e5 	.word	0x080075e5
 80075d8:	080075f3 	.word	0x080075f3
 80075dc:	0800760b 	.word	0x0800760b
 80075e0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075e4:	4bb8      	ldr	r3, [pc, #736]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e8:	4ab7      	ldr	r2, [pc, #732]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80075f0:	e00c      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	3304      	adds	r3, #4
 80075f6:	2102      	movs	r1, #2
 80075f8:	4618      	mov	r0, r3
 80075fa:	f000 fefd 	bl	80083f8 <RCCEx_PLL2_Config>
 80075fe:	4603      	mov	r3, r0
 8007600:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007602:	e003      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	75fb      	strb	r3, [r7, #23]
      break;
 8007608:	e000      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800760a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800760c:	7dfb      	ldrb	r3, [r7, #23]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d109      	bne.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007612:	4bad      	ldr	r3, [pc, #692]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007616:	f023 0203 	bic.w	r2, r3, #3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800761e:	49aa      	ldr	r1, [pc, #680]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007620:	4313      	orrs	r3, r2
 8007622:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007624:	e001      	b.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007626:	7dfb      	ldrb	r3, [r7, #23]
 8007628:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007632:	2b00      	cmp	r3, #0
 8007634:	f000 8086 	beq.w	8007744 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007638:	4ba4      	ldr	r3, [pc, #656]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4aa3      	ldr	r2, [pc, #652]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800763e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007642:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007644:	f7fb f8c2 	bl	80027cc <HAL_GetTick>
 8007648:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800764a:	e009      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800764c:	f7fb f8be 	bl	80027cc <HAL_GetTick>
 8007650:	4602      	mov	r2, r0
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	2b64      	cmp	r3, #100	; 0x64
 8007658:	d902      	bls.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800765a:	2303      	movs	r3, #3
 800765c:	75fb      	strb	r3, [r7, #23]
        break;
 800765e:	e005      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007660:	4b9a      	ldr	r3, [pc, #616]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007668:	2b00      	cmp	r3, #0
 800766a:	d0ef      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800766c:	7dfb      	ldrb	r3, [r7, #23]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d166      	bne.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007672:	4b95      	ldr	r3, [pc, #596]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007674:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800767c:	4053      	eors	r3, r2
 800767e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007682:	2b00      	cmp	r3, #0
 8007684:	d013      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007686:	4b90      	ldr	r3, [pc, #576]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800768a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800768e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007690:	4b8d      	ldr	r3, [pc, #564]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007694:	4a8c      	ldr	r2, [pc, #560]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800769a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800769c:	4b8a      	ldr	r3, [pc, #552]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800769e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076a0:	4a89      	ldr	r2, [pc, #548]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076a6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80076a8:	4a87      	ldr	r2, [pc, #540]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80076b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076b8:	d115      	bne.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ba:	f7fb f887 	bl	80027cc <HAL_GetTick>
 80076be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80076c0:	e00b      	b.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076c2:	f7fb f883 	bl	80027cc <HAL_GetTick>
 80076c6:	4602      	mov	r2, r0
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d902      	bls.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80076d4:	2303      	movs	r3, #3
 80076d6:	75fb      	strb	r3, [r7, #23]
            break;
 80076d8:	e005      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80076da:	4b7b      	ldr	r3, [pc, #492]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076de:	f003 0302 	and.w	r3, r3, #2
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d0ed      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80076e6:	7dfb      	ldrb	r3, [r7, #23]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d126      	bne.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80076f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076fa:	d10d      	bne.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80076fc:	4b72      	ldr	r3, [pc, #456]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800770a:	0919      	lsrs	r1, r3, #4
 800770c:	4b70      	ldr	r3, [pc, #448]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800770e:	400b      	ands	r3, r1
 8007710:	496d      	ldr	r1, [pc, #436]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007712:	4313      	orrs	r3, r2
 8007714:	610b      	str	r3, [r1, #16]
 8007716:	e005      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007718:	4b6b      	ldr	r3, [pc, #428]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	4a6a      	ldr	r2, [pc, #424]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800771e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007722:	6113      	str	r3, [r2, #16]
 8007724:	4b68      	ldr	r3, [pc, #416]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007726:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800772e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007732:	4965      	ldr	r1, [pc, #404]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007734:	4313      	orrs	r3, r2
 8007736:	670b      	str	r3, [r1, #112]	; 0x70
 8007738:	e004      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800773a:	7dfb      	ldrb	r3, [r7, #23]
 800773c:	75bb      	strb	r3, [r7, #22]
 800773e:	e001      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007740:	7dfb      	ldrb	r3, [r7, #23]
 8007742:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0301 	and.w	r3, r3, #1
 800774c:	2b00      	cmp	r3, #0
 800774e:	d07e      	beq.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007754:	2b28      	cmp	r3, #40	; 0x28
 8007756:	d867      	bhi.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007758:	a201      	add	r2, pc, #4	; (adr r2, 8007760 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800775a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775e:	bf00      	nop
 8007760:	0800782f 	.word	0x0800782f
 8007764:	08007829 	.word	0x08007829
 8007768:	08007829 	.word	0x08007829
 800776c:	08007829 	.word	0x08007829
 8007770:	08007829 	.word	0x08007829
 8007774:	08007829 	.word	0x08007829
 8007778:	08007829 	.word	0x08007829
 800777c:	08007829 	.word	0x08007829
 8007780:	08007805 	.word	0x08007805
 8007784:	08007829 	.word	0x08007829
 8007788:	08007829 	.word	0x08007829
 800778c:	08007829 	.word	0x08007829
 8007790:	08007829 	.word	0x08007829
 8007794:	08007829 	.word	0x08007829
 8007798:	08007829 	.word	0x08007829
 800779c:	08007829 	.word	0x08007829
 80077a0:	08007817 	.word	0x08007817
 80077a4:	08007829 	.word	0x08007829
 80077a8:	08007829 	.word	0x08007829
 80077ac:	08007829 	.word	0x08007829
 80077b0:	08007829 	.word	0x08007829
 80077b4:	08007829 	.word	0x08007829
 80077b8:	08007829 	.word	0x08007829
 80077bc:	08007829 	.word	0x08007829
 80077c0:	0800782f 	.word	0x0800782f
 80077c4:	08007829 	.word	0x08007829
 80077c8:	08007829 	.word	0x08007829
 80077cc:	08007829 	.word	0x08007829
 80077d0:	08007829 	.word	0x08007829
 80077d4:	08007829 	.word	0x08007829
 80077d8:	08007829 	.word	0x08007829
 80077dc:	08007829 	.word	0x08007829
 80077e0:	0800782f 	.word	0x0800782f
 80077e4:	08007829 	.word	0x08007829
 80077e8:	08007829 	.word	0x08007829
 80077ec:	08007829 	.word	0x08007829
 80077f0:	08007829 	.word	0x08007829
 80077f4:	08007829 	.word	0x08007829
 80077f8:	08007829 	.word	0x08007829
 80077fc:	08007829 	.word	0x08007829
 8007800:	0800782f 	.word	0x0800782f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	3304      	adds	r3, #4
 8007808:	2101      	movs	r1, #1
 800780a:	4618      	mov	r0, r3
 800780c:	f000 fdf4 	bl	80083f8 <RCCEx_PLL2_Config>
 8007810:	4603      	mov	r3, r0
 8007812:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007814:	e00c      	b.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	3324      	adds	r3, #36	; 0x24
 800781a:	2101      	movs	r1, #1
 800781c:	4618      	mov	r0, r3
 800781e:	f000 fe9d 	bl	800855c <RCCEx_PLL3_Config>
 8007822:	4603      	mov	r3, r0
 8007824:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007826:	e003      	b.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	75fb      	strb	r3, [r7, #23]
      break;
 800782c:	e000      	b.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800782e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007830:	7dfb      	ldrb	r3, [r7, #23]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d109      	bne.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007836:	4b24      	ldr	r3, [pc, #144]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800783a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007842:	4921      	ldr	r1, [pc, #132]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007844:	4313      	orrs	r3, r2
 8007846:	654b      	str	r3, [r1, #84]	; 0x54
 8007848:	e001      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800784a:	7dfb      	ldrb	r3, [r7, #23]
 800784c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 0302 	and.w	r3, r3, #2
 8007856:	2b00      	cmp	r3, #0
 8007858:	d03e      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800785e:	2b05      	cmp	r3, #5
 8007860:	d820      	bhi.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8007862:	a201      	add	r2, pc, #4	; (adr r2, 8007868 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8007864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007868:	080078ab 	.word	0x080078ab
 800786c:	08007881 	.word	0x08007881
 8007870:	08007893 	.word	0x08007893
 8007874:	080078ab 	.word	0x080078ab
 8007878:	080078ab 	.word	0x080078ab
 800787c:	080078ab 	.word	0x080078ab
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	3304      	adds	r3, #4
 8007884:	2101      	movs	r1, #1
 8007886:	4618      	mov	r0, r3
 8007888:	f000 fdb6 	bl	80083f8 <RCCEx_PLL2_Config>
 800788c:	4603      	mov	r3, r0
 800788e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007890:	e00c      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	3324      	adds	r3, #36	; 0x24
 8007896:	2101      	movs	r1, #1
 8007898:	4618      	mov	r0, r3
 800789a:	f000 fe5f 	bl	800855c <RCCEx_PLL3_Config>
 800789e:	4603      	mov	r3, r0
 80078a0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80078a2:	e003      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	75fb      	strb	r3, [r7, #23]
      break;
 80078a8:	e000      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80078aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078ac:	7dfb      	ldrb	r3, [r7, #23]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d110      	bne.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80078b2:	4b05      	ldr	r3, [pc, #20]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80078b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b6:	f023 0207 	bic.w	r2, r3, #7
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078be:	4902      	ldr	r1, [pc, #8]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80078c0:	4313      	orrs	r3, r2
 80078c2:	654b      	str	r3, [r1, #84]	; 0x54
 80078c4:	e008      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80078c6:	bf00      	nop
 80078c8:	58024400 	.word	0x58024400
 80078cc:	58024800 	.word	0x58024800
 80078d0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078d4:	7dfb      	ldrb	r3, [r7, #23]
 80078d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 0304 	and.w	r3, r3, #4
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d039      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078ea:	2b05      	cmp	r3, #5
 80078ec:	d820      	bhi.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80078ee:	a201      	add	r2, pc, #4	; (adr r2, 80078f4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80078f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f4:	08007937 	.word	0x08007937
 80078f8:	0800790d 	.word	0x0800790d
 80078fc:	0800791f 	.word	0x0800791f
 8007900:	08007937 	.word	0x08007937
 8007904:	08007937 	.word	0x08007937
 8007908:	08007937 	.word	0x08007937
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	3304      	adds	r3, #4
 8007910:	2101      	movs	r1, #1
 8007912:	4618      	mov	r0, r3
 8007914:	f000 fd70 	bl	80083f8 <RCCEx_PLL2_Config>
 8007918:	4603      	mov	r3, r0
 800791a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800791c:	e00c      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	3324      	adds	r3, #36	; 0x24
 8007922:	2101      	movs	r1, #1
 8007924:	4618      	mov	r0, r3
 8007926:	f000 fe19 	bl	800855c <RCCEx_PLL3_Config>
 800792a:	4603      	mov	r3, r0
 800792c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800792e:	e003      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	75fb      	strb	r3, [r7, #23]
      break;
 8007934:	e000      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8007936:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007938:	7dfb      	ldrb	r3, [r7, #23]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10a      	bne.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800793e:	4bb7      	ldr	r3, [pc, #732]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007942:	f023 0207 	bic.w	r2, r3, #7
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800794c:	49b3      	ldr	r1, [pc, #716]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800794e:	4313      	orrs	r3, r2
 8007950:	658b      	str	r3, [r1, #88]	; 0x58
 8007952:	e001      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007954:	7dfb      	ldrb	r3, [r7, #23]
 8007956:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 0320 	and.w	r3, r3, #32
 8007960:	2b00      	cmp	r3, #0
 8007962:	d04b      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800796a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800796e:	d02e      	beq.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8007970:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007974:	d828      	bhi.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800797a:	d02a      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800797c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007980:	d822      	bhi.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007982:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007986:	d026      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007988:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800798c:	d81c      	bhi.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800798e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007992:	d010      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8007994:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007998:	d816      	bhi.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800799a:	2b00      	cmp	r3, #0
 800799c:	d01d      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800799e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079a2:	d111      	bne.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	3304      	adds	r3, #4
 80079a8:	2100      	movs	r1, #0
 80079aa:	4618      	mov	r0, r3
 80079ac:	f000 fd24 	bl	80083f8 <RCCEx_PLL2_Config>
 80079b0:	4603      	mov	r3, r0
 80079b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80079b4:	e012      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	3324      	adds	r3, #36	; 0x24
 80079ba:	2102      	movs	r1, #2
 80079bc:	4618      	mov	r0, r3
 80079be:	f000 fdcd 	bl	800855c <RCCEx_PLL3_Config>
 80079c2:	4603      	mov	r3, r0
 80079c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80079c6:	e009      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	75fb      	strb	r3, [r7, #23]
      break;
 80079cc:	e006      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80079ce:	bf00      	nop
 80079d0:	e004      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80079d2:	bf00      	nop
 80079d4:	e002      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80079d6:	bf00      	nop
 80079d8:	e000      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80079da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079dc:	7dfb      	ldrb	r3, [r7, #23]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10a      	bne.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80079e2:	4b8e      	ldr	r3, [pc, #568]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80079e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079f0:	498a      	ldr	r1, [pc, #552]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80079f2:	4313      	orrs	r3, r2
 80079f4:	654b      	str	r3, [r1, #84]	; 0x54
 80079f6:	e001      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079f8:	7dfb      	ldrb	r3, [r7, #23]
 80079fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d04b      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a0e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007a12:	d02e      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8007a14:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007a18:	d828      	bhi.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a1e:	d02a      	beq.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a24:	d822      	bhi.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007a26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a2a:	d026      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007a2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a30:	d81c      	bhi.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007a32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a36:	d010      	beq.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007a38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a3c:	d816      	bhi.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d01d      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a46:	d111      	bne.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	3304      	adds	r3, #4
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f000 fcd2 	bl	80083f8 <RCCEx_PLL2_Config>
 8007a54:	4603      	mov	r3, r0
 8007a56:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007a58:	e012      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	3324      	adds	r3, #36	; 0x24
 8007a5e:	2102      	movs	r1, #2
 8007a60:	4618      	mov	r0, r3
 8007a62:	f000 fd7b 	bl	800855c <RCCEx_PLL3_Config>
 8007a66:	4603      	mov	r3, r0
 8007a68:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007a6a:	e009      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a70:	e006      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007a72:	bf00      	nop
 8007a74:	e004      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007a76:	bf00      	nop
 8007a78:	e002      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007a7a:	bf00      	nop
 8007a7c:	e000      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007a7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a80:	7dfb      	ldrb	r3, [r7, #23]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d10a      	bne.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007a86:	4b65      	ldr	r3, [pc, #404]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a8a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a94:	4961      	ldr	r1, [pc, #388]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a96:	4313      	orrs	r3, r2
 8007a98:	658b      	str	r3, [r1, #88]	; 0x58
 8007a9a:	e001      	b.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a9c:	7dfb      	ldrb	r3, [r7, #23]
 8007a9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d04b      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ab2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007ab6:	d02e      	beq.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007ab8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007abc:	d828      	bhi.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ac2:	d02a      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ac8:	d822      	bhi.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007aca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007ace:	d026      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007ad0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007ad4:	d81c      	bhi.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007ad6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ada:	d010      	beq.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007adc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ae0:	d816      	bhi.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d01d      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aea:	d111      	bne.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	3304      	adds	r3, #4
 8007af0:	2100      	movs	r1, #0
 8007af2:	4618      	mov	r0, r3
 8007af4:	f000 fc80 	bl	80083f8 <RCCEx_PLL2_Config>
 8007af8:	4603      	mov	r3, r0
 8007afa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007afc:	e012      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	3324      	adds	r3, #36	; 0x24
 8007b02:	2102      	movs	r1, #2
 8007b04:	4618      	mov	r0, r3
 8007b06:	f000 fd29 	bl	800855c <RCCEx_PLL3_Config>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007b0e:	e009      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	75fb      	strb	r3, [r7, #23]
      break;
 8007b14:	e006      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007b16:	bf00      	nop
 8007b18:	e004      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007b1a:	bf00      	nop
 8007b1c:	e002      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007b1e:	bf00      	nop
 8007b20:	e000      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007b22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b24:	7dfb      	ldrb	r3, [r7, #23]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d10a      	bne.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007b2a:	4b3c      	ldr	r3, [pc, #240]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b38:	4938      	ldr	r1, [pc, #224]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	658b      	str	r3, [r1, #88]	; 0x58
 8007b3e:	e001      	b.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b40:	7dfb      	ldrb	r3, [r7, #23]
 8007b42:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 0308 	and.w	r3, r3, #8
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d01a      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b5a:	d10a      	bne.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	3324      	adds	r3, #36	; 0x24
 8007b60:	2102      	movs	r1, #2
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 fcfa 	bl	800855c <RCCEx_PLL3_Config>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d001      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007b72:	4b2a      	ldr	r3, [pc, #168]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b80:	4926      	ldr	r1, [pc, #152]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b82:	4313      	orrs	r3, r2
 8007b84:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 0310 	and.w	r3, r3, #16
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d01a      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b9c:	d10a      	bne.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	3324      	adds	r3, #36	; 0x24
 8007ba2:	2102      	movs	r1, #2
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f000 fcd9 	bl	800855c <RCCEx_PLL3_Config>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d001      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007bb4:	4b19      	ldr	r3, [pc, #100]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bc2:	4916      	ldr	r1, [pc, #88]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d036      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007bda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bde:	d01f      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007be0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007be4:	d817      	bhi.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d003      	beq.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bee:	d009      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007bf0:	e011      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	3304      	adds	r3, #4
 8007bf6:	2100      	movs	r1, #0
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f000 fbfd 	bl	80083f8 <RCCEx_PLL2_Config>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007c02:	e00e      	b.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	3324      	adds	r3, #36	; 0x24
 8007c08:	2102      	movs	r1, #2
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f000 fca6 	bl	800855c <RCCEx_PLL3_Config>
 8007c10:	4603      	mov	r3, r0
 8007c12:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007c14:	e005      	b.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	75fb      	strb	r3, [r7, #23]
      break;
 8007c1a:	e002      	b.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007c1c:	58024400 	.word	0x58024400
      break;
 8007c20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c22:	7dfb      	ldrb	r3, [r7, #23]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d10a      	bne.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c28:	4b93      	ldr	r3, [pc, #588]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007c36:	4990      	ldr	r1, [pc, #576]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	658b      	str	r3, [r1, #88]	; 0x58
 8007c3c:	e001      	b.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c3e:	7dfb      	ldrb	r3, [r7, #23]
 8007c40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d033      	beq.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c58:	d01c      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8007c5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c5e:	d816      	bhi.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007c60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c64:	d003      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8007c66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c6a:	d007      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007c6c:	e00f      	b.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c6e:	4b82      	ldr	r3, [pc, #520]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c72:	4a81      	ldr	r2, [pc, #516]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007c7a:	e00c      	b.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	3324      	adds	r3, #36	; 0x24
 8007c80:	2101      	movs	r1, #1
 8007c82:	4618      	mov	r0, r3
 8007c84:	f000 fc6a 	bl	800855c <RCCEx_PLL3_Config>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007c8c:	e003      	b.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	75fb      	strb	r3, [r7, #23]
      break;
 8007c92:	e000      	b.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007c94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c96:	7dfb      	ldrb	r3, [r7, #23]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d10a      	bne.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c9c:	4b76      	ldr	r3, [pc, #472]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ca0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007caa:	4973      	ldr	r1, [pc, #460]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cac:	4313      	orrs	r3, r2
 8007cae:	654b      	str	r3, [r1, #84]	; 0x54
 8007cb0:	e001      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cb2:	7dfb      	ldrb	r3, [r7, #23]
 8007cb4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d029      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d003      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cce:	d007      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007cd0:	e00f      	b.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cd2:	4b69      	ldr	r3, [pc, #420]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd6:	4a68      	ldr	r2, [pc, #416]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cdc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007cde:	e00b      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	3304      	adds	r3, #4
 8007ce4:	2102      	movs	r1, #2
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f000 fb86 	bl	80083f8 <RCCEx_PLL2_Config>
 8007cec:	4603      	mov	r3, r0
 8007cee:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007cf0:	e002      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	75fb      	strb	r3, [r7, #23]
      break;
 8007cf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cf8:	7dfb      	ldrb	r3, [r7, #23]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d109      	bne.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007cfe:	4b5e      	ldr	r3, [pc, #376]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d0a:	495b      	ldr	r1, [pc, #364]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007d10:	e001      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d12:	7dfb      	ldrb	r3, [r7, #23]
 8007d14:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00a      	beq.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	3324      	adds	r3, #36	; 0x24
 8007d26:	2102      	movs	r1, #2
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f000 fc17 	bl	800855c <RCCEx_PLL3_Config>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d001      	beq.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d030      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d4c:	d017      	beq.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007d4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d52:	d811      	bhi.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d58:	d013      	beq.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007d5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d5e:	d80b      	bhi.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d010      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007d64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d68:	d106      	bne.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d6a:	4b43      	ldr	r3, [pc, #268]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6e:	4a42      	ldr	r2, [pc, #264]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007d76:	e007      	b.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	75fb      	strb	r3, [r7, #23]
      break;
 8007d7c:	e004      	b.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007d7e:	bf00      	nop
 8007d80:	e002      	b.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007d82:	bf00      	nop
 8007d84:	e000      	b.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007d86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d88:	7dfb      	ldrb	r3, [r7, #23]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d109      	bne.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d8e:	4b3a      	ldr	r3, [pc, #232]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d9a:	4937      	ldr	r1, [pc, #220]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	654b      	str	r3, [r1, #84]	; 0x54
 8007da0:	e001      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da2:	7dfb      	ldrb	r3, [r7, #23]
 8007da4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d008      	beq.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007db2:	4b31      	ldr	r3, [pc, #196]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007db6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dbe:	492e      	ldr	r1, [pc, #184]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d009      	beq.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007dd0:	4b29      	ldr	r3, [pc, #164]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007dde:	4926      	ldr	r1, [pc, #152]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007de0:	4313      	orrs	r3, r2
 8007de2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d008      	beq.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007df0:	4b21      	ldr	r3, [pc, #132]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007df4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dfc:	491e      	ldr	r1, [pc, #120]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00d      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007e0e:	4b1a      	ldr	r3, [pc, #104]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	4a19      	ldr	r2, [pc, #100]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e18:	6113      	str	r3, [r2, #16]
 8007e1a:	4b17      	ldr	r3, [pc, #92]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e1c:	691a      	ldr	r2, [r3, #16]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007e24:	4914      	ldr	r1, [pc, #80]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	da08      	bge.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007e32:	4b11      	ldr	r3, [pc, #68]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e3e:	490e      	ldr	r1, [pc, #56]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e40:	4313      	orrs	r3, r2
 8007e42:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d009      	beq.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007e50:	4b09      	ldr	r3, [pc, #36]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e5e:	4906      	ldr	r1, [pc, #24]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e60:	4313      	orrs	r3, r2
 8007e62:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007e64:	7dbb      	ldrb	r3, [r7, #22]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d101      	bne.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	e000      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3718      	adds	r7, #24
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	58024400 	.word	0x58024400

08007e7c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007e80:	f7ff f860 	bl	8006f44 <HAL_RCC_GetHCLKFreq>
 8007e84:	4602      	mov	r2, r0
 8007e86:	4b06      	ldr	r3, [pc, #24]	; (8007ea0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007e88:	6a1b      	ldr	r3, [r3, #32]
 8007e8a:	091b      	lsrs	r3, r3, #4
 8007e8c:	f003 0307 	and.w	r3, r3, #7
 8007e90:	4904      	ldr	r1, [pc, #16]	; (8007ea4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007e92:	5ccb      	ldrb	r3, [r1, r3]
 8007e94:	f003 031f 	and.w	r3, r3, #31
 8007e98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	bd80      	pop	{r7, pc}
 8007ea0:	58024400 	.word	0x58024400
 8007ea4:	0800c000 	.word	0x0800c000

08007ea8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b089      	sub	sp, #36	; 0x24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007eb0:	4ba1      	ldr	r3, [pc, #644]	; (8008138 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb4:	f003 0303 	and.w	r3, r3, #3
 8007eb8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007eba:	4b9f      	ldr	r3, [pc, #636]	; (8008138 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ebe:	0b1b      	lsrs	r3, r3, #12
 8007ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ec4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007ec6:	4b9c      	ldr	r3, [pc, #624]	; (8008138 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eca:	091b      	lsrs	r3, r3, #4
 8007ecc:	f003 0301 	and.w	r3, r3, #1
 8007ed0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007ed2:	4b99      	ldr	r3, [pc, #612]	; (8008138 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed6:	08db      	lsrs	r3, r3, #3
 8007ed8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007edc:	693a      	ldr	r2, [r7, #16]
 8007ede:	fb02 f303 	mul.w	r3, r2, r3
 8007ee2:	ee07 3a90 	vmov	s15, r3
 8007ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f000 8111 	beq.w	8008118 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	f000 8083 	beq.w	8008004 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	f200 80a1 	bhi.w	8008048 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d003      	beq.n	8007f14 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d056      	beq.n	8007fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007f12:	e099      	b.n	8008048 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f14:	4b88      	ldr	r3, [pc, #544]	; (8008138 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 0320 	and.w	r3, r3, #32
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d02d      	beq.n	8007f7c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f20:	4b85      	ldr	r3, [pc, #532]	; (8008138 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	08db      	lsrs	r3, r3, #3
 8007f26:	f003 0303 	and.w	r3, r3, #3
 8007f2a:	4a84      	ldr	r2, [pc, #528]	; (800813c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f30:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	ee07 3a90 	vmov	s15, r3
 8007f38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	ee07 3a90 	vmov	s15, r3
 8007f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f4a:	4b7b      	ldr	r3, [pc, #492]	; (8008138 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f52:	ee07 3a90 	vmov	s15, r3
 8007f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f5e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008140 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f76:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007f7a:	e087      	b.n	800808c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	ee07 3a90 	vmov	s15, r3
 8007f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f86:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008144 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f8e:	4b6a      	ldr	r3, [pc, #424]	; (8008138 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f96:	ee07 3a90 	vmov	s15, r3
 8007f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fa2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008140 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007fbe:	e065      	b.n	800808c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	ee07 3a90 	vmov	s15, r3
 8007fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008148 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fd2:	4b59      	ldr	r3, [pc, #356]	; (8008138 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fda:	ee07 3a90 	vmov	s15, r3
 8007fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fe2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fe6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008140 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ff2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ffe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008002:	e043      	b.n	800808c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	ee07 3a90 	vmov	s15, r3
 800800a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800800e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800814c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008016:	4b48      	ldr	r3, [pc, #288]	; (8008138 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800801e:	ee07 3a90 	vmov	s15, r3
 8008022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008026:	ed97 6a03 	vldr	s12, [r7, #12]
 800802a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008140 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800802e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008036:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800803a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800803e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008042:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008046:	e021      	b.n	800808c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	ee07 3a90 	vmov	s15, r3
 800804e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008052:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008148 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800805a:	4b37      	ldr	r3, [pc, #220]	; (8008138 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800805c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008062:	ee07 3a90 	vmov	s15, r3
 8008066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800806a:	ed97 6a03 	vldr	s12, [r7, #12]
 800806e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008140 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800807a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800807e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008086:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800808a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800808c:	4b2a      	ldr	r3, [pc, #168]	; (8008138 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800808e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008090:	0a5b      	lsrs	r3, r3, #9
 8008092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008096:	ee07 3a90 	vmov	s15, r3
 800809a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800809e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80080aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080b2:	ee17 2a90 	vmov	r2, s15
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80080ba:	4b1f      	ldr	r3, [pc, #124]	; (8008138 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080be:	0c1b      	lsrs	r3, r3, #16
 80080c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080c4:	ee07 3a90 	vmov	s15, r3
 80080c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80080d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080e0:	ee17 2a90 	vmov	r2, s15
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80080e8:	4b13      	ldr	r3, [pc, #76]	; (8008138 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ec:	0e1b      	lsrs	r3, r3, #24
 80080ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080f2:	ee07 3a90 	vmov	s15, r3
 80080f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008102:	edd7 6a07 	vldr	s13, [r7, #28]
 8008106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800810a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800810e:	ee17 2a90 	vmov	r2, s15
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008116:	e008      	b.n	800812a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	609a      	str	r2, [r3, #8]
}
 800812a:	bf00      	nop
 800812c:	3724      	adds	r7, #36	; 0x24
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr
 8008136:	bf00      	nop
 8008138:	58024400 	.word	0x58024400
 800813c:	03d09000 	.word	0x03d09000
 8008140:	46000000 	.word	0x46000000
 8008144:	4c742400 	.word	0x4c742400
 8008148:	4a742400 	.word	0x4a742400
 800814c:	4af42400 	.word	0x4af42400

08008150 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008150:	b480      	push	{r7}
 8008152:	b089      	sub	sp, #36	; 0x24
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008158:	4ba1      	ldr	r3, [pc, #644]	; (80083e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800815a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800815c:	f003 0303 	and.w	r3, r3, #3
 8008160:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008162:	4b9f      	ldr	r3, [pc, #636]	; (80083e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008166:	0d1b      	lsrs	r3, r3, #20
 8008168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800816c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800816e:	4b9c      	ldr	r3, [pc, #624]	; (80083e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008172:	0a1b      	lsrs	r3, r3, #8
 8008174:	f003 0301 	and.w	r3, r3, #1
 8008178:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800817a:	4b99      	ldr	r3, [pc, #612]	; (80083e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800817c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800817e:	08db      	lsrs	r3, r3, #3
 8008180:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	fb02 f303 	mul.w	r3, r2, r3
 800818a:	ee07 3a90 	vmov	s15, r3
 800818e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008192:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	2b00      	cmp	r3, #0
 800819a:	f000 8111 	beq.w	80083c0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	f000 8083 	beq.w	80082ac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	f200 80a1 	bhi.w	80082f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d003      	beq.n	80081bc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d056      	beq.n	8008268 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80081ba:	e099      	b.n	80082f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081bc:	4b88      	ldr	r3, [pc, #544]	; (80083e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 0320 	and.w	r3, r3, #32
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d02d      	beq.n	8008224 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80081c8:	4b85      	ldr	r3, [pc, #532]	; (80083e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	08db      	lsrs	r3, r3, #3
 80081ce:	f003 0303 	and.w	r3, r3, #3
 80081d2:	4a84      	ldr	r2, [pc, #528]	; (80083e4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80081d4:	fa22 f303 	lsr.w	r3, r2, r3
 80081d8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	ee07 3a90 	vmov	s15, r3
 80081e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	ee07 3a90 	vmov	s15, r3
 80081ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081f2:	4b7b      	ldr	r3, [pc, #492]	; (80083e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081fa:	ee07 3a90 	vmov	s15, r3
 80081fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008202:	ed97 6a03 	vldr	s12, [r7, #12]
 8008206:	eddf 5a78 	vldr	s11, [pc, #480]	; 80083e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800820a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800820e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008212:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800821a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800821e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008222:	e087      	b.n	8008334 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	ee07 3a90 	vmov	s15, r3
 800822a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800822e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80083ec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008236:	4b6a      	ldr	r3, [pc, #424]	; (80083e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800823e:	ee07 3a90 	vmov	s15, r3
 8008242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008246:	ed97 6a03 	vldr	s12, [r7, #12]
 800824a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80083e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800824e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800825a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800825e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008262:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008266:	e065      	b.n	8008334 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	ee07 3a90 	vmov	s15, r3
 800826e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008272:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80083f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800827a:	4b59      	ldr	r3, [pc, #356]	; (80083e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800827c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008282:	ee07 3a90 	vmov	s15, r3
 8008286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800828a:	ed97 6a03 	vldr	s12, [r7, #12]
 800828e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80083e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800829a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800829e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082aa:	e043      	b.n	8008334 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	ee07 3a90 	vmov	s15, r3
 80082b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082b6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80083f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80082ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082be:	4b48      	ldr	r3, [pc, #288]	; (80083e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082c6:	ee07 3a90 	vmov	s15, r3
 80082ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80082d2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80083e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082ee:	e021      	b.n	8008334 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	ee07 3a90 	vmov	s15, r3
 80082f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80083f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80082fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008302:	4b37      	ldr	r3, [pc, #220]	; (80083e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800830a:	ee07 3a90 	vmov	s15, r3
 800830e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008312:	ed97 6a03 	vldr	s12, [r7, #12]
 8008316:	eddf 5a34 	vldr	s11, [pc, #208]	; 80083e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800831a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800831e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800832a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800832e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008332:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008334:	4b2a      	ldr	r3, [pc, #168]	; (80083e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008338:	0a5b      	lsrs	r3, r3, #9
 800833a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800833e:	ee07 3a90 	vmov	s15, r3
 8008342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008346:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800834a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800834e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800835a:	ee17 2a90 	vmov	r2, s15
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008362:	4b1f      	ldr	r3, [pc, #124]	; (80083e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008366:	0c1b      	lsrs	r3, r3, #16
 8008368:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800836c:	ee07 3a90 	vmov	s15, r3
 8008370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008374:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008378:	ee37 7a87 	vadd.f32	s14, s15, s14
 800837c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008388:	ee17 2a90 	vmov	r2, s15
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008390:	4b13      	ldr	r3, [pc, #76]	; (80083e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008394:	0e1b      	lsrs	r3, r3, #24
 8008396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800839a:	ee07 3a90 	vmov	s15, r3
 800839e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80083ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083b6:	ee17 2a90 	vmov	r2, s15
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80083be:	e008      	b.n	80083d2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	609a      	str	r2, [r3, #8]
}
 80083d2:	bf00      	nop
 80083d4:	3724      	adds	r7, #36	; 0x24
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	58024400 	.word	0x58024400
 80083e4:	03d09000 	.word	0x03d09000
 80083e8:	46000000 	.word	0x46000000
 80083ec:	4c742400 	.word	0x4c742400
 80083f0:	4a742400 	.word	0x4a742400
 80083f4:	4af42400 	.word	0x4af42400

080083f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008402:	2300      	movs	r3, #0
 8008404:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008406:	4b53      	ldr	r3, [pc, #332]	; (8008554 <RCCEx_PLL2_Config+0x15c>)
 8008408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800840a:	f003 0303 	and.w	r3, r3, #3
 800840e:	2b03      	cmp	r3, #3
 8008410:	d101      	bne.n	8008416 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	e099      	b.n	800854a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008416:	4b4f      	ldr	r3, [pc, #316]	; (8008554 <RCCEx_PLL2_Config+0x15c>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a4e      	ldr	r2, [pc, #312]	; (8008554 <RCCEx_PLL2_Config+0x15c>)
 800841c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008420:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008422:	f7fa f9d3 	bl	80027cc <HAL_GetTick>
 8008426:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008428:	e008      	b.n	800843c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800842a:	f7fa f9cf 	bl	80027cc <HAL_GetTick>
 800842e:	4602      	mov	r2, r0
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	2b02      	cmp	r3, #2
 8008436:	d901      	bls.n	800843c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008438:	2303      	movs	r3, #3
 800843a:	e086      	b.n	800854a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800843c:	4b45      	ldr	r3, [pc, #276]	; (8008554 <RCCEx_PLL2_Config+0x15c>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008444:	2b00      	cmp	r3, #0
 8008446:	d1f0      	bne.n	800842a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008448:	4b42      	ldr	r3, [pc, #264]	; (8008554 <RCCEx_PLL2_Config+0x15c>)
 800844a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800844c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	031b      	lsls	r3, r3, #12
 8008456:	493f      	ldr	r1, [pc, #252]	; (8008554 <RCCEx_PLL2_Config+0x15c>)
 8008458:	4313      	orrs	r3, r2
 800845a:	628b      	str	r3, [r1, #40]	; 0x28
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	3b01      	subs	r3, #1
 8008462:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	3b01      	subs	r3, #1
 800846c:	025b      	lsls	r3, r3, #9
 800846e:	b29b      	uxth	r3, r3
 8008470:	431a      	orrs	r2, r3
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	3b01      	subs	r3, #1
 8008478:	041b      	lsls	r3, r3, #16
 800847a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800847e:	431a      	orrs	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	3b01      	subs	r3, #1
 8008486:	061b      	lsls	r3, r3, #24
 8008488:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800848c:	4931      	ldr	r1, [pc, #196]	; (8008554 <RCCEx_PLL2_Config+0x15c>)
 800848e:	4313      	orrs	r3, r2
 8008490:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008492:	4b30      	ldr	r3, [pc, #192]	; (8008554 <RCCEx_PLL2_Config+0x15c>)
 8008494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008496:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	492d      	ldr	r1, [pc, #180]	; (8008554 <RCCEx_PLL2_Config+0x15c>)
 80084a0:	4313      	orrs	r3, r2
 80084a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80084a4:	4b2b      	ldr	r3, [pc, #172]	; (8008554 <RCCEx_PLL2_Config+0x15c>)
 80084a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a8:	f023 0220 	bic.w	r2, r3, #32
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	699b      	ldr	r3, [r3, #24]
 80084b0:	4928      	ldr	r1, [pc, #160]	; (8008554 <RCCEx_PLL2_Config+0x15c>)
 80084b2:	4313      	orrs	r3, r2
 80084b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80084b6:	4b27      	ldr	r3, [pc, #156]	; (8008554 <RCCEx_PLL2_Config+0x15c>)
 80084b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ba:	4a26      	ldr	r2, [pc, #152]	; (8008554 <RCCEx_PLL2_Config+0x15c>)
 80084bc:	f023 0310 	bic.w	r3, r3, #16
 80084c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80084c2:	4b24      	ldr	r3, [pc, #144]	; (8008554 <RCCEx_PLL2_Config+0x15c>)
 80084c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084c6:	4b24      	ldr	r3, [pc, #144]	; (8008558 <RCCEx_PLL2_Config+0x160>)
 80084c8:	4013      	ands	r3, r2
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	69d2      	ldr	r2, [r2, #28]
 80084ce:	00d2      	lsls	r2, r2, #3
 80084d0:	4920      	ldr	r1, [pc, #128]	; (8008554 <RCCEx_PLL2_Config+0x15c>)
 80084d2:	4313      	orrs	r3, r2
 80084d4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80084d6:	4b1f      	ldr	r3, [pc, #124]	; (8008554 <RCCEx_PLL2_Config+0x15c>)
 80084d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084da:	4a1e      	ldr	r2, [pc, #120]	; (8008554 <RCCEx_PLL2_Config+0x15c>)
 80084dc:	f043 0310 	orr.w	r3, r3, #16
 80084e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d106      	bne.n	80084f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80084e8:	4b1a      	ldr	r3, [pc, #104]	; (8008554 <RCCEx_PLL2_Config+0x15c>)
 80084ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ec:	4a19      	ldr	r2, [pc, #100]	; (8008554 <RCCEx_PLL2_Config+0x15c>)
 80084ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80084f4:	e00f      	b.n	8008516 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d106      	bne.n	800850a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80084fc:	4b15      	ldr	r3, [pc, #84]	; (8008554 <RCCEx_PLL2_Config+0x15c>)
 80084fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008500:	4a14      	ldr	r2, [pc, #80]	; (8008554 <RCCEx_PLL2_Config+0x15c>)
 8008502:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008506:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008508:	e005      	b.n	8008516 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800850a:	4b12      	ldr	r3, [pc, #72]	; (8008554 <RCCEx_PLL2_Config+0x15c>)
 800850c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800850e:	4a11      	ldr	r2, [pc, #68]	; (8008554 <RCCEx_PLL2_Config+0x15c>)
 8008510:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008514:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008516:	4b0f      	ldr	r3, [pc, #60]	; (8008554 <RCCEx_PLL2_Config+0x15c>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a0e      	ldr	r2, [pc, #56]	; (8008554 <RCCEx_PLL2_Config+0x15c>)
 800851c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008520:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008522:	f7fa f953 	bl	80027cc <HAL_GetTick>
 8008526:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008528:	e008      	b.n	800853c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800852a:	f7fa f94f 	bl	80027cc <HAL_GetTick>
 800852e:	4602      	mov	r2, r0
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	1ad3      	subs	r3, r2, r3
 8008534:	2b02      	cmp	r3, #2
 8008536:	d901      	bls.n	800853c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008538:	2303      	movs	r3, #3
 800853a:	e006      	b.n	800854a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800853c:	4b05      	ldr	r3, [pc, #20]	; (8008554 <RCCEx_PLL2_Config+0x15c>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008544:	2b00      	cmp	r3, #0
 8008546:	d0f0      	beq.n	800852a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008548:	7bfb      	ldrb	r3, [r7, #15]
}
 800854a:	4618      	mov	r0, r3
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	58024400 	.word	0x58024400
 8008558:	ffff0007 	.word	0xffff0007

0800855c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008566:	2300      	movs	r3, #0
 8008568:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800856a:	4b53      	ldr	r3, [pc, #332]	; (80086b8 <RCCEx_PLL3_Config+0x15c>)
 800856c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800856e:	f003 0303 	and.w	r3, r3, #3
 8008572:	2b03      	cmp	r3, #3
 8008574:	d101      	bne.n	800857a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e099      	b.n	80086ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800857a:	4b4f      	ldr	r3, [pc, #316]	; (80086b8 <RCCEx_PLL3_Config+0x15c>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a4e      	ldr	r2, [pc, #312]	; (80086b8 <RCCEx_PLL3_Config+0x15c>)
 8008580:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008584:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008586:	f7fa f921 	bl	80027cc <HAL_GetTick>
 800858a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800858c:	e008      	b.n	80085a0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800858e:	f7fa f91d 	bl	80027cc <HAL_GetTick>
 8008592:	4602      	mov	r2, r0
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	2b02      	cmp	r3, #2
 800859a:	d901      	bls.n	80085a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800859c:	2303      	movs	r3, #3
 800859e:	e086      	b.n	80086ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80085a0:	4b45      	ldr	r3, [pc, #276]	; (80086b8 <RCCEx_PLL3_Config+0x15c>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d1f0      	bne.n	800858e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80085ac:	4b42      	ldr	r3, [pc, #264]	; (80086b8 <RCCEx_PLL3_Config+0x15c>)
 80085ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	051b      	lsls	r3, r3, #20
 80085ba:	493f      	ldr	r1, [pc, #252]	; (80086b8 <RCCEx_PLL3_Config+0x15c>)
 80085bc:	4313      	orrs	r3, r2
 80085be:	628b      	str	r3, [r1, #40]	; 0x28
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	3b01      	subs	r3, #1
 80085c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	3b01      	subs	r3, #1
 80085d0:	025b      	lsls	r3, r3, #9
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	431a      	orrs	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	3b01      	subs	r3, #1
 80085dc:	041b      	lsls	r3, r3, #16
 80085de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80085e2:	431a      	orrs	r2, r3
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	691b      	ldr	r3, [r3, #16]
 80085e8:	3b01      	subs	r3, #1
 80085ea:	061b      	lsls	r3, r3, #24
 80085ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80085f0:	4931      	ldr	r1, [pc, #196]	; (80086b8 <RCCEx_PLL3_Config+0x15c>)
 80085f2:	4313      	orrs	r3, r2
 80085f4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80085f6:	4b30      	ldr	r3, [pc, #192]	; (80086b8 <RCCEx_PLL3_Config+0x15c>)
 80085f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	695b      	ldr	r3, [r3, #20]
 8008602:	492d      	ldr	r1, [pc, #180]	; (80086b8 <RCCEx_PLL3_Config+0x15c>)
 8008604:	4313      	orrs	r3, r2
 8008606:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008608:	4b2b      	ldr	r3, [pc, #172]	; (80086b8 <RCCEx_PLL3_Config+0x15c>)
 800860a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	699b      	ldr	r3, [r3, #24]
 8008614:	4928      	ldr	r1, [pc, #160]	; (80086b8 <RCCEx_PLL3_Config+0x15c>)
 8008616:	4313      	orrs	r3, r2
 8008618:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800861a:	4b27      	ldr	r3, [pc, #156]	; (80086b8 <RCCEx_PLL3_Config+0x15c>)
 800861c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861e:	4a26      	ldr	r2, [pc, #152]	; (80086b8 <RCCEx_PLL3_Config+0x15c>)
 8008620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008624:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008626:	4b24      	ldr	r3, [pc, #144]	; (80086b8 <RCCEx_PLL3_Config+0x15c>)
 8008628:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800862a:	4b24      	ldr	r3, [pc, #144]	; (80086bc <RCCEx_PLL3_Config+0x160>)
 800862c:	4013      	ands	r3, r2
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	69d2      	ldr	r2, [r2, #28]
 8008632:	00d2      	lsls	r2, r2, #3
 8008634:	4920      	ldr	r1, [pc, #128]	; (80086b8 <RCCEx_PLL3_Config+0x15c>)
 8008636:	4313      	orrs	r3, r2
 8008638:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800863a:	4b1f      	ldr	r3, [pc, #124]	; (80086b8 <RCCEx_PLL3_Config+0x15c>)
 800863c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800863e:	4a1e      	ldr	r2, [pc, #120]	; (80086b8 <RCCEx_PLL3_Config+0x15c>)
 8008640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008644:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d106      	bne.n	800865a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800864c:	4b1a      	ldr	r3, [pc, #104]	; (80086b8 <RCCEx_PLL3_Config+0x15c>)
 800864e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008650:	4a19      	ldr	r2, [pc, #100]	; (80086b8 <RCCEx_PLL3_Config+0x15c>)
 8008652:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008656:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008658:	e00f      	b.n	800867a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	2b01      	cmp	r3, #1
 800865e:	d106      	bne.n	800866e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008660:	4b15      	ldr	r3, [pc, #84]	; (80086b8 <RCCEx_PLL3_Config+0x15c>)
 8008662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008664:	4a14      	ldr	r2, [pc, #80]	; (80086b8 <RCCEx_PLL3_Config+0x15c>)
 8008666:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800866a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800866c:	e005      	b.n	800867a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800866e:	4b12      	ldr	r3, [pc, #72]	; (80086b8 <RCCEx_PLL3_Config+0x15c>)
 8008670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008672:	4a11      	ldr	r2, [pc, #68]	; (80086b8 <RCCEx_PLL3_Config+0x15c>)
 8008674:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008678:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800867a:	4b0f      	ldr	r3, [pc, #60]	; (80086b8 <RCCEx_PLL3_Config+0x15c>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a0e      	ldr	r2, [pc, #56]	; (80086b8 <RCCEx_PLL3_Config+0x15c>)
 8008680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008684:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008686:	f7fa f8a1 	bl	80027cc <HAL_GetTick>
 800868a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800868c:	e008      	b.n	80086a0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800868e:	f7fa f89d 	bl	80027cc <HAL_GetTick>
 8008692:	4602      	mov	r2, r0
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	1ad3      	subs	r3, r2, r3
 8008698:	2b02      	cmp	r3, #2
 800869a:	d901      	bls.n	80086a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800869c:	2303      	movs	r3, #3
 800869e:	e006      	b.n	80086ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80086a0:	4b05      	ldr	r3, [pc, #20]	; (80086b8 <RCCEx_PLL3_Config+0x15c>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d0f0      	beq.n	800868e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	58024400 	.word	0x58024400
 80086bc:	ffff0007 	.word	0xffff0007

080086c0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d101      	bne.n	80086d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	e0f1      	b.n	80088b6 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a78      	ldr	r2, [pc, #480]	; (80088c0 <HAL_SPI_Init+0x200>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d00f      	beq.n	8008702 <HAL_SPI_Init+0x42>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a77      	ldr	r2, [pc, #476]	; (80088c4 <HAL_SPI_Init+0x204>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d00a      	beq.n	8008702 <HAL_SPI_Init+0x42>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a75      	ldr	r2, [pc, #468]	; (80088c8 <HAL_SPI_Init+0x208>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d005      	beq.n	8008702 <HAL_SPI_Init+0x42>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	2b0f      	cmp	r3, #15
 80086fc:	d901      	bls.n	8008702 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	e0d9      	b.n	80088b6 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 ff6c 	bl	80095e0 <SPI_GetPacketSize>
 8008708:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a6c      	ldr	r2, [pc, #432]	; (80088c0 <HAL_SPI_Init+0x200>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d00c      	beq.n	800872e <HAL_SPI_Init+0x6e>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a6a      	ldr	r2, [pc, #424]	; (80088c4 <HAL_SPI_Init+0x204>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d007      	beq.n	800872e <HAL_SPI_Init+0x6e>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a69      	ldr	r2, [pc, #420]	; (80088c8 <HAL_SPI_Init+0x208>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d002      	beq.n	800872e <HAL_SPI_Init+0x6e>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2b08      	cmp	r3, #8
 800872c:	d811      	bhi.n	8008752 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008732:	4a63      	ldr	r2, [pc, #396]	; (80088c0 <HAL_SPI_Init+0x200>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d009      	beq.n	800874c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a61      	ldr	r2, [pc, #388]	; (80088c4 <HAL_SPI_Init+0x204>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d004      	beq.n	800874c <HAL_SPI_Init+0x8c>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a60      	ldr	r2, [pc, #384]	; (80088c8 <HAL_SPI_Init+0x208>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d104      	bne.n	8008756 <HAL_SPI_Init+0x96>
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2b10      	cmp	r3, #16
 8008750:	d901      	bls.n	8008756 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	e0af      	b.n	80088b6 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800875c:	b2db      	uxtb	r3, r3
 800875e:	2b00      	cmp	r3, #0
 8008760:	d106      	bne.n	8008770 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f7f9 fcd2 	bl	8002114 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2202      	movs	r2, #2
 8008774:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f022 0201 	bic.w	r2, r2, #1
 8008786:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008792:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	699b      	ldr	r3, [r3, #24]
 8008798:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800879c:	d119      	bne.n	80087d2 <HAL_SPI_Init+0x112>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087a6:	d103      	bne.n	80087b0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d008      	beq.n	80087c2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d10c      	bne.n	80087d2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80087bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087c0:	d107      	bne.n	80087d2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80087d0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	69da      	ldr	r2, [r3, #28]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087da:	431a      	orrs	r2, r3
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	431a      	orrs	r2, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087e4:	ea42 0103 	orr.w	r1, r2, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	68da      	ldr	r2, [r3, #12]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	430a      	orrs	r2, r1
 80087f2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fc:	431a      	orrs	r2, r3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008802:	431a      	orrs	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	431a      	orrs	r2, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	691b      	ldr	r3, [r3, #16]
 800880e:	431a      	orrs	r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	695b      	ldr	r3, [r3, #20]
 8008814:	431a      	orrs	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a1b      	ldr	r3, [r3, #32]
 800881a:	431a      	orrs	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	431a      	orrs	r2, r3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008826:	431a      	orrs	r2, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	431a      	orrs	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008832:	ea42 0103 	orr.w	r1, r2, r3
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	430a      	orrs	r2, r1
 8008840:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d113      	bne.n	8008872 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800885c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008870:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f022 0201 	bic.w	r2, r2, #1
 8008880:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00a      	beq.n	80088a4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	430a      	orrs	r2, r1
 80088a2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	40013000 	.word	0x40013000
 80088c4:	40003800 	.word	0x40003800
 80088c8:	40003c00 	.word	0x40003c00

080088cc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b08a      	sub	sp, #40	; 0x28
 80088d0:	af02      	add	r7, sp, #8
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	603b      	str	r3, [r7, #0]
 80088d8:	4613      	mov	r3, r2
 80088da:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	3320      	adds	r3, #32
 80088e2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80088e4:	2300      	movs	r3, #0
 80088e6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d101      	bne.n	80088f6 <HAL_SPI_Transmit+0x2a>
 80088f2:	2302      	movs	r3, #2
 80088f4:	e1d7      	b.n	8008ca6 <HAL_SPI_Transmit+0x3da>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2201      	movs	r2, #1
 80088fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088fe:	f7f9 ff65 	bl	80027cc <HAL_GetTick>
 8008902:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800890a:	b2db      	uxtb	r3, r3
 800890c:	2b01      	cmp	r3, #1
 800890e:	d007      	beq.n	8008920 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8008910:	2302      	movs	r3, #2
 8008912:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800891c:	7efb      	ldrb	r3, [r7, #27]
 800891e:	e1c2      	b.n	8008ca6 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d002      	beq.n	800892c <HAL_SPI_Transmit+0x60>
 8008926:	88fb      	ldrh	r3, [r7, #6]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d107      	bne.n	800893c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2200      	movs	r2, #0
 8008934:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008938:	7efb      	ldrb	r3, [r7, #27]
 800893a:	e1b4      	b.n	8008ca6 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2203      	movs	r2, #3
 8008940:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	68ba      	ldr	r2, [r7, #8]
 8008950:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	88fa      	ldrh	r2, [r7, #6]
 8008956:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	88fa      	ldrh	r2, [r7, #6]
 800895e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2200      	movs	r2, #0
 8008966:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2200      	movs	r2, #0
 800896c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2200      	movs	r2, #0
 8008974:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2200      	movs	r2, #0
 800897c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2200      	movs	r2, #0
 8008982:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800898c:	d107      	bne.n	800899e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800899c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	685a      	ldr	r2, [r3, #4]
 80089a4:	4b96      	ldr	r3, [pc, #600]	; (8008c00 <HAL_SPI_Transmit+0x334>)
 80089a6:	4013      	ands	r3, r2
 80089a8:	88f9      	ldrh	r1, [r7, #6]
 80089aa:	68fa      	ldr	r2, [r7, #12]
 80089ac:	6812      	ldr	r2, [r2, #0]
 80089ae:	430b      	orrs	r3, r1
 80089b0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f042 0201 	orr.w	r2, r2, #1
 80089c0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089ca:	d107      	bne.n	80089dc <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	2b0f      	cmp	r3, #15
 80089e2:	d947      	bls.n	8008a74 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80089e4:	e03f      	b.n	8008a66 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	695b      	ldr	r3, [r3, #20]
 80089ec:	f003 0302 	and.w	r3, r3, #2
 80089f0:	2b02      	cmp	r3, #2
 80089f2:	d114      	bne.n	8008a1e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6812      	ldr	r2, [r2, #0]
 80089fe:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a04:	1d1a      	adds	r2, r3, #4
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	3b01      	subs	r3, #1
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008a1c:	e023      	b.n	8008a66 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a1e:	f7f9 fed5 	bl	80027cc <HAL_GetTick>
 8008a22:	4602      	mov	r2, r0
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	683a      	ldr	r2, [r7, #0]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d803      	bhi.n	8008a36 <HAL_SPI_Transmit+0x16a>
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a34:	d102      	bne.n	8008a3c <HAL_SPI_Transmit+0x170>
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d114      	bne.n	8008a66 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008a3c:	68f8      	ldr	r0, [r7, #12]
 8008a3e:	f000 fd01 	bl	8009444 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008a62:	2303      	movs	r3, #3
 8008a64:	e11f      	b.n	8008ca6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1b9      	bne.n	80089e6 <HAL_SPI_Transmit+0x11a>
 8008a72:	e0f2      	b.n	8008c5a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	2b07      	cmp	r3, #7
 8008a7a:	f240 80e7 	bls.w	8008c4c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008a7e:	e05d      	b.n	8008b3c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	695b      	ldr	r3, [r3, #20]
 8008a86:	f003 0302 	and.w	r3, r3, #2
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d132      	bne.n	8008af4 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d918      	bls.n	8008acc <HAL_SPI_Transmit+0x200>
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d014      	beq.n	8008acc <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	6812      	ldr	r2, [r2, #0]
 8008aac:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ab2:	1d1a      	adds	r2, r3, #4
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	3b02      	subs	r3, #2
 8008ac2:	b29a      	uxth	r2, r3
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008aca:	e037      	b.n	8008b3c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ad0:	881a      	ldrh	r2, [r3, #0]
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ada:	1c9a      	adds	r2, r3, #2
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	b29a      	uxth	r2, r3
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008af2:	e023      	b.n	8008b3c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008af4:	f7f9 fe6a 	bl	80027cc <HAL_GetTick>
 8008af8:	4602      	mov	r2, r0
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	683a      	ldr	r2, [r7, #0]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d803      	bhi.n	8008b0c <HAL_SPI_Transmit+0x240>
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b0a:	d102      	bne.n	8008b12 <HAL_SPI_Transmit+0x246>
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d114      	bne.n	8008b3c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008b12:	68f8      	ldr	r0, [r7, #12]
 8008b14:	f000 fc96 	bl	8009444 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008b38:	2303      	movs	r3, #3
 8008b3a:	e0b4      	b.n	8008ca6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d19b      	bne.n	8008a80 <HAL_SPI_Transmit+0x1b4>
 8008b48:	e087      	b.n	8008c5a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	695b      	ldr	r3, [r3, #20]
 8008b50:	f003 0302 	and.w	r3, r3, #2
 8008b54:	2b02      	cmp	r3, #2
 8008b56:	d155      	bne.n	8008c04 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	2b03      	cmp	r3, #3
 8008b62:	d918      	bls.n	8008b96 <HAL_SPI_Transmit+0x2ca>
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b68:	2b40      	cmp	r3, #64	; 0x40
 8008b6a:	d914      	bls.n	8008b96 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	6812      	ldr	r2, [r2, #0]
 8008b76:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b7c:	1d1a      	adds	r2, r3, #4
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	3b04      	subs	r3, #4
 8008b8c:	b29a      	uxth	r2, r3
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008b94:	e05a      	b.n	8008c4c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d917      	bls.n	8008bd2 <HAL_SPI_Transmit+0x306>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d013      	beq.n	8008bd2 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bae:	881a      	ldrh	r2, [r3, #0]
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bb8:	1c9a      	adds	r2, r3, #2
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	3b02      	subs	r3, #2
 8008bc8:	b29a      	uxth	r2, r3
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008bd0:	e03c      	b.n	8008c4c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	3320      	adds	r3, #32
 8008bdc:	7812      	ldrb	r2, [r2, #0]
 8008bde:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008be4:	1c5a      	adds	r2, r3, #1
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	3b01      	subs	r3, #1
 8008bf4:	b29a      	uxth	r2, r3
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008bfc:	e026      	b.n	8008c4c <HAL_SPI_Transmit+0x380>
 8008bfe:	bf00      	nop
 8008c00:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c04:	f7f9 fde2 	bl	80027cc <HAL_GetTick>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	1ad3      	subs	r3, r2, r3
 8008c0e:	683a      	ldr	r2, [r7, #0]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d803      	bhi.n	8008c1c <HAL_SPI_Transmit+0x350>
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c1a:	d102      	bne.n	8008c22 <HAL_SPI_Transmit+0x356>
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d114      	bne.n	8008c4c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008c22:	68f8      	ldr	r0, [r7, #12]
 8008c24:	f000 fc0e 	bl	8009444 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	e02c      	b.n	8008ca6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	f47f af78 	bne.w	8008b4a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	9300      	str	r3, [sp, #0]
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	2200      	movs	r2, #0
 8008c62:	2108      	movs	r1, #8
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f000 fc8d 	bl	8009584 <SPI_WaitOnFlagUntilTimeout>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d007      	beq.n	8008c80 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c76:	f043 0220 	orr.w	r2, r3, #32
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f000 fbdf 	bl	8009444 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2201      	movs	r2, #1
 8008c92:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d001      	beq.n	8008ca4 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e000      	b.n	8008ca6 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8008ca4:	7efb      	ldrb	r3, [r7, #27]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3720      	adds	r7, #32
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop

08008cb0 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b086      	sub	sp, #24
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	4613      	mov	r3, r2
 8008cbc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d101      	bne.n	8008cd0 <HAL_SPI_Transmit_DMA+0x20>
 8008ccc:	2302      	movs	r3, #2
 8008cce:	e12c      	b.n	8008f2a <HAL_SPI_Transmit_DMA+0x27a>
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d007      	beq.n	8008cf4 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 8008ce4:	2302      	movs	r3, #2
 8008ce6:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008cf0:	7dfb      	ldrb	r3, [r7, #23]
 8008cf2:	e11a      	b.n	8008f2a <HAL_SPI_Transmit_DMA+0x27a>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d002      	beq.n	8008d00 <HAL_SPI_Transmit_DMA+0x50>
 8008cfa:	88fb      	ldrh	r3, [r7, #6]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d107      	bne.n	8008d10 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008d0c:	7dfb      	ldrb	r3, [r7, #23]
 8008d0e:	e10c      	b.n	8008f2a <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2203      	movs	r2, #3
 8008d14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	68ba      	ldr	r2, [r7, #8]
 8008d24:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	88fa      	ldrh	r2, [r7, #6]
 8008d2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	88fa      	ldrh	r2, [r7, #6]
 8008d32:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2200      	movs	r2, #0
 8008d46:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008d60:	d107      	bne.n	8008d72 <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d70:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	2b0f      	cmp	r3, #15
 8008d78:	d905      	bls.n	8008d86 <HAL_SPI_Transmit_DMA+0xd6>
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d84:	d10f      	bne.n	8008da6 <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8008d8a:	2b07      	cmp	r3, #7
 8008d8c:	d913      	bls.n	8008db6 <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d92:	699b      	ldr	r3, [r3, #24]
 8008d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d98:	d00d      	beq.n	8008db6 <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d9e:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008da0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008da4:	d007      	beq.n	8008db6 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008db2:	7dfb      	ldrb	r3, [r7, #23]
 8008db4:	e0b9      	b.n	8008f2a <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	68db      	ldr	r3, [r3, #12]
 8008dba:	2b07      	cmp	r3, #7
 8008dbc:	d820      	bhi.n	8008e00 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008dc2:	699b      	ldr	r3, [r3, #24]
 8008dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dc8:	d109      	bne.n	8008dde <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	105b      	asrs	r3, r3, #1
 8008dd6:	b29a      	uxth	r2, r3
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008de8:	d11e      	bne.n	8008e28 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	3303      	adds	r3, #3
 8008df4:	109b      	asrs	r3, r3, #2
 8008df6:	b29a      	uxth	r2, r3
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008dfe:	e013      	b.n	8008e28 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	2b0f      	cmp	r3, #15
 8008e06:	d80f      	bhi.n	8008e28 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e0c:	699b      	ldr	r3, [r3, #24]
 8008e0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e12:	d109      	bne.n	8008e28 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	105b      	asrs	r3, r3, #1
 8008e20:	b29a      	uxth	r2, r3
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e2c:	4a41      	ldr	r2, [pc, #260]	; (8008f34 <HAL_SPI_Transmit_DMA+0x284>)
 8008e2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e34:	4a40      	ldr	r2, [pc, #256]	; (8008f38 <HAL_SPI_Transmit_DMA+0x288>)
 8008e36:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e3c:	4a3f      	ldr	r2, [pc, #252]	; (8008f3c <HAL_SPI_Transmit_DMA+0x28c>)
 8008e3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e44:	2200      	movs	r2, #0
 8008e46:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	689a      	ldr	r2, [r3, #8]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008e56:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e60:	4619      	mov	r1, r3
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	3320      	adds	r3, #32
 8008e68:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e70:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008e72:	f7fa f967 	bl	8003144 <HAL_DMA_Start_IT>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d013      	beq.n	8008ea4 <HAL_SPI_Transmit_DMA+0x1f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e82:	f043 0210 	orr.w	r2, r3, #16
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8008ea0:	7dfb      	ldrb	r3, [r7, #23]
 8008ea2:	e042      	b.n	8008f2a <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ea8:	69db      	ldr	r3, [r3, #28]
 8008eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eae:	d108      	bne.n	8008ec2 <HAL_SPI_Transmit_DMA+0x212>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	6859      	ldr	r1, [r3, #4]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	4b21      	ldr	r3, [pc, #132]	; (8008f40 <HAL_SPI_Transmit_DMA+0x290>)
 8008ebc:	400b      	ands	r3, r1
 8008ebe:	6053      	str	r3, [r2, #4]
 8008ec0:	e009      	b.n	8008ed6 <HAL_SPI_Transmit_DMA+0x226>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	685a      	ldr	r2, [r3, #4]
 8008ec8:	4b1d      	ldr	r3, [pc, #116]	; (8008f40 <HAL_SPI_Transmit_DMA+0x290>)
 8008eca:	4013      	ands	r3, r2
 8008ecc:	88f9      	ldrh	r1, [r7, #6]
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	6812      	ldr	r2, [r2, #0]
 8008ed2:	430b      	orrs	r3, r1
 8008ed4:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	689a      	ldr	r2, [r3, #8]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ee4:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	691a      	ldr	r2, [r3, #16]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 8008ef4:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f042 0201 	orr.w	r2, r2, #1
 8008f04:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f0e:	d107      	bne.n	8008f20 <HAL_SPI_Transmit_DMA+0x270>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f1e:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8008f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3718      	adds	r7, #24
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	080093af 	.word	0x080093af
 8008f38:	08009369 	.word	0x08009369
 8008f3c:	080093cb 	.word	0x080093cb
 8008f40:	ffff0000 	.word	0xffff0000

08008f44 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b08a      	sub	sp, #40	; 0x28
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	695b      	ldr	r3, [r3, #20]
 8008f5a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008f5c:	6a3a      	ldr	r2, [r7, #32]
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	4013      	ands	r3, r2
 8008f62:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008f76:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	3330      	adds	r3, #48	; 0x30
 8008f7e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008f80:	69bb      	ldr	r3, [r7, #24]
 8008f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d113      	bne.n	8008fb2 <HAL_SPI_IRQHandler+0x6e>
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	f003 0320 	and.w	r3, r3, #32
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d10e      	bne.n	8008fb2 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d009      	beq.n	8008fb2 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	4798      	blx	r3
    hspi->RxISR(hspi);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	4798      	blx	r3
    handled = 1UL;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d10f      	bne.n	8008fdc <HAL_SPI_IRQHandler+0x98>
 8008fbc:	69bb      	ldr	r3, [r7, #24]
 8008fbe:	f003 0301 	and.w	r3, r3, #1
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00a      	beq.n	8008fdc <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d105      	bne.n	8008fdc <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	4798      	blx	r3
    handled = 1UL;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	f003 0320 	and.w	r3, r3, #32
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d10f      	bne.n	8009006 <HAL_SPI_IRQHandler+0xc2>
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	f003 0302 	and.w	r3, r3, #2
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00a      	beq.n	8009006 <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d105      	bne.n	8009006 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	4798      	blx	r3
    handled = 1UL;
 8009002:	2301      	movs	r3, #1
 8009004:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8009006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009008:	2b00      	cmp	r3, #0
 800900a:	f040 816f 	bne.w	80092ec <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	f003 0308 	and.w	r3, r3, #8
 8009014:	2b00      	cmp	r3, #0
 8009016:	f000 80a0 	beq.w	800915a <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	699a      	ldr	r2, [r3, #24]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f042 0208 	orr.w	r2, r2, #8
 8009028:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	699a      	ldr	r2, [r3, #24]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f042 0210 	orr.w	r2, r2, #16
 8009038:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	699a      	ldr	r2, [r3, #24]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009048:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	691a      	ldr	r2, [r3, #16]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f022 0208 	bic.w	r2, r2, #8
 8009058:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009060:	2b00      	cmp	r3, #0
 8009062:	d00f      	beq.n	8009084 <HAL_SPI_IRQHandler+0x140>
 8009064:	7cfb      	ldrb	r3, [r7, #19]
 8009066:	2b04      	cmp	r3, #4
 8009068:	d004      	beq.n	8009074 <HAL_SPI_IRQHandler+0x130>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800906e:	69db      	ldr	r3, [r3, #28]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d007      	beq.n	8009084 <HAL_SPI_IRQHandler+0x140>
 8009074:	7cfb      	ldrb	r3, [r7, #19]
 8009076:	2b03      	cmp	r3, #3
 8009078:	d059      	beq.n	800912e <HAL_SPI_IRQHandler+0x1ea>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800907e:	69db      	ldr	r3, [r3, #28]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d154      	bne.n	800912e <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800908e:	2b00      	cmp	r3, #0
 8009090:	d13d      	bne.n	800910e <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8009092:	e036      	b.n	8009102 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	2b0f      	cmp	r3, #15
 800909a:	d90b      	bls.n	80090b4 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80090a6:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090ac:	1d1a      	adds	r2, r3, #4
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	665a      	str	r2, [r3, #100]	; 0x64
 80090b2:	e01d      	b.n	80090f0 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	2b07      	cmp	r3, #7
 80090ba:	d90b      	bls.n	80090d4 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	8812      	ldrh	r2, [r2, #0]
 80090c4:	b292      	uxth	r2, r2
 80090c6:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090cc:	1c9a      	adds	r2, r3, #2
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	665a      	str	r2, [r3, #100]	; 0x64
 80090d2:	e00d      	b.n	80090f0 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090e0:	7812      	ldrb	r2, [r2, #0]
 80090e2:	b2d2      	uxtb	r2, r2
 80090e4:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090ea:	1c5a      	adds	r2, r3, #1
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	3b01      	subs	r3, #1
 80090fa:	b29a      	uxth	r2, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009108:	b29b      	uxth	r3, r3
 800910a:	2b00      	cmp	r3, #0
 800910c:	d1c2      	bne.n	8009094 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 f998 	bl	8009444 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009122:	2b00      	cmp	r3, #0
 8009124:	d003      	beq.n	800912e <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 f914 	bl	8009354 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800912c:	e0e3      	b.n	80092f6 <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800912e:	7cfb      	ldrb	r3, [r7, #19]
 8009130:	2b05      	cmp	r3, #5
 8009132:	d103      	bne.n	800913c <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 f8f9 	bl	800932c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800913a:	e0d9      	b.n	80092f0 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800913c:	7cfb      	ldrb	r3, [r7, #19]
 800913e:	2b04      	cmp	r3, #4
 8009140:	d103      	bne.n	800914a <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f8e8 	bl	8009318 <HAL_SPI_RxCpltCallback>
    return;
 8009148:	e0d2      	b.n	80092f0 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800914a:	7cfb      	ldrb	r3, [r7, #19]
 800914c:	2b03      	cmp	r3, #3
 800914e:	f040 80cf 	bne.w	80092f0 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 f8d6 	bl	8009304 <HAL_SPI_TxCpltCallback>
    return;
 8009158:	e0ca      	b.n	80092f0 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00d      	beq.n	8009180 <HAL_SPI_IRQHandler+0x23c>
 8009164:	6a3b      	ldr	r3, [r7, #32]
 8009166:	f003 0308 	and.w	r3, r3, #8
 800916a:	2b00      	cmp	r3, #0
 800916c:	d008      	beq.n	8009180 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	699a      	ldr	r2, [r3, #24]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800917c:	619a      	str	r2, [r3, #24]

    return;
 800917e:	e0ba      	b.n	80092f6 <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8009186:	2b00      	cmp	r3, #0
 8009188:	f000 80b5 	beq.w	80092f6 <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800918c:	69bb      	ldr	r3, [r7, #24]
 800918e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00f      	beq.n	80091b6 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800919c:	f043 0204 	orr.w	r2, r3, #4
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	699a      	ldr	r2, [r3, #24]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091b4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00f      	beq.n	80091e0 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091c6:	f043 0201 	orr.w	r2, r3, #1
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	699a      	ldr	r2, [r3, #24]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091de:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80091e0:	69bb      	ldr	r3, [r7, #24]
 80091e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d00f      	beq.n	800920a <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091f0:	f043 0208 	orr.w	r2, r3, #8
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	699a      	ldr	r2, [r3, #24]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009208:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800920a:	69bb      	ldr	r3, [r7, #24]
 800920c:	f003 0320 	and.w	r3, r3, #32
 8009210:	2b00      	cmp	r3, #0
 8009212:	d00f      	beq.n	8009234 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800921a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	699a      	ldr	r2, [r3, #24]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f042 0220 	orr.w	r2, r2, #32
 8009232:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800923a:	2b00      	cmp	r3, #0
 800923c:	d05a      	beq.n	80092f4 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	681a      	ldr	r2, [r3, #0]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f022 0201 	bic.w	r2, r2, #1
 800924c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	6919      	ldr	r1, [r3, #16]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	4b28      	ldr	r3, [pc, #160]	; (80092fc <HAL_SPI_IRQHandler+0x3b8>)
 800925a:	400b      	ands	r3, r1
 800925c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009264:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009268:	d138      	bne.n	80092dc <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	689a      	ldr	r2, [r3, #8]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009278:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800927e:	2b00      	cmp	r3, #0
 8009280:	d013      	beq.n	80092aa <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009286:	4a1e      	ldr	r2, [pc, #120]	; (8009300 <HAL_SPI_IRQHandler+0x3bc>)
 8009288:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800928e:	4618      	mov	r0, r3
 8009290:	f7fa f9c2 	bl	8003618 <HAL_DMA_Abort_IT>
 8009294:	4603      	mov	r3, r0
 8009296:	2b00      	cmp	r3, #0
 8009298:	d007      	beq.n	80092aa <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d020      	beq.n	80092f4 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092b6:	4a12      	ldr	r2, [pc, #72]	; (8009300 <HAL_SPI_IRQHandler+0x3bc>)
 80092b8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092be:	4618      	mov	r0, r3
 80092c0:	f7fa f9aa 	bl	8003618 <HAL_DMA_Abort_IT>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d014      	beq.n	80092f4 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80092da:	e00b      	b.n	80092f4 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 f835 	bl	8009354 <HAL_SPI_ErrorCallback>
    return;
 80092ea:	e003      	b.n	80092f4 <HAL_SPI_IRQHandler+0x3b0>
    return;
 80092ec:	bf00      	nop
 80092ee:	e002      	b.n	80092f6 <HAL_SPI_IRQHandler+0x3b2>
    return;
 80092f0:	bf00      	nop
 80092f2:	e000      	b.n	80092f6 <HAL_SPI_IRQHandler+0x3b2>
    return;
 80092f4:	bf00      	nop
  }
}
 80092f6:	3728      	adds	r7, #40	; 0x28
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	fffffc94 	.word	0xfffffc94
 8009300:	08009411 	.word	0x08009411

08009304 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800930c:	bf00      	nop
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009320:	bf00      	nop
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009334:	bf00      	nop
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009348:	bf00      	nop
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800935c:	bf00      	nop
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009374:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800937c:	b2db      	uxtb	r3, r3
 800937e:	2b07      	cmp	r3, #7
 8009380:	d011      	beq.n	80093a6 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009386:	69db      	ldr	r3, [r3, #28]
 8009388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800938c:	d103      	bne.n	8009396 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 800938e:	68f8      	ldr	r0, [r7, #12]
 8009390:	f7ff ffb8 	bl	8009304 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8009394:	e007      	b.n	80093a6 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	691a      	ldr	r2, [r3, #16]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f042 0208 	orr.w	r2, r2, #8
 80093a4:	611a      	str	r2, [r3, #16]
}
 80093a6:	bf00      	nop
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b084      	sub	sp, #16
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ba:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	f7ff ffbf 	bl	8009340 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80093c2:	bf00      	nop
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80093ca:	b580      	push	{r7, lr}
 80093cc:	b084      	sub	sp, #16
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d6:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f7fb fa8b 	bl	80048f4 <HAL_DMA_GetError>
 80093de:	4603      	mov	r3, r0
 80093e0:	2b02      	cmp	r3, #2
 80093e2:	d011      	beq.n	8009408 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	f000 f82d 	bl	8009444 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093f0:	f043 0210 	orr.w	r2, r3, #16
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2201      	movs	r2, #1
 80093fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8009402:	68f8      	ldr	r0, [r7, #12]
 8009404:	f7ff ffa6 	bl	8009354 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8009408:	bf00      	nop
 800940a:	3710      	adds	r7, #16
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800941c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2200      	movs	r2, #0
 800942a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2201      	movs	r2, #1
 8009432:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009436:	68f8      	ldr	r0, [r7, #12]
 8009438:	f7ff ff8c 	bl	8009354 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800943c:	bf00      	nop
 800943e:	3710      	adds	r7, #16
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009444:	b480      	push	{r7}
 8009446:	b085      	sub	sp, #20
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	695b      	ldr	r3, [r3, #20]
 8009452:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	699a      	ldr	r2, [r3, #24]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f042 0208 	orr.w	r2, r2, #8
 8009462:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	699a      	ldr	r2, [r3, #24]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f042 0210 	orr.w	r2, r2, #16
 8009472:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f022 0201 	bic.w	r2, r2, #1
 8009482:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	6919      	ldr	r1, [r3, #16]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	4b3c      	ldr	r3, [pc, #240]	; (8009580 <SPI_CloseTransfer+0x13c>)
 8009490:	400b      	ands	r3, r1
 8009492:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	689a      	ldr	r2, [r3, #8]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80094a2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	2b04      	cmp	r3, #4
 80094ae:	d014      	beq.n	80094da <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f003 0320 	and.w	r3, r3, #32
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d00f      	beq.n	80094da <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	699a      	ldr	r2, [r3, #24]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f042 0220 	orr.w	r2, r2, #32
 80094d8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	2b03      	cmp	r3, #3
 80094e4:	d014      	beq.n	8009510 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00f      	beq.n	8009510 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094f6:	f043 0204 	orr.w	r2, r3, #4
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	699a      	ldr	r2, [r3, #24]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800950e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00f      	beq.n	800953a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009520:	f043 0201 	orr.w	r2, r3, #1
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	699a      	ldr	r2, [r3, #24]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009538:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00f      	beq.n	8009564 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800954a:	f043 0208 	orr.w	r2, r3, #8
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	699a      	ldr	r2, [r3, #24]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009562:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009574:	bf00      	nop
 8009576:	3714      	adds	r7, #20
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr
 8009580:	fffffc90 	.word	0xfffffc90

08009584 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	603b      	str	r3, [r7, #0]
 8009590:	4613      	mov	r3, r2
 8009592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009594:	e010      	b.n	80095b8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009596:	f7f9 f919 	bl	80027cc <HAL_GetTick>
 800959a:	4602      	mov	r2, r0
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	1ad3      	subs	r3, r2, r3
 80095a0:	69ba      	ldr	r2, [r7, #24]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d803      	bhi.n	80095ae <SPI_WaitOnFlagUntilTimeout+0x2a>
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ac:	d102      	bne.n	80095b4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d101      	bne.n	80095b8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80095b4:	2303      	movs	r3, #3
 80095b6:	e00f      	b.n	80095d8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	695a      	ldr	r2, [r3, #20]
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	4013      	ands	r3, r2
 80095c2:	68ba      	ldr	r2, [r7, #8]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	bf0c      	ite	eq
 80095c8:	2301      	moveq	r3, #1
 80095ca:	2300      	movne	r3, #0
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	461a      	mov	r2, r3
 80095d0:	79fb      	ldrb	r3, [r7, #7]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d0df      	beq.n	8009596 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3710      	adds	r7, #16
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b085      	sub	sp, #20
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ec:	095b      	lsrs	r3, r3, #5
 80095ee:	3301      	adds	r3, #1
 80095f0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	68db      	ldr	r3, [r3, #12]
 80095f6:	3301      	adds	r3, #1
 80095f8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	3307      	adds	r3, #7
 80095fe:	08db      	lsrs	r3, r3, #3
 8009600:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	68fa      	ldr	r2, [r7, #12]
 8009606:	fb02 f303 	mul.w	r3, r2, r3
}
 800960a:	4618      	mov	r0, r3
 800960c:	3714      	adds	r7, #20
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr

08009616 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b082      	sub	sp, #8
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d101      	bne.n	8009628 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009624:	2301      	movs	r3, #1
 8009626:	e049      	b.n	80096bc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800962e:	b2db      	uxtb	r3, r3
 8009630:	2b00      	cmp	r3, #0
 8009632:	d106      	bne.n	8009642 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f7f8 fe2d 	bl	800229c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2202      	movs	r2, #2
 8009646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	3304      	adds	r3, #4
 8009652:	4619      	mov	r1, r3
 8009654:	4610      	mov	r0, r2
 8009656:	f000 fb15 	bl	8009c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2201      	movs	r2, #1
 800965e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2201      	movs	r2, #1
 8009666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2201      	movs	r2, #1
 800966e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2201      	movs	r2, #1
 8009676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2201      	movs	r2, #1
 800967e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2201      	movs	r2, #1
 8009686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2201      	movs	r2, #1
 800968e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2201      	movs	r2, #1
 8009696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2201      	movs	r2, #1
 800969e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2201      	movs	r2, #1
 80096a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2201      	movs	r2, #1
 80096ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2201      	movs	r2, #1
 80096b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3708      	adds	r7, #8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	6a1a      	ldr	r2, [r3, #32]
 80096d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80096d6:	4013      	ands	r3, r2
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d10f      	bne.n	80096fc <HAL_TIM_Base_Stop+0x38>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	6a1a      	ldr	r2, [r3, #32]
 80096e2:	f240 4344 	movw	r3, #1092	; 0x444
 80096e6:	4013      	ands	r3, r2
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d107      	bne.n	80096fc <HAL_TIM_Base_Stop+0x38>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f022 0201 	bic.w	r2, r2, #1
 80096fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2201      	movs	r2, #1
 8009700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	370c      	adds	r7, #12
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr
	...

08009714 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009722:	b2db      	uxtb	r3, r3
 8009724:	2b01      	cmp	r3, #1
 8009726:	d001      	beq.n	800972c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009728:	2301      	movs	r3, #1
 800972a:	e054      	b.n	80097d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2202      	movs	r2, #2
 8009730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	68da      	ldr	r2, [r3, #12]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f042 0201 	orr.w	r2, r2, #1
 8009742:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a26      	ldr	r2, [pc, #152]	; (80097e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d022      	beq.n	8009794 <HAL_TIM_Base_Start_IT+0x80>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009756:	d01d      	beq.n	8009794 <HAL_TIM_Base_Start_IT+0x80>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a22      	ldr	r2, [pc, #136]	; (80097e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d018      	beq.n	8009794 <HAL_TIM_Base_Start_IT+0x80>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a21      	ldr	r2, [pc, #132]	; (80097ec <HAL_TIM_Base_Start_IT+0xd8>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d013      	beq.n	8009794 <HAL_TIM_Base_Start_IT+0x80>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a1f      	ldr	r2, [pc, #124]	; (80097f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d00e      	beq.n	8009794 <HAL_TIM_Base_Start_IT+0x80>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a1e      	ldr	r2, [pc, #120]	; (80097f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d009      	beq.n	8009794 <HAL_TIM_Base_Start_IT+0x80>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a1c      	ldr	r2, [pc, #112]	; (80097f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d004      	beq.n	8009794 <HAL_TIM_Base_Start_IT+0x80>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a1b      	ldr	r2, [pc, #108]	; (80097fc <HAL_TIM_Base_Start_IT+0xe8>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d115      	bne.n	80097c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	689a      	ldr	r2, [r3, #8]
 800979a:	4b19      	ldr	r3, [pc, #100]	; (8009800 <HAL_TIM_Base_Start_IT+0xec>)
 800979c:	4013      	ands	r3, r2
 800979e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2b06      	cmp	r3, #6
 80097a4:	d015      	beq.n	80097d2 <HAL_TIM_Base_Start_IT+0xbe>
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097ac:	d011      	beq.n	80097d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f042 0201 	orr.w	r2, r2, #1
 80097bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097be:	e008      	b.n	80097d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f042 0201 	orr.w	r2, r2, #1
 80097ce:	601a      	str	r2, [r3, #0]
 80097d0:	e000      	b.n	80097d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3714      	adds	r7, #20
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop
 80097e4:	40010000 	.word	0x40010000
 80097e8:	40000400 	.word	0x40000400
 80097ec:	40000800 	.word	0x40000800
 80097f0:	40000c00 	.word	0x40000c00
 80097f4:	40010400 	.word	0x40010400
 80097f8:	40001800 	.word	0x40001800
 80097fc:	40014000 	.word	0x40014000
 8009800:	00010007 	.word	0x00010007

08009804 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	691b      	ldr	r3, [r3, #16]
 8009812:	f003 0302 	and.w	r3, r3, #2
 8009816:	2b02      	cmp	r3, #2
 8009818:	d122      	bne.n	8009860 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	f003 0302 	and.w	r3, r3, #2
 8009824:	2b02      	cmp	r3, #2
 8009826:	d11b      	bne.n	8009860 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f06f 0202 	mvn.w	r2, #2
 8009830:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2201      	movs	r2, #1
 8009836:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	699b      	ldr	r3, [r3, #24]
 800983e:	f003 0303 	and.w	r3, r3, #3
 8009842:	2b00      	cmp	r3, #0
 8009844:	d003      	beq.n	800984e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 f9fe 	bl	8009c48 <HAL_TIM_IC_CaptureCallback>
 800984c:	e005      	b.n	800985a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 f9f0 	bl	8009c34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 fa01 	bl	8009c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	f003 0304 	and.w	r3, r3, #4
 800986a:	2b04      	cmp	r3, #4
 800986c:	d122      	bne.n	80098b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	f003 0304 	and.w	r3, r3, #4
 8009878:	2b04      	cmp	r3, #4
 800987a:	d11b      	bne.n	80098b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f06f 0204 	mvn.w	r2, #4
 8009884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2202      	movs	r2, #2
 800988a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	699b      	ldr	r3, [r3, #24]
 8009892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009896:	2b00      	cmp	r3, #0
 8009898:	d003      	beq.n	80098a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 f9d4 	bl	8009c48 <HAL_TIM_IC_CaptureCallback>
 80098a0:	e005      	b.n	80098ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 f9c6 	bl	8009c34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 f9d7 	bl	8009c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	691b      	ldr	r3, [r3, #16]
 80098ba:	f003 0308 	and.w	r3, r3, #8
 80098be:	2b08      	cmp	r3, #8
 80098c0:	d122      	bne.n	8009908 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	f003 0308 	and.w	r3, r3, #8
 80098cc:	2b08      	cmp	r3, #8
 80098ce:	d11b      	bne.n	8009908 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f06f 0208 	mvn.w	r2, #8
 80098d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2204      	movs	r2, #4
 80098de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	69db      	ldr	r3, [r3, #28]
 80098e6:	f003 0303 	and.w	r3, r3, #3
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d003      	beq.n	80098f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 f9aa 	bl	8009c48 <HAL_TIM_IC_CaptureCallback>
 80098f4:	e005      	b.n	8009902 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 f99c 	bl	8009c34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 f9ad 	bl	8009c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	f003 0310 	and.w	r3, r3, #16
 8009912:	2b10      	cmp	r3, #16
 8009914:	d122      	bne.n	800995c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	f003 0310 	and.w	r3, r3, #16
 8009920:	2b10      	cmp	r3, #16
 8009922:	d11b      	bne.n	800995c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f06f 0210 	mvn.w	r2, #16
 800992c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2208      	movs	r2, #8
 8009932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	69db      	ldr	r3, [r3, #28]
 800993a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800993e:	2b00      	cmp	r3, #0
 8009940:	d003      	beq.n	800994a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 f980 	bl	8009c48 <HAL_TIM_IC_CaptureCallback>
 8009948:	e005      	b.n	8009956 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 f972 	bl	8009c34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 f983 	bl	8009c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	691b      	ldr	r3, [r3, #16]
 8009962:	f003 0301 	and.w	r3, r3, #1
 8009966:	2b01      	cmp	r3, #1
 8009968:	d10e      	bne.n	8009988 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	f003 0301 	and.w	r3, r3, #1
 8009974:	2b01      	cmp	r3, #1
 8009976:	d107      	bne.n	8009988 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f06f 0201 	mvn.w	r2, #1
 8009980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f7f7 fb32 	bl	8000fec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009992:	2b80      	cmp	r3, #128	; 0x80
 8009994:	d10e      	bne.n	80099b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099a0:	2b80      	cmp	r3, #128	; 0x80
 80099a2:	d107      	bne.n	80099b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80099ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 fb38 	bl	800a024 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	691b      	ldr	r3, [r3, #16]
 80099ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099c2:	d10e      	bne.n	80099e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099ce:	2b80      	cmp	r3, #128	; 0x80
 80099d0:	d107      	bne.n	80099e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80099da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 fb2b 	bl	800a038 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ec:	2b40      	cmp	r3, #64	; 0x40
 80099ee:	d10e      	bne.n	8009a0e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099fa:	2b40      	cmp	r3, #64	; 0x40
 80099fc:	d107      	bne.n	8009a0e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 f931 	bl	8009c70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	691b      	ldr	r3, [r3, #16]
 8009a14:	f003 0320 	and.w	r3, r3, #32
 8009a18:	2b20      	cmp	r3, #32
 8009a1a:	d10e      	bne.n	8009a3a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	f003 0320 	and.w	r3, r3, #32
 8009a26:	2b20      	cmp	r3, #32
 8009a28:	d107      	bne.n	8009a3a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f06f 0220 	mvn.w	r2, #32
 8009a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 faeb 	bl	800a010 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a3a:	bf00      	nop
 8009a3c:	3708      	adds	r7, #8
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
	...

08009a44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d101      	bne.n	8009a60 <HAL_TIM_ConfigClockSource+0x1c>
 8009a5c:	2302      	movs	r3, #2
 8009a5e:	e0dc      	b.n	8009c1a <HAL_TIM_ConfigClockSource+0x1d6>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2201      	movs	r2, #1
 8009a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2202      	movs	r2, #2
 8009a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	689b      	ldr	r3, [r3, #8]
 8009a76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009a78:	68ba      	ldr	r2, [r7, #8]
 8009a7a:	4b6a      	ldr	r3, [pc, #424]	; (8009c24 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009a7c:	4013      	ands	r3, r2
 8009a7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	68ba      	ldr	r2, [r7, #8]
 8009a8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a64      	ldr	r2, [pc, #400]	; (8009c28 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	f000 80a9 	beq.w	8009bee <HAL_TIM_ConfigClockSource+0x1aa>
 8009a9c:	4a62      	ldr	r2, [pc, #392]	; (8009c28 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	f200 80ae 	bhi.w	8009c00 <HAL_TIM_ConfigClockSource+0x1bc>
 8009aa4:	4a61      	ldr	r2, [pc, #388]	; (8009c2c <HAL_TIM_ConfigClockSource+0x1e8>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	f000 80a1 	beq.w	8009bee <HAL_TIM_ConfigClockSource+0x1aa>
 8009aac:	4a5f      	ldr	r2, [pc, #380]	; (8009c2c <HAL_TIM_ConfigClockSource+0x1e8>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	f200 80a6 	bhi.w	8009c00 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ab4:	4a5e      	ldr	r2, [pc, #376]	; (8009c30 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	f000 8099 	beq.w	8009bee <HAL_TIM_ConfigClockSource+0x1aa>
 8009abc:	4a5c      	ldr	r2, [pc, #368]	; (8009c30 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	f200 809e 	bhi.w	8009c00 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ac4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009ac8:	f000 8091 	beq.w	8009bee <HAL_TIM_ConfigClockSource+0x1aa>
 8009acc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009ad0:	f200 8096 	bhi.w	8009c00 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ad4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ad8:	f000 8089 	beq.w	8009bee <HAL_TIM_ConfigClockSource+0x1aa>
 8009adc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ae0:	f200 808e 	bhi.w	8009c00 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ae8:	d03e      	beq.n	8009b68 <HAL_TIM_ConfigClockSource+0x124>
 8009aea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009aee:	f200 8087 	bhi.w	8009c00 <HAL_TIM_ConfigClockSource+0x1bc>
 8009af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009af6:	f000 8086 	beq.w	8009c06 <HAL_TIM_ConfigClockSource+0x1c2>
 8009afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009afe:	d87f      	bhi.n	8009c00 <HAL_TIM_ConfigClockSource+0x1bc>
 8009b00:	2b70      	cmp	r3, #112	; 0x70
 8009b02:	d01a      	beq.n	8009b3a <HAL_TIM_ConfigClockSource+0xf6>
 8009b04:	2b70      	cmp	r3, #112	; 0x70
 8009b06:	d87b      	bhi.n	8009c00 <HAL_TIM_ConfigClockSource+0x1bc>
 8009b08:	2b60      	cmp	r3, #96	; 0x60
 8009b0a:	d050      	beq.n	8009bae <HAL_TIM_ConfigClockSource+0x16a>
 8009b0c:	2b60      	cmp	r3, #96	; 0x60
 8009b0e:	d877      	bhi.n	8009c00 <HAL_TIM_ConfigClockSource+0x1bc>
 8009b10:	2b50      	cmp	r3, #80	; 0x50
 8009b12:	d03c      	beq.n	8009b8e <HAL_TIM_ConfigClockSource+0x14a>
 8009b14:	2b50      	cmp	r3, #80	; 0x50
 8009b16:	d873      	bhi.n	8009c00 <HAL_TIM_ConfigClockSource+0x1bc>
 8009b18:	2b40      	cmp	r3, #64	; 0x40
 8009b1a:	d058      	beq.n	8009bce <HAL_TIM_ConfigClockSource+0x18a>
 8009b1c:	2b40      	cmp	r3, #64	; 0x40
 8009b1e:	d86f      	bhi.n	8009c00 <HAL_TIM_ConfigClockSource+0x1bc>
 8009b20:	2b30      	cmp	r3, #48	; 0x30
 8009b22:	d064      	beq.n	8009bee <HAL_TIM_ConfigClockSource+0x1aa>
 8009b24:	2b30      	cmp	r3, #48	; 0x30
 8009b26:	d86b      	bhi.n	8009c00 <HAL_TIM_ConfigClockSource+0x1bc>
 8009b28:	2b20      	cmp	r3, #32
 8009b2a:	d060      	beq.n	8009bee <HAL_TIM_ConfigClockSource+0x1aa>
 8009b2c:	2b20      	cmp	r3, #32
 8009b2e:	d867      	bhi.n	8009c00 <HAL_TIM_ConfigClockSource+0x1bc>
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d05c      	beq.n	8009bee <HAL_TIM_ConfigClockSource+0x1aa>
 8009b34:	2b10      	cmp	r3, #16
 8009b36:	d05a      	beq.n	8009bee <HAL_TIM_ConfigClockSource+0x1aa>
 8009b38:	e062      	b.n	8009c00 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6818      	ldr	r0, [r3, #0]
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	6899      	ldr	r1, [r3, #8]
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	685a      	ldr	r2, [r3, #4]
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	f000 f9b3 	bl	8009eb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009b5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	68ba      	ldr	r2, [r7, #8]
 8009b64:	609a      	str	r2, [r3, #8]
      break;
 8009b66:	e04f      	b.n	8009c08 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6818      	ldr	r0, [r3, #0]
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	6899      	ldr	r1, [r3, #8]
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	685a      	ldr	r2, [r3, #4]
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	f000 f99c 	bl	8009eb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	689a      	ldr	r2, [r3, #8]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b8a:	609a      	str	r2, [r3, #8]
      break;
 8009b8c:	e03c      	b.n	8009c08 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6818      	ldr	r0, [r3, #0]
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	6859      	ldr	r1, [r3, #4]
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	68db      	ldr	r3, [r3, #12]
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	f000 f90c 	bl	8009db8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	2150      	movs	r1, #80	; 0x50
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f000 f966 	bl	8009e78 <TIM_ITRx_SetConfig>
      break;
 8009bac:	e02c      	b.n	8009c08 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6818      	ldr	r0, [r3, #0]
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	6859      	ldr	r1, [r3, #4]
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	68db      	ldr	r3, [r3, #12]
 8009bba:	461a      	mov	r2, r3
 8009bbc:	f000 f92b 	bl	8009e16 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2160      	movs	r1, #96	; 0x60
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f000 f956 	bl	8009e78 <TIM_ITRx_SetConfig>
      break;
 8009bcc:	e01c      	b.n	8009c08 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6818      	ldr	r0, [r3, #0]
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	6859      	ldr	r1, [r3, #4]
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	461a      	mov	r2, r3
 8009bdc:	f000 f8ec 	bl	8009db8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2140      	movs	r1, #64	; 0x40
 8009be6:	4618      	mov	r0, r3
 8009be8:	f000 f946 	bl	8009e78 <TIM_ITRx_SetConfig>
      break;
 8009bec:	e00c      	b.n	8009c08 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	4610      	mov	r0, r2
 8009bfa:	f000 f93d 	bl	8009e78 <TIM_ITRx_SetConfig>
      break;
 8009bfe:	e003      	b.n	8009c08 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009c00:	2301      	movs	r3, #1
 8009c02:	73fb      	strb	r3, [r7, #15]
      break;
 8009c04:	e000      	b.n	8009c08 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009c06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	ffceff88 	.word	0xffceff88
 8009c28:	00100040 	.word	0x00100040
 8009c2c:	00100030 	.word	0x00100030
 8009c30:	00100020 	.word	0x00100020

08009c34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c3c:	bf00      	nop
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b083      	sub	sp, #12
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c50:	bf00      	nop
 8009c52:	370c      	adds	r7, #12
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c64:	bf00      	nop
 8009c66:	370c      	adds	r7, #12
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c78:	bf00      	nop
 8009c7a:	370c      	adds	r7, #12
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr

08009c84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	4a40      	ldr	r2, [pc, #256]	; (8009d98 <TIM_Base_SetConfig+0x114>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d013      	beq.n	8009cc4 <TIM_Base_SetConfig+0x40>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ca2:	d00f      	beq.n	8009cc4 <TIM_Base_SetConfig+0x40>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	4a3d      	ldr	r2, [pc, #244]	; (8009d9c <TIM_Base_SetConfig+0x118>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d00b      	beq.n	8009cc4 <TIM_Base_SetConfig+0x40>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	4a3c      	ldr	r2, [pc, #240]	; (8009da0 <TIM_Base_SetConfig+0x11c>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d007      	beq.n	8009cc4 <TIM_Base_SetConfig+0x40>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	4a3b      	ldr	r2, [pc, #236]	; (8009da4 <TIM_Base_SetConfig+0x120>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d003      	beq.n	8009cc4 <TIM_Base_SetConfig+0x40>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	4a3a      	ldr	r2, [pc, #232]	; (8009da8 <TIM_Base_SetConfig+0x124>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d108      	bne.n	8009cd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4a2f      	ldr	r2, [pc, #188]	; (8009d98 <TIM_Base_SetConfig+0x114>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d01f      	beq.n	8009d1e <TIM_Base_SetConfig+0x9a>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ce4:	d01b      	beq.n	8009d1e <TIM_Base_SetConfig+0x9a>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	4a2c      	ldr	r2, [pc, #176]	; (8009d9c <TIM_Base_SetConfig+0x118>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d017      	beq.n	8009d1e <TIM_Base_SetConfig+0x9a>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4a2b      	ldr	r2, [pc, #172]	; (8009da0 <TIM_Base_SetConfig+0x11c>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d013      	beq.n	8009d1e <TIM_Base_SetConfig+0x9a>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	4a2a      	ldr	r2, [pc, #168]	; (8009da4 <TIM_Base_SetConfig+0x120>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d00f      	beq.n	8009d1e <TIM_Base_SetConfig+0x9a>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	4a29      	ldr	r2, [pc, #164]	; (8009da8 <TIM_Base_SetConfig+0x124>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d00b      	beq.n	8009d1e <TIM_Base_SetConfig+0x9a>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	4a28      	ldr	r2, [pc, #160]	; (8009dac <TIM_Base_SetConfig+0x128>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d007      	beq.n	8009d1e <TIM_Base_SetConfig+0x9a>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	4a27      	ldr	r2, [pc, #156]	; (8009db0 <TIM_Base_SetConfig+0x12c>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d003      	beq.n	8009d1e <TIM_Base_SetConfig+0x9a>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	4a26      	ldr	r2, [pc, #152]	; (8009db4 <TIM_Base_SetConfig+0x130>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d108      	bne.n	8009d30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	68fa      	ldr	r2, [r7, #12]
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	695b      	ldr	r3, [r3, #20]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	689a      	ldr	r2, [r3, #8]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	4a10      	ldr	r2, [pc, #64]	; (8009d98 <TIM_Base_SetConfig+0x114>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d00f      	beq.n	8009d7c <TIM_Base_SetConfig+0xf8>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	4a12      	ldr	r2, [pc, #72]	; (8009da8 <TIM_Base_SetConfig+0x124>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d00b      	beq.n	8009d7c <TIM_Base_SetConfig+0xf8>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	4a11      	ldr	r2, [pc, #68]	; (8009dac <TIM_Base_SetConfig+0x128>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d007      	beq.n	8009d7c <TIM_Base_SetConfig+0xf8>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4a10      	ldr	r2, [pc, #64]	; (8009db0 <TIM_Base_SetConfig+0x12c>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d003      	beq.n	8009d7c <TIM_Base_SetConfig+0xf8>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	4a0f      	ldr	r2, [pc, #60]	; (8009db4 <TIM_Base_SetConfig+0x130>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d103      	bne.n	8009d84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	691a      	ldr	r2, [r3, #16]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2201      	movs	r2, #1
 8009d88:	615a      	str	r2, [r3, #20]
}
 8009d8a:	bf00      	nop
 8009d8c:	3714      	adds	r7, #20
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop
 8009d98:	40010000 	.word	0x40010000
 8009d9c:	40000400 	.word	0x40000400
 8009da0:	40000800 	.word	0x40000800
 8009da4:	40000c00 	.word	0x40000c00
 8009da8:	40010400 	.word	0x40010400
 8009dac:	40014000 	.word	0x40014000
 8009db0:	40014400 	.word	0x40014400
 8009db4:	40014800 	.word	0x40014800

08009db8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b087      	sub	sp, #28
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	6a1b      	ldr	r3, [r3, #32]
 8009dc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6a1b      	ldr	r3, [r3, #32]
 8009dce:	f023 0201 	bic.w	r2, r3, #1
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	699b      	ldr	r3, [r3, #24]
 8009dda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009de2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	011b      	lsls	r3, r3, #4
 8009de8:	693a      	ldr	r2, [r7, #16]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	f023 030a 	bic.w	r3, r3, #10
 8009df4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009df6:	697a      	ldr	r2, [r7, #20]
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	693a      	ldr	r2, [r7, #16]
 8009e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	697a      	ldr	r2, [r7, #20]
 8009e08:	621a      	str	r2, [r3, #32]
}
 8009e0a:	bf00      	nop
 8009e0c:	371c      	adds	r7, #28
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr

08009e16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e16:	b480      	push	{r7}
 8009e18:	b087      	sub	sp, #28
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	60f8      	str	r0, [r7, #12]
 8009e1e:	60b9      	str	r1, [r7, #8]
 8009e20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	6a1b      	ldr	r3, [r3, #32]
 8009e26:	f023 0210 	bic.w	r2, r3, #16
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	699b      	ldr	r3, [r3, #24]
 8009e32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6a1b      	ldr	r3, [r3, #32]
 8009e38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	031b      	lsls	r3, r3, #12
 8009e46:	697a      	ldr	r2, [r7, #20]
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009e52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	011b      	lsls	r3, r3, #4
 8009e58:	693a      	ldr	r2, [r7, #16]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	697a      	ldr	r2, [r7, #20]
 8009e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	693a      	ldr	r2, [r7, #16]
 8009e68:	621a      	str	r2, [r3, #32]
}
 8009e6a:	bf00      	nop
 8009e6c:	371c      	adds	r7, #28
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr
	...

08009e78 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	4b09      	ldr	r3, [pc, #36]	; (8009eb0 <TIM_ITRx_SetConfig+0x38>)
 8009e8c:	4013      	ands	r3, r2
 8009e8e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e90:	683a      	ldr	r2, [r7, #0]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	4313      	orrs	r3, r2
 8009e96:	f043 0307 	orr.w	r3, r3, #7
 8009e9a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	68fa      	ldr	r2, [r7, #12]
 8009ea0:	609a      	str	r2, [r3, #8]
}
 8009ea2:	bf00      	nop
 8009ea4:	3714      	adds	r7, #20
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop
 8009eb0:	ffcfff8f 	.word	0xffcfff8f

08009eb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b087      	sub	sp, #28
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	60b9      	str	r1, [r7, #8]
 8009ebe:	607a      	str	r2, [r7, #4]
 8009ec0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ece:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	021a      	lsls	r2, r3, #8
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	431a      	orrs	r2, r3
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	697a      	ldr	r2, [r7, #20]
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	697a      	ldr	r2, [r7, #20]
 8009ee6:	609a      	str	r2, [r3, #8]
}
 8009ee8:	bf00      	nop
 8009eea:	371c      	adds	r7, #28
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b085      	sub	sp, #20
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d101      	bne.n	8009f0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f08:	2302      	movs	r3, #2
 8009f0a:	e06d      	b.n	8009fe8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2202      	movs	r2, #2
 8009f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a30      	ldr	r2, [pc, #192]	; (8009ff4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d004      	beq.n	8009f40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a2f      	ldr	r2, [pc, #188]	; (8009ff8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d108      	bne.n	8009f52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009f46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	68fa      	ldr	r2, [r7, #12]
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	68fa      	ldr	r2, [r7, #12]
 8009f60:	4313      	orrs	r3, r2
 8009f62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	68fa      	ldr	r2, [r7, #12]
 8009f6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a20      	ldr	r2, [pc, #128]	; (8009ff4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d022      	beq.n	8009fbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f7e:	d01d      	beq.n	8009fbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a1d      	ldr	r2, [pc, #116]	; (8009ffc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d018      	beq.n	8009fbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a1c      	ldr	r2, [pc, #112]	; (800a000 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d013      	beq.n	8009fbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a1a      	ldr	r2, [pc, #104]	; (800a004 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d00e      	beq.n	8009fbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4a15      	ldr	r2, [pc, #84]	; (8009ff8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d009      	beq.n	8009fbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a16      	ldr	r2, [pc, #88]	; (800a008 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d004      	beq.n	8009fbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a15      	ldr	r2, [pc, #84]	; (800a00c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d10c      	bne.n	8009fd6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fc2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	68ba      	ldr	r2, [r7, #8]
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	68ba      	ldr	r2, [r7, #8]
 8009fd4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fe6:	2300      	movs	r3, #0
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3714      	adds	r7, #20
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr
 8009ff4:	40010000 	.word	0x40010000
 8009ff8:	40010400 	.word	0x40010400
 8009ffc:	40000400 	.word	0x40000400
 800a000:	40000800 	.word	0x40000800
 800a004:	40000c00 	.word	0x40000c00
 800a008:	40001800 	.word	0x40001800
 800a00c:	40014000 	.word	0x40014000

0800a010 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a018:	bf00      	nop
 800a01a:	370c      	adds	r7, #12
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr

0800a024 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a024:	b480      	push	{r7}
 800a026:	b083      	sub	sp, #12
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a02c:	bf00      	nop
 800a02e:	370c      	adds	r7, #12
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr

0800a038 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a040:	bf00      	nop
 800a042:	370c      	adds	r7, #12
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr

0800a04c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d101      	bne.n	800a05e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	e042      	b.n	800a0e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a064:	2b00      	cmp	r3, #0
 800a066:	d106      	bne.n	800a076 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f7f8 f979 	bl	8002368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2224      	movs	r2, #36	; 0x24
 800a07a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f022 0201 	bic.w	r2, r2, #1
 800a08c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 f82c 	bl	800a0ec <UART_SetConfig>
 800a094:	4603      	mov	r3, r0
 800a096:	2b01      	cmp	r3, #1
 800a098:	d101      	bne.n	800a09e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a09a:	2301      	movs	r3, #1
 800a09c:	e022      	b.n	800a0e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d002      	beq.n	800a0ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 fd80 	bl	800abac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	685a      	ldr	r2, [r3, #4]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a0ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	689a      	ldr	r2, [r3, #8]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a0ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f042 0201 	orr.w	r2, r2, #1
 800a0da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 fe07 	bl	800acf0 <UART_CheckIdleState>
 800a0e2:	4603      	mov	r3, r0
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3708      	adds	r7, #8
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0ec:	b5b0      	push	{r4, r5, r7, lr}
 800a0ee:	b08e      	sub	sp, #56	; 0x38
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	689a      	ldr	r2, [r3, #8]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	691b      	ldr	r3, [r3, #16]
 800a102:	431a      	orrs	r2, r3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	695b      	ldr	r3, [r3, #20]
 800a108:	431a      	orrs	r2, r3
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	69db      	ldr	r3, [r3, #28]
 800a10e:	4313      	orrs	r3, r2
 800a110:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	4bbf      	ldr	r3, [pc, #764]	; (800a418 <UART_SetConfig+0x32c>)
 800a11a:	4013      	ands	r3, r2
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	6812      	ldr	r2, [r2, #0]
 800a120:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a122:	430b      	orrs	r3, r1
 800a124:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	68da      	ldr	r2, [r3, #12]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	430a      	orrs	r2, r1
 800a13a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	699b      	ldr	r3, [r3, #24]
 800a140:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4ab5      	ldr	r2, [pc, #724]	; (800a41c <UART_SetConfig+0x330>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d004      	beq.n	800a156 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6a1b      	ldr	r3, [r3, #32]
 800a150:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a152:	4313      	orrs	r3, r2
 800a154:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	689a      	ldr	r2, [r3, #8]
 800a15c:	4bb0      	ldr	r3, [pc, #704]	; (800a420 <UART_SetConfig+0x334>)
 800a15e:	4013      	ands	r3, r2
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	6812      	ldr	r2, [r2, #0]
 800a164:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a166:	430b      	orrs	r3, r1
 800a168:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a170:	f023 010f 	bic.w	r1, r3, #15
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	430a      	orrs	r2, r1
 800a17e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4aa7      	ldr	r2, [pc, #668]	; (800a424 <UART_SetConfig+0x338>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d176      	bne.n	800a278 <UART_SetConfig+0x18c>
 800a18a:	4ba7      	ldr	r3, [pc, #668]	; (800a428 <UART_SetConfig+0x33c>)
 800a18c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a18e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a192:	2b28      	cmp	r3, #40	; 0x28
 800a194:	d86c      	bhi.n	800a270 <UART_SetConfig+0x184>
 800a196:	a201      	add	r2, pc, #4	; (adr r2, 800a19c <UART_SetConfig+0xb0>)
 800a198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a19c:	0800a241 	.word	0x0800a241
 800a1a0:	0800a271 	.word	0x0800a271
 800a1a4:	0800a271 	.word	0x0800a271
 800a1a8:	0800a271 	.word	0x0800a271
 800a1ac:	0800a271 	.word	0x0800a271
 800a1b0:	0800a271 	.word	0x0800a271
 800a1b4:	0800a271 	.word	0x0800a271
 800a1b8:	0800a271 	.word	0x0800a271
 800a1bc:	0800a249 	.word	0x0800a249
 800a1c0:	0800a271 	.word	0x0800a271
 800a1c4:	0800a271 	.word	0x0800a271
 800a1c8:	0800a271 	.word	0x0800a271
 800a1cc:	0800a271 	.word	0x0800a271
 800a1d0:	0800a271 	.word	0x0800a271
 800a1d4:	0800a271 	.word	0x0800a271
 800a1d8:	0800a271 	.word	0x0800a271
 800a1dc:	0800a251 	.word	0x0800a251
 800a1e0:	0800a271 	.word	0x0800a271
 800a1e4:	0800a271 	.word	0x0800a271
 800a1e8:	0800a271 	.word	0x0800a271
 800a1ec:	0800a271 	.word	0x0800a271
 800a1f0:	0800a271 	.word	0x0800a271
 800a1f4:	0800a271 	.word	0x0800a271
 800a1f8:	0800a271 	.word	0x0800a271
 800a1fc:	0800a259 	.word	0x0800a259
 800a200:	0800a271 	.word	0x0800a271
 800a204:	0800a271 	.word	0x0800a271
 800a208:	0800a271 	.word	0x0800a271
 800a20c:	0800a271 	.word	0x0800a271
 800a210:	0800a271 	.word	0x0800a271
 800a214:	0800a271 	.word	0x0800a271
 800a218:	0800a271 	.word	0x0800a271
 800a21c:	0800a261 	.word	0x0800a261
 800a220:	0800a271 	.word	0x0800a271
 800a224:	0800a271 	.word	0x0800a271
 800a228:	0800a271 	.word	0x0800a271
 800a22c:	0800a271 	.word	0x0800a271
 800a230:	0800a271 	.word	0x0800a271
 800a234:	0800a271 	.word	0x0800a271
 800a238:	0800a271 	.word	0x0800a271
 800a23c:	0800a269 	.word	0x0800a269
 800a240:	2301      	movs	r3, #1
 800a242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a246:	e222      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a248:	2304      	movs	r3, #4
 800a24a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a24e:	e21e      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a250:	2308      	movs	r3, #8
 800a252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a256:	e21a      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a258:	2310      	movs	r3, #16
 800a25a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a25e:	e216      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a260:	2320      	movs	r3, #32
 800a262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a266:	e212      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a268:	2340      	movs	r3, #64	; 0x40
 800a26a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a26e:	e20e      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a270:	2380      	movs	r3, #128	; 0x80
 800a272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a276:	e20a      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4a6b      	ldr	r2, [pc, #428]	; (800a42c <UART_SetConfig+0x340>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d130      	bne.n	800a2e4 <UART_SetConfig+0x1f8>
 800a282:	4b69      	ldr	r3, [pc, #420]	; (800a428 <UART_SetConfig+0x33c>)
 800a284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a286:	f003 0307 	and.w	r3, r3, #7
 800a28a:	2b05      	cmp	r3, #5
 800a28c:	d826      	bhi.n	800a2dc <UART_SetConfig+0x1f0>
 800a28e:	a201      	add	r2, pc, #4	; (adr r2, 800a294 <UART_SetConfig+0x1a8>)
 800a290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a294:	0800a2ad 	.word	0x0800a2ad
 800a298:	0800a2b5 	.word	0x0800a2b5
 800a29c:	0800a2bd 	.word	0x0800a2bd
 800a2a0:	0800a2c5 	.word	0x0800a2c5
 800a2a4:	0800a2cd 	.word	0x0800a2cd
 800a2a8:	0800a2d5 	.word	0x0800a2d5
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2b2:	e1ec      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a2b4:	2304      	movs	r3, #4
 800a2b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2ba:	e1e8      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a2bc:	2308      	movs	r3, #8
 800a2be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2c2:	e1e4      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a2c4:	2310      	movs	r3, #16
 800a2c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2ca:	e1e0      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a2cc:	2320      	movs	r3, #32
 800a2ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2d2:	e1dc      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a2d4:	2340      	movs	r3, #64	; 0x40
 800a2d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2da:	e1d8      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a2dc:	2380      	movs	r3, #128	; 0x80
 800a2de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2e2:	e1d4      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a51      	ldr	r2, [pc, #324]	; (800a430 <UART_SetConfig+0x344>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d130      	bne.n	800a350 <UART_SetConfig+0x264>
 800a2ee:	4b4e      	ldr	r3, [pc, #312]	; (800a428 <UART_SetConfig+0x33c>)
 800a2f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2f2:	f003 0307 	and.w	r3, r3, #7
 800a2f6:	2b05      	cmp	r3, #5
 800a2f8:	d826      	bhi.n	800a348 <UART_SetConfig+0x25c>
 800a2fa:	a201      	add	r2, pc, #4	; (adr r2, 800a300 <UART_SetConfig+0x214>)
 800a2fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a300:	0800a319 	.word	0x0800a319
 800a304:	0800a321 	.word	0x0800a321
 800a308:	0800a329 	.word	0x0800a329
 800a30c:	0800a331 	.word	0x0800a331
 800a310:	0800a339 	.word	0x0800a339
 800a314:	0800a341 	.word	0x0800a341
 800a318:	2300      	movs	r3, #0
 800a31a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a31e:	e1b6      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a320:	2304      	movs	r3, #4
 800a322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a326:	e1b2      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a328:	2308      	movs	r3, #8
 800a32a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a32e:	e1ae      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a330:	2310      	movs	r3, #16
 800a332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a336:	e1aa      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a338:	2320      	movs	r3, #32
 800a33a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a33e:	e1a6      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a340:	2340      	movs	r3, #64	; 0x40
 800a342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a346:	e1a2      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a348:	2380      	movs	r3, #128	; 0x80
 800a34a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a34e:	e19e      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4a37      	ldr	r2, [pc, #220]	; (800a434 <UART_SetConfig+0x348>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d130      	bne.n	800a3bc <UART_SetConfig+0x2d0>
 800a35a:	4b33      	ldr	r3, [pc, #204]	; (800a428 <UART_SetConfig+0x33c>)
 800a35c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a35e:	f003 0307 	and.w	r3, r3, #7
 800a362:	2b05      	cmp	r3, #5
 800a364:	d826      	bhi.n	800a3b4 <UART_SetConfig+0x2c8>
 800a366:	a201      	add	r2, pc, #4	; (adr r2, 800a36c <UART_SetConfig+0x280>)
 800a368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a36c:	0800a385 	.word	0x0800a385
 800a370:	0800a38d 	.word	0x0800a38d
 800a374:	0800a395 	.word	0x0800a395
 800a378:	0800a39d 	.word	0x0800a39d
 800a37c:	0800a3a5 	.word	0x0800a3a5
 800a380:	0800a3ad 	.word	0x0800a3ad
 800a384:	2300      	movs	r3, #0
 800a386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a38a:	e180      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a38c:	2304      	movs	r3, #4
 800a38e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a392:	e17c      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a394:	2308      	movs	r3, #8
 800a396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a39a:	e178      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a39c:	2310      	movs	r3, #16
 800a39e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3a2:	e174      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a3a4:	2320      	movs	r3, #32
 800a3a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3aa:	e170      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a3ac:	2340      	movs	r3, #64	; 0x40
 800a3ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3b2:	e16c      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a3b4:	2380      	movs	r3, #128	; 0x80
 800a3b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3ba:	e168      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a1d      	ldr	r2, [pc, #116]	; (800a438 <UART_SetConfig+0x34c>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d142      	bne.n	800a44c <UART_SetConfig+0x360>
 800a3c6:	4b18      	ldr	r3, [pc, #96]	; (800a428 <UART_SetConfig+0x33c>)
 800a3c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3ca:	f003 0307 	and.w	r3, r3, #7
 800a3ce:	2b05      	cmp	r3, #5
 800a3d0:	d838      	bhi.n	800a444 <UART_SetConfig+0x358>
 800a3d2:	a201      	add	r2, pc, #4	; (adr r2, 800a3d8 <UART_SetConfig+0x2ec>)
 800a3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d8:	0800a3f1 	.word	0x0800a3f1
 800a3dc:	0800a3f9 	.word	0x0800a3f9
 800a3e0:	0800a401 	.word	0x0800a401
 800a3e4:	0800a409 	.word	0x0800a409
 800a3e8:	0800a411 	.word	0x0800a411
 800a3ec:	0800a43d 	.word	0x0800a43d
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3f6:	e14a      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a3f8:	2304      	movs	r3, #4
 800a3fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3fe:	e146      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a400:	2308      	movs	r3, #8
 800a402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a406:	e142      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a408:	2310      	movs	r3, #16
 800a40a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a40e:	e13e      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a410:	2320      	movs	r3, #32
 800a412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a416:	e13a      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a418:	cfff69f3 	.word	0xcfff69f3
 800a41c:	58000c00 	.word	0x58000c00
 800a420:	11fff4ff 	.word	0x11fff4ff
 800a424:	40011000 	.word	0x40011000
 800a428:	58024400 	.word	0x58024400
 800a42c:	40004400 	.word	0x40004400
 800a430:	40004800 	.word	0x40004800
 800a434:	40004c00 	.word	0x40004c00
 800a438:	40005000 	.word	0x40005000
 800a43c:	2340      	movs	r3, #64	; 0x40
 800a43e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a442:	e124      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a444:	2380      	movs	r3, #128	; 0x80
 800a446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a44a:	e120      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4acc      	ldr	r2, [pc, #816]	; (800a784 <UART_SetConfig+0x698>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d176      	bne.n	800a544 <UART_SetConfig+0x458>
 800a456:	4bcc      	ldr	r3, [pc, #816]	; (800a788 <UART_SetConfig+0x69c>)
 800a458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a45a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a45e:	2b28      	cmp	r3, #40	; 0x28
 800a460:	d86c      	bhi.n	800a53c <UART_SetConfig+0x450>
 800a462:	a201      	add	r2, pc, #4	; (adr r2, 800a468 <UART_SetConfig+0x37c>)
 800a464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a468:	0800a50d 	.word	0x0800a50d
 800a46c:	0800a53d 	.word	0x0800a53d
 800a470:	0800a53d 	.word	0x0800a53d
 800a474:	0800a53d 	.word	0x0800a53d
 800a478:	0800a53d 	.word	0x0800a53d
 800a47c:	0800a53d 	.word	0x0800a53d
 800a480:	0800a53d 	.word	0x0800a53d
 800a484:	0800a53d 	.word	0x0800a53d
 800a488:	0800a515 	.word	0x0800a515
 800a48c:	0800a53d 	.word	0x0800a53d
 800a490:	0800a53d 	.word	0x0800a53d
 800a494:	0800a53d 	.word	0x0800a53d
 800a498:	0800a53d 	.word	0x0800a53d
 800a49c:	0800a53d 	.word	0x0800a53d
 800a4a0:	0800a53d 	.word	0x0800a53d
 800a4a4:	0800a53d 	.word	0x0800a53d
 800a4a8:	0800a51d 	.word	0x0800a51d
 800a4ac:	0800a53d 	.word	0x0800a53d
 800a4b0:	0800a53d 	.word	0x0800a53d
 800a4b4:	0800a53d 	.word	0x0800a53d
 800a4b8:	0800a53d 	.word	0x0800a53d
 800a4bc:	0800a53d 	.word	0x0800a53d
 800a4c0:	0800a53d 	.word	0x0800a53d
 800a4c4:	0800a53d 	.word	0x0800a53d
 800a4c8:	0800a525 	.word	0x0800a525
 800a4cc:	0800a53d 	.word	0x0800a53d
 800a4d0:	0800a53d 	.word	0x0800a53d
 800a4d4:	0800a53d 	.word	0x0800a53d
 800a4d8:	0800a53d 	.word	0x0800a53d
 800a4dc:	0800a53d 	.word	0x0800a53d
 800a4e0:	0800a53d 	.word	0x0800a53d
 800a4e4:	0800a53d 	.word	0x0800a53d
 800a4e8:	0800a52d 	.word	0x0800a52d
 800a4ec:	0800a53d 	.word	0x0800a53d
 800a4f0:	0800a53d 	.word	0x0800a53d
 800a4f4:	0800a53d 	.word	0x0800a53d
 800a4f8:	0800a53d 	.word	0x0800a53d
 800a4fc:	0800a53d 	.word	0x0800a53d
 800a500:	0800a53d 	.word	0x0800a53d
 800a504:	0800a53d 	.word	0x0800a53d
 800a508:	0800a535 	.word	0x0800a535
 800a50c:	2301      	movs	r3, #1
 800a50e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a512:	e0bc      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a514:	2304      	movs	r3, #4
 800a516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a51a:	e0b8      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a51c:	2308      	movs	r3, #8
 800a51e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a522:	e0b4      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a524:	2310      	movs	r3, #16
 800a526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a52a:	e0b0      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a52c:	2320      	movs	r3, #32
 800a52e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a532:	e0ac      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a534:	2340      	movs	r3, #64	; 0x40
 800a536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a53a:	e0a8      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a53c:	2380      	movs	r3, #128	; 0x80
 800a53e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a542:	e0a4      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a90      	ldr	r2, [pc, #576]	; (800a78c <UART_SetConfig+0x6a0>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d130      	bne.n	800a5b0 <UART_SetConfig+0x4c4>
 800a54e:	4b8e      	ldr	r3, [pc, #568]	; (800a788 <UART_SetConfig+0x69c>)
 800a550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a552:	f003 0307 	and.w	r3, r3, #7
 800a556:	2b05      	cmp	r3, #5
 800a558:	d826      	bhi.n	800a5a8 <UART_SetConfig+0x4bc>
 800a55a:	a201      	add	r2, pc, #4	; (adr r2, 800a560 <UART_SetConfig+0x474>)
 800a55c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a560:	0800a579 	.word	0x0800a579
 800a564:	0800a581 	.word	0x0800a581
 800a568:	0800a589 	.word	0x0800a589
 800a56c:	0800a591 	.word	0x0800a591
 800a570:	0800a599 	.word	0x0800a599
 800a574:	0800a5a1 	.word	0x0800a5a1
 800a578:	2300      	movs	r3, #0
 800a57a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a57e:	e086      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a580:	2304      	movs	r3, #4
 800a582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a586:	e082      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a588:	2308      	movs	r3, #8
 800a58a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a58e:	e07e      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a590:	2310      	movs	r3, #16
 800a592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a596:	e07a      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a598:	2320      	movs	r3, #32
 800a59a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a59e:	e076      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a5a0:	2340      	movs	r3, #64	; 0x40
 800a5a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5a6:	e072      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a5a8:	2380      	movs	r3, #128	; 0x80
 800a5aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ae:	e06e      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a76      	ldr	r2, [pc, #472]	; (800a790 <UART_SetConfig+0x6a4>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d130      	bne.n	800a61c <UART_SetConfig+0x530>
 800a5ba:	4b73      	ldr	r3, [pc, #460]	; (800a788 <UART_SetConfig+0x69c>)
 800a5bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5be:	f003 0307 	and.w	r3, r3, #7
 800a5c2:	2b05      	cmp	r3, #5
 800a5c4:	d826      	bhi.n	800a614 <UART_SetConfig+0x528>
 800a5c6:	a201      	add	r2, pc, #4	; (adr r2, 800a5cc <UART_SetConfig+0x4e0>)
 800a5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5cc:	0800a5e5 	.word	0x0800a5e5
 800a5d0:	0800a5ed 	.word	0x0800a5ed
 800a5d4:	0800a5f5 	.word	0x0800a5f5
 800a5d8:	0800a5fd 	.word	0x0800a5fd
 800a5dc:	0800a605 	.word	0x0800a605
 800a5e0:	0800a60d 	.word	0x0800a60d
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ea:	e050      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a5ec:	2304      	movs	r3, #4
 800a5ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5f2:	e04c      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a5f4:	2308      	movs	r3, #8
 800a5f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5fa:	e048      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a5fc:	2310      	movs	r3, #16
 800a5fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a602:	e044      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a604:	2320      	movs	r3, #32
 800a606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a60a:	e040      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a60c:	2340      	movs	r3, #64	; 0x40
 800a60e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a612:	e03c      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a614:	2380      	movs	r3, #128	; 0x80
 800a616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a61a:	e038      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	4a5c      	ldr	r2, [pc, #368]	; (800a794 <UART_SetConfig+0x6a8>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d130      	bne.n	800a688 <UART_SetConfig+0x59c>
 800a626:	4b58      	ldr	r3, [pc, #352]	; (800a788 <UART_SetConfig+0x69c>)
 800a628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a62a:	f003 0307 	and.w	r3, r3, #7
 800a62e:	2b05      	cmp	r3, #5
 800a630:	d826      	bhi.n	800a680 <UART_SetConfig+0x594>
 800a632:	a201      	add	r2, pc, #4	; (adr r2, 800a638 <UART_SetConfig+0x54c>)
 800a634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a638:	0800a651 	.word	0x0800a651
 800a63c:	0800a659 	.word	0x0800a659
 800a640:	0800a661 	.word	0x0800a661
 800a644:	0800a669 	.word	0x0800a669
 800a648:	0800a671 	.word	0x0800a671
 800a64c:	0800a679 	.word	0x0800a679
 800a650:	2302      	movs	r3, #2
 800a652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a656:	e01a      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a658:	2304      	movs	r3, #4
 800a65a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a65e:	e016      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a660:	2308      	movs	r3, #8
 800a662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a666:	e012      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a668:	2310      	movs	r3, #16
 800a66a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a66e:	e00e      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a670:	2320      	movs	r3, #32
 800a672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a676:	e00a      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a678:	2340      	movs	r3, #64	; 0x40
 800a67a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a67e:	e006      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a680:	2380      	movs	r3, #128	; 0x80
 800a682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a686:	e002      	b.n	800a68e <UART_SetConfig+0x5a2>
 800a688:	2380      	movs	r3, #128	; 0x80
 800a68a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a40      	ldr	r2, [pc, #256]	; (800a794 <UART_SetConfig+0x6a8>)
 800a694:	4293      	cmp	r3, r2
 800a696:	f040 80ef 	bne.w	800a878 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a69a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a69e:	2b20      	cmp	r3, #32
 800a6a0:	dc46      	bgt.n	800a730 <UART_SetConfig+0x644>
 800a6a2:	2b02      	cmp	r3, #2
 800a6a4:	f2c0 8081 	blt.w	800a7aa <UART_SetConfig+0x6be>
 800a6a8:	3b02      	subs	r3, #2
 800a6aa:	2b1e      	cmp	r3, #30
 800a6ac:	d87d      	bhi.n	800a7aa <UART_SetConfig+0x6be>
 800a6ae:	a201      	add	r2, pc, #4	; (adr r2, 800a6b4 <UART_SetConfig+0x5c8>)
 800a6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b4:	0800a737 	.word	0x0800a737
 800a6b8:	0800a7ab 	.word	0x0800a7ab
 800a6bc:	0800a73f 	.word	0x0800a73f
 800a6c0:	0800a7ab 	.word	0x0800a7ab
 800a6c4:	0800a7ab 	.word	0x0800a7ab
 800a6c8:	0800a7ab 	.word	0x0800a7ab
 800a6cc:	0800a74f 	.word	0x0800a74f
 800a6d0:	0800a7ab 	.word	0x0800a7ab
 800a6d4:	0800a7ab 	.word	0x0800a7ab
 800a6d8:	0800a7ab 	.word	0x0800a7ab
 800a6dc:	0800a7ab 	.word	0x0800a7ab
 800a6e0:	0800a7ab 	.word	0x0800a7ab
 800a6e4:	0800a7ab 	.word	0x0800a7ab
 800a6e8:	0800a7ab 	.word	0x0800a7ab
 800a6ec:	0800a75f 	.word	0x0800a75f
 800a6f0:	0800a7ab 	.word	0x0800a7ab
 800a6f4:	0800a7ab 	.word	0x0800a7ab
 800a6f8:	0800a7ab 	.word	0x0800a7ab
 800a6fc:	0800a7ab 	.word	0x0800a7ab
 800a700:	0800a7ab 	.word	0x0800a7ab
 800a704:	0800a7ab 	.word	0x0800a7ab
 800a708:	0800a7ab 	.word	0x0800a7ab
 800a70c:	0800a7ab 	.word	0x0800a7ab
 800a710:	0800a7ab 	.word	0x0800a7ab
 800a714:	0800a7ab 	.word	0x0800a7ab
 800a718:	0800a7ab 	.word	0x0800a7ab
 800a71c:	0800a7ab 	.word	0x0800a7ab
 800a720:	0800a7ab 	.word	0x0800a7ab
 800a724:	0800a7ab 	.word	0x0800a7ab
 800a728:	0800a7ab 	.word	0x0800a7ab
 800a72c:	0800a79d 	.word	0x0800a79d
 800a730:	2b40      	cmp	r3, #64	; 0x40
 800a732:	d036      	beq.n	800a7a2 <UART_SetConfig+0x6b6>
 800a734:	e039      	b.n	800a7aa <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a736:	f7fd fba1 	bl	8007e7c <HAL_RCCEx_GetD3PCLK1Freq>
 800a73a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a73c:	e03b      	b.n	800a7b6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a73e:	f107 0314 	add.w	r3, r7, #20
 800a742:	4618      	mov	r0, r3
 800a744:	f7fd fbb0 	bl	8007ea8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a748:	69bb      	ldr	r3, [r7, #24]
 800a74a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a74c:	e033      	b.n	800a7b6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a74e:	f107 0308 	add.w	r3, r7, #8
 800a752:	4618      	mov	r0, r3
 800a754:	f7fd fcfc 	bl	8008150 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a75c:	e02b      	b.n	800a7b6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a75e:	4b0a      	ldr	r3, [pc, #40]	; (800a788 <UART_SetConfig+0x69c>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f003 0320 	and.w	r3, r3, #32
 800a766:	2b00      	cmp	r3, #0
 800a768:	d009      	beq.n	800a77e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a76a:	4b07      	ldr	r3, [pc, #28]	; (800a788 <UART_SetConfig+0x69c>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	08db      	lsrs	r3, r3, #3
 800a770:	f003 0303 	and.w	r3, r3, #3
 800a774:	4a08      	ldr	r2, [pc, #32]	; (800a798 <UART_SetConfig+0x6ac>)
 800a776:	fa22 f303 	lsr.w	r3, r2, r3
 800a77a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a77c:	e01b      	b.n	800a7b6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800a77e:	4b06      	ldr	r3, [pc, #24]	; (800a798 <UART_SetConfig+0x6ac>)
 800a780:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a782:	e018      	b.n	800a7b6 <UART_SetConfig+0x6ca>
 800a784:	40011400 	.word	0x40011400
 800a788:	58024400 	.word	0x58024400
 800a78c:	40007800 	.word	0x40007800
 800a790:	40007c00 	.word	0x40007c00
 800a794:	58000c00 	.word	0x58000c00
 800a798:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a79c:	4bc4      	ldr	r3, [pc, #784]	; (800aab0 <UART_SetConfig+0x9c4>)
 800a79e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7a0:	e009      	b.n	800a7b6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7a8:	e005      	b.n	800a7b6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a7b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	f000 81da 	beq.w	800ab72 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c2:	4abc      	ldr	r2, [pc, #752]	; (800aab4 <UART_SetConfig+0x9c8>)
 800a7c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7d0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	685a      	ldr	r2, [r3, #4]
 800a7d6:	4613      	mov	r3, r2
 800a7d8:	005b      	lsls	r3, r3, #1
 800a7da:	4413      	add	r3, r2
 800a7dc:	6a3a      	ldr	r2, [r7, #32]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d305      	bcc.n	800a7ee <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a7e8:	6a3a      	ldr	r2, [r7, #32]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d903      	bls.n	800a7f6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a7f4:	e1bd      	b.n	800ab72 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f04f 0100 	mov.w	r1, #0
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a802:	4aac      	ldr	r2, [pc, #688]	; (800aab4 <UART_SetConfig+0x9c8>)
 800a804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a808:	b29a      	uxth	r2, r3
 800a80a:	f04f 0300 	mov.w	r3, #0
 800a80e:	f7f5 fdb7 	bl	8000380 <__aeabi_uldivmod>
 800a812:	4602      	mov	r2, r0
 800a814:	460b      	mov	r3, r1
 800a816:	4610      	mov	r0, r2
 800a818:	4619      	mov	r1, r3
 800a81a:	f04f 0200 	mov.w	r2, #0
 800a81e:	f04f 0300 	mov.w	r3, #0
 800a822:	020b      	lsls	r3, r1, #8
 800a824:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a828:	0202      	lsls	r2, r0, #8
 800a82a:	6879      	ldr	r1, [r7, #4]
 800a82c:	6849      	ldr	r1, [r1, #4]
 800a82e:	0849      	lsrs	r1, r1, #1
 800a830:	4608      	mov	r0, r1
 800a832:	f04f 0100 	mov.w	r1, #0
 800a836:	1814      	adds	r4, r2, r0
 800a838:	eb43 0501 	adc.w	r5, r3, r1
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	461a      	mov	r2, r3
 800a842:	f04f 0300 	mov.w	r3, #0
 800a846:	4620      	mov	r0, r4
 800a848:	4629      	mov	r1, r5
 800a84a:	f7f5 fd99 	bl	8000380 <__aeabi_uldivmod>
 800a84e:	4602      	mov	r2, r0
 800a850:	460b      	mov	r3, r1
 800a852:	4613      	mov	r3, r2
 800a854:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a858:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a85c:	d308      	bcc.n	800a870 <UART_SetConfig+0x784>
 800a85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a860:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a864:	d204      	bcs.n	800a870 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a86c:	60da      	str	r2, [r3, #12]
 800a86e:	e180      	b.n	800ab72 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800a870:	2301      	movs	r3, #1
 800a872:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a876:	e17c      	b.n	800ab72 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	69db      	ldr	r3, [r3, #28]
 800a87c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a880:	f040 80be 	bne.w	800aa00 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800a884:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a888:	2b20      	cmp	r3, #32
 800a88a:	dc49      	bgt.n	800a920 <UART_SetConfig+0x834>
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	db7c      	blt.n	800a98a <UART_SetConfig+0x89e>
 800a890:	2b20      	cmp	r3, #32
 800a892:	d87a      	bhi.n	800a98a <UART_SetConfig+0x89e>
 800a894:	a201      	add	r2, pc, #4	; (adr r2, 800a89c <UART_SetConfig+0x7b0>)
 800a896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a89a:	bf00      	nop
 800a89c:	0800a927 	.word	0x0800a927
 800a8a0:	0800a92f 	.word	0x0800a92f
 800a8a4:	0800a98b 	.word	0x0800a98b
 800a8a8:	0800a98b 	.word	0x0800a98b
 800a8ac:	0800a937 	.word	0x0800a937
 800a8b0:	0800a98b 	.word	0x0800a98b
 800a8b4:	0800a98b 	.word	0x0800a98b
 800a8b8:	0800a98b 	.word	0x0800a98b
 800a8bc:	0800a947 	.word	0x0800a947
 800a8c0:	0800a98b 	.word	0x0800a98b
 800a8c4:	0800a98b 	.word	0x0800a98b
 800a8c8:	0800a98b 	.word	0x0800a98b
 800a8cc:	0800a98b 	.word	0x0800a98b
 800a8d0:	0800a98b 	.word	0x0800a98b
 800a8d4:	0800a98b 	.word	0x0800a98b
 800a8d8:	0800a98b 	.word	0x0800a98b
 800a8dc:	0800a957 	.word	0x0800a957
 800a8e0:	0800a98b 	.word	0x0800a98b
 800a8e4:	0800a98b 	.word	0x0800a98b
 800a8e8:	0800a98b 	.word	0x0800a98b
 800a8ec:	0800a98b 	.word	0x0800a98b
 800a8f0:	0800a98b 	.word	0x0800a98b
 800a8f4:	0800a98b 	.word	0x0800a98b
 800a8f8:	0800a98b 	.word	0x0800a98b
 800a8fc:	0800a98b 	.word	0x0800a98b
 800a900:	0800a98b 	.word	0x0800a98b
 800a904:	0800a98b 	.word	0x0800a98b
 800a908:	0800a98b 	.word	0x0800a98b
 800a90c:	0800a98b 	.word	0x0800a98b
 800a910:	0800a98b 	.word	0x0800a98b
 800a914:	0800a98b 	.word	0x0800a98b
 800a918:	0800a98b 	.word	0x0800a98b
 800a91c:	0800a97d 	.word	0x0800a97d
 800a920:	2b40      	cmp	r3, #64	; 0x40
 800a922:	d02e      	beq.n	800a982 <UART_SetConfig+0x896>
 800a924:	e031      	b.n	800a98a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a926:	f7fc fb3d 	bl	8006fa4 <HAL_RCC_GetPCLK1Freq>
 800a92a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a92c:	e033      	b.n	800a996 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a92e:	f7fc fb4f 	bl	8006fd0 <HAL_RCC_GetPCLK2Freq>
 800a932:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a934:	e02f      	b.n	800a996 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a936:	f107 0314 	add.w	r3, r7, #20
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7fd fab4 	bl	8007ea8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a940:	69bb      	ldr	r3, [r7, #24]
 800a942:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a944:	e027      	b.n	800a996 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a946:	f107 0308 	add.w	r3, r7, #8
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7fd fc00 	bl	8008150 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a954:	e01f      	b.n	800a996 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a956:	4b58      	ldr	r3, [pc, #352]	; (800aab8 <UART_SetConfig+0x9cc>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f003 0320 	and.w	r3, r3, #32
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d009      	beq.n	800a976 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a962:	4b55      	ldr	r3, [pc, #340]	; (800aab8 <UART_SetConfig+0x9cc>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	08db      	lsrs	r3, r3, #3
 800a968:	f003 0303 	and.w	r3, r3, #3
 800a96c:	4a53      	ldr	r2, [pc, #332]	; (800aabc <UART_SetConfig+0x9d0>)
 800a96e:	fa22 f303 	lsr.w	r3, r2, r3
 800a972:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a974:	e00f      	b.n	800a996 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800a976:	4b51      	ldr	r3, [pc, #324]	; (800aabc <UART_SetConfig+0x9d0>)
 800a978:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a97a:	e00c      	b.n	800a996 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a97c:	4b4c      	ldr	r3, [pc, #304]	; (800aab0 <UART_SetConfig+0x9c4>)
 800a97e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a980:	e009      	b.n	800a996 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a986:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a988:	e005      	b.n	800a996 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800a98a:	2300      	movs	r3, #0
 800a98c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a98e:	2301      	movs	r3, #1
 800a990:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a994:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a998:	2b00      	cmp	r3, #0
 800a99a:	f000 80ea 	beq.w	800ab72 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a2:	4a44      	ldr	r2, [pc, #272]	; (800aab4 <UART_SetConfig+0x9c8>)
 800a9a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9b0:	005a      	lsls	r2, r3, #1
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	085b      	lsrs	r3, r3, #1
 800a9b8:	441a      	add	r2, r3
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9c2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c6:	2b0f      	cmp	r3, #15
 800a9c8:	d916      	bls.n	800a9f8 <UART_SetConfig+0x90c>
 800a9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9d0:	d212      	bcs.n	800a9f8 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	f023 030f 	bic.w	r3, r3, #15
 800a9da:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9de:	085b      	lsrs	r3, r3, #1
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	f003 0307 	and.w	r3, r3, #7
 800a9e6:	b29a      	uxth	r2, r3
 800a9e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a9f4:	60da      	str	r2, [r3, #12]
 800a9f6:	e0bc      	b.n	800ab72 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a9fe:	e0b8      	b.n	800ab72 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aa00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aa04:	2b20      	cmp	r3, #32
 800aa06:	dc4b      	bgt.n	800aaa0 <UART_SetConfig+0x9b4>
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f2c0 8087 	blt.w	800ab1c <UART_SetConfig+0xa30>
 800aa0e:	2b20      	cmp	r3, #32
 800aa10:	f200 8084 	bhi.w	800ab1c <UART_SetConfig+0xa30>
 800aa14:	a201      	add	r2, pc, #4	; (adr r2, 800aa1c <UART_SetConfig+0x930>)
 800aa16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa1a:	bf00      	nop
 800aa1c:	0800aaa7 	.word	0x0800aaa7
 800aa20:	0800aac1 	.word	0x0800aac1
 800aa24:	0800ab1d 	.word	0x0800ab1d
 800aa28:	0800ab1d 	.word	0x0800ab1d
 800aa2c:	0800aac9 	.word	0x0800aac9
 800aa30:	0800ab1d 	.word	0x0800ab1d
 800aa34:	0800ab1d 	.word	0x0800ab1d
 800aa38:	0800ab1d 	.word	0x0800ab1d
 800aa3c:	0800aad9 	.word	0x0800aad9
 800aa40:	0800ab1d 	.word	0x0800ab1d
 800aa44:	0800ab1d 	.word	0x0800ab1d
 800aa48:	0800ab1d 	.word	0x0800ab1d
 800aa4c:	0800ab1d 	.word	0x0800ab1d
 800aa50:	0800ab1d 	.word	0x0800ab1d
 800aa54:	0800ab1d 	.word	0x0800ab1d
 800aa58:	0800ab1d 	.word	0x0800ab1d
 800aa5c:	0800aae9 	.word	0x0800aae9
 800aa60:	0800ab1d 	.word	0x0800ab1d
 800aa64:	0800ab1d 	.word	0x0800ab1d
 800aa68:	0800ab1d 	.word	0x0800ab1d
 800aa6c:	0800ab1d 	.word	0x0800ab1d
 800aa70:	0800ab1d 	.word	0x0800ab1d
 800aa74:	0800ab1d 	.word	0x0800ab1d
 800aa78:	0800ab1d 	.word	0x0800ab1d
 800aa7c:	0800ab1d 	.word	0x0800ab1d
 800aa80:	0800ab1d 	.word	0x0800ab1d
 800aa84:	0800ab1d 	.word	0x0800ab1d
 800aa88:	0800ab1d 	.word	0x0800ab1d
 800aa8c:	0800ab1d 	.word	0x0800ab1d
 800aa90:	0800ab1d 	.word	0x0800ab1d
 800aa94:	0800ab1d 	.word	0x0800ab1d
 800aa98:	0800ab1d 	.word	0x0800ab1d
 800aa9c:	0800ab0f 	.word	0x0800ab0f
 800aaa0:	2b40      	cmp	r3, #64	; 0x40
 800aaa2:	d037      	beq.n	800ab14 <UART_SetConfig+0xa28>
 800aaa4:	e03a      	b.n	800ab1c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aaa6:	f7fc fa7d 	bl	8006fa4 <HAL_RCC_GetPCLK1Freq>
 800aaaa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aaac:	e03c      	b.n	800ab28 <UART_SetConfig+0xa3c>
 800aaae:	bf00      	nop
 800aab0:	003d0900 	.word	0x003d0900
 800aab4:	0800c018 	.word	0x0800c018
 800aab8:	58024400 	.word	0x58024400
 800aabc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aac0:	f7fc fa86 	bl	8006fd0 <HAL_RCC_GetPCLK2Freq>
 800aac4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aac6:	e02f      	b.n	800ab28 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aac8:	f107 0314 	add.w	r3, r7, #20
 800aacc:	4618      	mov	r0, r3
 800aace:	f7fd f9eb 	bl	8007ea8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aad2:	69bb      	ldr	r3, [r7, #24]
 800aad4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aad6:	e027      	b.n	800ab28 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aad8:	f107 0308 	add.w	r3, r7, #8
 800aadc:	4618      	mov	r0, r3
 800aade:	f7fd fb37 	bl	8008150 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aae6:	e01f      	b.n	800ab28 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aae8:	4b2c      	ldr	r3, [pc, #176]	; (800ab9c <UART_SetConfig+0xab0>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f003 0320 	and.w	r3, r3, #32
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d009      	beq.n	800ab08 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aaf4:	4b29      	ldr	r3, [pc, #164]	; (800ab9c <UART_SetConfig+0xab0>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	08db      	lsrs	r3, r3, #3
 800aafa:	f003 0303 	and.w	r3, r3, #3
 800aafe:	4a28      	ldr	r2, [pc, #160]	; (800aba0 <UART_SetConfig+0xab4>)
 800ab00:	fa22 f303 	lsr.w	r3, r2, r3
 800ab04:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ab06:	e00f      	b.n	800ab28 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800ab08:	4b25      	ldr	r3, [pc, #148]	; (800aba0 <UART_SetConfig+0xab4>)
 800ab0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab0c:	e00c      	b.n	800ab28 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ab0e:	4b25      	ldr	r3, [pc, #148]	; (800aba4 <UART_SetConfig+0xab8>)
 800ab10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab12:	e009      	b.n	800ab28 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab1a:	e005      	b.n	800ab28 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ab20:	2301      	movs	r3, #1
 800ab22:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ab26:	bf00      	nop
    }

    if (pclk != 0U)
 800ab28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d021      	beq.n	800ab72 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab32:	4a1d      	ldr	r2, [pc, #116]	; (800aba8 <UART_SetConfig+0xabc>)
 800ab34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab38:	461a      	mov	r2, r3
 800ab3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab3c:	fbb3 f2f2 	udiv	r2, r3, r2
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	085b      	lsrs	r3, r3, #1
 800ab46:	441a      	add	r2, r3
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab50:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab54:	2b0f      	cmp	r3, #15
 800ab56:	d909      	bls.n	800ab6c <UART_SetConfig+0xa80>
 800ab58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab5e:	d205      	bcs.n	800ab6c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ab60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab62:	b29a      	uxth	r2, r3
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	60da      	str	r2, [r3, #12]
 800ab6a:	e002      	b.n	800ab72 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2201      	movs	r2, #1
 800ab76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2201      	movs	r2, #1
 800ab7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2200      	movs	r2, #0
 800ab86:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ab8e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3738      	adds	r7, #56	; 0x38
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bdb0      	pop	{r4, r5, r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	58024400 	.word	0x58024400
 800aba0:	03d09000 	.word	0x03d09000
 800aba4:	003d0900 	.word	0x003d0900
 800aba8:	0800c018 	.word	0x0800c018

0800abac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800abac:	b480      	push	{r7}
 800abae:	b083      	sub	sp, #12
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abb8:	f003 0301 	and.w	r3, r3, #1
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d00a      	beq.n	800abd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	430a      	orrs	r2, r1
 800abd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abda:	f003 0302 	and.w	r3, r3, #2
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d00a      	beq.n	800abf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	430a      	orrs	r2, r1
 800abf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abfc:	f003 0304 	and.w	r3, r3, #4
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d00a      	beq.n	800ac1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	430a      	orrs	r2, r1
 800ac18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac1e:	f003 0308 	and.w	r3, r3, #8
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d00a      	beq.n	800ac3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	430a      	orrs	r2, r1
 800ac3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac40:	f003 0310 	and.w	r3, r3, #16
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d00a      	beq.n	800ac5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	689b      	ldr	r3, [r3, #8]
 800ac4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	430a      	orrs	r2, r1
 800ac5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac62:	f003 0320 	and.w	r3, r3, #32
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d00a      	beq.n	800ac80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	689b      	ldr	r3, [r3, #8]
 800ac70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	430a      	orrs	r2, r1
 800ac7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d01a      	beq.n	800acc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	430a      	orrs	r2, r1
 800aca0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aca6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acaa:	d10a      	bne.n	800acc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	430a      	orrs	r2, r1
 800acc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acca:	2b00      	cmp	r3, #0
 800accc:	d00a      	beq.n	800ace4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	430a      	orrs	r2, r1
 800ace2:	605a      	str	r2, [r3, #4]
  }
}
 800ace4:	bf00      	nop
 800ace6:	370c      	adds	r7, #12
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b086      	sub	sp, #24
 800acf4:	af02      	add	r7, sp, #8
 800acf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2200      	movs	r2, #0
 800acfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ad00:	f7f7 fd64 	bl	80027cc <HAL_GetTick>
 800ad04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f003 0308 	and.w	r3, r3, #8
 800ad10:	2b08      	cmp	r3, #8
 800ad12:	d10e      	bne.n	800ad32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad18:	9300      	str	r3, [sp, #0]
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 f82f 	bl	800ad86 <UART_WaitOnFlagUntilTimeout>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d001      	beq.n	800ad32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad2e:	2303      	movs	r3, #3
 800ad30:	e025      	b.n	800ad7e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f003 0304 	and.w	r3, r3, #4
 800ad3c:	2b04      	cmp	r3, #4
 800ad3e:	d10e      	bne.n	800ad5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad44:	9300      	str	r3, [sp, #0]
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 f819 	bl	800ad86 <UART_WaitOnFlagUntilTimeout>
 800ad54:	4603      	mov	r3, r0
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d001      	beq.n	800ad5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad5a:	2303      	movs	r3, #3
 800ad5c:	e00f      	b.n	800ad7e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2220      	movs	r2, #32
 800ad62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2220      	movs	r2, #32
 800ad6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2200      	movs	r2, #0
 800ad72:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ad7c:	2300      	movs	r3, #0
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b09c      	sub	sp, #112	; 0x70
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	60f8      	str	r0, [r7, #12]
 800ad8e:	60b9      	str	r1, [r7, #8]
 800ad90:	603b      	str	r3, [r7, #0]
 800ad92:	4613      	mov	r3, r2
 800ad94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad96:	e0a9      	b.n	800aeec <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad9e:	f000 80a5 	beq.w	800aeec <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ada2:	f7f7 fd13 	bl	80027cc <HAL_GetTick>
 800ada6:	4602      	mov	r2, r0
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	1ad3      	subs	r3, r2, r3
 800adac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800adae:	429a      	cmp	r2, r3
 800adb0:	d302      	bcc.n	800adb8 <UART_WaitOnFlagUntilTimeout+0x32>
 800adb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d140      	bne.n	800ae3a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adc0:	e853 3f00 	ldrex	r3, [r3]
 800adc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800adc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800adcc:	667b      	str	r3, [r7, #100]	; 0x64
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	461a      	mov	r2, r3
 800add4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800add6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800add8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800addc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800adde:	e841 2300 	strex	r3, r2, [r1]
 800ade2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ade4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d1e6      	bne.n	800adb8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	3308      	adds	r3, #8
 800adf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adf4:	e853 3f00 	ldrex	r3, [r3]
 800adf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800adfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adfc:	f023 0301 	bic.w	r3, r3, #1
 800ae00:	663b      	str	r3, [r7, #96]	; 0x60
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	3308      	adds	r3, #8
 800ae08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ae0a:	64ba      	str	r2, [r7, #72]	; 0x48
 800ae0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ae10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae12:	e841 2300 	strex	r3, r2, [r1]
 800ae16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ae18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d1e5      	bne.n	800adea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2220      	movs	r2, #32
 800ae22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2220      	movs	r2, #32
 800ae2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2200      	movs	r2, #0
 800ae32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ae36:	2303      	movs	r3, #3
 800ae38:	e069      	b.n	800af0e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f003 0304 	and.w	r3, r3, #4
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d051      	beq.n	800aeec <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	69db      	ldr	r3, [r3, #28]
 800ae4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae56:	d149      	bne.n	800aeec <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae60:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae6a:	e853 3f00 	ldrex	r3, [r3]
 800ae6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ae76:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae80:	637b      	str	r3, [r7, #52]	; 0x34
 800ae82:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae88:	e841 2300 	strex	r3, r2, [r1]
 800ae8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ae8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d1e6      	bne.n	800ae62 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	3308      	adds	r3, #8
 800ae9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	e853 3f00 	ldrex	r3, [r3]
 800aea2:	613b      	str	r3, [r7, #16]
   return(result);
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	f023 0301 	bic.w	r3, r3, #1
 800aeaa:	66bb      	str	r3, [r7, #104]	; 0x68
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	3308      	adds	r3, #8
 800aeb2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aeb4:	623a      	str	r2, [r7, #32]
 800aeb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb8:	69f9      	ldr	r1, [r7, #28]
 800aeba:	6a3a      	ldr	r2, [r7, #32]
 800aebc:	e841 2300 	strex	r3, r2, [r1]
 800aec0:	61bb      	str	r3, [r7, #24]
   return(result);
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d1e5      	bne.n	800ae94 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2220      	movs	r2, #32
 800aecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2220      	movs	r2, #32
 800aed4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2220      	movs	r2, #32
 800aedc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	2200      	movs	r2, #0
 800aee4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800aee8:	2303      	movs	r3, #3
 800aeea:	e010      	b.n	800af0e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	69da      	ldr	r2, [r3, #28]
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	4013      	ands	r3, r2
 800aef6:	68ba      	ldr	r2, [r7, #8]
 800aef8:	429a      	cmp	r2, r3
 800aefa:	bf0c      	ite	eq
 800aefc:	2301      	moveq	r3, #1
 800aefe:	2300      	movne	r3, #0
 800af00:	b2db      	uxtb	r3, r3
 800af02:	461a      	mov	r2, r3
 800af04:	79fb      	ldrb	r3, [r7, #7]
 800af06:	429a      	cmp	r2, r3
 800af08:	f43f af46 	beq.w	800ad98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af0c:	2300      	movs	r3, #0
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3770      	adds	r7, #112	; 0x70
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}

0800af16 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800af16:	b480      	push	{r7}
 800af18:	b085      	sub	sp, #20
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800af24:	2b01      	cmp	r3, #1
 800af26:	d101      	bne.n	800af2c <HAL_UARTEx_DisableFifoMode+0x16>
 800af28:	2302      	movs	r3, #2
 800af2a:	e027      	b.n	800af7c <HAL_UARTEx_DisableFifoMode+0x66>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2201      	movs	r2, #1
 800af30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2224      	movs	r2, #36	; 0x24
 800af38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	681a      	ldr	r2, [r3, #0]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f022 0201 	bic.w	r2, r2, #1
 800af52:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800af5a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	68fa      	ldr	r2, [r7, #12]
 800af68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2220      	movs	r2, #32
 800af6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2200      	movs	r2, #0
 800af76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800af7a:	2300      	movs	r3, #0
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3714      	adds	r7, #20
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr

0800af88 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800af98:	2b01      	cmp	r3, #1
 800af9a:	d101      	bne.n	800afa0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800af9c:	2302      	movs	r3, #2
 800af9e:	e02d      	b.n	800affc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2201      	movs	r2, #1
 800afa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2224      	movs	r2, #36	; 0x24
 800afac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	681a      	ldr	r2, [r3, #0]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f022 0201 	bic.w	r2, r2, #1
 800afc6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	689b      	ldr	r3, [r3, #8]
 800afce:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	683a      	ldr	r2, [r7, #0]
 800afd8:	430a      	orrs	r2, r1
 800afda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 f84f 	bl	800b080 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	68fa      	ldr	r2, [r7, #12]
 800afe8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2220      	movs	r2, #32
 800afee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2200      	movs	r2, #0
 800aff6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800affa:	2300      	movs	r3, #0
}
 800affc:	4618      	mov	r0, r3
 800affe:	3710      	adds	r7, #16
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b014:	2b01      	cmp	r3, #1
 800b016:	d101      	bne.n	800b01c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b018:	2302      	movs	r3, #2
 800b01a:	e02d      	b.n	800b078 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2201      	movs	r2, #1
 800b020:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2224      	movs	r2, #36	; 0x24
 800b028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	681a      	ldr	r2, [r3, #0]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f022 0201 	bic.w	r2, r2, #1
 800b042:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	683a      	ldr	r2, [r7, #0]
 800b054:	430a      	orrs	r2, r1
 800b056:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 f811 	bl	800b080 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	68fa      	ldr	r2, [r7, #12]
 800b064:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2220      	movs	r2, #32
 800b06a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2200      	movs	r2, #0
 800b072:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b076:	2300      	movs	r3, #0
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3710      	adds	r7, #16
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b080:	b480      	push	{r7}
 800b082:	b085      	sub	sp, #20
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d108      	bne.n	800b0a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2201      	movs	r2, #1
 800b094:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b0a0:	e031      	b.n	800b106 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b0a2:	2310      	movs	r3, #16
 800b0a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b0a6:	2310      	movs	r3, #16
 800b0a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	689b      	ldr	r3, [r3, #8]
 800b0b0:	0e5b      	lsrs	r3, r3, #25
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	f003 0307 	and.w	r3, r3, #7
 800b0b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	689b      	ldr	r3, [r3, #8]
 800b0c0:	0f5b      	lsrs	r3, r3, #29
 800b0c2:	b2db      	uxtb	r3, r3
 800b0c4:	f003 0307 	and.w	r3, r3, #7
 800b0c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b0ca:	7bbb      	ldrb	r3, [r7, #14]
 800b0cc:	7b3a      	ldrb	r2, [r7, #12]
 800b0ce:	4911      	ldr	r1, [pc, #68]	; (800b114 <UARTEx_SetNbDataToProcess+0x94>)
 800b0d0:	5c8a      	ldrb	r2, [r1, r2]
 800b0d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b0d6:	7b3a      	ldrb	r2, [r7, #12]
 800b0d8:	490f      	ldr	r1, [pc, #60]	; (800b118 <UARTEx_SetNbDataToProcess+0x98>)
 800b0da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b0dc:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0e0:	b29a      	uxth	r2, r3
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b0e8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ea:	7b7a      	ldrb	r2, [r7, #13]
 800b0ec:	4909      	ldr	r1, [pc, #36]	; (800b114 <UARTEx_SetNbDataToProcess+0x94>)
 800b0ee:	5c8a      	ldrb	r2, [r1, r2]
 800b0f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b0f4:	7b7a      	ldrb	r2, [r7, #13]
 800b0f6:	4908      	ldr	r1, [pc, #32]	; (800b118 <UARTEx_SetNbDataToProcess+0x98>)
 800b0f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b0fa:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0fe:	b29a      	uxth	r2, r3
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b106:	bf00      	nop
 800b108:	3714      	adds	r7, #20
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr
 800b112:	bf00      	nop
 800b114:	0800c030 	.word	0x0800c030
 800b118:	0800c038 	.word	0x0800c038

0800b11c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b11c:	b084      	sub	sp, #16
 800b11e:	b580      	push	{r7, lr}
 800b120:	b084      	sub	sp, #16
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
 800b126:	f107 001c 	add.w	r0, r7, #28
 800b12a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b130:	2b01      	cmp	r3, #1
 800b132:	d120      	bne.n	800b176 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b138:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	68da      	ldr	r2, [r3, #12]
 800b144:	4b2a      	ldr	r3, [pc, #168]	; (800b1f0 <USB_CoreInit+0xd4>)
 800b146:	4013      	ands	r3, r2
 800b148:	687a      	ldr	r2, [r7, #4]
 800b14a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	68db      	ldr	r3, [r3, #12]
 800b150:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d105      	bne.n	800b16a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	68db      	ldr	r3, [r3, #12]
 800b162:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 faa8 	bl	800b6c0 <USB_CoreReset>
 800b170:	4603      	mov	r3, r0
 800b172:	73fb      	strb	r3, [r7, #15]
 800b174:	e01a      	b.n	800b1ac <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	68db      	ldr	r3, [r3, #12]
 800b17a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 fa9c 	bl	800b6c0 <USB_CoreReset>
 800b188:	4603      	mov	r3, r0
 800b18a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b18c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d106      	bne.n	800b1a0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b196:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	639a      	str	r2, [r3, #56]	; 0x38
 800b19e:	e005      	b.n	800b1ac <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ae:	2b01      	cmp	r3, #1
 800b1b0:	d116      	bne.n	800b1e0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1b6:	b29a      	uxth	r2, r3
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b1c0:	4b0c      	ldr	r3, [pc, #48]	; (800b1f4 <USB_CoreInit+0xd8>)
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	689b      	ldr	r3, [r3, #8]
 800b1cc:	f043 0206 	orr.w	r2, r3, #6
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	689b      	ldr	r3, [r3, #8]
 800b1d8:	f043 0220 	orr.w	r2, r3, #32
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b1ec:	b004      	add	sp, #16
 800b1ee:	4770      	bx	lr
 800b1f0:	ffbdffbf 	.word	0xffbdffbf
 800b1f4:	03ee0000 	.word	0x03ee0000

0800b1f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b083      	sub	sp, #12
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	689b      	ldr	r3, [r3, #8]
 800b204:	f023 0201 	bic.w	r2, r3, #1
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b20c:	2300      	movs	r3, #0
}
 800b20e:	4618      	mov	r0, r3
 800b210:	370c      	adds	r7, #12
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr

0800b21a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b21a:	b580      	push	{r7, lr}
 800b21c:	b084      	sub	sp, #16
 800b21e:	af00      	add	r7, sp, #0
 800b220:	6078      	str	r0, [r7, #4]
 800b222:	460b      	mov	r3, r1
 800b224:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b226:	2300      	movs	r3, #0
 800b228:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	68db      	ldr	r3, [r3, #12]
 800b22e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b236:	78fb      	ldrb	r3, [r7, #3]
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d115      	bne.n	800b268 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b248:	2001      	movs	r0, #1
 800b24a:	f7f7 facb 	bl	80027e4 <HAL_Delay>
      ms++;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	3301      	adds	r3, #1
 800b252:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 fa25 	bl	800b6a4 <USB_GetMode>
 800b25a:	4603      	mov	r3, r0
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d01e      	beq.n	800b29e <USB_SetCurrentMode+0x84>
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2b31      	cmp	r3, #49	; 0x31
 800b264:	d9f0      	bls.n	800b248 <USB_SetCurrentMode+0x2e>
 800b266:	e01a      	b.n	800b29e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b268:	78fb      	ldrb	r3, [r7, #3]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d115      	bne.n	800b29a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b27a:	2001      	movs	r0, #1
 800b27c:	f7f7 fab2 	bl	80027e4 <HAL_Delay>
      ms++;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	3301      	adds	r3, #1
 800b284:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 fa0c 	bl	800b6a4 <USB_GetMode>
 800b28c:	4603      	mov	r3, r0
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d005      	beq.n	800b29e <USB_SetCurrentMode+0x84>
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	2b31      	cmp	r3, #49	; 0x31
 800b296:	d9f0      	bls.n	800b27a <USB_SetCurrentMode+0x60>
 800b298:	e001      	b.n	800b29e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b29a:	2301      	movs	r3, #1
 800b29c:	e005      	b.n	800b2aa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2b32      	cmp	r3, #50	; 0x32
 800b2a2:	d101      	bne.n	800b2a8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	e000      	b.n	800b2aa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b2a8:	2300      	movs	r3, #0
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3710      	adds	r7, #16
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
	...

0800b2b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b2b4:	b084      	sub	sp, #16
 800b2b6:	b580      	push	{r7, lr}
 800b2b8:	b086      	sub	sp, #24
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	6078      	str	r0, [r7, #4]
 800b2be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b2c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	613b      	str	r3, [r7, #16]
 800b2d2:	e009      	b.n	800b2e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	3340      	adds	r3, #64	; 0x40
 800b2da:	009b      	lsls	r3, r3, #2
 800b2dc:	4413      	add	r3, r2
 800b2de:	2200      	movs	r2, #0
 800b2e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	613b      	str	r3, [r7, #16]
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	2b0e      	cmp	r3, #14
 800b2ec:	d9f2      	bls.n	800b2d4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b2ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d11c      	bne.n	800b32e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	68fa      	ldr	r2, [r7, #12]
 800b2fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b302:	f043 0302 	orr.w	r3, r3, #2
 800b306:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b30c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	601a      	str	r2, [r3, #0]
 800b32c:	e005      	b.n	800b33a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b332:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b340:	461a      	mov	r2, r3
 800b342:	2300      	movs	r3, #0
 800b344:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b34c:	4619      	mov	r1, r3
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b354:	461a      	mov	r2, r3
 800b356:	680b      	ldr	r3, [r1, #0]
 800b358:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d10c      	bne.n	800b37a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b362:	2b00      	cmp	r3, #0
 800b364:	d104      	bne.n	800b370 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b366:	2100      	movs	r1, #0
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f000 f961 	bl	800b630 <USB_SetDevSpeed>
 800b36e:	e008      	b.n	800b382 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b370:	2101      	movs	r1, #1
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f000 f95c 	bl	800b630 <USB_SetDevSpeed>
 800b378:	e003      	b.n	800b382 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b37a:	2103      	movs	r1, #3
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f000 f957 	bl	800b630 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b382:	2110      	movs	r1, #16
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f000 f8f3 	bl	800b570 <USB_FlushTxFifo>
 800b38a:	4603      	mov	r3, r0
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d001      	beq.n	800b394 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b390:	2301      	movs	r3, #1
 800b392:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f000 f91d 	bl	800b5d4 <USB_FlushRxFifo>
 800b39a:	4603      	mov	r3, r0
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d001      	beq.n	800b3a4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3b6:	461a      	mov	r2, r3
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	613b      	str	r3, [r7, #16]
 800b3cc:	e043      	b.n	800b456 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	015a      	lsls	r2, r3, #5
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	4413      	add	r3, r2
 800b3d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b3e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b3e4:	d118      	bne.n	800b418 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d10a      	bne.n	800b402 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	015a      	lsls	r2, r3, #5
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	4413      	add	r3, r2
 800b3f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b3fe:	6013      	str	r3, [r2, #0]
 800b400:	e013      	b.n	800b42a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	015a      	lsls	r2, r3, #5
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	4413      	add	r3, r2
 800b40a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b40e:	461a      	mov	r2, r3
 800b410:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b414:	6013      	str	r3, [r2, #0]
 800b416:	e008      	b.n	800b42a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	015a      	lsls	r2, r3, #5
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	4413      	add	r3, r2
 800b420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b424:	461a      	mov	r2, r3
 800b426:	2300      	movs	r3, #0
 800b428:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	015a      	lsls	r2, r3, #5
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	4413      	add	r3, r2
 800b432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b436:	461a      	mov	r2, r3
 800b438:	2300      	movs	r3, #0
 800b43a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	015a      	lsls	r2, r3, #5
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	4413      	add	r3, r2
 800b444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b448:	461a      	mov	r2, r3
 800b44a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b44e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	3301      	adds	r3, #1
 800b454:	613b      	str	r3, [r7, #16]
 800b456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b458:	693a      	ldr	r2, [r7, #16]
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d3b7      	bcc.n	800b3ce <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b45e:	2300      	movs	r3, #0
 800b460:	613b      	str	r3, [r7, #16]
 800b462:	e043      	b.n	800b4ec <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	015a      	lsls	r2, r3, #5
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	4413      	add	r3, r2
 800b46c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b476:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b47a:	d118      	bne.n	800b4ae <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d10a      	bne.n	800b498 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	015a      	lsls	r2, r3, #5
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	4413      	add	r3, r2
 800b48a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b48e:	461a      	mov	r2, r3
 800b490:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b494:	6013      	str	r3, [r2, #0]
 800b496:	e013      	b.n	800b4c0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	015a      	lsls	r2, r3, #5
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	4413      	add	r3, r2
 800b4a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b4aa:	6013      	str	r3, [r2, #0]
 800b4ac:	e008      	b.n	800b4c0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	015a      	lsls	r2, r3, #5
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	4413      	add	r3, r2
 800b4b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	2300      	movs	r3, #0
 800b4be:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	015a      	lsls	r2, r3, #5
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	4413      	add	r3, r2
 800b4c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4cc:	461a      	mov	r2, r3
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	015a      	lsls	r2, r3, #5
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	4413      	add	r3, r2
 800b4da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4de:	461a      	mov	r2, r3
 800b4e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b4e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	613b      	str	r3, [r7, #16]
 800b4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ee:	693a      	ldr	r2, [r7, #16]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d3b7      	bcc.n	800b464 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4fa:	691b      	ldr	r3, [r3, #16]
 800b4fc:	68fa      	ldr	r2, [r7, #12]
 800b4fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b502:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b506:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2200      	movs	r2, #0
 800b50c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b514:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d105      	bne.n	800b528 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	699b      	ldr	r3, [r3, #24]
 800b520:	f043 0210 	orr.w	r2, r3, #16
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	699a      	ldr	r2, [r3, #24]
 800b52c:	4b0e      	ldr	r3, [pc, #56]	; (800b568 <USB_DevInit+0x2b4>)
 800b52e:	4313      	orrs	r3, r2
 800b530:	687a      	ldr	r2, [r7, #4]
 800b532:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b536:	2b00      	cmp	r3, #0
 800b538:	d005      	beq.n	800b546 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	699b      	ldr	r3, [r3, #24]
 800b53e:	f043 0208 	orr.w	r2, r3, #8
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d105      	bne.n	800b558 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	699a      	ldr	r2, [r3, #24]
 800b550:	4b06      	ldr	r3, [pc, #24]	; (800b56c <USB_DevInit+0x2b8>)
 800b552:	4313      	orrs	r3, r2
 800b554:	687a      	ldr	r2, [r7, #4]
 800b556:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b558:	7dfb      	ldrb	r3, [r7, #23]
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3718      	adds	r7, #24
 800b55e:	46bd      	mov	sp, r7
 800b560:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b564:	b004      	add	sp, #16
 800b566:	4770      	bx	lr
 800b568:	803c3800 	.word	0x803c3800
 800b56c:	40000004 	.word	0x40000004

0800b570 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b570:	b480      	push	{r7}
 800b572:	b085      	sub	sp, #20
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b57a:	2300      	movs	r3, #0
 800b57c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	3301      	adds	r3, #1
 800b582:	60fb      	str	r3, [r7, #12]
 800b584:	4a12      	ldr	r2, [pc, #72]	; (800b5d0 <USB_FlushTxFifo+0x60>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d901      	bls.n	800b58e <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b58a:	2303      	movs	r3, #3
 800b58c:	e01a      	b.n	800b5c4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	691b      	ldr	r3, [r3, #16]
 800b592:	2b00      	cmp	r3, #0
 800b594:	daf3      	bge.n	800b57e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b596:	2300      	movs	r3, #0
 800b598:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	019b      	lsls	r3, r3, #6
 800b59e:	f043 0220 	orr.w	r2, r3, #32
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	60fb      	str	r3, [r7, #12]
 800b5ac:	4a08      	ldr	r2, [pc, #32]	; (800b5d0 <USB_FlushTxFifo+0x60>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d901      	bls.n	800b5b6 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800b5b2:	2303      	movs	r3, #3
 800b5b4:	e006      	b.n	800b5c4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	691b      	ldr	r3, [r3, #16]
 800b5ba:	f003 0320 	and.w	r3, r3, #32
 800b5be:	2b20      	cmp	r3, #32
 800b5c0:	d0f1      	beq.n	800b5a6 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800b5c2:	2300      	movs	r3, #0
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3714      	adds	r7, #20
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr
 800b5d0:	00030d40 	.word	0x00030d40

0800b5d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b085      	sub	sp, #20
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	60fb      	str	r3, [r7, #12]
 800b5e6:	4a11      	ldr	r2, [pc, #68]	; (800b62c <USB_FlushRxFifo+0x58>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d901      	bls.n	800b5f0 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800b5ec:	2303      	movs	r3, #3
 800b5ee:	e017      	b.n	800b620 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	691b      	ldr	r3, [r3, #16]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	daf3      	bge.n	800b5e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2210      	movs	r2, #16
 800b600:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	3301      	adds	r3, #1
 800b606:	60fb      	str	r3, [r7, #12]
 800b608:	4a08      	ldr	r2, [pc, #32]	; (800b62c <USB_FlushRxFifo+0x58>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d901      	bls.n	800b612 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800b60e:	2303      	movs	r3, #3
 800b610:	e006      	b.n	800b620 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	691b      	ldr	r3, [r3, #16]
 800b616:	f003 0310 	and.w	r3, r3, #16
 800b61a:	2b10      	cmp	r3, #16
 800b61c:	d0f1      	beq.n	800b602 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800b61e:	2300      	movs	r3, #0
}
 800b620:	4618      	mov	r0, r3
 800b622:	3714      	adds	r7, #20
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr
 800b62c:	00030d40 	.word	0x00030d40

0800b630 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b630:	b480      	push	{r7}
 800b632:	b085      	sub	sp, #20
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	460b      	mov	r3, r1
 800b63a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b646:	681a      	ldr	r2, [r3, #0]
 800b648:	78fb      	ldrb	r3, [r7, #3]
 800b64a:	68f9      	ldr	r1, [r7, #12]
 800b64c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b650:	4313      	orrs	r3, r2
 800b652:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b654:	2300      	movs	r3, #0
}
 800b656:	4618      	mov	r0, r3
 800b658:	3714      	adds	r7, #20
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr

0800b662 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b662:	b480      	push	{r7}
 800b664:	b085      	sub	sp, #20
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	68fa      	ldr	r2, [r7, #12]
 800b678:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b67c:	f023 0303 	bic.w	r3, r3, #3
 800b680:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b688:	685b      	ldr	r3, [r3, #4]
 800b68a:	68fa      	ldr	r2, [r7, #12]
 800b68c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b690:	f043 0302 	orr.w	r3, r3, #2
 800b694:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b696:	2300      	movs	r3, #0
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3714      	adds	r7, #20
 800b69c:	46bd      	mov	sp, r7
 800b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a2:	4770      	bx	lr

0800b6a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b083      	sub	sp, #12
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	695b      	ldr	r3, [r3, #20]
 800b6b0:	f003 0301 	and.w	r3, r3, #1
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	370c      	adds	r7, #12
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6be:	4770      	bx	lr

0800b6c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b085      	sub	sp, #20
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	60fb      	str	r3, [r7, #12]
 800b6d2:	4a13      	ldr	r2, [pc, #76]	; (800b720 <USB_CoreReset+0x60>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d901      	bls.n	800b6dc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800b6d8:	2303      	movs	r3, #3
 800b6da:	e01a      	b.n	800b712 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	691b      	ldr	r3, [r3, #16]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	daf3      	bge.n	800b6cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	691b      	ldr	r3, [r3, #16]
 800b6ec:	f043 0201 	orr.w	r2, r3, #1
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	60fb      	str	r3, [r7, #12]
 800b6fa:	4a09      	ldr	r2, [pc, #36]	; (800b720 <USB_CoreReset+0x60>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d901      	bls.n	800b704 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800b700:	2303      	movs	r3, #3
 800b702:	e006      	b.n	800b712 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	691b      	ldr	r3, [r3, #16]
 800b708:	f003 0301 	and.w	r3, r3, #1
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	d0f1      	beq.n	800b6f4 <USB_CoreReset+0x34>

  return HAL_OK;
 800b710:	2300      	movs	r3, #0
}
 800b712:	4618      	mov	r0, r3
 800b714:	3714      	adds	r7, #20
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr
 800b71e:	bf00      	nop
 800b720:	00030d40 	.word	0x00030d40

0800b724 <__errno>:
 800b724:	4b01      	ldr	r3, [pc, #4]	; (800b72c <__errno+0x8>)
 800b726:	6818      	ldr	r0, [r3, #0]
 800b728:	4770      	bx	lr
 800b72a:	bf00      	nop
 800b72c:	24038424 	.word	0x24038424

0800b730 <__libc_init_array>:
 800b730:	b570      	push	{r4, r5, r6, lr}
 800b732:	4d0d      	ldr	r5, [pc, #52]	; (800b768 <__libc_init_array+0x38>)
 800b734:	4c0d      	ldr	r4, [pc, #52]	; (800b76c <__libc_init_array+0x3c>)
 800b736:	1b64      	subs	r4, r4, r5
 800b738:	10a4      	asrs	r4, r4, #2
 800b73a:	2600      	movs	r6, #0
 800b73c:	42a6      	cmp	r6, r4
 800b73e:	d109      	bne.n	800b754 <__libc_init_array+0x24>
 800b740:	4d0b      	ldr	r5, [pc, #44]	; (800b770 <__libc_init_array+0x40>)
 800b742:	4c0c      	ldr	r4, [pc, #48]	; (800b774 <__libc_init_array+0x44>)
 800b744:	f000 fc4e 	bl	800bfe4 <_init>
 800b748:	1b64      	subs	r4, r4, r5
 800b74a:	10a4      	asrs	r4, r4, #2
 800b74c:	2600      	movs	r6, #0
 800b74e:	42a6      	cmp	r6, r4
 800b750:	d105      	bne.n	800b75e <__libc_init_array+0x2e>
 800b752:	bd70      	pop	{r4, r5, r6, pc}
 800b754:	f855 3b04 	ldr.w	r3, [r5], #4
 800b758:	4798      	blx	r3
 800b75a:	3601      	adds	r6, #1
 800b75c:	e7ee      	b.n	800b73c <__libc_init_array+0xc>
 800b75e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b762:	4798      	blx	r3
 800b764:	3601      	adds	r6, #1
 800b766:	e7f2      	b.n	800b74e <__libc_init_array+0x1e>
 800b768:	0800c07c 	.word	0x0800c07c
 800b76c:	0800c07c 	.word	0x0800c07c
 800b770:	0800c07c 	.word	0x0800c07c
 800b774:	0800c080 	.word	0x0800c080

0800b778 <memset>:
 800b778:	4402      	add	r2, r0
 800b77a:	4603      	mov	r3, r0
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d100      	bne.n	800b782 <memset+0xa>
 800b780:	4770      	bx	lr
 800b782:	f803 1b01 	strb.w	r1, [r3], #1
 800b786:	e7f9      	b.n	800b77c <memset+0x4>

0800b788 <siprintf>:
 800b788:	b40e      	push	{r1, r2, r3}
 800b78a:	b500      	push	{lr}
 800b78c:	b09c      	sub	sp, #112	; 0x70
 800b78e:	ab1d      	add	r3, sp, #116	; 0x74
 800b790:	9002      	str	r0, [sp, #8]
 800b792:	9006      	str	r0, [sp, #24]
 800b794:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b798:	4809      	ldr	r0, [pc, #36]	; (800b7c0 <siprintf+0x38>)
 800b79a:	9107      	str	r1, [sp, #28]
 800b79c:	9104      	str	r1, [sp, #16]
 800b79e:	4909      	ldr	r1, [pc, #36]	; (800b7c4 <siprintf+0x3c>)
 800b7a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7a4:	9105      	str	r1, [sp, #20]
 800b7a6:	6800      	ldr	r0, [r0, #0]
 800b7a8:	9301      	str	r3, [sp, #4]
 800b7aa:	a902      	add	r1, sp, #8
 800b7ac:	f000 f868 	bl	800b880 <_svfiprintf_r>
 800b7b0:	9b02      	ldr	r3, [sp, #8]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	701a      	strb	r2, [r3, #0]
 800b7b6:	b01c      	add	sp, #112	; 0x70
 800b7b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7bc:	b003      	add	sp, #12
 800b7be:	4770      	bx	lr
 800b7c0:	24038424 	.word	0x24038424
 800b7c4:	ffff0208 	.word	0xffff0208

0800b7c8 <__ssputs_r>:
 800b7c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7cc:	688e      	ldr	r6, [r1, #8]
 800b7ce:	429e      	cmp	r6, r3
 800b7d0:	4682      	mov	sl, r0
 800b7d2:	460c      	mov	r4, r1
 800b7d4:	4690      	mov	r8, r2
 800b7d6:	461f      	mov	r7, r3
 800b7d8:	d838      	bhi.n	800b84c <__ssputs_r+0x84>
 800b7da:	898a      	ldrh	r2, [r1, #12]
 800b7dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b7e0:	d032      	beq.n	800b848 <__ssputs_r+0x80>
 800b7e2:	6825      	ldr	r5, [r4, #0]
 800b7e4:	6909      	ldr	r1, [r1, #16]
 800b7e6:	eba5 0901 	sub.w	r9, r5, r1
 800b7ea:	6965      	ldr	r5, [r4, #20]
 800b7ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b7f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	444b      	add	r3, r9
 800b7f8:	106d      	asrs	r5, r5, #1
 800b7fa:	429d      	cmp	r5, r3
 800b7fc:	bf38      	it	cc
 800b7fe:	461d      	movcc	r5, r3
 800b800:	0553      	lsls	r3, r2, #21
 800b802:	d531      	bpl.n	800b868 <__ssputs_r+0xa0>
 800b804:	4629      	mov	r1, r5
 800b806:	f000 fb47 	bl	800be98 <_malloc_r>
 800b80a:	4606      	mov	r6, r0
 800b80c:	b950      	cbnz	r0, 800b824 <__ssputs_r+0x5c>
 800b80e:	230c      	movs	r3, #12
 800b810:	f8ca 3000 	str.w	r3, [sl]
 800b814:	89a3      	ldrh	r3, [r4, #12]
 800b816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b81a:	81a3      	strh	r3, [r4, #12]
 800b81c:	f04f 30ff 	mov.w	r0, #4294967295
 800b820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b824:	6921      	ldr	r1, [r4, #16]
 800b826:	464a      	mov	r2, r9
 800b828:	f000 fabe 	bl	800bda8 <memcpy>
 800b82c:	89a3      	ldrh	r3, [r4, #12]
 800b82e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b836:	81a3      	strh	r3, [r4, #12]
 800b838:	6126      	str	r6, [r4, #16]
 800b83a:	6165      	str	r5, [r4, #20]
 800b83c:	444e      	add	r6, r9
 800b83e:	eba5 0509 	sub.w	r5, r5, r9
 800b842:	6026      	str	r6, [r4, #0]
 800b844:	60a5      	str	r5, [r4, #8]
 800b846:	463e      	mov	r6, r7
 800b848:	42be      	cmp	r6, r7
 800b84a:	d900      	bls.n	800b84e <__ssputs_r+0x86>
 800b84c:	463e      	mov	r6, r7
 800b84e:	4632      	mov	r2, r6
 800b850:	6820      	ldr	r0, [r4, #0]
 800b852:	4641      	mov	r1, r8
 800b854:	f000 fab6 	bl	800bdc4 <memmove>
 800b858:	68a3      	ldr	r3, [r4, #8]
 800b85a:	6822      	ldr	r2, [r4, #0]
 800b85c:	1b9b      	subs	r3, r3, r6
 800b85e:	4432      	add	r2, r6
 800b860:	60a3      	str	r3, [r4, #8]
 800b862:	6022      	str	r2, [r4, #0]
 800b864:	2000      	movs	r0, #0
 800b866:	e7db      	b.n	800b820 <__ssputs_r+0x58>
 800b868:	462a      	mov	r2, r5
 800b86a:	f000 fb6f 	bl	800bf4c <_realloc_r>
 800b86e:	4606      	mov	r6, r0
 800b870:	2800      	cmp	r0, #0
 800b872:	d1e1      	bne.n	800b838 <__ssputs_r+0x70>
 800b874:	6921      	ldr	r1, [r4, #16]
 800b876:	4650      	mov	r0, sl
 800b878:	f000 fabe 	bl	800bdf8 <_free_r>
 800b87c:	e7c7      	b.n	800b80e <__ssputs_r+0x46>
	...

0800b880 <_svfiprintf_r>:
 800b880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b884:	4698      	mov	r8, r3
 800b886:	898b      	ldrh	r3, [r1, #12]
 800b888:	061b      	lsls	r3, r3, #24
 800b88a:	b09d      	sub	sp, #116	; 0x74
 800b88c:	4607      	mov	r7, r0
 800b88e:	460d      	mov	r5, r1
 800b890:	4614      	mov	r4, r2
 800b892:	d50e      	bpl.n	800b8b2 <_svfiprintf_r+0x32>
 800b894:	690b      	ldr	r3, [r1, #16]
 800b896:	b963      	cbnz	r3, 800b8b2 <_svfiprintf_r+0x32>
 800b898:	2140      	movs	r1, #64	; 0x40
 800b89a:	f000 fafd 	bl	800be98 <_malloc_r>
 800b89e:	6028      	str	r0, [r5, #0]
 800b8a0:	6128      	str	r0, [r5, #16]
 800b8a2:	b920      	cbnz	r0, 800b8ae <_svfiprintf_r+0x2e>
 800b8a4:	230c      	movs	r3, #12
 800b8a6:	603b      	str	r3, [r7, #0]
 800b8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ac:	e0d1      	b.n	800ba52 <_svfiprintf_r+0x1d2>
 800b8ae:	2340      	movs	r3, #64	; 0x40
 800b8b0:	616b      	str	r3, [r5, #20]
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	9309      	str	r3, [sp, #36]	; 0x24
 800b8b6:	2320      	movs	r3, #32
 800b8b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8c0:	2330      	movs	r3, #48	; 0x30
 800b8c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ba6c <_svfiprintf_r+0x1ec>
 800b8c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8ca:	f04f 0901 	mov.w	r9, #1
 800b8ce:	4623      	mov	r3, r4
 800b8d0:	469a      	mov	sl, r3
 800b8d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8d6:	b10a      	cbz	r2, 800b8dc <_svfiprintf_r+0x5c>
 800b8d8:	2a25      	cmp	r2, #37	; 0x25
 800b8da:	d1f9      	bne.n	800b8d0 <_svfiprintf_r+0x50>
 800b8dc:	ebba 0b04 	subs.w	fp, sl, r4
 800b8e0:	d00b      	beq.n	800b8fa <_svfiprintf_r+0x7a>
 800b8e2:	465b      	mov	r3, fp
 800b8e4:	4622      	mov	r2, r4
 800b8e6:	4629      	mov	r1, r5
 800b8e8:	4638      	mov	r0, r7
 800b8ea:	f7ff ff6d 	bl	800b7c8 <__ssputs_r>
 800b8ee:	3001      	adds	r0, #1
 800b8f0:	f000 80aa 	beq.w	800ba48 <_svfiprintf_r+0x1c8>
 800b8f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8f6:	445a      	add	r2, fp
 800b8f8:	9209      	str	r2, [sp, #36]	; 0x24
 800b8fa:	f89a 3000 	ldrb.w	r3, [sl]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	f000 80a2 	beq.w	800ba48 <_svfiprintf_r+0x1c8>
 800b904:	2300      	movs	r3, #0
 800b906:	f04f 32ff 	mov.w	r2, #4294967295
 800b90a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b90e:	f10a 0a01 	add.w	sl, sl, #1
 800b912:	9304      	str	r3, [sp, #16]
 800b914:	9307      	str	r3, [sp, #28]
 800b916:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b91a:	931a      	str	r3, [sp, #104]	; 0x68
 800b91c:	4654      	mov	r4, sl
 800b91e:	2205      	movs	r2, #5
 800b920:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b924:	4851      	ldr	r0, [pc, #324]	; (800ba6c <_svfiprintf_r+0x1ec>)
 800b926:	f7f4 fcdb 	bl	80002e0 <memchr>
 800b92a:	9a04      	ldr	r2, [sp, #16]
 800b92c:	b9d8      	cbnz	r0, 800b966 <_svfiprintf_r+0xe6>
 800b92e:	06d0      	lsls	r0, r2, #27
 800b930:	bf44      	itt	mi
 800b932:	2320      	movmi	r3, #32
 800b934:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b938:	0711      	lsls	r1, r2, #28
 800b93a:	bf44      	itt	mi
 800b93c:	232b      	movmi	r3, #43	; 0x2b
 800b93e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b942:	f89a 3000 	ldrb.w	r3, [sl]
 800b946:	2b2a      	cmp	r3, #42	; 0x2a
 800b948:	d015      	beq.n	800b976 <_svfiprintf_r+0xf6>
 800b94a:	9a07      	ldr	r2, [sp, #28]
 800b94c:	4654      	mov	r4, sl
 800b94e:	2000      	movs	r0, #0
 800b950:	f04f 0c0a 	mov.w	ip, #10
 800b954:	4621      	mov	r1, r4
 800b956:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b95a:	3b30      	subs	r3, #48	; 0x30
 800b95c:	2b09      	cmp	r3, #9
 800b95e:	d94e      	bls.n	800b9fe <_svfiprintf_r+0x17e>
 800b960:	b1b0      	cbz	r0, 800b990 <_svfiprintf_r+0x110>
 800b962:	9207      	str	r2, [sp, #28]
 800b964:	e014      	b.n	800b990 <_svfiprintf_r+0x110>
 800b966:	eba0 0308 	sub.w	r3, r0, r8
 800b96a:	fa09 f303 	lsl.w	r3, r9, r3
 800b96e:	4313      	orrs	r3, r2
 800b970:	9304      	str	r3, [sp, #16]
 800b972:	46a2      	mov	sl, r4
 800b974:	e7d2      	b.n	800b91c <_svfiprintf_r+0x9c>
 800b976:	9b03      	ldr	r3, [sp, #12]
 800b978:	1d19      	adds	r1, r3, #4
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	9103      	str	r1, [sp, #12]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	bfbb      	ittet	lt
 800b982:	425b      	neglt	r3, r3
 800b984:	f042 0202 	orrlt.w	r2, r2, #2
 800b988:	9307      	strge	r3, [sp, #28]
 800b98a:	9307      	strlt	r3, [sp, #28]
 800b98c:	bfb8      	it	lt
 800b98e:	9204      	strlt	r2, [sp, #16]
 800b990:	7823      	ldrb	r3, [r4, #0]
 800b992:	2b2e      	cmp	r3, #46	; 0x2e
 800b994:	d10c      	bne.n	800b9b0 <_svfiprintf_r+0x130>
 800b996:	7863      	ldrb	r3, [r4, #1]
 800b998:	2b2a      	cmp	r3, #42	; 0x2a
 800b99a:	d135      	bne.n	800ba08 <_svfiprintf_r+0x188>
 800b99c:	9b03      	ldr	r3, [sp, #12]
 800b99e:	1d1a      	adds	r2, r3, #4
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	9203      	str	r2, [sp, #12]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	bfb8      	it	lt
 800b9a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9ac:	3402      	adds	r4, #2
 800b9ae:	9305      	str	r3, [sp, #20]
 800b9b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ba7c <_svfiprintf_r+0x1fc>
 800b9b4:	7821      	ldrb	r1, [r4, #0]
 800b9b6:	2203      	movs	r2, #3
 800b9b8:	4650      	mov	r0, sl
 800b9ba:	f7f4 fc91 	bl	80002e0 <memchr>
 800b9be:	b140      	cbz	r0, 800b9d2 <_svfiprintf_r+0x152>
 800b9c0:	2340      	movs	r3, #64	; 0x40
 800b9c2:	eba0 000a 	sub.w	r0, r0, sl
 800b9c6:	fa03 f000 	lsl.w	r0, r3, r0
 800b9ca:	9b04      	ldr	r3, [sp, #16]
 800b9cc:	4303      	orrs	r3, r0
 800b9ce:	3401      	adds	r4, #1
 800b9d0:	9304      	str	r3, [sp, #16]
 800b9d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9d6:	4826      	ldr	r0, [pc, #152]	; (800ba70 <_svfiprintf_r+0x1f0>)
 800b9d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9dc:	2206      	movs	r2, #6
 800b9de:	f7f4 fc7f 	bl	80002e0 <memchr>
 800b9e2:	2800      	cmp	r0, #0
 800b9e4:	d038      	beq.n	800ba58 <_svfiprintf_r+0x1d8>
 800b9e6:	4b23      	ldr	r3, [pc, #140]	; (800ba74 <_svfiprintf_r+0x1f4>)
 800b9e8:	bb1b      	cbnz	r3, 800ba32 <_svfiprintf_r+0x1b2>
 800b9ea:	9b03      	ldr	r3, [sp, #12]
 800b9ec:	3307      	adds	r3, #7
 800b9ee:	f023 0307 	bic.w	r3, r3, #7
 800b9f2:	3308      	adds	r3, #8
 800b9f4:	9303      	str	r3, [sp, #12]
 800b9f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9f8:	4433      	add	r3, r6
 800b9fa:	9309      	str	r3, [sp, #36]	; 0x24
 800b9fc:	e767      	b.n	800b8ce <_svfiprintf_r+0x4e>
 800b9fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba02:	460c      	mov	r4, r1
 800ba04:	2001      	movs	r0, #1
 800ba06:	e7a5      	b.n	800b954 <_svfiprintf_r+0xd4>
 800ba08:	2300      	movs	r3, #0
 800ba0a:	3401      	adds	r4, #1
 800ba0c:	9305      	str	r3, [sp, #20]
 800ba0e:	4619      	mov	r1, r3
 800ba10:	f04f 0c0a 	mov.w	ip, #10
 800ba14:	4620      	mov	r0, r4
 800ba16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba1a:	3a30      	subs	r2, #48	; 0x30
 800ba1c:	2a09      	cmp	r2, #9
 800ba1e:	d903      	bls.n	800ba28 <_svfiprintf_r+0x1a8>
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d0c5      	beq.n	800b9b0 <_svfiprintf_r+0x130>
 800ba24:	9105      	str	r1, [sp, #20]
 800ba26:	e7c3      	b.n	800b9b0 <_svfiprintf_r+0x130>
 800ba28:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba2c:	4604      	mov	r4, r0
 800ba2e:	2301      	movs	r3, #1
 800ba30:	e7f0      	b.n	800ba14 <_svfiprintf_r+0x194>
 800ba32:	ab03      	add	r3, sp, #12
 800ba34:	9300      	str	r3, [sp, #0]
 800ba36:	462a      	mov	r2, r5
 800ba38:	4b0f      	ldr	r3, [pc, #60]	; (800ba78 <_svfiprintf_r+0x1f8>)
 800ba3a:	a904      	add	r1, sp, #16
 800ba3c:	4638      	mov	r0, r7
 800ba3e:	f3af 8000 	nop.w
 800ba42:	1c42      	adds	r2, r0, #1
 800ba44:	4606      	mov	r6, r0
 800ba46:	d1d6      	bne.n	800b9f6 <_svfiprintf_r+0x176>
 800ba48:	89ab      	ldrh	r3, [r5, #12]
 800ba4a:	065b      	lsls	r3, r3, #25
 800ba4c:	f53f af2c 	bmi.w	800b8a8 <_svfiprintf_r+0x28>
 800ba50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba52:	b01d      	add	sp, #116	; 0x74
 800ba54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba58:	ab03      	add	r3, sp, #12
 800ba5a:	9300      	str	r3, [sp, #0]
 800ba5c:	462a      	mov	r2, r5
 800ba5e:	4b06      	ldr	r3, [pc, #24]	; (800ba78 <_svfiprintf_r+0x1f8>)
 800ba60:	a904      	add	r1, sp, #16
 800ba62:	4638      	mov	r0, r7
 800ba64:	f000 f87a 	bl	800bb5c <_printf_i>
 800ba68:	e7eb      	b.n	800ba42 <_svfiprintf_r+0x1c2>
 800ba6a:	bf00      	nop
 800ba6c:	0800c040 	.word	0x0800c040
 800ba70:	0800c04a 	.word	0x0800c04a
 800ba74:	00000000 	.word	0x00000000
 800ba78:	0800b7c9 	.word	0x0800b7c9
 800ba7c:	0800c046 	.word	0x0800c046

0800ba80 <_printf_common>:
 800ba80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba84:	4616      	mov	r6, r2
 800ba86:	4699      	mov	r9, r3
 800ba88:	688a      	ldr	r2, [r1, #8]
 800ba8a:	690b      	ldr	r3, [r1, #16]
 800ba8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba90:	4293      	cmp	r3, r2
 800ba92:	bfb8      	it	lt
 800ba94:	4613      	movlt	r3, r2
 800ba96:	6033      	str	r3, [r6, #0]
 800ba98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba9c:	4607      	mov	r7, r0
 800ba9e:	460c      	mov	r4, r1
 800baa0:	b10a      	cbz	r2, 800baa6 <_printf_common+0x26>
 800baa2:	3301      	adds	r3, #1
 800baa4:	6033      	str	r3, [r6, #0]
 800baa6:	6823      	ldr	r3, [r4, #0]
 800baa8:	0699      	lsls	r1, r3, #26
 800baaa:	bf42      	ittt	mi
 800baac:	6833      	ldrmi	r3, [r6, #0]
 800baae:	3302      	addmi	r3, #2
 800bab0:	6033      	strmi	r3, [r6, #0]
 800bab2:	6825      	ldr	r5, [r4, #0]
 800bab4:	f015 0506 	ands.w	r5, r5, #6
 800bab8:	d106      	bne.n	800bac8 <_printf_common+0x48>
 800baba:	f104 0a19 	add.w	sl, r4, #25
 800babe:	68e3      	ldr	r3, [r4, #12]
 800bac0:	6832      	ldr	r2, [r6, #0]
 800bac2:	1a9b      	subs	r3, r3, r2
 800bac4:	42ab      	cmp	r3, r5
 800bac6:	dc26      	bgt.n	800bb16 <_printf_common+0x96>
 800bac8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bacc:	1e13      	subs	r3, r2, #0
 800bace:	6822      	ldr	r2, [r4, #0]
 800bad0:	bf18      	it	ne
 800bad2:	2301      	movne	r3, #1
 800bad4:	0692      	lsls	r2, r2, #26
 800bad6:	d42b      	bmi.n	800bb30 <_printf_common+0xb0>
 800bad8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800badc:	4649      	mov	r1, r9
 800bade:	4638      	mov	r0, r7
 800bae0:	47c0      	blx	r8
 800bae2:	3001      	adds	r0, #1
 800bae4:	d01e      	beq.n	800bb24 <_printf_common+0xa4>
 800bae6:	6823      	ldr	r3, [r4, #0]
 800bae8:	68e5      	ldr	r5, [r4, #12]
 800baea:	6832      	ldr	r2, [r6, #0]
 800baec:	f003 0306 	and.w	r3, r3, #6
 800baf0:	2b04      	cmp	r3, #4
 800baf2:	bf08      	it	eq
 800baf4:	1aad      	subeq	r5, r5, r2
 800baf6:	68a3      	ldr	r3, [r4, #8]
 800baf8:	6922      	ldr	r2, [r4, #16]
 800bafa:	bf0c      	ite	eq
 800bafc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb00:	2500      	movne	r5, #0
 800bb02:	4293      	cmp	r3, r2
 800bb04:	bfc4      	itt	gt
 800bb06:	1a9b      	subgt	r3, r3, r2
 800bb08:	18ed      	addgt	r5, r5, r3
 800bb0a:	2600      	movs	r6, #0
 800bb0c:	341a      	adds	r4, #26
 800bb0e:	42b5      	cmp	r5, r6
 800bb10:	d11a      	bne.n	800bb48 <_printf_common+0xc8>
 800bb12:	2000      	movs	r0, #0
 800bb14:	e008      	b.n	800bb28 <_printf_common+0xa8>
 800bb16:	2301      	movs	r3, #1
 800bb18:	4652      	mov	r2, sl
 800bb1a:	4649      	mov	r1, r9
 800bb1c:	4638      	mov	r0, r7
 800bb1e:	47c0      	blx	r8
 800bb20:	3001      	adds	r0, #1
 800bb22:	d103      	bne.n	800bb2c <_printf_common+0xac>
 800bb24:	f04f 30ff 	mov.w	r0, #4294967295
 800bb28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb2c:	3501      	adds	r5, #1
 800bb2e:	e7c6      	b.n	800babe <_printf_common+0x3e>
 800bb30:	18e1      	adds	r1, r4, r3
 800bb32:	1c5a      	adds	r2, r3, #1
 800bb34:	2030      	movs	r0, #48	; 0x30
 800bb36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb3a:	4422      	add	r2, r4
 800bb3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb44:	3302      	adds	r3, #2
 800bb46:	e7c7      	b.n	800bad8 <_printf_common+0x58>
 800bb48:	2301      	movs	r3, #1
 800bb4a:	4622      	mov	r2, r4
 800bb4c:	4649      	mov	r1, r9
 800bb4e:	4638      	mov	r0, r7
 800bb50:	47c0      	blx	r8
 800bb52:	3001      	adds	r0, #1
 800bb54:	d0e6      	beq.n	800bb24 <_printf_common+0xa4>
 800bb56:	3601      	adds	r6, #1
 800bb58:	e7d9      	b.n	800bb0e <_printf_common+0x8e>
	...

0800bb5c <_printf_i>:
 800bb5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb60:	460c      	mov	r4, r1
 800bb62:	4691      	mov	r9, r2
 800bb64:	7e27      	ldrb	r7, [r4, #24]
 800bb66:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bb68:	2f78      	cmp	r7, #120	; 0x78
 800bb6a:	4680      	mov	r8, r0
 800bb6c:	469a      	mov	sl, r3
 800bb6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb72:	d807      	bhi.n	800bb84 <_printf_i+0x28>
 800bb74:	2f62      	cmp	r7, #98	; 0x62
 800bb76:	d80a      	bhi.n	800bb8e <_printf_i+0x32>
 800bb78:	2f00      	cmp	r7, #0
 800bb7a:	f000 80d8 	beq.w	800bd2e <_printf_i+0x1d2>
 800bb7e:	2f58      	cmp	r7, #88	; 0x58
 800bb80:	f000 80a3 	beq.w	800bcca <_printf_i+0x16e>
 800bb84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bb88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb8c:	e03a      	b.n	800bc04 <_printf_i+0xa8>
 800bb8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb92:	2b15      	cmp	r3, #21
 800bb94:	d8f6      	bhi.n	800bb84 <_printf_i+0x28>
 800bb96:	a001      	add	r0, pc, #4	; (adr r0, 800bb9c <_printf_i+0x40>)
 800bb98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bb9c:	0800bbf5 	.word	0x0800bbf5
 800bba0:	0800bc09 	.word	0x0800bc09
 800bba4:	0800bb85 	.word	0x0800bb85
 800bba8:	0800bb85 	.word	0x0800bb85
 800bbac:	0800bb85 	.word	0x0800bb85
 800bbb0:	0800bb85 	.word	0x0800bb85
 800bbb4:	0800bc09 	.word	0x0800bc09
 800bbb8:	0800bb85 	.word	0x0800bb85
 800bbbc:	0800bb85 	.word	0x0800bb85
 800bbc0:	0800bb85 	.word	0x0800bb85
 800bbc4:	0800bb85 	.word	0x0800bb85
 800bbc8:	0800bd15 	.word	0x0800bd15
 800bbcc:	0800bc39 	.word	0x0800bc39
 800bbd0:	0800bcf7 	.word	0x0800bcf7
 800bbd4:	0800bb85 	.word	0x0800bb85
 800bbd8:	0800bb85 	.word	0x0800bb85
 800bbdc:	0800bd37 	.word	0x0800bd37
 800bbe0:	0800bb85 	.word	0x0800bb85
 800bbe4:	0800bc39 	.word	0x0800bc39
 800bbe8:	0800bb85 	.word	0x0800bb85
 800bbec:	0800bb85 	.word	0x0800bb85
 800bbf0:	0800bcff 	.word	0x0800bcff
 800bbf4:	680b      	ldr	r3, [r1, #0]
 800bbf6:	1d1a      	adds	r2, r3, #4
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	600a      	str	r2, [r1, #0]
 800bbfc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bc00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc04:	2301      	movs	r3, #1
 800bc06:	e0a3      	b.n	800bd50 <_printf_i+0x1f4>
 800bc08:	6825      	ldr	r5, [r4, #0]
 800bc0a:	6808      	ldr	r0, [r1, #0]
 800bc0c:	062e      	lsls	r6, r5, #24
 800bc0e:	f100 0304 	add.w	r3, r0, #4
 800bc12:	d50a      	bpl.n	800bc2a <_printf_i+0xce>
 800bc14:	6805      	ldr	r5, [r0, #0]
 800bc16:	600b      	str	r3, [r1, #0]
 800bc18:	2d00      	cmp	r5, #0
 800bc1a:	da03      	bge.n	800bc24 <_printf_i+0xc8>
 800bc1c:	232d      	movs	r3, #45	; 0x2d
 800bc1e:	426d      	negs	r5, r5
 800bc20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc24:	485e      	ldr	r0, [pc, #376]	; (800bda0 <_printf_i+0x244>)
 800bc26:	230a      	movs	r3, #10
 800bc28:	e019      	b.n	800bc5e <_printf_i+0x102>
 800bc2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bc2e:	6805      	ldr	r5, [r0, #0]
 800bc30:	600b      	str	r3, [r1, #0]
 800bc32:	bf18      	it	ne
 800bc34:	b22d      	sxthne	r5, r5
 800bc36:	e7ef      	b.n	800bc18 <_printf_i+0xbc>
 800bc38:	680b      	ldr	r3, [r1, #0]
 800bc3a:	6825      	ldr	r5, [r4, #0]
 800bc3c:	1d18      	adds	r0, r3, #4
 800bc3e:	6008      	str	r0, [r1, #0]
 800bc40:	0628      	lsls	r0, r5, #24
 800bc42:	d501      	bpl.n	800bc48 <_printf_i+0xec>
 800bc44:	681d      	ldr	r5, [r3, #0]
 800bc46:	e002      	b.n	800bc4e <_printf_i+0xf2>
 800bc48:	0669      	lsls	r1, r5, #25
 800bc4a:	d5fb      	bpl.n	800bc44 <_printf_i+0xe8>
 800bc4c:	881d      	ldrh	r5, [r3, #0]
 800bc4e:	4854      	ldr	r0, [pc, #336]	; (800bda0 <_printf_i+0x244>)
 800bc50:	2f6f      	cmp	r7, #111	; 0x6f
 800bc52:	bf0c      	ite	eq
 800bc54:	2308      	moveq	r3, #8
 800bc56:	230a      	movne	r3, #10
 800bc58:	2100      	movs	r1, #0
 800bc5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc5e:	6866      	ldr	r6, [r4, #4]
 800bc60:	60a6      	str	r6, [r4, #8]
 800bc62:	2e00      	cmp	r6, #0
 800bc64:	bfa2      	ittt	ge
 800bc66:	6821      	ldrge	r1, [r4, #0]
 800bc68:	f021 0104 	bicge.w	r1, r1, #4
 800bc6c:	6021      	strge	r1, [r4, #0]
 800bc6e:	b90d      	cbnz	r5, 800bc74 <_printf_i+0x118>
 800bc70:	2e00      	cmp	r6, #0
 800bc72:	d04d      	beq.n	800bd10 <_printf_i+0x1b4>
 800bc74:	4616      	mov	r6, r2
 800bc76:	fbb5 f1f3 	udiv	r1, r5, r3
 800bc7a:	fb03 5711 	mls	r7, r3, r1, r5
 800bc7e:	5dc7      	ldrb	r7, [r0, r7]
 800bc80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bc84:	462f      	mov	r7, r5
 800bc86:	42bb      	cmp	r3, r7
 800bc88:	460d      	mov	r5, r1
 800bc8a:	d9f4      	bls.n	800bc76 <_printf_i+0x11a>
 800bc8c:	2b08      	cmp	r3, #8
 800bc8e:	d10b      	bne.n	800bca8 <_printf_i+0x14c>
 800bc90:	6823      	ldr	r3, [r4, #0]
 800bc92:	07df      	lsls	r7, r3, #31
 800bc94:	d508      	bpl.n	800bca8 <_printf_i+0x14c>
 800bc96:	6923      	ldr	r3, [r4, #16]
 800bc98:	6861      	ldr	r1, [r4, #4]
 800bc9a:	4299      	cmp	r1, r3
 800bc9c:	bfde      	ittt	le
 800bc9e:	2330      	movle	r3, #48	; 0x30
 800bca0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bca4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bca8:	1b92      	subs	r2, r2, r6
 800bcaa:	6122      	str	r2, [r4, #16]
 800bcac:	f8cd a000 	str.w	sl, [sp]
 800bcb0:	464b      	mov	r3, r9
 800bcb2:	aa03      	add	r2, sp, #12
 800bcb4:	4621      	mov	r1, r4
 800bcb6:	4640      	mov	r0, r8
 800bcb8:	f7ff fee2 	bl	800ba80 <_printf_common>
 800bcbc:	3001      	adds	r0, #1
 800bcbe:	d14c      	bne.n	800bd5a <_printf_i+0x1fe>
 800bcc0:	f04f 30ff 	mov.w	r0, #4294967295
 800bcc4:	b004      	add	sp, #16
 800bcc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcca:	4835      	ldr	r0, [pc, #212]	; (800bda0 <_printf_i+0x244>)
 800bccc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bcd0:	6823      	ldr	r3, [r4, #0]
 800bcd2:	680e      	ldr	r6, [r1, #0]
 800bcd4:	061f      	lsls	r7, r3, #24
 800bcd6:	f856 5b04 	ldr.w	r5, [r6], #4
 800bcda:	600e      	str	r6, [r1, #0]
 800bcdc:	d514      	bpl.n	800bd08 <_printf_i+0x1ac>
 800bcde:	07d9      	lsls	r1, r3, #31
 800bce0:	bf44      	itt	mi
 800bce2:	f043 0320 	orrmi.w	r3, r3, #32
 800bce6:	6023      	strmi	r3, [r4, #0]
 800bce8:	b91d      	cbnz	r5, 800bcf2 <_printf_i+0x196>
 800bcea:	6823      	ldr	r3, [r4, #0]
 800bcec:	f023 0320 	bic.w	r3, r3, #32
 800bcf0:	6023      	str	r3, [r4, #0]
 800bcf2:	2310      	movs	r3, #16
 800bcf4:	e7b0      	b.n	800bc58 <_printf_i+0xfc>
 800bcf6:	6823      	ldr	r3, [r4, #0]
 800bcf8:	f043 0320 	orr.w	r3, r3, #32
 800bcfc:	6023      	str	r3, [r4, #0]
 800bcfe:	2378      	movs	r3, #120	; 0x78
 800bd00:	4828      	ldr	r0, [pc, #160]	; (800bda4 <_printf_i+0x248>)
 800bd02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd06:	e7e3      	b.n	800bcd0 <_printf_i+0x174>
 800bd08:	065e      	lsls	r6, r3, #25
 800bd0a:	bf48      	it	mi
 800bd0c:	b2ad      	uxthmi	r5, r5
 800bd0e:	e7e6      	b.n	800bcde <_printf_i+0x182>
 800bd10:	4616      	mov	r6, r2
 800bd12:	e7bb      	b.n	800bc8c <_printf_i+0x130>
 800bd14:	680b      	ldr	r3, [r1, #0]
 800bd16:	6826      	ldr	r6, [r4, #0]
 800bd18:	6960      	ldr	r0, [r4, #20]
 800bd1a:	1d1d      	adds	r5, r3, #4
 800bd1c:	600d      	str	r5, [r1, #0]
 800bd1e:	0635      	lsls	r5, r6, #24
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	d501      	bpl.n	800bd28 <_printf_i+0x1cc>
 800bd24:	6018      	str	r0, [r3, #0]
 800bd26:	e002      	b.n	800bd2e <_printf_i+0x1d2>
 800bd28:	0671      	lsls	r1, r6, #25
 800bd2a:	d5fb      	bpl.n	800bd24 <_printf_i+0x1c8>
 800bd2c:	8018      	strh	r0, [r3, #0]
 800bd2e:	2300      	movs	r3, #0
 800bd30:	6123      	str	r3, [r4, #16]
 800bd32:	4616      	mov	r6, r2
 800bd34:	e7ba      	b.n	800bcac <_printf_i+0x150>
 800bd36:	680b      	ldr	r3, [r1, #0]
 800bd38:	1d1a      	adds	r2, r3, #4
 800bd3a:	600a      	str	r2, [r1, #0]
 800bd3c:	681e      	ldr	r6, [r3, #0]
 800bd3e:	6862      	ldr	r2, [r4, #4]
 800bd40:	2100      	movs	r1, #0
 800bd42:	4630      	mov	r0, r6
 800bd44:	f7f4 facc 	bl	80002e0 <memchr>
 800bd48:	b108      	cbz	r0, 800bd4e <_printf_i+0x1f2>
 800bd4a:	1b80      	subs	r0, r0, r6
 800bd4c:	6060      	str	r0, [r4, #4]
 800bd4e:	6863      	ldr	r3, [r4, #4]
 800bd50:	6123      	str	r3, [r4, #16]
 800bd52:	2300      	movs	r3, #0
 800bd54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd58:	e7a8      	b.n	800bcac <_printf_i+0x150>
 800bd5a:	6923      	ldr	r3, [r4, #16]
 800bd5c:	4632      	mov	r2, r6
 800bd5e:	4649      	mov	r1, r9
 800bd60:	4640      	mov	r0, r8
 800bd62:	47d0      	blx	sl
 800bd64:	3001      	adds	r0, #1
 800bd66:	d0ab      	beq.n	800bcc0 <_printf_i+0x164>
 800bd68:	6823      	ldr	r3, [r4, #0]
 800bd6a:	079b      	lsls	r3, r3, #30
 800bd6c:	d413      	bmi.n	800bd96 <_printf_i+0x23a>
 800bd6e:	68e0      	ldr	r0, [r4, #12]
 800bd70:	9b03      	ldr	r3, [sp, #12]
 800bd72:	4298      	cmp	r0, r3
 800bd74:	bfb8      	it	lt
 800bd76:	4618      	movlt	r0, r3
 800bd78:	e7a4      	b.n	800bcc4 <_printf_i+0x168>
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	4632      	mov	r2, r6
 800bd7e:	4649      	mov	r1, r9
 800bd80:	4640      	mov	r0, r8
 800bd82:	47d0      	blx	sl
 800bd84:	3001      	adds	r0, #1
 800bd86:	d09b      	beq.n	800bcc0 <_printf_i+0x164>
 800bd88:	3501      	adds	r5, #1
 800bd8a:	68e3      	ldr	r3, [r4, #12]
 800bd8c:	9903      	ldr	r1, [sp, #12]
 800bd8e:	1a5b      	subs	r3, r3, r1
 800bd90:	42ab      	cmp	r3, r5
 800bd92:	dcf2      	bgt.n	800bd7a <_printf_i+0x21e>
 800bd94:	e7eb      	b.n	800bd6e <_printf_i+0x212>
 800bd96:	2500      	movs	r5, #0
 800bd98:	f104 0619 	add.w	r6, r4, #25
 800bd9c:	e7f5      	b.n	800bd8a <_printf_i+0x22e>
 800bd9e:	bf00      	nop
 800bda0:	0800c051 	.word	0x0800c051
 800bda4:	0800c062 	.word	0x0800c062

0800bda8 <memcpy>:
 800bda8:	440a      	add	r2, r1
 800bdaa:	4291      	cmp	r1, r2
 800bdac:	f100 33ff 	add.w	r3, r0, #4294967295
 800bdb0:	d100      	bne.n	800bdb4 <memcpy+0xc>
 800bdb2:	4770      	bx	lr
 800bdb4:	b510      	push	{r4, lr}
 800bdb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bdbe:	4291      	cmp	r1, r2
 800bdc0:	d1f9      	bne.n	800bdb6 <memcpy+0xe>
 800bdc2:	bd10      	pop	{r4, pc}

0800bdc4 <memmove>:
 800bdc4:	4288      	cmp	r0, r1
 800bdc6:	b510      	push	{r4, lr}
 800bdc8:	eb01 0402 	add.w	r4, r1, r2
 800bdcc:	d902      	bls.n	800bdd4 <memmove+0x10>
 800bdce:	4284      	cmp	r4, r0
 800bdd0:	4623      	mov	r3, r4
 800bdd2:	d807      	bhi.n	800bde4 <memmove+0x20>
 800bdd4:	1e43      	subs	r3, r0, #1
 800bdd6:	42a1      	cmp	r1, r4
 800bdd8:	d008      	beq.n	800bdec <memmove+0x28>
 800bdda:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bdde:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bde2:	e7f8      	b.n	800bdd6 <memmove+0x12>
 800bde4:	4402      	add	r2, r0
 800bde6:	4601      	mov	r1, r0
 800bde8:	428a      	cmp	r2, r1
 800bdea:	d100      	bne.n	800bdee <memmove+0x2a>
 800bdec:	bd10      	pop	{r4, pc}
 800bdee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bdf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bdf6:	e7f7      	b.n	800bde8 <memmove+0x24>

0800bdf8 <_free_r>:
 800bdf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bdfa:	2900      	cmp	r1, #0
 800bdfc:	d048      	beq.n	800be90 <_free_r+0x98>
 800bdfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be02:	9001      	str	r0, [sp, #4]
 800be04:	2b00      	cmp	r3, #0
 800be06:	f1a1 0404 	sub.w	r4, r1, #4
 800be0a:	bfb8      	it	lt
 800be0c:	18e4      	addlt	r4, r4, r3
 800be0e:	f000 f8d3 	bl	800bfb8 <__malloc_lock>
 800be12:	4a20      	ldr	r2, [pc, #128]	; (800be94 <_free_r+0x9c>)
 800be14:	9801      	ldr	r0, [sp, #4]
 800be16:	6813      	ldr	r3, [r2, #0]
 800be18:	4615      	mov	r5, r2
 800be1a:	b933      	cbnz	r3, 800be2a <_free_r+0x32>
 800be1c:	6063      	str	r3, [r4, #4]
 800be1e:	6014      	str	r4, [r2, #0]
 800be20:	b003      	add	sp, #12
 800be22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be26:	f000 b8cd 	b.w	800bfc4 <__malloc_unlock>
 800be2a:	42a3      	cmp	r3, r4
 800be2c:	d90b      	bls.n	800be46 <_free_r+0x4e>
 800be2e:	6821      	ldr	r1, [r4, #0]
 800be30:	1862      	adds	r2, r4, r1
 800be32:	4293      	cmp	r3, r2
 800be34:	bf04      	itt	eq
 800be36:	681a      	ldreq	r2, [r3, #0]
 800be38:	685b      	ldreq	r3, [r3, #4]
 800be3a:	6063      	str	r3, [r4, #4]
 800be3c:	bf04      	itt	eq
 800be3e:	1852      	addeq	r2, r2, r1
 800be40:	6022      	streq	r2, [r4, #0]
 800be42:	602c      	str	r4, [r5, #0]
 800be44:	e7ec      	b.n	800be20 <_free_r+0x28>
 800be46:	461a      	mov	r2, r3
 800be48:	685b      	ldr	r3, [r3, #4]
 800be4a:	b10b      	cbz	r3, 800be50 <_free_r+0x58>
 800be4c:	42a3      	cmp	r3, r4
 800be4e:	d9fa      	bls.n	800be46 <_free_r+0x4e>
 800be50:	6811      	ldr	r1, [r2, #0]
 800be52:	1855      	adds	r5, r2, r1
 800be54:	42a5      	cmp	r5, r4
 800be56:	d10b      	bne.n	800be70 <_free_r+0x78>
 800be58:	6824      	ldr	r4, [r4, #0]
 800be5a:	4421      	add	r1, r4
 800be5c:	1854      	adds	r4, r2, r1
 800be5e:	42a3      	cmp	r3, r4
 800be60:	6011      	str	r1, [r2, #0]
 800be62:	d1dd      	bne.n	800be20 <_free_r+0x28>
 800be64:	681c      	ldr	r4, [r3, #0]
 800be66:	685b      	ldr	r3, [r3, #4]
 800be68:	6053      	str	r3, [r2, #4]
 800be6a:	4421      	add	r1, r4
 800be6c:	6011      	str	r1, [r2, #0]
 800be6e:	e7d7      	b.n	800be20 <_free_r+0x28>
 800be70:	d902      	bls.n	800be78 <_free_r+0x80>
 800be72:	230c      	movs	r3, #12
 800be74:	6003      	str	r3, [r0, #0]
 800be76:	e7d3      	b.n	800be20 <_free_r+0x28>
 800be78:	6825      	ldr	r5, [r4, #0]
 800be7a:	1961      	adds	r1, r4, r5
 800be7c:	428b      	cmp	r3, r1
 800be7e:	bf04      	itt	eq
 800be80:	6819      	ldreq	r1, [r3, #0]
 800be82:	685b      	ldreq	r3, [r3, #4]
 800be84:	6063      	str	r3, [r4, #4]
 800be86:	bf04      	itt	eq
 800be88:	1949      	addeq	r1, r1, r5
 800be8a:	6021      	streq	r1, [r4, #0]
 800be8c:	6054      	str	r4, [r2, #4]
 800be8e:	e7c7      	b.n	800be20 <_free_r+0x28>
 800be90:	b003      	add	sp, #12
 800be92:	bd30      	pop	{r4, r5, pc}
 800be94:	24044620 	.word	0x24044620

0800be98 <_malloc_r>:
 800be98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be9a:	1ccd      	adds	r5, r1, #3
 800be9c:	f025 0503 	bic.w	r5, r5, #3
 800bea0:	3508      	adds	r5, #8
 800bea2:	2d0c      	cmp	r5, #12
 800bea4:	bf38      	it	cc
 800bea6:	250c      	movcc	r5, #12
 800bea8:	2d00      	cmp	r5, #0
 800beaa:	4606      	mov	r6, r0
 800beac:	db01      	blt.n	800beb2 <_malloc_r+0x1a>
 800beae:	42a9      	cmp	r1, r5
 800beb0:	d903      	bls.n	800beba <_malloc_r+0x22>
 800beb2:	230c      	movs	r3, #12
 800beb4:	6033      	str	r3, [r6, #0]
 800beb6:	2000      	movs	r0, #0
 800beb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800beba:	f000 f87d 	bl	800bfb8 <__malloc_lock>
 800bebe:	4921      	ldr	r1, [pc, #132]	; (800bf44 <_malloc_r+0xac>)
 800bec0:	680a      	ldr	r2, [r1, #0]
 800bec2:	4614      	mov	r4, r2
 800bec4:	b99c      	cbnz	r4, 800beee <_malloc_r+0x56>
 800bec6:	4f20      	ldr	r7, [pc, #128]	; (800bf48 <_malloc_r+0xb0>)
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	b923      	cbnz	r3, 800bed6 <_malloc_r+0x3e>
 800becc:	4621      	mov	r1, r4
 800bece:	4630      	mov	r0, r6
 800bed0:	f000 f862 	bl	800bf98 <_sbrk_r>
 800bed4:	6038      	str	r0, [r7, #0]
 800bed6:	4629      	mov	r1, r5
 800bed8:	4630      	mov	r0, r6
 800beda:	f000 f85d 	bl	800bf98 <_sbrk_r>
 800bede:	1c43      	adds	r3, r0, #1
 800bee0:	d123      	bne.n	800bf2a <_malloc_r+0x92>
 800bee2:	230c      	movs	r3, #12
 800bee4:	6033      	str	r3, [r6, #0]
 800bee6:	4630      	mov	r0, r6
 800bee8:	f000 f86c 	bl	800bfc4 <__malloc_unlock>
 800beec:	e7e3      	b.n	800beb6 <_malloc_r+0x1e>
 800beee:	6823      	ldr	r3, [r4, #0]
 800bef0:	1b5b      	subs	r3, r3, r5
 800bef2:	d417      	bmi.n	800bf24 <_malloc_r+0x8c>
 800bef4:	2b0b      	cmp	r3, #11
 800bef6:	d903      	bls.n	800bf00 <_malloc_r+0x68>
 800bef8:	6023      	str	r3, [r4, #0]
 800befa:	441c      	add	r4, r3
 800befc:	6025      	str	r5, [r4, #0]
 800befe:	e004      	b.n	800bf0a <_malloc_r+0x72>
 800bf00:	6863      	ldr	r3, [r4, #4]
 800bf02:	42a2      	cmp	r2, r4
 800bf04:	bf0c      	ite	eq
 800bf06:	600b      	streq	r3, [r1, #0]
 800bf08:	6053      	strne	r3, [r2, #4]
 800bf0a:	4630      	mov	r0, r6
 800bf0c:	f000 f85a 	bl	800bfc4 <__malloc_unlock>
 800bf10:	f104 000b 	add.w	r0, r4, #11
 800bf14:	1d23      	adds	r3, r4, #4
 800bf16:	f020 0007 	bic.w	r0, r0, #7
 800bf1a:	1ac2      	subs	r2, r0, r3
 800bf1c:	d0cc      	beq.n	800beb8 <_malloc_r+0x20>
 800bf1e:	1a1b      	subs	r3, r3, r0
 800bf20:	50a3      	str	r3, [r4, r2]
 800bf22:	e7c9      	b.n	800beb8 <_malloc_r+0x20>
 800bf24:	4622      	mov	r2, r4
 800bf26:	6864      	ldr	r4, [r4, #4]
 800bf28:	e7cc      	b.n	800bec4 <_malloc_r+0x2c>
 800bf2a:	1cc4      	adds	r4, r0, #3
 800bf2c:	f024 0403 	bic.w	r4, r4, #3
 800bf30:	42a0      	cmp	r0, r4
 800bf32:	d0e3      	beq.n	800befc <_malloc_r+0x64>
 800bf34:	1a21      	subs	r1, r4, r0
 800bf36:	4630      	mov	r0, r6
 800bf38:	f000 f82e 	bl	800bf98 <_sbrk_r>
 800bf3c:	3001      	adds	r0, #1
 800bf3e:	d1dd      	bne.n	800befc <_malloc_r+0x64>
 800bf40:	e7cf      	b.n	800bee2 <_malloc_r+0x4a>
 800bf42:	bf00      	nop
 800bf44:	24044620 	.word	0x24044620
 800bf48:	24044624 	.word	0x24044624

0800bf4c <_realloc_r>:
 800bf4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf4e:	4607      	mov	r7, r0
 800bf50:	4614      	mov	r4, r2
 800bf52:	460e      	mov	r6, r1
 800bf54:	b921      	cbnz	r1, 800bf60 <_realloc_r+0x14>
 800bf56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bf5a:	4611      	mov	r1, r2
 800bf5c:	f7ff bf9c 	b.w	800be98 <_malloc_r>
 800bf60:	b922      	cbnz	r2, 800bf6c <_realloc_r+0x20>
 800bf62:	f7ff ff49 	bl	800bdf8 <_free_r>
 800bf66:	4625      	mov	r5, r4
 800bf68:	4628      	mov	r0, r5
 800bf6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf6c:	f000 f830 	bl	800bfd0 <_malloc_usable_size_r>
 800bf70:	42a0      	cmp	r0, r4
 800bf72:	d20f      	bcs.n	800bf94 <_realloc_r+0x48>
 800bf74:	4621      	mov	r1, r4
 800bf76:	4638      	mov	r0, r7
 800bf78:	f7ff ff8e 	bl	800be98 <_malloc_r>
 800bf7c:	4605      	mov	r5, r0
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	d0f2      	beq.n	800bf68 <_realloc_r+0x1c>
 800bf82:	4631      	mov	r1, r6
 800bf84:	4622      	mov	r2, r4
 800bf86:	f7ff ff0f 	bl	800bda8 <memcpy>
 800bf8a:	4631      	mov	r1, r6
 800bf8c:	4638      	mov	r0, r7
 800bf8e:	f7ff ff33 	bl	800bdf8 <_free_r>
 800bf92:	e7e9      	b.n	800bf68 <_realloc_r+0x1c>
 800bf94:	4635      	mov	r5, r6
 800bf96:	e7e7      	b.n	800bf68 <_realloc_r+0x1c>

0800bf98 <_sbrk_r>:
 800bf98:	b538      	push	{r3, r4, r5, lr}
 800bf9a:	4d06      	ldr	r5, [pc, #24]	; (800bfb4 <_sbrk_r+0x1c>)
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	4604      	mov	r4, r0
 800bfa0:	4608      	mov	r0, r1
 800bfa2:	602b      	str	r3, [r5, #0]
 800bfa4:	f7f6 fb2c 	bl	8002600 <_sbrk>
 800bfa8:	1c43      	adds	r3, r0, #1
 800bfaa:	d102      	bne.n	800bfb2 <_sbrk_r+0x1a>
 800bfac:	682b      	ldr	r3, [r5, #0]
 800bfae:	b103      	cbz	r3, 800bfb2 <_sbrk_r+0x1a>
 800bfb0:	6023      	str	r3, [r4, #0]
 800bfb2:	bd38      	pop	{r3, r4, r5, pc}
 800bfb4:	24044d64 	.word	0x24044d64

0800bfb8 <__malloc_lock>:
 800bfb8:	4801      	ldr	r0, [pc, #4]	; (800bfc0 <__malloc_lock+0x8>)
 800bfba:	f000 b811 	b.w	800bfe0 <__retarget_lock_acquire_recursive>
 800bfbe:	bf00      	nop
 800bfc0:	24044d6c 	.word	0x24044d6c

0800bfc4 <__malloc_unlock>:
 800bfc4:	4801      	ldr	r0, [pc, #4]	; (800bfcc <__malloc_unlock+0x8>)
 800bfc6:	f000 b80c 	b.w	800bfe2 <__retarget_lock_release_recursive>
 800bfca:	bf00      	nop
 800bfcc:	24044d6c 	.word	0x24044d6c

0800bfd0 <_malloc_usable_size_r>:
 800bfd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfd4:	1f18      	subs	r0, r3, #4
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	bfbc      	itt	lt
 800bfda:	580b      	ldrlt	r3, [r1, r0]
 800bfdc:	18c0      	addlt	r0, r0, r3
 800bfde:	4770      	bx	lr

0800bfe0 <__retarget_lock_acquire_recursive>:
 800bfe0:	4770      	bx	lr

0800bfe2 <__retarget_lock_release_recursive>:
 800bfe2:	4770      	bx	lr

0800bfe4 <_init>:
 800bfe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfe6:	bf00      	nop
 800bfe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfea:	bc08      	pop	{r3}
 800bfec:	469e      	mov	lr, r3
 800bfee:	4770      	bx	lr

0800bff0 <_fini>:
 800bff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bff2:	bf00      	nop
 800bff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bff6:	bc08      	pop	{r3}
 800bff8:	469e      	mov	lr, r3
 800bffa:	4770      	bx	lr
